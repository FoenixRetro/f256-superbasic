
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Mon Jan  2 18:13:54 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						randomSeed:
>0408								.fill 	4
.040c						lowMemPtr:
>040c								.fill 	2
.040e						stringMemory:
>040e								.fill 	2
.0410						stringInitialised:
>0410								.fill 	1
.0411						stringTempPointer:
>0411								.fill 	2
.0413						breakCheck:
>0413								.fill 	1
.0414						decimalPlaces:
>0414								.fill 	1
.0415						dbOffset:
>0415								.fill 	1
.0416						lastParameter:
>0416								.fill 	1
.0417						dataPointer:
>0417								.fill 	5
.041c						inDataStatement:
>041c								.fill 	1
.041d						tbOffset:
>041d								.fill 	1
.041e						AssemblerAddress:
>041e								.fill 	2
.0420						AssemblerControl:
>0420								.fill 	1
.0421						ParamStart:
>0421								.fill 	2
.0423						IsGroup1:
>0423								.fill 	1
.0424						BaseOpcode:
>0424								.fill 	1
.0425						ModeMask:
>0425								.fill 	1
.0426						listIndent:
>0426								.fill 	1
.0427						lcLastCharacter:
>0427								.fill 	1
.0428						isPrintFlag:
>0428								.fill 	1
.0429						currentListColour:
>0429								.fill 	1
.042a						tokenOffset:
>042a								.fill 	1
.042b						tokenLineNumber:
>042b								.fill 	2
.042d						tokenBuffer:
>042d								.fill 	253
.052a						lineBuffer:
>052a								.fill 	253
.0627						numberBuffer:
>0627								.fill 	34
.0649						decimalBuffer:
>0649								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDATEDOLLARLPAREN              = $8a; $8a GETDATE$(
=$8b						KWD_GETTIMEDOLLARLPAREN              = $8b; $8b GETTIME$(
=$8c						KWD_HITLPAREN                        = $8c; $8c HIT(
=$8d						KWD_INTLPAREN                        = $8d; $8d INT(
=$8e						KWD_ISVALLPAREN                      = $8e; $8e ISVAL(
=$8f						KWD_JOYBLPAREN                       = $8f; $8f JOYB(
=$90						KWD_JOYXLPAREN                       = $90; $90 JOYX(
=$91						KWD_JOYYLPAREN                       = $91; $91 JOYY(
=$92						KWD_LEFTDOLLARLPAREN                 = $92; $92 LEFT$(
=$93						KWD_LENLPAREN                        = $93; $93 LEN(
=$94						KWD_MAXLPAREN                        = $94; $94 MAX(
=$95						KWD_MIDDOLLARLPAREN                  = $95; $95 MID$(
=$96						KWD_MINLPAREN                        = $96; $96 MIN(
=$97						KWD_NOTLPAREN                        = $97; $97 NOT(
=$98						KWD_PEEKLPAREN                       = $98; $98 PEEK(
=$99						KWD_PEEKDLPAREN                      = $99; $99 PEEKD(
=$9a						KWD_PEEKLLPAREN                      = $9a; $9a PEEKL(
=$9b						KWD_PEEKWLPAREN                      = $9b; $9b PEEKW(
=$9c						KWD_PLAYINGLPAREN                    = $9c; $9c PLAYING(
=$9d						KWD_RANDOMLPAREN                     = $9d; $9d RANDOM(
=$9e						KWD_RIGHTDOLLARLPAREN                = $9e; $9e RIGHT$(
=$9f						KWD_RNDLPAREN                        = $9f; $9f RND(
=$a0						KWD_SGNLPAREN                        = $a0; $a0 SGN(
=$a1						KWD_SPCLPAREN                        = $a1; $a1 SPC(
=$a2						KWD_STRDOLLARLPAREN                  = $a2; $a2 STR$(
=$a3						KWD_TIMERLPAREN                      = $a3; $a3 TIMER(
=$a4						KWD_TRUE                             = $a4; $a4 TRUE
=$a5						KWD_VALLPAREN                        = $a5; $a5 VAL(
=$a6						KWD_FOR                              = $a6; $a6 FOR
=$a7						KWD_IF                               = $a7; $a7 IF
=$a8						KWD_PROC                             = $a8; $a8 PROC
=$a9						KWD_REPEAT                           = $a9; $a9 REPEAT
=$aa						KWD_WHILE                            = $aa; $aa WHILE
=$ab						KWD_ENDIF                            = $ab; $ab ENDIF
=$ac						KWD_ENDPROC                          = $ac; $ac ENDPROC
=$ad						KWD_NEXT                             = $ad; $ad NEXT
=$ae						KWD_THEN                             = $ae; $ae THEN
=$af						KWD_UNTIL                            = $af; $af UNTIL
=$b0						KWD_WEND                             = $b0; $b0 WEND
=$b1						KWD_BY                               = $b1; $b1 BY
=$b2						KWD_CALL                             = $b2; $b2 CALL
=$b3						KWD_CIRCLE                           = $b3; $b3 CIRCLE
=$b4						KWD_CLEAR                            = $b4; $b4 CLEAR
=$b5						KWD_CLS                              = $b5; $b5 CLS
=$b6						KWD_COLOR                            = $b6; $b6 COLOR
=$b7						KWD_COLOUR                           = $b7; $b7 COLOUR
=$b8						KWD_CPRINT                           = $b8; $b8 CPRINT
=$b9						KWD_DATA                             = $b9; $b9 DATA
=$ba						KWD_DIM                              = $ba; $ba DIM
=$bb						KWD_DOWNTO                           = $bb; $bb DOWNTO
=$bc						KWD_ELSE                             = $bc; $bc ELSE
=$bd						KWD_FROM                             = $bd; $bd FROM
=$be						KWD_GFX                              = $be; $be GFX
=$bf						KWD_GOSUB                            = $bf; $bf GOSUB
=$c0						KWD_GOTO                             = $c0; $c0 GOTO
=$c1						KWD_HERE                             = $c1; $c1 HERE
=$c2						KWD_IMAGE                            = $c2; $c2 IMAGE
=$c3						KWD_INPUT                            = $c3; $c3 INPUT
=$c4						KWD_LET                              = $c4; $c4 LET
=$c5						KWD_LINE                             = $c5; $c5 LINE
=$c6						KWD_LOCAL                            = $c6; $c6 LOCAL
=$c7						KWD_OFF                              = $c7; $c7 OFF
=$c8						KWD_ON                               = $c8; $c8 ON
=$c9						KWD_OUTLINE                          = $c9; $c9 OUTLINE
=$ca						KWD_PALETTE                          = $ca; $ca PALETTE
=$cb						KWD_PLOT                             = $cb; $cb PLOT
=$cc						KWD_POKE                             = $cc; $cc POKE
=$cd						KWD_POKED                            = $cd; $cd POKED
=$ce						KWD_POKEL                            = $ce; $ce POKEL
=$cf						KWD_POKEW                            = $cf; $cf POKEW
=$d0						KWD_PRINT                            = $d0; $d0 PRINT
=$d1						KWD_READ                             = $d1; $d1 READ
=$d2						KWD_RECT                             = $d2; $d2 RECT
=$d3						KWD_REM                              = $d3; $d3 REM
=$d4						KWD_RETURN                           = $d4; $d4 RETURN
=$d5						KWD_SOLID                            = $d5; $d5 SOLID
=$d6						KWD_SOUND                            = $d6; $d6 SOUND
=$d7						KWD_SPRITE                           = $d7; $d7 SPRITE
=$d8						KWD_TEXT                             = $d8; $d8 TEXT
=$d9						KWD_TO                               = $d9; $d9 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$a6						KWC_FIRST_STRUCTURE = $a6
=$ab						KWC_FIRST_STRUCTURE_DEC = $ab
=$b0						KWC_LAST_STRUCTURE = $b0
=$83						KWC_FIRST_UNARY = $83
=$a5						KWC_LAST_UNARY = $a5

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c b7 80	jmp $80b7	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTPrintNoControl:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTInitialise:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 c6 a2	jsr $a2c6		jsr	Export_EXTInitialise
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTReadController:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 4b bc	jsr $bc4b		jsr	Export_EXTReadController
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputLine:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 da a1	jsr $a1da		jsr	Export_EXTInputLine
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						KNLInputSingleCharacter:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 0d bc	jsr $bc0d		jsr	Export_KNLInputSingleCharacter
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						KNLOpenFileRead:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 5c bc	jsr $bc5c		jsr	Export_KNLOpenFileRead
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						KNLOpenFileWrite:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 57 bc	jsr $bc57		jsr	Export_KNLOpenFileWrite
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						KNLReadByteInit:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 b1 bc	jsr $bcb1		jsr	Export_KNLReadByteInit
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						KNLReadByte:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 bb bc	jsr $bcbb		jsr	Export_KNLReadByte
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts
.8067						KNLReadBlock:
.8067		e6 0d		inc $0d			inc 8+5
.8069		20 da bc	jsr $bcda		jsr	Export_KNLReadBlock
.806c		08		php			php
.806d		c6 0d		dec $0d			dec 8+5
.806f		28		plp			plp
.8070		60		rts			rts
.8071						KNLWriteBlock:
.8071		e6 0d		inc $0d			inc 8+5
.8073		20 1a bd	jsr $bd1a		jsr	Export_KNLWriteBlock
.8076		08		php			php
.8077		c6 0d		dec $0d			dec 8+5
.8079		28		plp			plp
.807a		60		rts			rts
.807b						KNLCloseFile:
.807b		e6 0d		inc $0d			inc 8+5
.807d		20 97 bc	jsr $bc97		jsr	Export_KNLCloseFile
.8080		08		php			php
.8081		c6 0d		dec $0d			dec 8+5
.8083		28		plp			plp
.8084		60		rts			rts
.8085						GXGraphicDraw:
.8085		e6 0d		inc $0d			inc 8+5
.8087		20 cb a7	jsr $a7cb		jsr	Export_GXGraphicDraw
.808a		08		php			php
.808b		c6 0d		dec $0d			dec 8+5
.808d		28		plp			plp
.808e		60		rts			rts
.808f						SNDCommand:
.808f		e6 0d		inc $0d			inc 8+5
.8091		20 80 bb	jsr $bb80		jsr	Export_SNDCommand
.8094		08		php			php
.8095		c6 0d		dec $0d			dec 8+5
.8097		28		plp			plp
.8098		60		rts			rts
.8099						SNDUpdate:
.8099		e6 0d		inc $0d			inc 8+5
.809b		20 b3 bb	jsr $bbb3		jsr	Export_SNDUpdate
.809e		08		php			php
.809f		c6 0d		dec $0d			dec 8+5
.80a1		28		plp			plp
.80a2		60		rts			rts
.80a3						TKListConvertLine:
.80a3		e6 0d		inc $0d			inc 8+5
.80a5		20 31 b5	jsr $b531		jsr	Export_TKListConvertLine
.80a8		08		php			php
.80a9		c6 0d		dec $0d			dec 8+5
.80ab		28		plp			plp
.80ac		60		rts			rts
.80ad						TKTokeniseLine:
.80ad		e6 0d		inc $0d			inc 8+5
.80af		20 c5 b7	jsr $b7c5		jsr	Export_TKTokeniseLine
.80b2		08		php			php
.80b3		c6 0d		dec $0d			dec 8+5
.80b5		28		plp			plp
.80b6		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.80b7		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.80b9		9a		txs				txs
.80ba		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80bc		09 80		ora #$80			ora 	#$80
.80be		85 00		sta $00				sta 	0
.80c0		20 42 a8	jsr $a842			jsr		UpdateFont 					; update font if between FPGA updates.
.80c3		20 17 80	jsr $8017			jsr 	EXTInitialise 				; hardware initialise
.80c6		9c 5c 06	stz $065c			stz 	DefaultDrive 				; zero the default drive.
.80c9		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80cb		aa		tax				tax
.80cc		a8		tay				tay
.80cd		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.80d0		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80d2		20 8f 80	jsr $808f			jsr 	SNDCommand
.80d5		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.80d7		a9 e5		lda #$e5			lda 	#Prompt & $FF
.80d9		20 92 91	jsr $9192			jsr 	PrintStringXA
.80dc		20 8d 8b	jsr $8b8d			jsr 	NewProgram 					; erase current program
.80df		4c 28 84	jmp $8428			jmp 	WarmStart					; make same size.
.80e2		4c 28 84	jmp $8428			jmp 	WarmStart
>80e5		8d				Prompt:	.text 	128+13
>80e6		0d 0d						.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>80e8		09 09 30 32 2f 30 31 2f			.text 9,9,"02/01/23  23"
>80f0		32 33 20 20 32 33

;******  Return to file: ./common/aa.system/00start.asm

>80f6		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.80fa						AssembleGroup1:
.80fa		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.80fc		8d 25 04	sta $0425			sta 	ModeMask 					; initialise the mode mask - all for all
.80ff		80 02		bra $8103			bra 	AsmGroup12
.8101						AssembleGroup2:
.8101		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8103						AsmGroup12:
.8103		8d 23 04	sta $0423			sta 	IsGroup1 					; save the 'group 1' flag
.8106		68		pla				pla 								; pop the return address to access the information following.
.8107		fa		plx				plx
.8108		20 8f 81	jsr $818f			jsr 	AccessParameters 			; get opcode and save as base
.810b		8d 24 04	sta $0424			sta 	BaseOpcode
.810e		ad 23 04	lda $0423			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8111		d0 08		bne $811b			bne 	_AG12HaveMask
.8113		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8115		20 97 81	jsr $8197			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8118		8d 25 04	sta $0425			sta 	ModeMask
.811b						_AG12HaveMask:
.811b		20 cb 82	jsr $82cb			jsr 	TypeAndCalculateOperand 	; get zero page type
.811e		da		phx				phx 								; save found address mode
.811f		20 fb 81	jsr $81fb			jsr 	AssembleModeX
.8122		fa		plx				plx  								; restore address mode
.8123		b0 0b		bcs $8130			bcs 	_AG12Exit
.8125		20 31 81	jsr $8131			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8128		20 fb 81	jsr $81fb			jsr 	AssembleModeX
.812b		b0 03		bcs $8130			bcs 	_AG12Exit
.812d		4c 02 a2	jmp $a202			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8130						_AG12Exit:
.8130		60		rts				rts
.8131						PromoteToAbsolute:
.8131		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8133		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8135		f0 19		beq $8150			beq 	_PTADo
.8137		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8139		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.813b		f0 13		beq $8150			beq 	_PTADo
.813d		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.813f		e0 80		cpx #$80			cpx 	#AM_ZEROY
.8141		f0 0d		beq $8150			beq 	_PTADo
.8143		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8145		e0 d1		cpx #$d1			cpx 	#AM_IND
.8147		f0 07		beq $8150			beq 	_PTADo
.8149		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.814b		e0 c0		cpx #$c0			cpx 	#AM_INDX
.814d		f0 01		beq $8150			beq 	_PTADo
.814f		60		rts				rts
.8150						_PTADo:
.8150		aa		tax				tax
.8151		60		rts				rts
.8152						AssembleGroup3:
.8152		68		pla				pla 								; get parameters, which is just the opcode.
.8153		fa		plx				plx
.8154		20 8f 81	jsr $818f			jsr 	AccessParameters 			; get and output opcode
.8157		20 a7 81	jsr $81a7			jsr 	AssemblerWriteByte
.815a		20 2f 83	jsr $832f			jsr 	CalculateOperand 			; get a 16 bit operand
.815d		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.815f		38		sec				sec
.8160		ed 1e 04	sbc $041e			sbc 	AssemblerAddress
.8163		48		pha				pha 								; LSB in A
.8164		a5 60		lda $60				lda 	NSMantissa1
.8166		ed 1f 04	sbc $041f			sbc 	AssemblerAddress+1
.8169		aa		tax				tax 								; MSB in X
.816a		68		pla				pla
.816b		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.816c		69 7f		adc #$7f			adc 	#$7F
.816e		90 01		bcc $8171			bcc 	_AG3NoCarry
.8170		e8		inx				inx
.8171						_AG3NoCarry:
.8171		38		sec				sec 								; fix back and write out anyways.
.8172		e9 80		sbc #$80			sbc 	#$80
.8174		20 a7 81	jsr $81a7			jsr 	AssemblerWriteByte
.8177		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8179		f0 0a		beq $8185			beq 	_AG3Exit
.817b		ad 20 04	lda $0420			lda 	AssemblerControl 			; are we allowing bad values ?
.817e		29 01		and #$01			and 	#1
.8180		f0 03		beq $8185			beq 	_AG3Exit
.8182		4c 07 a2	jmp $a207			jmp 	RangeError 					; no, branch is out of range
.8185						_AG3Exit:
.8185		60		rts				rts
.8186						AssembleGroup4:
.8186		68		pla				pla 								; pop address
.8187		fa		plx				plx
.8188		20 8f 81	jsr $818f			jsr 	AccessParameters 			; access and get first
.818b		20 a7 81	jsr $81a7			jsr 	AssemblerWriteByte 			; output it.
.818e		60		rts				rts
.818f						AccessParameters:
.818f		8d 21 04	sta $0421			sta 	ParamStart
.8192		8e 22 04	stx $0422			stx 	ParamStart+1
.8195		a9 01		lda #$01			lda 	#1
.8197						GetParameter:
.8197		5a		phy				phy
.8198		a8		tay				tay
.8199		ad 21 04	lda $0421			lda 	ParamStart
.819c		85 36		sta $36				sta 	zTemp0
.819e		ad 22 04	lda $0422			lda 	ParamStart+1
.81a1		85 37		sta $37				sta 	zTemp0+1
.81a3		b1 36		lda ($36),y			lda 	(zTemp0),y
.81a5		7a		ply				ply
.81a6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.81a7						AssemblerWriteByte:
.81a7		48		pha			pha
.81a8		ad 20 04	lda $0420		lda 	AssemblerControl 				; check printing bytes ?
.81ab		29 02		and #$02		and 	#2
.81ad		f0 1b		beq $81ca		beq 	_AWBNoPrint
.81af		ad 1f 04	lda $041f		lda		AssemblerAddress+1 				; print address
.81b2		20 e5 81	jsr $81e5		jsr 	PrintHex
.81b5		ad 1e 04	lda $041e		lda		AssemblerAddress
.81b8		20 e5 81	jsr $81e5		jsr 	PrintHex
.81bb		a9 20		lda #$20		lda 	#' '
.81bd		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.81c0		68		pla			pla 									; print byte
.81c1		48		pha			pha
.81c2		20 e5 81	jsr $81e5		jsr 	PrintHex
.81c5		a9 0d		lda #$0d		lda 	#13
.81c7		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.81ca						_AWBNoPrint:
.81ca		ad 1e 04	lda $041e		lda		AssemblerAddress				; copy address to zTemp0
.81cd		85 36		sta $36			sta 	zTemp0
.81cf		ad 1f 04	lda $041f		lda		AssemblerAddress+1
.81d2		f0 0e		beq $81e2		beq 	_AWBRange
.81d4		85 37		sta $37			sta 	zTemp0+1
.81d6		68		pla			pla 									; write byte out
.81d7		92 36		sta ($36)		sta 	(zTemp0)
.81d9		ee 1e 04	inc $041e		inc 	AssemblerAddress 				; bump address
.81dc		d0 03		bne $81e1		bne 	_AWBNoCarry
.81de		ee 1f 04	inc $041f		inc 	AssemblerAddress+1
.81e1						_AWBNoCarry:
.81e1		60		rts			rts
.81e2						_AWBRange:
.81e2		4c 07 a2	jmp $a207		jmp 	RangeError
.81e5						PrintHex:
.81e5		48		pha				pha
.81e6		4a		lsr a				lsr 	a
.81e7		4a		lsr a				lsr 	a
.81e8		4a		lsr a				lsr 	a
.81e9		4a		lsr a				lsr 	a
.81ea		20 ee 81	jsr $81ee			jsr 	_PrintNibble
.81ed		68		pla				pla
.81ee						_PrintNibble:
.81ee		29 0f		and #$0f			and 	#15
.81f0		c9 0a		cmp #$0a			cmp 	#10
.81f2		90 02		bcc $81f6			bcc 	_NoShift
.81f4		69 06		adc #$06			adc 	#6
.81f6						_NoShift:
.81f6		69 30		adc #$30			adc 	#48
.81f8		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.81fb						AssembleModeX:
.81fb		5a		phy				phy
.81fc		ad 23 04	lda $0423			lda 	IsGroup1
.81ff		f0 17		beq $8218			beq 	_AMXGroup2
.8201		8a		txa				txa 							; is it in group # 1
.8202		29 40		and #$40			and 	#AM_ISG1
.8204		f0 4d		beq $8253			beq 	_AMXFail 				; no, give up.
.8206		8a		txa				txa 							; get back.
.8207		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8209		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.820b		d0 22		bne $822f			bne 	_AMXHaveInfo
.820d		ad 24 04	lda $0424			lda 	BaseOpcode 				; cannot store immediate.
.8210		c9 81		cmp #$81			cmp 	#$81
.8212		f0 3f		beq $8253			beq 	_AMXFail
.8214		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8216		80 17		bra $822f			bra 	_AMXHaveInfo 			; odd design decision there.
.8218						_AMXGroup2:
.8218		8a		txa				txa 							; is it in group 2 ?
.8219		29 20		and #$20			and 	#AM_ISG2
.821b		f0 36		beq $8253			beq 	_AMXFail 				; no, give up.
.821d		8a		txa				txa 							; get the offset into Y
.821e		29 1f		and #$1f			and 	#$1F
.8220		4a		lsr a				lsr 	a 						; make it 0-7.
.8221		4a		lsr a				lsr  	a
.8222		a8		tay				tay
.8223		ad 25 04	lda $0425			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8226						_AMXCheckOkay:
.8226		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8227		88		dey				dey
.8228		10 fc		bpl $8226			bpl 	_AMXCheckOkay
.822a		90 27		bcc $8253			bcc 	_AMXFail 				; not allowed.
.822c		8a		txa				txa  							; get mask back
.822d		29 1f		and #$1f			and 	#$1F
.822f						_AMXHaveInfo:
.822f		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8231		10 04		bpl $8237			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8233		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8235		d0 1c		bne $8253			bne 	_AMXFail
.8237						_AMXAnySize:
.8237		18		clc				clc 							; add offset to the base opcode
.8238		6d 24 04	adc $0424			adc 	BaseOpcode
.823b						_AMXOutputCode:
.823b		20 a7 81	jsr $81a7			jsr 	AssemblerWriteByte 		; write the opcode out.
.823e		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.8240		f0 0e		beq $8250			beq 	_AMXExit
.8242		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.8244		20 a7 81	jsr $81a7			jsr 	AssemblerWriteByte
.8247		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8249		30 05		bmi $8250			bmi 	_AMXExit
.824b		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.824d		20 a7 81	jsr $81a7			jsr 	AssemblerWriteByte
.8250						_AMXExit:
.8250		7a		ply				ply
.8251		38		sec				sec
.8252		60		rts				rts
.8253						_AMXFail:
.8253		a0 00		ldy #$00			ldy 	#0
.8255						_AMXCheckOddities:
.8255		8a		txa				txa
.8256		d9 7d 82	cmp $827d,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8259		d0 15		bne $8270			bne 	_AMXCONext
.825b		b9 7b 82	lda $827b,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.825e		cd 24 04	cmp $0424			cmp 	BaseOpcode
.8261		d0 0d		bne $8270			bne 	_AMXCONext
.8263		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8265		10 04		bpl $826b			bpl 	_AMXCONotZero
.8267		a5 60		lda $60				lda 	NSMantissa1
.8269		d0 05		bne $8270			bne 	_AMXCONext
.826b						_AMXCONotZero:
.826b		b9 7c 82	lda $827c,y			lda 	ExtraOpcode+1,y 		; get new opcode
.826e		80 cb		bra $823b			bra 	_AMXOutputCode 			; and assemble it
.8270						_AMXCONext:
.8270		c8		iny				iny
.8271		c8		iny				iny
.8272		c8		iny				iny
.8273		b9 7b 82	lda $827b,y			lda 	ExtraOpcode+0,y 		; end of table
.8276		d0 dd		bne $8255			bne 	_AMXCheckOddities
.8278						_AMXCOFail:
.8278		7a		ply				ply
.8279		18		clc				clc
.827a		60		rts				rts
.827b						ExtraOpcode:
>827b		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>827e		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>8281		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8284		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8287		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>828a		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>828d		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8290		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8293		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8296		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8299		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.829a						LabelHere:
.829a		c8		iny				iny 								; skip .
.829b		a2 00		ldx #$00			ldx 	#0 							; get a term
.829d		20 87 9a	jsr $9a87			jsr 	EvaluateTerm
.82a0		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.82a2		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.82a4		d0 22		bne $82c8			bne 	_ALType 					; otherwise typing error
.82a6		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.82a8		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.82aa		b5 60		lda $60,x			lda 	NSMantissa1,x
.82ac		85 37		sta $37				sta 	zTemp0+1
.82ae		5a		phy				phy 								; copy address in (64k)
.82af		a0 01		ldy #$01			ldy 	#1
.82b1		ad 1e 04	lda $041e			lda	 	AssemblerAddress
.82b4		92 36		sta ($36)			sta 	(zTemp0)
.82b6		ad 1f 04	lda $041f			lda	 	AssemblerAddress+1
.82b9		91 36		sta ($36),y			sta 	(zTemp0),y
.82bb		c8		iny				iny
.82bc		a9 00		lda #$00			lda 	#0 							; zero the rest.
.82be		91 36		sta ($36),y			sta 	(zTemp0),y
.82c0		c8		iny				iny
.82c1		91 36		sta ($36),y			sta 	(zTemp0),y
.82c3		c8		iny				iny
.82c4		91 36		sta ($36),y			sta 	(zTemp0),y
.82c6		7a		ply				ply
.82c7		60		rts				rts
.82c8						_ALType:
.82c8		4c 0c a2	jmp $a20c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.82cb						TypeAndCalculateOperand:
.82cb		b1 30		lda ($30),y			lda 	(codePtr),y
.82cd		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.82cf		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.82d1		f0 5b		beq $832e			beq 	_TACOExit
.82d3		c9 80		cmp #$80			cmp 	#KWC_EOL
.82d5		f0 57		beq $832e			beq 	_TACOExit
.82d7		c8		iny				iny
.82d8		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.82da		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.82dc		f0 51		beq $832f			beq 	CalculateOperand
.82de		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.82e0		f0 1f		beq $8301			beq 	_TACOIndirect
.82e2		88		dey				dey 								; undo get of first character
.82e3		20 2f 83	jsr $832f			jsr 	CalculateOperand 			; get operand
.82e6		b1 30		lda ($30),y			lda 	(codePtr),y
.82e8		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.82ea		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.82ec		d0 40		bne $832e			bne 	_TACOExit
.82ee		c8		iny				iny
.82ef		20 39 83	jsr $8339			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.82f2		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.82f4		c9 58		cmp #$58			cmp 	#'X'
.82f6		f0 36		beq $832e			beq 	_TACOExit
.82f8		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.82fa		c9 59		cmp #$59			cmp 	#'Y'
.82fc		f0 30		beq $832e			beq 	_TACOExit
.82fe						_TACOSyntax:
.82fe		4c 02 a2	jmp $a202			jmp 	SyntaxError
.8301						_TACOIndirect:
.8301		20 2f 83	jsr $832f			jsr 	CalculateOperand 			; get the operand
.8304		b1 30		lda ($30),y			lda 	(codePtr),y
.8306		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8308		f0 17		beq $8321			beq 	_TACOIndX
.830a		20 20 91	jsr $9120			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.830d		b1 30		lda ($30),y			lda 	(codePtr),y
.830f		a2 d1		ldx #$d1			ldx 	#AM_IND
.8311		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8313		d0 19		bne $832e			bne 	_TACOExit
.8315		c8		iny				iny
.8316		20 39 83	jsr $8339			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8319		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.831b		d0 e1		bne $82fe			bne 	_TACOSyntax
.831d		a2 d0		ldx #$d0			ldx 	#AM_INDY
.831f		80 0d		bra $832e			bra 	_TACOExit
.8321						_TACOIndX:
.8321		c8		iny				iny
.8322		20 39 83	jsr $8339			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8325		c9 58		cmp #$58			cmp 	#'X' 						; check X
.8327		d0 d5		bne $82fe			bne 	_TACOSyntax
.8329		20 20 91	jsr $9120			jsr 	CheckRightBracket			; check )
.832c		a2 c0		ldx #$c0			ldx 	#AM_INDX
.832e						_TACOExit:
.832e		60		rts				rts
.832f						CalculateOperand:
.832f		48		pha				pha
.8330		da		phx				phx
.8331		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8333		20 04 a0	jsr $a004			jsr 	Evaluate16BitInteger
.8336		fa		plx				plx
.8337		68		pla				pla
.8338		60		rts				rts
.8339						TACOCheckXY:
.8339		b1 30		lda ($30),y			lda 	(codePtr),y
.833b		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.833d		c9 40		cmp #$40			cmp 	#$40
.833f		d0 21		bne $8362			bne 	_TCXYFail
.8341		b1 30		lda ($30),y			lda 	(codePtr),y
.8343		18		clc				clc
.8344		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8346		85 37		sta $37				sta 	zTemp0+1
.8348		c8		iny				iny
.8349		b1 30		lda ($30),y			lda 	(codePtr),y
.834b		c8		iny				iny
.834c		85 36		sta $36				sta 	zTemp0
.834e		5a		phy				phy 								; save position
.834f		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.8351		b1 36		lda ($36),y			lda 	(zTemp0),y
.8353		d0 0c		bne $8361			bne 	_TCXYPopFail
.8355		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8357		b1 36		lda ($36),y			lda 	(zTemp0),y
.8359		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.835b		f0 08		beq $8365			beq 	_TCXYFound
.835d		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.835f		f0 04		beq $8365			beq 	_TCXYFound
.8361						_TCXYPopFail:
.8361		7a		ply				ply
.8362						_TCXYFail:
.8362		a9 00		lda #$00			lda 	#0
.8364		60		rts				rts
.8365						_TCXYFound:
.8365		7a		ply				ply 								; restore position
.8366		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8368		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8369						BackloadProgram:
.8369		20 8d 8b	jsr $8b8d			jsr 	NewProgram 					; does the actual NEW.
.836c		a2 83		ldx #$83			ldx 	#_BLLoad >> 8
.836e		a9 c0		lda #$c0			lda 	#_BLLoad & $FF
.8370		20 92 91	jsr $9192			jsr 	PrintStringXA
.8373		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8375		8d 59 06	sta $0659			sta 	BackLoadPage
.8378		a9 00		lda #$00			lda 	#(($6000) & $FF)
.837a		8d 5a 06	sta $065a			sta 	0+BackLoadPointer
.837d		a9 60		lda #$60			lda 	#(($6000) >> 8)
.837f		8d 5b 06	sta $065b			sta 	1+BackLoadPointer
.8382		a9 ff		lda #$ff			lda 	#$FF
.8384		8d fa ff	sta $fffa			sta 	$FFFA
.8387						_BPLoop:
.8387		a2 ff		ldx #$ff			ldx 	#$FF
.8389		20 d5 83	jsr $83d5			jsr 	BLReadByte 					; read a byte
.838c		c9 00		cmp #$00			cmp 	#0
.838e		f0 29		beq $83b9			beq 	_BPExit 					; if 0 exit
.8390		30 27		bmi $83b9			bmi 	_BPExit 					; if -ve exit
.8392						_BPCopy:
.8392		e8		inx				inx  								; copy byte into the lineBuffer
.8393		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8396		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x
.8399		20 d5 83	jsr $83d5			jsr 	BLReadByte 					; read next byte
.839c		30 0a		bmi $83a8			bmi 	_BPEndLine 					; -ve = EOL
.839e		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.83a0		d0 02		bne $83a4			bne 	_BPNotTab
.83a2		a9 20		lda #$20			lda 	#' '
.83a4						_BPNotTab:
.83a4		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.83a6		b0 ea		bcs $8392			bcs 	_BPCopy 					; until a control character, should be 13 received.
.83a8						_BPEndLine:
.83a8		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.83ab		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.83ae		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.83b1		f0 d4		beq $8387			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.83b3		38		sec				sec 								; append not insert
.83b4		20 6b a7	jsr $a76b			jsr 	MemoryInsertLine 			; append to current program
.83b7		80 ce		bra $8387			bra 	_BPLoop
.83b9						_BPExit:
.83b9		9c fa ff	stz $fffa			stz 	$FFFA
.83bc		20 be 84	jsr $84be			jsr 	ClearCommand 				; clear variables etc.
.83bf		60		rts				rts
.83c0						_BLLoad:
>83c0		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>83c8		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.83d5						BLReadByte:
.83d5		da		phx				phx
.83d6		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.83d8		ad 59 06	lda $0659			lda 	BackLoadPage	 			; set current page
.83db		85 0b		sta $0b				sta 	8+3
.83dd		ad 5a 06	lda $065a			lda 	BackLoadPointer 			; copy pointer to zTemp0
.83e0		85 36		sta $36				sta 	zTemp0
.83e2		ad 5b 06	lda $065b			lda 	BackLoadPointer+1
.83e5		85 37		sta $37				sta 	zTemp0+1
.83e7		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.83e9		ee 5a 06	inc $065a			inc 	BackLoadPointer 			; bump pointer
.83ec		d0 0f		bne $83fd			bne 	_BLNoCarry
.83ee		ee 5b 06	inc $065b			inc 	BackLoadPointer+1
.83f1		10 0a		bpl $83fd			bpl 	_BLNoCarry 					; need a new page
.83f3		48		pha				pha
.83f4		a9 60		lda #$60			lda 	#$60 						; reset pointer
.83f6		8d 5b 06	sta $065b			sta 	BackLoadPointer+1
.83f9		ee 59 06	inc $0659			inc 	BackLoadPage 				; next page from source.
.83fc		68		pla				pla
.83fd						_BLNoCarry:
.83fd		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.83ff		fa		plx				plx
.8400		c9 00		cmp #$00			cmp 	#0
.8402		60		rts				rts
.0659						BackLoadPage:
>0659								.fill  	1
.065a						BackLoadPointer:
>065a								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8403						EditProgramCode:
.8403		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; try to find the line.
.8406		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1
.8409		20 0f a8	jsr $a80f			jsr 	MemorySearch
.840c		90 05		bcc $8413			bcc 	_EPCNoDelete 				; reached the end : don't delete
.840e		d0 03		bne $8413			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.8410		20 34 a7	jsr $a734			jsr 	MemoryDeleteLine 			; delete the line
.8413						_EPCNoDelete:
.8413		ad 2d 04	lda $042d			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.8416		c9 80		cmp #$80			cmp 	#KWC_EOL
.8418		f0 0d		beq $8427			beq 	_EPCNoInsert
.841a		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.841d		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8420		20 0f a8	jsr $a80f			jsr 	MemorySearch
.8423		18		clc				clc 								; insert at this point.
.8424		20 6b a7	jsr $a76b			jsr 	MemoryInsertLine 			; insert the line
.8427						_EPCNoInsert:
.8427		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8428						WarmStart:
.8428		a2 ff		ldx #$ff			ldx 	#$FF
.842a		9a		txs				txs
.842b		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.842d		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8430		20 2b 80	jsr $802b			jsr 	EXTInputLine 				; get line to lineBuffer
.8433		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line
.8436		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number <> 0
.8439		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.843c		d0 17		bne $8455			bne 	_WSEditCode 				; if so,edit code.
.843e		9c 2a 04	stz $042a			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.8441		a9 2a		lda #$2a			lda 	#((tokenOffset) & $FF)
.8443		85 30		sta $30				sta 	codePtr
.8445		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.8447		85 31		sta $31				sta 	codePtr+1
.8449		ad 2d 04	lda $042d			lda 	tokenBuffer 				; nothing to run
.844c		c9 80		cmp #$80			cmp 	#KWC_EOL
.844e		f0 d8		beq $8428			beq 	WarmStart
.8450		20 1d 8d	jsr $8d1d			jsr 	RUNCodePointerLine 			; execute that line.
.8453		80 d3		bra $8428			bra 	WarmStart
.8455						_WSEditCode:
.8455		20 03 84	jsr $8403			jsr 	EditProgramCode 			; edit the program code
.8458		20 be 84	jsr $84be			jsr 	ClearCommand 				; clear all variables etc.
.845b		80 cb		bra $8428			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.845d						AssembleCommand:
.845d		a2 00		ldx #$00			ldx 	#0
.845f		20 04 a0	jsr $a004			jsr 	Evaluate16BitInteger 		; start address
.8462		a5 58		lda $58				lda 	NSMantissa0
.8464		8d 1e 04	sta $041e			sta 	AssemblerAddress
.8467		a5 60		lda $60				lda 	NSMantissa1
.8469		8d 1f 04	sta $041f			sta 	AssemblerAddress+1
.846c		20 28 91	jsr $9128			jsr 	CheckComma
.846f		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; options 0-3
.8472		a5 58		lda $58				lda 	NSMantissa0
.8474		8d 20 04	sta $0420			sta 	AssemblerControl
.8477		60		rts				rts
.8478		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8479						AssertCommand:
.8479		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.847b		20 f1 9f	jsr $9ff1			jsr 	EvaluateInteger 			; the assert test
.847e		20 a6 a0	jsr $a0a6			jsr 	NSMIsZero 					; exit if result is non zero.
.8481		d0 05		bne $8488			bne 	_ACExit
.8483		a9 0a		lda #$0a		lda	#10
.8485		4c 39 91	jmp $9139		jmp	ErrorHandler
.8488						_ACExit:
.8488		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8489						CallCommand:
.8489		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.848b		20 04 a0	jsr $a004			jsr 	Evaluate16BitInteger
.848e						_CCClear
.848e		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.848f		20 84 a0	jsr $a084			jsr 	NSMSetZero 					; these are optional sequentially.
.8492		e0 04		cpx #$04			cpx 	#4
.8494		d0 f8		bne $848e			bne 	_CCClear
.8496		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8498						_CCCParam:
.8498		b1 30		lda ($30),y			lda 	(codePtr),y
.849a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.849c		d0 09		bne $84a7			bne 	_CCCRun6502
.849e		c8		iny				iny 								; skip comma
.849f		e8		inx				inx	 								; next level
.84a0		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; get A/X/Y
.84a3		e0 03		cpx #$03			cpx 	#3
.84a5		90 f1		bcc $8498			bcc 	_CCCParam 					; done all 3 ?
.84a7						_CCCRun6502:
.84a7		5a		phy				phy 								; save position
.84a8		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.84aa		85 37		sta $37				sta 	zTemp0+1
.84ac		a5 58		lda $58				lda 	NSMantissa0
.84ae		85 36		sta $36				sta 	zTemp0
.84b0		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.84b2		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.84b4		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.84b6		20 bb 84	jsr $84bb			jsr 	_CCCZTemp0 					; call zTemp0
.84b9		7a		ply				ply 								; restore position and exit
.84ba		60		rts				rts
.84bb						_CCCZTemp0:
.84bb		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.84be						ClearCommand:
.84be		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.84c0		85 36		sta $36				sta 	0+zTemp0
.84c2		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.84c4		85 37		sta $37				sta 	1+zTemp0
.84c6						_ClearZeroLoop:
.84c6		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.84c8		f0 24		beq $84ee			beq 	_ClearZeroEnd
.84ca		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.84cc		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.84ce						_ClearOneVariable:
.84ce		91 36		sta ($36),y			sta 	(zTemp0),y
.84d0		c8		iny				iny
.84d1		c0 08		cpy #$08			cpy 	#8
.84d3		d0 f9		bne $84ce			bne 	_ClearOneVariable
.84d5		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.84d7		b1 36		lda ($36),y			lda 	(zTemp0),y
.84d9		c9 18		cmp #$18			cmp 	#NSTProcedure
.84db		d0 04		bne $84e1			bne 	_ClearNotProcedure
.84dd		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.84df		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.84e1						_ClearNotProcedure:
.84e1		18		clc				clc 								; go to the next variable
.84e2		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.84e4		65 36		adc $36				adc 	zTemp0
.84e6		85 36		sta $36				sta 	zTemp0
.84e8		90 dc		bcc $84c6			bcc 	_ClearZeroLoop
.84ea		e6 37		inc $37				inc 	zTemp0+1
.84ec		80 d8		bra $84c6			bra 	_ClearZeroLoop
.84ee						_ClearZeroEnd:
.84ee		18		clc				clc
.84ef		a5 36		lda $36				lda 	zTemp0
.84f1		69 01		adc #$01			adc 	#1
.84f3		8d 0c 04	sta $040c			sta 	lowMemPtr
.84f6		a5 37		lda $37				lda 	zTemp0+1
.84f8		69 00		adc #$00			adc 	#0
.84fa		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.84fd		20 c9 b1	jsr $b1c9			jsr 	StackReset
.8500		20 2f b2	jsr $b22f			jsr 	StringSystemInitialise
.8503		20 29 90	jsr $9029			jsr 	ProcedureScan
.8506		20 cc 8c	jsr $8ccc			jsr 	Command_Restore
.8509		9c 1e 04	stz $041e			stz 	AssemblerAddress
.850c		9c 1f 04	stz $041f			stz 	AssemblerAddress+1
.850f		9c 20 04	stz $0420			stz 	AssemblerControl
.8512		20 73 9c	jsr $9c73			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8515		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.8516						ClearScreen:
.8516		5a		phy				phy
.8517		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.8519		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.851c		7a		ply				ply
.851d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.851e						Command_Data:
.851e		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.8520		a2 80		ldx #$80			ldx 	#KWC_EOL
.8522		20 7b 90	jsr $907b			jsr 	ScanForward
.8525		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8526						DimCommand:
.8526		b1 30		lda ($30),y			lda 	(codePtr),y
.8528		29 c0		and #$c0			and 	#$C0
.852a		c9 40		cmp #$40			cmp 	#$40
.852c		d0 7a		bne $85a8			bne 	_DCSyntax 				; n o, error.
.852e		b1 30		lda ($30),y			lda 	(codePtr),y
.8530		18		clc				clc
.8531		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8533		85 3f		sta $3f				sta 	zaTemp+1
.8535		c8		iny				iny
.8536		b1 30		lda ($30),y			lda 	(codePtr),y
.8538		c8		iny				iny
.8539		85 3e		sta $3e				sta 	zaTemp
.853b		5a		phy				phy
.853c		a0 02		ldy #$02			ldy 	#2 						; read type byte
.853e		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8540		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8542		c9 18		cmp #$18			cmp 	#NSTProcedure
.8544		f0 62		beq $85a8			beq 	_DCSyntax
.8546		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8548		29 04		and #$04			and 	#NSBIsArray
.854a		f0 64		beq $85b0			beq 	_DCType
.854c		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.854e		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8550		d0 59		bne $85ab			bne 	_DCRedefine
.8552		7a		ply				ply
.8553		20 b3 85	jsr $85b3			jsr 	_DCGetSize 				; get array size, check it.
.8556		5a		phy				phy
.8557		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8559		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.855b		7a		ply				ply 							; is there a second (e.g. ,x)
.855c		b1 30		lda ($30),y			lda 	(codePtr),y
.855e		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8560		d0 0a		bne $856c			bne 	_DCOneDimension
.8562		c8		iny				iny 							; skip comma
.8563		20 b3 85	jsr $85b3			jsr 	_DCGetSize 				; get 2nd array size
.8566		5a		phy				phy
.8567		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8569		91 3e		sta ($3e),y			sta 	(zaTemp),y
.856b		7a		ply				ply
.856c						_DCOneDimension:
.856c		5a		phy				phy 							; save position
.856d		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.856f		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8571		aa		tax				tax
.8572		c8		iny				iny
.8573		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8575		e8		inx				inx 							; bump them.
.8576		1a		inc a				inc 	a
.8577		20 2f a0	jsr $a02f			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.857a		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.857c		29 e0		and #$e0			and 	#$E0
.857e		d0 23		bne $85a3			bne 	_DCSize
.8580		a0 02		ldy #$02			ldy 	#2 						; get base type
.8582		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8584		20 c1 85	jsr $85c1			jsr 	ScaleByBaseType 		; scale by base type
.8587		a5 36		lda $36				lda 	zTemp0
.8589		a6 37		ldx $37				ldx 	zTemp0+1
.858b		20 35 9c	jsr $9c35			jsr 	AllocateXABytes 		; allocate memory
.858e		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8590		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8592		c8		iny				iny
.8593		8a		txa				txa
.8594		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8596		7a		ply				ply 							; get position back
.8597		20 20 91	jsr $9120			jsr 	CheckRightBracket 		; check )
.859a		b1 30		lda ($30),y			lda 	(codePtr),y
.859c		c8		iny				iny 							; consume in case
.859d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.859f		f0 85		beq $8526			beq 	DimCommand
.85a1		88		dey				dey 							; undo consume
.85a2		60		rts				rts
.85a3						_DCSize:
.85a3		a9 16		lda #$16		lda	#22
.85a5		4c 39 91	jmp $9139		jmp	ErrorHandler
.85a8						_DCSyntax:
.85a8		4c 02 a2	jmp $a202			jmp 	SyntaxError
.85ab						_DCRedefine:
.85ab		a9 15		lda #$15		lda	#21
.85ad		4c 39 91	jmp $9139		jmp	ErrorHandler
.85b0						_DCType:
.85b0		4c 0c a2	jmp $a20c			jmp 	TypeError
.85b3						_DCGetSize:
.85b3		a2 00		ldx #$00			ldx 	#0 						; get first index.
.85b5		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 	; get array dimension
.85b8		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.85ba		f0 e7		beq $85a3			beq 	_DCSize
.85bc		c9 fe		cmp #$fe			cmp 	#254
.85be		f0 e3		beq $85a3			beq 	_DCSize
.85c0		60		rts				rts
.85c1						ScaleByBaseType:
.85c1		29 10		and #$10			and 	#NSBIsString 			; is it string
.85c3		d0 19		bne $85de			bne 	_SBBTString
.85c5		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.85c7		48		pha				pha
.85c8		a5 36		lda $36				lda 	zTemp0
.85ca		48		pha				pha
.85cb		06 36		asl $36				asl 	zTemp0 					; x 2
.85cd		26 37		rol $37				rol 	zTemp0+1
.85cf		06 36		asl $36				asl 	zTemp0 					; x 4
.85d1		26 37		rol $37				rol 	zTemp0+1
.85d3		68		pla				pla 							; add stacked value = x 5
.85d4		65 36		adc $36				adc 	zTemp0
.85d6		85 36		sta $36				sta 	zTemp0
.85d8		68		pla				pla
.85d9		65 37		adc $37				adc 	zTemp0+1
.85db		85 37		sta $37				sta 	zTemp0+1
.85dd		60		rts				rts
.85de						_SBBTString:
.85de		06 36		asl $36				asl 	zTemp0
.85e0		26 37		rol $37				rol 	zTemp0+1
.85e2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dir.asm

.85e3						Command_Dir:
.85e3		ad 5c 06	lda $065c			lda     DefaultDrive				; set drive to list.
.85e6		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.85e8		64 fd		stz $fd				stz     kernel.args.directory.open.fname_len
.85ea		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.85ed		b0 56		bcs $8645			bcs     _CDExit
.85ef						_CDEventLoop:
.85ef		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.85f2		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.85f5		b0 f8		bcs $85ef			bcs     _CDEventLoop
.85f7		ad 47 08	lda $0847			lda     event.type
.85fa		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.85fc		f0 47		beq $8645			beq    	_CDExit
.85fe		20 03 86	jsr $8603			jsr     _CDMessages 				; handle various messages
.8601		80 ec		bra $85ef			bra     _CDEventLoop
.8603						_CDMessages:
.8603		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.8605		f0 15		beq $861c			beq     _CDEVRead
.8607		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.8609		f0 19		beq $8624			beq     _CDEVVolume
.860b		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.860d		f0 17		beq $8626			beq     _CDEVFile
.860f		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.8611		f0 28		beq $863b			beq     _CDEVFree
.8613		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.8615		f0 26		beq $863d			beq     _CDEVEOF
.8617		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.8619		f0 22		beq $863d			beq     _CDEVEOF
.861b		60		rts				rts
.861c						_CDEVRead:
.861c		ad 4a 08	lda $084a			lda     event.directory.stream
.861f		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.8621		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.8624						_CDEVVolume:
.8624		80 f6		bra $861c			bra     _CDEVRead
.8626						_CDEVFile:
.8626		a9 20		lda #$20			lda 	#32
.8628		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.862b		ad 4c 08	lda $084c			lda     event.directory.file.len
.862e		20 48 86	jsr $8648			jsr     _CDReadData
.8631		20 92 91	jsr $9192			jsr 	PrintStringXA
.8634		a9 0d		lda #$0d			lda 	#13
.8636		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8639		80 e1		bra $861c			bra     _CDEVRead
.863b						_CDEVFree:
.863b		80 00		bra $863d			bra     _CDEVEOF
.863d						_CDEVEOF:
.863d		ad 4a 08	lda $084a			lda     event.directory.stream
.8640		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.8642		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.8645						_CDExit:
.8645		4c 28 84	jmp $8428			jmp 	WarmStart
.8648						_CDReadData:
.8648		85 fd		sta $fd				sta     kernel.args.recv.buflen
.864a		a9 2a		lda #$2a			lda     #lineBuffer & $FF
.864c		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.864e		a9 05		lda #$05			lda     #lineBuffer >> 8
.8650		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8652		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.8655		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.8657		9e 2a 05	stz $052a,x			stz     lineBuffer,x
.865a		a9 2a		lda #$2a			lda 	#lineBuffer & $FF
.865c		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.865e		60		rts				rts
.865f						print_ext

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/drive.asm

.865f						Command_Drive:
.865f		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger
.8662		8d 5c 06	sta $065c			sta 	DefaultDrive
.8665		60		rts				rts
.065c						DefaultDrive:
>065c								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8666						EndCommand:
.8666		4c 28 84	jmp $8428			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8669						ForCommand:
.8669		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.866b		20 63 b1	jsr $b163			jsr 	StackOpen
.866e		a2 00		ldx #$00			ldx 	#0
.8670		20 87 9a	jsr $9a87			jsr 	EvaluateTerm
.8673		b5 50		lda $50,x			lda 	NSStatus,x
.8675		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8677		d0 47		bne $86c0			bne		_FCError
.8679		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.867b		20 30 91	jsr $9130			jsr 	CheckNextA
.867e		e8		inx				inx
.867f		20 f1 9f	jsr $9ff1			jsr 	EvaluateInteger 			; <from> in +1
.8682		b1 30		lda ($30),y			lda 	(codePtr),y
.8684		c8		iny				iny 								; consume it
.8685		48		pha				pha 								; save on stack for later
.8686		c9 bb		cmp #$bb			cmp 	#KWD_DOWNTO
.8688		f0 04		beq $868e			beq 	_FCNoSyntax
.868a		c9 d9		cmp #$d9			cmp 	#KWD_TO
.868c		d0 35		bne $86c3			bne 	_FCSyntaxError
.868e						_FCNoSyntax:
.868e		e8		inx				inx
.868f		20 f1 9f	jsr $9ff1			jsr 	EvaluateInteger
.8692		20 a8 b1	jsr $b1a8			jsr 	STKSaveCodePosition 		; save loop back position
.8695		68		pla				pla 								; restore DOWNTO or TO
.8696		5a		phy				phy 								; save Y on the stack
.8697		49 bb		eor #$bb			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8699		f0 02		beq $869d			beq 	_FCNotDownTo
.869b		a9 02		lda #$02			lda 	#2
.869d						_FCNotDownTo:
.869d		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.869e		a0 10		ldy #$10			ldy 	#16
.86a0		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.86a2		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.86a4		a5 58		lda $58				lda 	NSMantissa0
.86a6		91 34		sta ($34),y			sta 	(basicStack),y
.86a8		a5 60		lda $60				lda 	NSMantissa1
.86aa		c8		iny				iny
.86ab		91 34		sta ($34),y			sta 	(basicStack),y
.86ad		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.86af		a2 01		ldx #$01			ldx 	#1
.86b1		20 c6 86	jsr $86c6			jsr 	FCIntegerToStack
.86b4		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.86b6		a2 02		ldx #$02			ldx 	#2
.86b8		20 c6 86	jsr $86c6			jsr 	FCIntegerToStack
.86bb		20 e1 86	jsr $86e1			jsr 	CopyIndexToReference
.86be		7a		ply				ply 								; restore position
.86bf		60		rts				rts
.86c0						_FCError:
.86c0		4c 0c a2	jmp $a20c			jmp 	TypeError
.86c3						_FCSyntaxError:
.86c3		4c 02 a2	jmp $a202			jmp 	SyntaxError
.86c6						FCIntegerToStack:
.86c6		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.86c8		10 03		bpl $86cd			bpl	 	_FCNotNegative
.86ca		20 4d a0	jsr $a04d			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.86cd						_FCNotNegative:
.86cd		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.86cf		91 34		sta ($34),y			sta 	(basicStack),y
.86d1		c8		iny				iny
.86d2		b5 60		lda $60,x			lda 	NSMantissa1,x
.86d4		91 34		sta ($34),y			sta 	(basicStack),y
.86d6		c8		iny				iny
.86d7		b5 68		lda $68,x			lda 	NSMantissa2,x
.86d9		91 34		sta ($34),y			sta 	(basicStack),y
.86db		c8		iny				iny
.86dc		b5 70		lda $70,x			lda 	NSMantissa3,x
.86de		91 34		sta ($34),y			sta 	(basicStack),y
.86e0		60		rts				rts
.86e1						CopyIndexToReference:
.86e1		5a		phy				phy
.86e2		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.86e4		38		sec				sec 								; (because we copy from offset 8)
.86e5		b1 34		lda ($34),y			lda 	(basicStack),y
.86e7		e9 08		sbc #$08			sbc 	#8
.86e9		85 36		sta $36				sta 	zTemp0
.86eb		c8		iny				iny
.86ec		b1 34		lda ($34),y			lda 	(basicStack),y
.86ee		e9 00		sbc #$00			sbc 	#0
.86f0		85 37		sta $37				sta 	zTemp0+1
.86f2		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.86f4		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.86f6		b1 34		lda ($34),y			lda 	(basicStack),y
.86f8		0a		asl a				asl 	a 							; into carry
.86f9		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.86fb		90 14		bcc $8711			bcc 	_CITRNormal
.86fd		38		sec				sec
.86fe						_CITRNegative:
.86fe		a9 00		lda #$00			lda 	#0
.8700		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8702		91 36		sta ($36),y			sta 	(zTemp0),y
.8704		c8		iny				iny
.8705		ca		dex				dex
.8706		d0 f6		bne $86fe			bne 	_CITRNegative
.8708		88		dey				dey 								; look at MSB of mantissa
.8709		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.870b		09 80		ora #$80			ora 	#$80
.870d		91 36		sta ($36),y			sta 	(zTemp0),y
.870f		7a		ply				ply
.8710		60		rts				rts
.8711						_CITRNormal:
.8711		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8713		91 36		sta ($36),y			sta 	(zTemp0),y
.8715		c8		iny				iny
.8716		ca		dex				dex
.8717		d0 f8		bne $8711			bne 	_CITRNormal
.8719		7a		ply				ply 								; and exit.
.871a		60		rts				rts
.871b						NextCommand:
.871b		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.871d		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.871f		20 90 b1	jsr $b190			jsr 	StackCheckFrame
.8722		5a		phy				phy
.8723		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8725		b1 34		lda ($34),y			lda 	(basicStack),y
.8727		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8729		30 02		bmi $872d			bmi 	_NCStepNeg
.872b		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.872d						_NCStepNeg:
.872d		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.872f		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8731		18		clc				clc
.8732						_NCBump:
.8732		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8734		91 34		sta ($34),y			sta 	(basicStack),y
.8736		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8738		c8		iny				iny 								; next byte
.8739		ca		dex				dex 								; do four times
.873a		d0 f6		bne $8732			bne 	_NCBump
.873c		20 e1 86	jsr $86e1			jsr		CopyIndexToReference		; copy it to the reference variable.
.873f		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8741		b1 34		lda ($34),y			lda 	(basicStack),y
.8743		0a		asl a				asl 	a 							; sign bit to carry
.8744		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8746		85 38		sta $38				sta 	zTemp1
.8748		90 02		bcc $874c			bcc 	_NCCompRev 					; use if step is +ve
.874a		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.874c						_NCCompRev:
.874c		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.874e		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8750		85 39		sta $39				sta 	zTemp1+1
.8752		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8754		38		sec				sec
.8755						_NCCompare:
.8755		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8757		b1 34		lda ($34),y			lda 	(basicStack),y
.8759		a4 39		ldy $39				ldy 	zTemp1+1
.875b		f1 34		sbc ($34),y			sbc 	(basicStack),y
.875d		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.875f		e6 39		inc $39				inc 	zTemp1+1
.8761		ca		dex				dex 								; do it 4 times.
.8762		d0 f1		bne $8755			bne 	_NCCompare
.8764		50 02		bvc $8768			bvc 	_NCNoOverflow 				; convert to signed comparison
.8766		49 80		eor #$80			eor 	#$80
.8768						_NCNoOverflow:
.8768		7a		ply				ply 								; restore Y position
.8769		0a		asl a				asl 	a 							; is bit 7 set.
.876a		90 04		bcc $8770			bcc 	_NCLoopBack 				; if no , >= so loop back
.876c		20 82 b1	jsr $b182			jsr 	StackClose 					; exit the loop
.876f		60		rts				rts
.8770						_NCLoopBack:
.8770		20 b9 b1	jsr $b1b9			jsr 	STKLoadCodePosition 		; loop back
.8773		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8774						Command_GOSUB:
.8774		a2 00		ldx #$00			ldx 	#0
.8776		20 04 a0	jsr $a004			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8779		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.877b		20 63 b1	jsr $b163			jsr 	StackOpen 					; create frame
.877e		20 a8 b1	jsr $b1a8			jsr 	STKSaveCodePosition 		; save current position
.8781		4c 97 87	jmp $8797			jmp 	GotoStackX
.8784						Command_RETURN:
.8784		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8786		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8788		20 90 b1	jsr $b190			jsr 	StackCheckFrame
.878b		20 b9 b1	jsr $b1b9			jsr 	STKLoadCodePosition 		; restore code position
.878e		20 82 b1	jsr $b182			jsr 	StackClose
.8791		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8792						GotoCommand:
.8792		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8794		20 04 a0	jsr $a004			jsr 	Evaluate16BitInteger
.8797						GotoStackX:
.8797		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8799		48		pha				pha 								; it is slightly inefficient, just in cases.
.879a		b5 58		lda $58,x			lda 	NSMantissa0,x
.879c		fa		plx				plx
.879d		20 0f a8	jsr $a80f			jsr 	MemorySearch 				; transfer to line number AX.
.87a0		90 05		bcc $87a7			bcc 	_GotoError 					; not found, off end.
.87a2		d0 03		bne $87a7			bne 	_GotoError 					; not found exactly
.87a4		4c 16 8d	jmp $8d16			jmp 	RunNewLine 					; and go straight to new line code.
.87a7						_GotoError:
.87a7		a9 0d		lda #$0d		lda	#13
.87a9		4c 39 91	jmp $9139		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.87ac						IfCommand:
.87ac		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.87ae		20 d2 9f	jsr $9fd2			jsr 	EvaluateNumber
.87b1		b1 30		lda ($30),y			lda 	(codePtr),y
.87b3		c9 ae		cmp #$ae			cmp 	#KWD_THEN  					; could be THEN <stuff>
.87b5		d0 0a		bne $87c1			bne 	_IfStructured 				; we still support it.
.87b7		c8		iny				iny 								; consume THEN
.87b8		20 a6 a0	jsr $a0a6			jsr 	NSMIsZero 					; is it zero
.87bb		f0 01		beq $87be			beq 	_IfFail 					; if fail, go to next line
.87bd		60		rts				rts 								; if THEN just continue
.87be						_IfFail:
.87be		4c fe 8c	jmp $8cfe			jmp 	EOLCommand
.87c1						_IfStructured:
.87c1		20 a6 a0	jsr $a0a6			jsr 	NSMIsZero 					; is it zero
.87c4		d0 07		bne $87cd			bne 	_IfExit 					; if not, then continue normally.
.87c6		a9 bc		lda #$bc			lda 	#KWD_ELSE 					; look for else/endif
.87c8		a2 ab		ldx #$ab			ldx 	#KWD_ENDIF
.87ca		20 7b 90	jsr $907b			jsr 	ScanForward 				; and run from there
.87cd						_IfExit:
.87cd		60		rts				rts
.87ce						ElseCode:
.87ce		a9 ab		lda #$ab			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.87d0		aa		tax				tax 								; so just go to the structure exit
.87d1		20 7b 90	jsr $907b			jsr 	ScanForward
.87d4		60		rts				rts
.87d5						EndIf:
.87d5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.87d6						Command_Input:
.87d6		9c 28 04	stz $0428			stz 	isPrintFlag
.87d9		80 0c		bra $87e7			bra 	Command_IP_Main
.87db						Command_CPrint:
.87db		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.87dd		8d 28 04	sta $0428			sta 	isPrintFlag 				; clear input flag
.87e0		80 05		bra $87e7			bra 	Command_IP_Main
.87e2						Command_Print:
.87e2		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.87e4		8d 28 04	sta $0428			sta 	isPrintFlag 				; clear input flag
.87e7						Command_IP_Main:
.87e7		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.87e8						_CPLoop:
.87e8		08		php				php 								; save last action flag
.87e9		b1 30		lda ($30),y			lda 	(codePtr),y
.87eb		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.87ed		f0 54		beq $8843			beq 	_CPExit
.87ef		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.87f1		f0 50		beq $8843			beq 	_CPExit
.87f3		68		pla				pla 								; throw last action flag
.87f4		b1 30		lda ($30),y			lda 	(codePtr),y
.87f6		c8		iny				iny
.87f7		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.87f9		f0 45		beq $8840			beq 	_CPContinueWithSameLine
.87fb		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.87fd		f0 3c		beq $883b			beq 	_CPTab
.87ff		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8801		f0 34		beq $8837			beq 	_CPNewLine
.8803		88		dey				dey 								; undo the get.
.8804		20 3b 96	jsr $963b			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8807		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8809		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.880b		f0 0d		beq $881a			beq 	_CPIsValue 					; no, display it.
.880d		ad 28 04	lda $0428			lda 	isPrintFlag 				; if print, dereference and print.
.8810		d0 05		bne $8817			bne 	_CPIsPrint 					; otherwise display.
.8812		20 4c 88	jsr $884c			jsr 	CIInputValue 				; input a value to the reference
.8815		80 20		bra $8837			bra 	_CPNewLine
.8817						_CPIsPrint:
.8817		20 00 99	jsr $9900			jsr 	Dereference 				; dereference if required.
.881a						_CPIsValue:
.881a		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.881c		29 10		and #$10			and 	#NSBIsString
.881e		f0 09		beq $8829			beq 	_CPNumber
.8820		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8822		a5 58		lda $58				lda 	NSMantissa0
.8824		20 af 88	jsr $88af			jsr 	CPPrintStringXA
.8827		80 be		bra $87e7			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8829						_CPNumber:
.8829		a9 05		lda #$05			lda 	#5 							; maximum decimals
.882b		20 b9 9e	jsr $9eb9			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.882e		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8830		a9 49		lda #$49			lda 	#decimalBuffer & $FF
.8832		20 af 88	jsr $88af			jsr 	CPPrintStringXA 			; print it.
.8835		80 b0		bra $87e7			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8837						_CPNewLine:
.8837		a9 0d		lda #$0d			lda 	#13
.8839		80 02		bra $883d			bra 	_CPPrintCharDirect
.883b						_CPTab:
.883b		a9 09		lda #$09			lda 	#9 							; print TAB
.883d						_CPPrintCharDirect:
.883d		20 ca 88	jsr $88ca			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8840						_CPContinueWithSameLine:
.8840		38		sec				sec 								; loop round with carry set, which
.8841		80 a5		bra $87e8			bra 	_CPLoop 					; will inhibit final CR
.8843						_CPExit:
.8843		28		plp				plp 								; get last action flag
.8844		b0 05		bcs $884b			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8846		a9 0d		lda #$0d			lda 	#13 						; print new line
.8848		20 ca 88	jsr $88ca			jsr 	CPPVControl
.884b						_CPExit2:
.884b		60		rts				rts
.884c						CIInputValue:
.884c		a2 00		ldx #$00			ldx 	#0 							; input a line.
.884e						_CIInputLine:
.884e		20 cd 88	jsr $88cd			jsr 	CPInputVector 				; get key
.8851		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8853		f0 1f		beq $8874			beq 	_CIHaveValue
.8855		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8857		f0 11		beq $886a			beq 	_CIBackspace
.8859		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.885b		90 f1		bcc $884e			bcc 	_CIInputLine
.885d		e0 50		cpx #$50			cpx 	#80 						; max length
.885f		b0 ed		bcs $884e			bcs 	_CIInputLine
.8861		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8864		e8		inx				inx
.8865		20 c2 88	jsr $88c2			jsr 	CPPrintVector 				; echo it.
.8868		80 e4		bra $884e			bra 	_CIInputLine
.886a						_CIBackspace:
.886a		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.886c		f0 e0		beq $884e			beq 	_CIInputLine
.886e		20 c2 88	jsr $88c2			jsr 	CPPrintVector 				; echo it.
.8871		ca		dex				dex
.8872		80 da		bra $884e			bra 	_CIInputLine
.8874						_CIHaveValue:
.8874		9e 2a 05	stz $052a,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8877		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8879		29 10		and #$10			and 	#NSBIsString
.887b		f0 17		beq $8894			beq 	_CIAssignNumber 			; assign a number
.887d		a2 01		ldx #$01			ldx 	#1
.887f		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.8881		95 58		sta $58,x			sta 	NSMantissa0,x
.8883		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8885		95 60		sta $60,x			sta 	NSMantissa1,x
.8887		74 68		stz $68,x			stz 	NSMantissa2,x
.8889		74 70		stz $70,x			stz 	NSMantissa3,x
.888b		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.888d		95 50		sta $50,x			sta  	NSStatus,x
.888f		ca		dex				dex 								; X = 0
.8890		20 09 89	jsr $8909			jsr 	AssignVariable
.8893		60		rts				rts
.8894						_CIAssignNumber:
.8894		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.8896		85 36		sta $36				sta 	zTemp0
.8898		a9 05		lda #$05			lda 	#lineBuffer >> 8
.889a		85 37		sta $37				sta 	zTemp0+1
.889c		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.889e		20 3b 9e	jsr $9e3b			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.88a1		90 07		bcc $88aa			bcc 	_CIIsOkay
.88a3		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.88a5		20 c2 88	jsr $88c2			jsr 	CPPrintVector
.88a8		80 a2		bra $884c			bra 	CIInputValue
.88aa						_CIIsOkay:
.88aa		ca		dex				dex 								; X = 0
.88ab		20 09 89	jsr $8909			jsr 	AssignVariable
.88ae		60		rts				rts
.88af						CPPrintStringXA:
.88af		5a		phy				phy
.88b0		86 37		stx $37				stx 	zTemp0+1
.88b2		85 36		sta $36				sta 	zTemp0
.88b4		a0 00		ldy #$00			ldy 	#0
.88b6						_PSXALoop:
.88b6		b1 36		lda ($36),y			lda 	(zTemp0),y
.88b8		f0 06		beq $88c0			beq 	_PSXAExit
.88ba		20 c2 88	jsr $88c2			jsr 	CPPrintVector
.88bd		c8		iny				iny
.88be		80 f6		bra $88b6			bra 	_PSXALoop
.88c0						_PSXAExit:
.88c0		7a		ply				ply
.88c1		60		rts				rts
.88c2						CPPrintVector:
.88c2		2c 28 04	bit $0428			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.88c5		30 03		bmi $88ca			bmi 	CPPVControl
.88c7		4c 0d 80	jmp $800d			jmp 	EXTPrintNoControl
.88ca						CPPVControl:
.88ca		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.88cd						CPInputVector:
.88cd		4c 35 80	jmp $8035			jmp 	KNLInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.88d0						LetCommand:
.88d0		a2 00		ldx #$00			ldx 	#0
.88d2		b1 30		lda ($30),y			lda 	(codePtr),y
.88d4		c9 10		cmp #$10			cmp 	#KWD_AT
.88d6		d0 14		bne $88ec			bne 	_LCStandard
.88d8		c8		iny				iny 								; skip equal
.88d9		20 87 9a	jsr $9a87			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.88dc		20 00 99	jsr $9900			jsr 	Dereference 				; dereference it to a value
.88df		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.88e1		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.88e3		95 50		sta $50,x			sta 	NSStatus,x
.88e5		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.88e7		d0 0f		bne $88f8			bne 	_LCMain
.88e9		4c 0c a2	jmp $a20c			jmp 	TypeError 					; was a reference before.
.88ec						_LCStandard:
.88ec		ad 25 96	lda $9625			lda 	PrecedenceLevel+"*"			; precedence > this
.88ef		20 3f 96	jsr $963f			jsr 	EvaluateExpressionAtPrecedence
.88f2		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.88f4		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.88f6		f0 0e		beq $8906			beq 	_LetGoProc 					; it's a procedure call.
.88f8						_LCMain:
.88f8		a9 3d		lda #$3d			lda 	#"=" 						; check =
.88fa		20 30 91	jsr $9130			jsr 	CheckNextA
.88fd		e8		inx				inx 								; RHS
.88fe		20 c9 9f	jsr $9fc9			jsr 	EvaluateValue
.8901		ca		dex				dex
.8902		20 09 89	jsr $8909			jsr 	AssignVariable
.8905		60		rts				rts
.8906						_LetGoProc:
.8906		4c d4 8b	jmp $8bd4			jmp 	CallProcedure
.8909						AssignVariable:
.8909		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.890b		48		pha				pha 								; save a copy
.890c		55 51		eor $51,x			eor 	NSStatus+1,x
.890e		29 10		and #$10			and 	#NSBIsString
.8910		d0 0b		bne $891d			bne 	_ASError
.8912		68		pla				pla 								; get back
.8913		29 10		and #$10			and 	#NSBIsString 				; check type
.8915		d0 03		bne $891a			bne 	_ASString
.8917		4c 3e 98	jmp $983e			jmp 	AssignNumber
.891a						_ASString:
.891a		4c 9c 98	jmp $989c			jmp 	AssignString
.891d						_ASError:
.891d		4c 0c a2	jmp $a20c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8920						Command_List:
.8920		9c 26 04	stz $0426			stz 	listIndent 					; reset indent.
.8923		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8925		20 8f 80	jsr $808f			jsr 	SNDCommand
.8928		b1 30		lda ($30),y			lda 	(codePtr),y
.892a		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.892c		c9 40		cmp #$40			cmp 	#$40  						; of code.
.892e		f0 6e		beq $899e			beq 	_CLListProcedure
.8930		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8932		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8934		a9 ff		lda #$ff			lda 	#$FF
.8936		85 5f		sta $5f				sta 	NSMantissa0+7
.8938		85 67		sta $67				sta 	NSMantissa1+7
.893a		b1 30		lda ($30),y			lda 	(codePtr),y
.893c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.893e		f0 1a		beq $895a			beq 	_CLSecond
.8940		20 1b 8a	jsr $8a1b			jsr 	CLIsDigit 					; if not digit, list all
.8943		b0 20		bcs $8965			bcs 	_CLStart
.8945		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8947		20 04 a0	jsr $a004			jsr 	Evaluate16BitInteger
.894a		b1 30		lda ($30),y			lda 	(codePtr),y
.894c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.894e		f0 0a		beq $895a			beq 	_CLSecond 					; if so go get it
.8950		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8952		85 5f		sta $5f				sta 	NSMantissa0+7
.8954		a5 64		lda $64				lda 	NSMantissa1+4
.8956		85 67		sta $67				sta 	NSMantissa1+7
.8958		80 0b		bra $8965			bra 	_CLStart
.895a						_CLSecond:
.895a		c8		iny				iny 								; consume comma
.895b		20 1b 8a	jsr $8a1b			jsr 	CLIsDigit 					; digit found
.895e		b0 05		bcs $8965			bcs 	_CLStart 					; if not, continue listing
.8960		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8962		20 04 a0	jsr $a004			jsr 	Evaluate16BitInteger
.8965						_CLStart
.8965		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8967		85 30		sta $30				sta 	codePtr
.8969		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.896b		85 31		sta $31				sta 	codePtr+1
.896d						_CLLoop:
.896d		20 e1 ff	jsr $ffe1			jsr 	$FFE1
.8970		f0 27		beq $8999			beq 	_CLBreak
.8972		b2 30		lda ($30)			lda 	(codePtr)
.8974		f0 20		beq $8996			beq 	_CLExit
.8976		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8978		20 0a 8a	jsr $8a0a			jsr 	CLCompareLineNo
.897b		90 0c		bcc $8989			bcc 	_CLNext
.897d		a2 07		ldx #$07			ldx 	#7
.897f		20 0a 8a	jsr $8a0a			jsr 	CLCompareLineNo
.8982		f0 02		beq $8986			beq 	_CLDoThisOne
.8984		b0 03		bcs $8989			bcs 	_CLNext
.8986						_CLDoThisOne:
.8986		20 f7 89	jsr $89f7			jsr 	CLListOneLine 				; routine to list the current line.
.8989						_CLNext:
.8989		18		clc				clc
.898a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.898c		65 30		adc $30				adc 	codePtr
.898e		85 30		sta $30				sta 	codePtr
.8990		90 02		bcc $8994			bcc 	_CREExit
.8992		e6 31		inc $31				inc 	codePtr+1 					; carry
.8994						_CREExit:
.8994		80 d7		bra $896d			bra 	_CLLoop
.8996						_CLExit:
.8996		4c 28 84	jmp $8428			jmp 	WarmStart
.8999						_CLBreak:
.8999		a9 01		lda #$01		lda	#1
.899b		4c 39 91	jmp $9139		jmp	ErrorHandler
.899e						_CLListProcedure:
.899e		b1 30		lda ($30),y			lda 	(codePtr),y
.89a0		85 38		sta $38				sta 	zTemp1
.89a2		c8		iny				iny
.89a3		b1 30		lda ($30),y			lda 	(codePtr),y
.89a5		85 39		sta $39				sta 	zTemp1+1
.89a7		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89a9		85 30		sta $30				sta 	codePtr
.89ab		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89ad		85 31		sta $31				sta 	codePtr+1
.89af						_CLLPSearch:
.89af		b2 30		lda ($30)			lda 	(codePtr)
.89b1		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.89b3		f0 e1		beq $8996			beq 	_CLExit
.89b5		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.89b7		b1 30		lda ($30),y			lda 	(codePtr),y
.89b9		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.89bb		d0 0e		bne $89cb			bne 	_CLLPNext
.89bd		c8		iny				iny 								; check if PROC this.
.89be		b1 30		lda ($30),y			lda 	(codePtr),y
.89c0		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.89c2		d0 07		bne $89cb			bne 	_CLLPNext
.89c4		c8		iny				iny
.89c5		b1 30		lda ($30),y			lda 	(codePtr),y
.89c7		c5 39		cmp $39				cmp 	zTemp1+1
.89c9		f0 0d		beq $89d8			beq 	_CLLPFound
.89cb						_CLLPNext:
.89cb		18		clc				clc
.89cc		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.89ce		65 30		adc $30				adc 	codePtr
.89d0		85 30		sta $30				sta 	codePtr
.89d2		90 02		bcc $89d6			bcc 	_CREExit
.89d4		e6 31		inc $31				inc 	codePtr+1 					; carry
.89d6						_CREExit:
.89d6		80 d7		bra $89af			bra 	_CLLPSearch
.89d8						_CLLPFound:
.89d8		b2 30		lda ($30)			lda 	(codePtr)
.89da		f0 ba		beq $8996			beq 	_CLExit
.89dc		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.89de		b1 30		lda ($30),y			lda 	(codePtr),y
.89e0		48		pha				pha
.89e1		20 f7 89	jsr $89f7			jsr 	CLListOneLine 				; list line and go forward
.89e4		18		clc				clc
.89e5		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.89e7		65 30		adc $30				adc 	codePtr
.89e9		85 30		sta $30				sta 	codePtr
.89eb		90 02		bcc $89ef			bcc 	_CREExit
.89ed		e6 31		inc $31				inc 	codePtr+1 					; carry
.89ef						_CREExit:
.89ef		68		pla				pla 								; reached ENDPROC ?
.89f0		c9 ac		cmp #$ac			cmp 	#KWD_ENDPROC
.89f2		d0 e4		bne $89d8			bne 	_CLLPFound
.89f4		4c 28 84	jmp $8428			jmp 	WarmStart
.89f7						CLListOneLine:
.89f7		20 de 90	jsr $90de			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.89fa		20 a3 80	jsr $80a3			jsr 	TKListConvertLine 			; convert line into token Buffer
.89fd		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.89ff		a9 2d		lda #$2d			lda 	#(tokenBuffer & $FF)
.8a01		20 92 91	jsr $9192			jsr 	PrintStringXA
.8a04		a9 0d		lda #$0d			lda 	#13 						; new line
.8a06		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8a09		60		rts				rts
.8a0a						CLCompareLineNo:
.8a0a		38		sec				sec
.8a0b		a0 01		ldy #$01			ldy 	#1
.8a0d		b1 30		lda ($30),y			lda 	(codePtr),y
.8a0f		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8a11		85 36		sta $36				sta 	zTemp0
.8a13		c8		iny				iny
.8a14		b1 30		lda ($30),y			lda 	(codePtr),y
.8a16		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8a18		05 36		ora $36				ora 	zTemp0
.8a1a		60		rts				rts
.8a1b						CLIsDigit:
.8a1b		b1 30		lda ($30),y			lda 	(codePtr),y
.8a1d		c9 30		cmp #$30			cmp 	#"0"
.8a1f		90 03		bcc $8a24			bcc	 	_CLIDExitFalse
.8a21		c9 3a		cmp #$3a			cmp 	#"9"+1
.8a23		60		rts				rts
.8a24						_CLIDExitFalse:
.8a24		38		sec				sec
.8a25		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8a26						Command_Load:
.8a26		20 dc 9f	jsr $9fdc			jsr 	EvaluateString 				; file name to load
.8a29		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8a2b		a5 36		lda $36				lda 	zTemp0
.8a2d		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.8a30		b0 44		bcs $8a76			bcs 	CLErrorHandler 				; error, so fail.
.8a32		8d 5e 06	sta $065e			sta 	CurrentFileStream 			; save the reading stream.
.8a35		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.8a38		20 8d 8b	jsr $8b8d			jsr 	NewProgram 					; does the actual NEW.
.8a3b		9c 5d 06	stz $065d			stz 	LoadEOFFlag 				; clear EOF Flag.
.8a3e						_CLLoop:
.8a3e		20 84 8a	jsr $8a84			jsr 	LoadReadLine 				; get next line.
.8a41		f0 10		beq $8a53			beq 	_CLExit 					; end, exit.
.8a43		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.8a46		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.8a49		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.8a4c		f0 f0		beq $8a3e			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8a4e		20 03 84	jsr $8403			jsr 	EditProgramCode 			; do the editing etc.
.8a51		80 eb		bra $8a3e			bra 	_CLLoop
.8a53						_CLExit:
.8a53		ad 5e 06	lda $065e			lda 	CurrentFileStream
.8a56		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8a59						CLComplete:
.8a59		a9 63		lda #$63			lda 	#_CLCMsg & $FF
.8a5b		a2 8a		ldx #$8a			ldx 	#_CLCMsg >> 8
.8a5d		20 92 91	jsr $9192			jsr 	PrintStringXA
.8a60		4c 28 84	jmp $8428			jmp 	WarmStart
.8a63						_CLCMsg:
>8a63		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8a6b		2e 0d 00
.8a6e						CLCloseError:
.8a6e		48		pha				pha
.8a6f		ad 5e 06	lda $065e			lda 	CurrentFileStream
.8a72		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8a75		68		pla				pla
.8a76						CLErrorHandler:
.8a76		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8a78		f0 05		beq $8a7f			beq 	_CLEHNotFound
.8a7a		a9 1a		lda #$1a		lda	#26
.8a7c		4c 39 91	jmp $9139		jmp	ErrorHandler
.8a7f						_CLEHNotFound:
.8a7f		a9 19		lda #$19		lda	#25
.8a81		4c 39 91	jmp $9139		jmp	ErrorHandler
.8a84						LoadReadLine:
.8a84		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8a86		20 a0 8a	jsr $8aa0			jsr 	LoadReadCharacter
.8a89		f0 14		beq $8a9f			beq 	_LRLExit 					; eof ?
.8a8b		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8a8d		90 f5		bcc $8a84			bcc 	LoadReadLine
.8a8f						_LRLLoop:
.8a8f		9d 2a 05	sta $052a,x			sta 	lineBuffer,x 				; write into line buffer
.8a92		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8a95		e8		inx				inx
.8a96		20 a0 8a	jsr $8aa0			jsr 	LoadReadCharacter 			; next line
.8a99		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8a9b		b0 f2		bcs $8a8f			bcs 	_LRLLoop
.8a9d		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8a9f						_LRLExit:
.8a9f		60		rts				rts
.8aa0						LoadReadCharacter:
.8aa0		da		phx				phx
.8aa1		5a		phy				phy
.8aa2		ad 5d 06	lda $065d			lda 	LoadEOFFlag 				; already done EOF.
.8aa5		d0 0c		bne $8ab3			bne 	_LRCIsEOF
.8aa7		20 5d 80	jsr $805d			jsr 	KNLReadByte 				; read a byte
.8aaa		90 09		bcc $8ab5			bcc		_LRCExit 					; read okay.
.8aac		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8aae		d0 be		bne $8a6e			bne 	CLCloseError
.8ab0		ce 5d 06	dec $065d			dec 	LoadEOFFlag
.8ab3						_LRCIsEOF:
.8ab3		a9 00		lda #$00			lda 	#0
.8ab5						_LRCExit:
.8ab5		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8ab7		d0 02		bne $8abb			bne 	_LRCNotTab
.8ab9		a9 20		lda #$20			lda 	#' '
.8abb						_LRCNotTab:
.8abb		c9 0a		cmp #$0a			cmp 	#$0A
.8abd		d0 02		bne $8ac1			bne 	_LRCNotLF
.8abf		a9 0d		lda #$0d			lda 	#$0D
.8ac1						_LRCNotLF:
.8ac1		7a		ply				ply
.8ac2		fa		plx				plx
.8ac3		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8ac5		60		rts				rts
.065d						LoadEOFFlag:
>065d								.fill 	1
.065e						CurrentFileStream:
>065e								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8ac6						Command_LOCAL:
.8ac6		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8ac8		20 d4 8a	jsr $8ad4			jsr 	LocaliseNextTerm 			; convert term to a local.
.8acb		b1 30		lda ($30),y			lda 	(codePtr),y
.8acd		c8		iny				iny
.8ace		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ad0		f0 f4		beq $8ac6			beq 	Command_LOCAL 				; if so, localise another variable.
.8ad2		88		dey				dey 								; unpick pre-get
.8ad3		60		rts				rts
.8ad4						LocaliseNextTerm:
.8ad4		20 87 9a	jsr $9a87			jsr 	EvaluateTerm 				; evaluate the term
.8ad7		b5 50		lda $50,x			lda 	NSStatus,x
.8ad9		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8adb		f0 5c		beq $8b39			beq		_LNTError
.8add		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8adf		85 36		sta $36				sta 	zTemp0
.8ae1		b5 60		lda $60,x			lda 	NSMantissa1,x
.8ae3		85 37		sta $37				sta  	zTemp0+1
.8ae5		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8ae7		29 10		and #$10			and 	#NSBIsString
.8ae9		d0 1e		bne $8b09			bne 	_LNTPushString
.8aeb		5a		phy				phy
.8aec		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8aee						_LNTPushNumLoop:
.8aee		b1 36		lda ($36),y			lda		(zTemp0),y
.8af0		20 42 b1	jsr $b142			jsr 	StackPushByte
.8af3		c8		iny				iny
.8af4		c0 05		cpy #$05			cpy 	#5
.8af6		d0 f6		bne $8aee			bne 	_LNTPushNumLoop
.8af8		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8afa		20 42 b1	jsr $b142			jsr 	StackPushByte
.8afd		a5 37		lda $37				lda 	zTemp0+1
.8aff		20 42 b1	jsr $b142			jsr 	StackPushByte
.8b02		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8b04		20 42 b1	jsr $b142			jsr 	StackPushByte
.8b07		7a		ply				ply
.8b08		60		rts				rts
.8b09						_LNTPushString:
.8b09		5a		phy				phy
.8b0a		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8b0c		85 38		sta $38				sta 	zTemp1
.8b0e		a0 01		ldy #$01			ldy 	#1
.8b10		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b12		85 39		sta $39				sta 	zTemp1+1
.8b14		a0 00		ldy #$00			ldy 	#0 							; output string
.8b16		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8b18		f0 0a		beq $8b24			beq 	_LNTStringOut
.8b1a						_LNTPushStrLoop:
.8b1a		b1 38		lda ($38),y			lda 	(zTemp1),y
.8b1c		f0 06		beq $8b24			beq 	_LNTStringOut
.8b1e		20 42 b1	jsr $b142			jsr 	StackPushByte
.8b21		c8		iny				iny
.8b22		80 f6		bra $8b1a			bra 	_LNTPushStrLoop
.8b24						_LNTStringOut:
.8b24		98		tya				tya									; output length (chars written).
.8b25		20 42 b1	jsr $b142			jsr 	StackPushByte
.8b28		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8b2a		20 42 b1	jsr $b142			jsr 	StackPushByte
.8b2d		b5 60		lda $60,x			lda 	NSMantissa1,x
.8b2f		20 42 b1	jsr $b142			jsr 	StackPushByte
.8b32		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8b34		20 42 b1	jsr $b142			jsr 	StackPushByte
.8b37		7a		ply				ply
.8b38		60		rts				rts
.8b39						_LNTError:
.8b39		4c 02 a2	jmp $a202			jmp 	SyntaxError
.8b3c						LocalPopValue:
.8b3c		20 5a b1	jsr $b15a			jsr 	StackPopByte
.8b3f		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8b41		d0 17		bne $8b5a			bne 	_LPVString
.8b43		20 5a b1	jsr $b15a			jsr 	StackPopByte 				; address
.8b46		85 37		sta $37				sta 	zTemp0+1
.8b48		20 5a b1	jsr $b15a			jsr 	StackPopByte
.8b4b		85 36		sta $36				sta 	zTemp0
.8b4d		5a		phy				phy
.8b4e		a0 04		ldy #$04			ldy 	#4 							; copy back
.8b50						_LPVNumberCopy:
.8b50		20 5a b1	jsr $b15a			jsr 	StackPopByte
.8b53		91 36		sta ($36),y			sta 	(zTemp0),y
.8b55		88		dey				dey
.8b56		10 f8		bpl $8b50			bpl 	_LPVNumberCopy
.8b58		7a		ply				ply 								; and complete
.8b59		60		rts				rts
.8b5a						_LPVString:
.8b5a		20 5a b1	jsr $b15a			jsr 	StackPopByte 				; address of record copied to zTemp0
.8b5d		85 37		sta $37				sta 	zTemp0+1
.8b5f		20 5a b1	jsr $b15a			jsr 	StackPopByte
.8b62		85 36		sta $36				sta 	zTemp0
.8b64		5a		phy				phy
.8b65		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8b67		85 38		sta $38				sta 	zTemp1
.8b69		a0 01		ldy #$01			ldy 	#1
.8b6b		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b6d		85 39		sta $39				sta 	zTemp1+1
.8b6f		20 5a b1	jsr $b15a			jsr 	StackPopByte 				; # chars to get => y
.8b72		a8		tay				tay
.8b73		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8b75		f0 0e		beq $8b85			beq 	_LPVStringCopied
.8b77		a9 00		lda #$00			lda 	#0 							; NULL on end
.8b79		91 38		sta ($38),y			sta 	(zTemp1),y
.8b7b						_LPVStringCopy:
.8b7b		88		dey				dey
.8b7c		30 07		bmi $8b85			bmi 	_LPVStringCopied
.8b7e		20 5a b1	jsr $b15a			jsr 	StackPopByte
.8b81		91 38		sta ($38),y			sta 	(zTemp1),y
.8b83		80 f6		bra $8b7b			bra 	_LPVStringCopy
.8b85						_LPVStringCopied:
.8b85		fa		plx				plx
.8b86		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8b87						NewCommand:
.8b87		20 8d 8b	jsr $8b8d			jsr 	NewProgram 					; does the actual NEW.
.8b8a		4c 28 84	jmp $8428			jmp 	WarmStart 					; and warm starts straight away.
.8b8d						NewProgram:
.8b8d		20 f1 a7	jsr $a7f1			jsr 	MemoryNew
.8b90		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8b93		20 be 84	jsr $84be			jsr 	ClearCommand 				; clear everything.
.8b96		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8b97						PokeBCommand:
.8b97		a9 01		lda #$01			lda 	#1
.8b99		80 0c		bra $8ba7			bra 	PokeCommand
.8b9b						PokeWCommand:
.8b9b		a9 02		lda #$02			lda 	#2
.8b9d		80 08		bra $8ba7			bra 	PokeCommand
.8b9f						PokeLCommand:
.8b9f		a9 03		lda #$03			lda 	#3
.8ba1		80 04		bra $8ba7			bra 	PokeCommand
.8ba3						PokeDCommand:
.8ba3		a9 04		lda #$04			lda 	#4
.8ba5		80 00		bra $8ba7			bra 	PokeCommand
.8ba7						PokeCommand:
.8ba7		48		pha				pha 								; save count on stack
.8ba8		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8baa		20 04 a0	jsr $a004			jsr		Evaluate16BitInteger 		; address
.8bad		20 28 91	jsr $9128			jsr 	CheckComma
.8bb0		e8		inx				inx
.8bb1		20 f1 9f	jsr $9ff1			jsr		EvaluateInteger 			; data
.8bb4		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8bb6		85 36		sta $36				sta 	zTemp0
.8bb8		a5 60		lda $60				lda 	NSMantissa1
.8bba		85 37		sta $37				sta 	zTemp0+1
.8bbc		68		pla				pla 								; count -> zTemp1
.8bbd		85 38		sta $38				sta 	zTemp1
.8bbf		5a		phy				phy 								; save Y position.
.8bc0		a0 00		ldy #$00			ldy 	#0 							; index to write
.8bc2		a2 00		ldx #$00			ldx 	#0 							; index to read
.8bc4						_PCLoop:
.8bc4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8bc6		91 36		sta ($36),y			sta 	(zTemp0),y
.8bc8		c8		iny				iny 								; next byte to write
.8bc9		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8bca		18		clc				clc
.8bcb		69 08		adc #$08			adc 	#MathStackSize
.8bcd		aa		tax				tax
.8bce		c6 38		dec $38				dec 	zTemp1 						; done them all
.8bd0		d0 f2		bne $8bc4			bne 	_PCLoop
.8bd2		7a		ply				ply 								; restore position.
.8bd3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8bd4						CallProcedure:
.8bd4		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8bd6		b1 30		lda ($30),y			lda 	(codePtr),y
.8bd8		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8bda		f0 0c		beq $8be8			beq 	_CPEndParam
.8bdc						_CPParamLoop:
.8bdc		20 c9 9f	jsr $9fc9			jsr 	EvaluateValue 				; get parameter onto stack
.8bdf		e8		inx				inx 								; bump next stack
.8be0		b1 30		lda ($30),y			lda 	(codePtr),y
.8be2		c8		iny				iny
.8be3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8be5		f0 f5		beq $8bdc			beq 	_CPParamLoop
.8be7		88		dey				dey 								; unpick.
.8be8						_CPEndParam:
.8be8		8e 16 04	stx $0416			stx 	lastParameter 				; save the last parameters index.
.8beb		c8		iny				iny									; skip right bracket
.8bec		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8bee		20 63 b1	jsr $b163			jsr 	StackOpen
.8bf1		20 a8 b1	jsr $b1a8			jsr 	STKSaveCodePosition 		; save loop position
.8bf4		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8bf6		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8bf8		a5 60		lda $60				lda 	NSMantissa1
.8bfa		85 37		sta $37				sta 	zTemp0+1
.8bfc		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8bfe		b2 36		lda ($36)			lda 	(zTemp0)
.8c00		85 30		sta $30				sta 	safePtr
.8c02		b1 36		lda ($36),y			lda 	(zTemp0),y
.8c04		85 31		sta $31				sta 	safePtr+1
.8c06		c8		iny				iny
.8c07		b1 36		lda ($36),y			lda 	(zTemp0),y
.8c09		85 32		sta $32				sta 	safePtr+2
.8c0b		c8		iny				iny
.8c0c		b1 36		lda ($36),y			lda 	(zTemp0),y
.8c0e		85 33		sta $33				sta 	safePtr+3
.8c10		c8		iny				iny 								; get Y offset -> Y
.8c11		b1 36		lda ($36),y			lda 	(zTemp0),y
.8c13		a8		tay				tay
.8c14		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8c16		ec 16 04	cpx $0416			cpx	 	lastParameter 				; check zero parameters at the start
.8c19		f0 13		beq $8c2e			beq 	_ParamExit 					; if so, exit.
.8c1b						_ParamExtract:
.8c1b		ca		dex				dex 								; put a local term on the level before
.8c1c		20 d4 8a	jsr $8ad4			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8c1f		20 09 89	jsr $8909			jsr 	AssignVariable 				; assign stacked value to the variable.
.8c22		e8		inx				inx 								; advance to next parameter to do.
.8c23		e8		inx				inx
.8c24		ec 16 04	cpx $0416			cpx 	lastParameter 				; are we done ?
.8c27		f0 05		beq $8c2e			beq 	_ParamExit
.8c29		20 28 91	jsr $9128			jsr 	CheckComma 					; comma seperating parameters
.8c2c		80 ed		bra $8c1b			bra 	_ParamExtract
.8c2e						_ParamExit:
.8c2e		20 20 91	jsr $9120			jsr 	CheckRightBracket 			; check )
.8c31		60		rts				rts 								; and continue from here
.8c32						Command_ENDPROC:
.8c32		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8c34		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8c36		20 90 b1	jsr $b190			jsr 	StackCheckFrame
.8c39		20 b9 b1	jsr $b1b9			jsr 	STKLoadCodePosition 		; restore code position
.8c3c		20 82 b1	jsr $b182			jsr 	StackClose
.8c3f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8c40						Command_Read:
.8c40		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8c42		20 87 9a	jsr $9a87			jsr 	EvaluateTerm
.8c45		b5 50		lda $50,x			lda 	NSStatus,x
.8c47		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8c49		f0 4f		beq $8c9a			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8c4b		20 e3 8c	jsr $8ce3			jsr 	SwapDataCodePtrs 			; swap code and data
.8c4e		ad 1c 04	lda $041c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8c51		d0 25		bne $8c78			bne 	_CRContinueData  			; forward for the next one.
.8c53		b2 30		lda ($30)			lda 	(codePtr)
.8c55		f0 1c		beq $8c73			beq 	_CRNoData
.8c57						_CRKeepSearching:
.8c57		a9 b9		lda #$b9			lda 	#KWD_DATA 					; scan for instruction
.8c59		a2 80		ldx #$80			ldx 	#KWC_EOL
.8c5b		20 7b 90	jsr $907b			jsr 	ScanForward
.8c5e		c9 b9		cmp #$b9			cmp 	#KWD_DATA 					; found data ?
.8c60		f0 16		beq $8c78			beq 	_CRHaveData 				; found it
.8c62		18		clc				clc
.8c63		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c65		65 30		adc $30				adc 	codePtr
.8c67		85 30		sta $30				sta 	codePtr
.8c69		90 02		bcc $8c6d			bcc 	_CREExit
.8c6b		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c6d						_CREExit:
.8c6d		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8c6f		b2 30		lda ($30)			lda 	(codePtr)
.8c71		d0 e4		bne $8c57			bne 	_CRKeepSearching
.8c73						_CRNoData:
.8c73		a9 0b		lda #$0b		lda	#11
.8c75		4c 39 91	jmp $9139		jmp	ErrorHandler
.8c78						_CRHaveData:
.8c78						_CRContinueData:
.8c78		a2 01		ldx #$01			ldx 	#1
.8c7a		20 c9 9f	jsr $9fc9			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8c7d		ca		dex				dex
.8c7e		20 09 89	jsr $8909			jsr		AssignVariable 				; do the assignment
.8c81		9c 1c 04	stz $041c			stz 	inDataStatement 			; clear in data flag
.8c84		b1 30		lda ($30),y			lda 	(codePtr),y
.8c86		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8c88		d0 04		bne $8c8e			bne 	_CRSwapBack
.8c8a		c8		iny				iny 								; consume comma
.8c8b		ee 1c 04	inc $041c			inc 	inDataStatement 			; set in data statement currently.
.8c8e						_CRSwapBack:
.8c8e		20 e3 8c	jsr $8ce3			jsr 	SwapDataCodePtrs			; swap them back.
.8c91		b1 30		lda ($30),y			lda 	(codePtr),y
.8c93		c8		iny				iny
.8c94		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c96		f0 a8		beq $8c40			beq 	Command_Read 				; if so go round again.
.8c98		88		dey				dey 								; unpick get.
.8c99		60		rts				rts
.8c9a						_CRSyntax:
.8c9a		4c 02 a2	jmp $a202			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8c9d						RemCommand:
.8c9d		b1 30		lda ($30),y			lda 	(codePtr),y
.8c9f		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8ca1		d0 06		bne $8ca9			bne 	_RMExit
.8ca3		c8		iny				iny 								; point to offset
.8ca4		98		tya				tya 								; A = offset position
.8ca5		38		sec				sec 								; add size +1 hence SEC
.8ca6		71 30		adc ($30),y			adc 	(codePtr),y
.8ca8		a8		tay				tay 								; make current position.
.8ca9						_RMExit:
.8ca9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8caa						Command_REPEAT:
.8caa		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8cac		20 63 b1	jsr $b163			jsr 	StackOpen
.8caf		20 a8 b1	jsr $b1a8			jsr 	STKSaveCodePosition 		; save loop position
.8cb2		60		rts				rts
.8cb3						Command_UNTIL:
.8cb3		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8cb5		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8cb7		20 90 b1	jsr $b190			jsr 	StackCheckFrame
.8cba		a2 00		ldx #$00			ldx 	#0
.8cbc		20 d2 9f	jsr $9fd2			jsr 	EvaluateNumber 				; work out the number
.8cbf		20 a6 a0	jsr $a0a6			jsr 	NSMIsZero 					; check if zero
.8cc2		f0 04		beq $8cc8			beq 	_CULoopBack 				; if so keep looping
.8cc4		20 82 b1	jsr $b182			jsr 	StackClose		 			; return
.8cc7		60		rts				rts
.8cc8						_CULoopBack:
.8cc8		20 b9 b1	jsr $b1b9			jsr 	STKLoadCodePosition 		; loop back
.8ccb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8ccc						Command_Restore:
.8ccc		20 e3 8c	jsr $8ce3			jsr 	SwapDataCodePtrs 			; swap code and data
.8ccf		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8cd1		85 30		sta $30				sta 	codePtr
.8cd3		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8cd5		85 31		sta $31				sta 	codePtr+1
.8cd7		20 e3 8c	jsr $8ce3			jsr 	SwapDataCodePtrs 			; put them back
.8cda		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8cdc		8d 1b 04	sta $041b			sta 	dataPointer+4   			; (read checks not EOF)
.8cdf		9c 1c 04	stz $041c			stz 	inDataStatement 			; not in data statement
.8ce2		60		rts				rts
.8ce3						SwapDataCodePtrs:
.8ce3		da		phx				phx
.8ce4		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8ce6						_SDCPLoop:
.8ce6		b5 30		lda $30,x			lda 	safePtr,x
.8ce8		48		pha				pha
.8ce9		bd 17 04	lda $0417,x			lda 	dataPointer,x
.8cec		95 30		sta $30,x			sta 	safePtr,x
.8cee		68		pla				pla
.8cef		9d 17 04	sta $0417,x			sta 	dataPointer,x
.8cf2		ca		dex				dex
.8cf3		10 f1		bpl $8ce6			bpl 	_SDCPLoop
.8cf5		ad 1b 04	lda $041b			lda 	dataPointer+4 				; swap Y position over.
.8cf8		8c 1b 04	sty $041b			sty 	dataPointer+4
.8cfb		a8		tay				tay
.8cfc		fa		plx				plx
.8cfd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8cfe						EOLCommand:
.8cfe		18		clc				clc
.8cff		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8d01		65 30		adc $30				adc 	codePtr
.8d03		85 30		sta $30				sta 	codePtr
.8d05		90 02		bcc $8d09			bcc 	_CREExit
.8d07		e6 31		inc $31				inc 	codePtr+1 					; carry
.8d09						_CREExit:
.8d09		80 0b		bra $8d16			bra 	RunNewLine
.8d0b						CommandRUN:
.8d0b		20 be 84	jsr $84be			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8d0e		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8d10		85 30		sta $30				sta 	codePtr
.8d12		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8d14		85 31		sta $31				sta 	codePtr+1
.8d16						RunNewLine:
.8d16		b2 30		lda ($30)			lda 	(codePtr)
.8d18		f0 78		beq $8d92			beq 	CRNoProgram         		; no then END.
.8d1a		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8d1c		9a		txs				txs
.8d1d						RUNCodePointerLine:
.8d1d		a0 02		ldy #$02			ldy 	#2 							; start of program
.8d1f						_CRIncMainLoop:
.8d1f		0e 13 04	asl $0413			asl 	breakCheck 					; clears 1 time in 8
.8d22		d0 1f		bne $8d43			bne 	_CRNoBreakCheck
.8d24		ce 13 04	dec $0413			dec	 	breakCheck 					; set it back to $FF
.8d27		20 e1 ff	jsr $ffe1			jsr 	$FFE1
.8d2a		f0 61		beq $8d8d			beq 	_CRBreak
.8d2c		a5 01		lda $01				lda 	1 							; save I/O 0
.8d2e		48		pha				pha
.8d2f		64 01		stz $01				stz 	1 							; access I/O Page 0
.8d31		38		sec				sec 								; calculate timer - LastTick
.8d32		ad 59 d6	lda $d659			lda 	$D659
.8d35		cd 5f 06	cmp $065f			cmp 	LastTick
.8d38		f0 06		beq $8d40			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.8d3a		8d 5f 06	sta $065f			sta 	LastTick 					; update last timer
.8d3d		20 af a0	jsr $a0af			jsr 	TickHandler 							; go do the code.
.8d40						_NoFireTick:
.8d40		68		pla				pla 								; restore I/O 0
.8d41		85 01		sta $01				sta 	1
.8d43						_CRNoBreakCheck:
.8d43		c8		iny				iny									; next token
.8d44						_CRMainLoop:
.8d44		9c 10 04	stz $0410			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8d47		b1 30		lda ($30),y			lda 	(codePtr),y
.8d49		10 10		bpl $8d5b			bpl 	_CRNotKeyword				; not a token.
.8d4b		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8d4d		b0 04		bcs $8d53			bcs 	_CRIsKeyword
.8d4f		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8d51		b0 34		bcs $8d87			bcs		_CRSyntaxError
.8d53						_CRIsKeyword:
.8d53		c8		iny				iny 								; consume command
.8d54		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8d55		aa		tax				tax 								; put in X for vector jump
.8d56		20 8a 8d	jsr $8d8a			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8d59		80 e9		bra $8d44			bra 	_CRMainLoop 				; and loop round
.8d5b						_CRNotKeyword:
.8d5b		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8d5d		f0 c0		beq $8d1f			beq 	_CRIncMainLoop
.8d5f		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8d61		90 05		bcc $8d68			bcc 	_CRNotVariable
.8d63						_CRGoLet:
.8d63		20 d0 88	jsr $88d0			jsr 	LetCommand
.8d66		80 dc		bra $8d44			bra 	_CRMainLoop
.8d68						_CRNotVariable:
.8d68		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8d6a		f0 f7		beq $8d63			beq 	_CRGoLet
.8d6c		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8d6e		f0 f3		beq $8d63			beq 	_CRGoLet
.8d70		c9 21		cmp #$21			cmp 	#KWD_PLING
.8d72		f0 ef		beq $8d63			beq 	_CRGoLet
.8d74		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8d76		f0 09		beq $8d81			beq 	_CRGoRem
.8d78		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8d7a		d0 0b		bne $8d87			bne 	_CRSyntaxError
.8d7c		20 9a 82	jsr $829a			jsr 	LabelHere
.8d7f		80 c3		bra $8d44			bra 	_CRMainLoop
.8d81						_CRGoRem:
.8d81		c8		iny				iny
.8d82		20 9d 8c	jsr $8c9d			jsr 	RemCommand
.8d85		80 bd		bra $8d44			bra 	_CRMainLoop
.8d87						_CRSyntaxError:
.8d87		4c 02 a2	jmp $a202			jmp 	SyntaxError
.8d8a						_CRCallVector0:
.8d8a		7c 28 8e	jmp ($8e28,x)			jmp 	(VectorSet0,x)
.8d8d						_CRBreak:
.8d8d		a9 01		lda #$01		lda	#1
.8d8f		4c 39 91	jmp $9139		jmp	ErrorHandler
.8d92						CRNoProgram:
.8d92		4c 66 86	jmp $8666			jmp 	EndCommand
.8d95						Shift1Command:
.8d95		b1 30		lda ($30),y			lda 	(codePtr),y
.8d97		c8		iny				iny
.8d98		0a		asl a				asl 	a
.8d99		aa		tax				tax
.8d9a		7c dc 8e	jmp ($8edc,x)			jmp 	(VectorSet1,x)
.8d9d						Shift2Command:
.8d9d		b1 30		lda ($30),y			lda 	(codePtr),y
.8d9f		c8		iny				iny
.8da0		0a		asl a				asl 	a
.8da1		aa		tax				tax
.8da2		7c 18 8f	jmp ($8f18,x)			jmp 	(VectorSet2,x)
.8da5						Unused1:
.8da5						Unused2:
.8da5						Unused3:
.8da5						Unused4:
.8da5		4c 02 a2	jmp $a202			jmp 	SyntaxError
>8da8								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8da8						VectorSetPunc:
>8da8		f1 93					.word	ShiftLeft                        ; $00 <<
>8daa		dc 91					.word	BinaryCompareLessEqual           ; $01 <=
>8dac		d2 91					.word	BinaryCompareNotEqual            ; $02 <>
>8dae		02 a2					.word	SyntaxError                      ; $03 !!3
>8db0		02 a2					.word	SyntaxError                      ; $04 ><
>8db2		e6 91					.word	BinaryCompareGreaterEqual        ; $05 >=
>8db4		f4 93					.word	ShiftRight                       ; $06 >>
>8db6		02 a2					.word	SyntaxError                      ; $07 !!7
>8db8		02 a2					.word	SyntaxError                      ; $08 !!8
>8dba		02 a2					.word	SyntaxError                      ; $09 !!9
>8dbc		02 a2					.word	SyntaxError                      ; $0a !!10
>8dbe		02 a2					.word	SyntaxError                      ; $0b !!11
>8dc0		02 a2					.word	SyntaxError                      ; $0c !!12
>8dc2		02 a2					.word	SyntaxError                      ; $0d !!13
>8dc4		02 a2					.word	SyntaxError                      ; $0e !!14
>8dc6		02 a2					.word	SyntaxError                      ; $0f !!15
>8dc8		02 a2					.word	SyntaxError                      ; $10 @
>8dca		02 a2					.word	SyntaxError                      ; $11 !!17
>8dcc		02 a2					.word	SyntaxError                      ; $12 !!18
>8dce		02 a2					.word	SyntaxError                      ; $13 [
>8dd0		9d 92					.word	IntegerDivide                    ; $14 \
>8dd2		02 a2					.word	SyntaxError                      ; $15 ]
>8dd4		2f 95					.word	EorInteger                       ; $16 ^
>8dd6		02 a2					.word	SyntaxError                      ; $17 _
>8dd8		02 a2					.word	SyntaxError                      ; $18 `
>8dda		02 a2					.word	SyntaxError                      ; $19 !!25
>8ddc		02 a2					.word	SyntaxError                      ; $1a !!26
>8dde		02 a2					.word	SyntaxError                      ; $1b {
>8de0		fa 94					.word	OraInteger                       ; $1c |
>8de2		02 a2					.word	SyntaxError                      ; $1d }
>8de4		02 a2					.word	SyntaxError                      ; $1e ~
>8de6		02 a2					.word	SyntaxError                      ; $1f [7m<7F>[m
>8de8		02 a2					.word	SyntaxError                      ; $20
>8dea		64 95					.word	WordIndirect                     ; $21 !
>8dec		02 a2					.word	SyntaxError                      ; $22 "
>8dee		02 a2					.word	SyntaxError                      ; $23 #
>8df0		02 a2					.word	SyntaxError                      ; $24 $
>8df2		de 92					.word	IntegerModulus                   ; $25 %
>8df4		c5 94					.word	AndInteger                       ; $26 &
>8df6		02 a2					.word	SyntaxError                      ; $27 '
>8df8		02 a2					.word	SyntaxError                      ; $28 (
>8dfa		02 a2					.word	SyntaxError                      ; $29 )
>8dfc		4c 93					.word	MulInteger                       ; $2a *
>8dfe		67 94					.word	AddInteger                       ; $2b +
>8e00		02 a2					.word	SyntaxError                      ; $2c ,
>8e02		a0 94					.word	SubInteger                       ; $2d -
>8e04		02 a2					.word	SyntaxError                      ; $2e .
>8e06		1e 97					.word	FDivideCommand                   ; $2f /
>8e08		02 a2					.word	SyntaxError                      ; $30 0
>8e0a		02 a2					.word	SyntaxError                      ; $31 1
>8e0c		02 a2					.word	SyntaxError                      ; $32 2
>8e0e		02 a2					.word	SyntaxError                      ; $33 3
>8e10		02 a2					.word	SyntaxError                      ; $34 4
>8e12		02 a2					.word	SyntaxError                      ; $35 5
>8e14		02 a2					.word	SyntaxError                      ; $36 6
>8e16		02 a2					.word	SyntaxError                      ; $37 7
>8e18		02 a2					.word	SyntaxError                      ; $38 8
>8e1a		02 a2					.word	SyntaxError                      ; $39 9
>8e1c		02 a2					.word	SyntaxError                      ; $3a :
>8e1e		02 a2					.word	SyntaxError                      ; $3b ;
>8e20		be 91					.word	BinaryCompareLess                ; $3c <
>8e22		b4 91					.word	BinaryCompareEqual               ; $3d =
>8e24		c8 91					.word	BinaryCompareGreater             ; $3e >
>8e26		86 95					.word	ByteIndirect                     ; $3f ?
.8e28						VectorSet0:
>8e28		fe 8c					.word	EOLCommand                       ; $80 !0:EOF
>8e2a		95 8d					.word	Shift1Command                    ; $81 !1:SH1
>8e2c		9d 8d					.word	Shift2Command                    ; $82 !2:SH2
>8e2e		08 9c					.word	AbsUnary                         ; $83 ABS(
>8e30		16 9c					.word	AllocUnary                       ; $84 ALLOC(
>8e32		86 9c					.word	AscUnary                         ; $85 ASC(
>8e34		6a 9e					.word	ChrUnary                         ; $86 CHR$(
>8e36		85 a6					.word	UnaryEvent                       ; $87 EVENT(
>8e38		b0 91					.word	UnaryFalse                       ; $88 FALSE
>8e3a		93 9c					.word	FracUnary                        ; $89 FRAC(
>8e3c		02 a2					.word	SyntaxError                      ; $8a GETDATE$(
>8e3e		02 a2					.word	SyntaxError                      ; $8b GETTIME$(
>8e40		0f a6					.word	UnaryHit                         ; $8c HIT(
>8e42		a8 9c					.word	IntUnary                         ; $8d INT(
>8e44		29 9e					.word	IsValUnary                       ; $8e ISVAL(
>8e46		09 a7					.word	UnaryJoyB                        ; $8f JOYB(
>8e48		e2 a6					.word	UnaryJoyX                        ; $90 JOYX(
>8e4a		e5 a6					.word	UnaryJoyY                        ; $91 JOYY(
>8e4c		3d 9f					.word	Unary_Left                       ; $92 LEFT$(
>8e4e		b9 9c					.word	LenUnary                         ; $93 LEN(
>8e50		d7 9c					.word	Unary_Max                        ; $94 MAX(
>8e52		5f 9f					.word	Unary_Mid                        ; $95 MID$(
>8e54		d3 9c					.word	Unary_Min                        ; $96 MIN(
>8e56		22 9d					.word	Unary_Not                        ; $97 NOT(
>8e58		35 9d					.word	PeekByteUnary                    ; $98 PEEK(
>8e5a		41 9d					.word	PeekDUnary                       ; $99 PEEKD(
>8e5c		3d 9d					.word	PeekLUnary                       ; $9a PEEKL(
>8e5e		39 9d					.word	PeekWUnary                       ; $9b PEEKW(
>8e60		c0 b0					.word	UnaryPlaying                     ; $9c PLAYING(
>8e62		6e 9d					.word	Unary_Random                     ; $9d RANDOM(
>8e64		4a 9f					.word	Unary_Right                      ; $9e RIGHT$(
>8e66		8b 9d					.word	Unary_Rnd                        ; $9f RND(
>8e68		01 9e					.word	SgnUnary                         ; $a0 SGN(
>8e6a		7c 9e					.word	SpcUnary                         ; $a1 SPC(
>8e6c		97 9e					.word	Unary_Str                        ; $a2 STR$(
>8e6e		1b a7					.word	UnaryTimer                       ; $a3 TIMER(
>8e70		a5 91					.word	UnaryTrue                        ; $a4 TRUE
>8e72		1f 9e					.word	ValUnary                         ; $a5 VAL(
>8e74		69 86					.word	ForCommand                       ; $a6 FOR
>8e76		ac 87					.word	IfCommand                        ; $a7 IF
>8e78		a5 8d					.word	Unused1                          ; $a8 PROC
>8e7a		aa 8c					.word	Command_REPEAT                   ; $a9 REPEAT
>8e7c		f1 90					.word	Command_WHILE                    ; $aa WHILE
>8e7e		d5 87					.word	EndIf                            ; $ab ENDIF
>8e80		32 8c					.word	Command_ENDPROC                  ; $ac ENDPROC
>8e82		1b 87					.word	NextCommand                      ; $ad NEXT
>8e84		a5 8d					.word	Unused4                          ; $ae THEN
>8e86		b3 8c					.word	Command_UNTIL                    ; $af UNTIL
>8e88		12 91					.word	Command_WEND                     ; $b0 WEND
>8e8a		02 a2					.word	SyntaxError                      ; $b1 BY
>8e8c		89 84					.word	CallCommand                      ; $b2 CALL
>8e8e		c3 a3					.word	CircleCommand                    ; $b3 CIRCLE
>8e90		be 84					.word	ClearCommand                     ; $b4 CLEAR
>8e92		16 85					.word	ClearScreen                      ; $b5 CLS
>8e94		02 a2					.word	SyntaxError                      ; $b6 COLOR
>8e96		02 a2					.word	SyntaxError                      ; $b7 COLOUR
>8e98		db 87					.word	Command_CPrint                   ; $b8 CPRINT
>8e9a		1e 85					.word	Command_Data                     ; $b9 DATA
>8e9c		26 85					.word	DimCommand                       ; $ba DIM
>8e9e		a5 8d					.word	Unused3                          ; $bb DOWNTO
>8ea0		ce 87					.word	ElseCode                         ; $bc ELSE
>8ea2		02 a2					.word	SyntaxError                      ; $bd FROM
>8ea4		e2 a5					.word	GfxCommand                       ; $be GFX
>8ea6		74 87					.word	Command_GOSUB                    ; $bf GOSUB
>8ea8		92 87					.word	GotoCommand                      ; $c0 GOTO
>8eaa		02 a2					.word	SyntaxError                      ; $c1 HERE
>8eac		ec a3					.word	ImageCommand                     ; $c2 IMAGE
>8eae		d6 87					.word	Command_Input                    ; $c3 INPUT
>8eb0		d0 88					.word	LetCommand                       ; $c4 LET
>8eb2		3e a4					.word	LineCommand                      ; $c5 LINE
>8eb4		c6 8a					.word	Command_LOCAL                    ; $c6 LOCAL
>8eb6		02 a2					.word	SyntaxError                      ; $c7 OFF
>8eb8		02 a2					.word	SyntaxError                      ; $c8 ON
>8eba		02 a2					.word	SyntaxError                      ; $c9 OUTLINE
>8ebc		33 a6					.word	PaletteCommand                   ; $ca PALETTE
>8ebe		37 a4					.word	PlotCommand                      ; $cb PLOT
>8ec0		97 8b					.word	PokeBCommand                     ; $cc POKE
>8ec2		a3 8b					.word	PokeDCommand                     ; $cd POKED
>8ec4		9f 8b					.word	PokeLCommand                     ; $ce POKEL
>8ec6		9b 8b					.word	PokeWCommand                     ; $cf POKEW
>8ec8		e2 87					.word	Command_Print                    ; $d0 PRINT
>8eca		40 8c					.word	Command_Read                     ; $d1 READ
>8ecc		bf a3					.word	RectangleCommand                 ; $d2 RECT
>8ece		9d 8c					.word	RemCommand                       ; $d3 REM
>8ed0		84 87					.word	Command_RETURN                   ; $d4 RETURN
>8ed2		02 a2					.word	SyntaxError                      ; $d5 SOLID
>8ed4		dc b0					.word	SoundCommand                     ; $d6 SOUND
>8ed6		ce a3					.word	SpriteCommand                    ; $d7 SPRITE
>8ed8		08 a4					.word	TextCommand                      ; $d8 TEXT
>8eda		a5 8d					.word	Unused2                          ; $d9 TO
.8edc						VectorSet1:
>8edc		02 a2					.word	SyntaxError                      ; $80 !0:EOF
>8ede		02 a2					.word	SyntaxError                      ; $81 !1:SH1
>8ee0		02 a2					.word	SyntaxError                      ; $82 !2:SH2
>8ee2		5d 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8ee4		79 84					.word	AssertCommand                    ; $84 ASSERT
>8ee6		82 a5					.word	BitmapCtrl                       ; $85 BITMAP
>8ee8		02 a2					.word	SyntaxError                      ; $86 BLOAD
>8eea		02 a2					.word	SyntaxError                      ; $87 BSAVE
>8eec		e3 85					.word	Command_Dir                      ; $88 DIR
>8eee		5f 86					.word	Command_Drive                    ; $89 DRIVE
>8ef0		66 86					.word	EndCommand                       ; $8a END
>8ef2		94 b0					.word	Explode                          ; $8b EXPLODE
>8ef4		02 a2					.word	SyntaxError                      ; $8c GO
>8ef6		02 a2					.word	SyntaxError                      ; $8d HIMEM
>8ef8		20 89					.word	Command_List                     ; $8e LIST
>8efa		26 8a					.word	Command_Load                     ; $8f LOAD
>8efc		87 8b					.word	NewCommand                       ; $90 NEW
>8efe		70 b0					.word	PingCommand                      ; $91 PING
>8f00		cc 8c					.word	Command_Restore                  ; $92 RESTORE
>8f02		0b 8d					.word	CommandRUN                       ; $93 RUN
>8f04		a0 8f					.word	Command_Save                     ; $94 SAVE
>8f06		02 a2					.word	SyntaxError                      ; $95 SETDATE
>8f08		02 a2					.word	SyntaxError                      ; $96 SETTIME
>8f0a		88 b0					.word	ShootCommand                     ; $97 SHOOT
>8f0c		c7 a5					.word	SpritesCtrl                      ; $98 SPRITES
>8f0e		24 90					.word	StopCommand                      ; $99 STOP
>8f10		9b b2					.word	Command_VERIFY                   ; $9a VERIFY
>8f12		7c a6					.word	XGoCommand                       ; $9b XGO
>8f14		73 a6					.word	XLoadCommand                     ; $9c XLOAD
>8f16		7c b0					.word	ZapCommand                       ; $9d ZAP
.8f18						VectorSet2:
>8f18		02 a2					.word	SyntaxError                      ; $80 !0:EOF
>8f1a		02 a2					.word	SyntaxError                      ; $81 !1:SH1
>8f1c		02 a2					.word	SyntaxError                      ; $82 !2:SH2
>8f1e		c1 a0					.word	Assemble_adc                     ; $83 ADC
>8f20		b9 a0					.word	Assemble_and                     ; $84 AND
>8f22		d5 a0					.word	Assemble_asl                     ; $85 ASL
>8f24		3f a1					.word	Assemble_bcc                     ; $86 BCC
>8f26		43 a1					.word	Assemble_bcs                     ; $87 BCS
>8f28		4b a1					.word	Assemble_beq                     ; $88 BEQ
>8f2a		02 a1					.word	Assemble_bit                     ; $89 BIT
>8f2c		33 a1					.word	Assemble_bmi                     ; $8a BMI
>8f2e		47 a1					.word	Assemble_bne                     ; $8b BNE
>8f30		2f a1					.word	Assemble_bpl                     ; $8c BPL
>8f32		4f a1					.word	Assemble_bra                     ; $8d BRA
>8f34		53 a1					.word	Assemble_brk                     ; $8e BRK
>8f36		37 a1					.word	Assemble_bvc                     ; $8f BVC
>8f38		3b a1					.word	Assemble_bvs                     ; $90 BVS
>8f3a		5b a1					.word	Assemble_clc                     ; $91 CLC
>8f3c		af a1					.word	Assemble_cld                     ; $92 CLD
>8f3e		6f a1					.word	Assemble_cli                     ; $93 CLI
>8f40		9f a1					.word	Assemble_clv                     ; $94 CLV
>8f42		cd a0					.word	Assemble_cmp                     ; $95 CMP
>8f44		16 a1					.word	Assemble_cpx                     ; $96 CPX
>8f46		11 a1					.word	Assemble_cpy                     ; $97 CPY
>8f48		f3 a0					.word	Assemble_dec                     ; $98 DEC
>8f4a		ab a1					.word	Assemble_dex                     ; $99 DEX
>8f4c		87 a1					.word	Assemble_dey                     ; $9a DEY
>8f4e		bd a0					.word	Assemble_eor                     ; $9b EOR
>8f50		f8 a0					.word	Assemble_inc                     ; $9c INC
>8f52		bb a1					.word	Assemble_inx                     ; $9d INX
>8f54		a7 a1					.word	Assemble_iny                     ; $9e INY
>8f56		2a a1					.word	Assemble_jmp                     ; $9f JMP
>8f58		25 a1					.word	Assemble_jsr                     ; $a0 JSR
>8f5a		c9 a0					.word	Assemble_lda                     ; $a1 LDA
>8f5c		ee a0					.word	Assemble_ldx                     ; $a2 LDX
>8f5e		0c a1					.word	Assemble_ldy                     ; $a3 LDY
>8f60		df a0					.word	Assemble_lsr                     ; $a4 LSR
>8f62		bf a1					.word	Assemble_nop                     ; $a5 NOP
>8f64		b5 a0					.word	Assemble_ora                     ; $a6 ORA
>8f66		6b a1					.word	Assemble_pha                     ; $a7 PHA
>8f68		57 a1					.word	Assemble_php                     ; $a8 PHP
>8f6a		b3 a1					.word	Assemble_phx                     ; $a9 PHX
>8f6c		73 a1					.word	Assemble_phy                     ; $aa PHY
>8f6e		7b a1					.word	Assemble_pla                     ; $ab PLA
>8f70		5f a1					.word	Assemble_plp                     ; $ac PLP
>8f72		c7 a1					.word	Assemble_plx                     ; $ad PLX
>8f74		83 a1					.word	Assemble_ply                     ; $ae PLY
>8f76		da a0					.word	Assemble_rol                     ; $af ROL
>8f78		e4 a0					.word	Assemble_ror                     ; $b0 ROR
>8f7a		67 a1					.word	Assemble_rti                     ; $b1 RTI
>8f7c		77 a1					.word	Assemble_rts                     ; $b2 RTS
>8f7e		d1 a0					.word	Assemble_sbc                     ; $b3 SBC
>8f80		63 a1					.word	Assemble_sec                     ; $b4 SEC
>8f82		c3 a1					.word	Assemble_sed                     ; $b5 SED
>8f84		7f a1					.word	Assemble_sei                     ; $b6 SEI
>8f86		c5 a0					.word	Assemble_sta                     ; $b7 STA
>8f88		b7 a1					.word	Assemble_stp                     ; $b8 STP
>8f8a		e9 a0					.word	Assemble_stx                     ; $b9 STX
>8f8c		07 a1					.word	Assemble_sty                     ; $ba STY
>8f8e		fd a0					.word	Assemble_stz                     ; $bb STZ
>8f90		9b a1					.word	Assemble_tax                     ; $bc TAX
>8f92		97 a1					.word	Assemble_tay                     ; $bd TAY
>8f94		20 a1					.word	Assemble_trb                     ; $be TRB
>8f96		1b a1					.word	Assemble_tsb                     ; $bf TSB
>8f98		a3 a1					.word	Assemble_tsx                     ; $c0 TSX
>8f9a		8b a1					.word	Assemble_txa                     ; $c1 TXA
>8f9c		93 a1					.word	Assemble_txs                     ; $c2 TXS
>8f9e		8f a1					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/save.asm

.8fa0						Command_Save:
.8fa0		20 dc 9f	jsr $9fdc			jsr 	EvaluateString 				; file name to load
.8fa3		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8fa5		a5 36		lda $36				lda 	zTemp0
.8fa7		20 49 80	jsr $8049			jsr 	KNLOpenFileWrite 			; open file for writing
.8faa		b0 2f		bcs $8fdb			bcs 	CSErrorHandler 				; error, so fail.
.8fac		8d 5e 06	sta $065e			sta 	CurrentFileStream 			; save the reading stream.
.8faf		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8fb1		85 30		sta $30				sta 	codePtr
.8fb3		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8fb5		85 31		sta $31				sta 	codePtr+1
.8fb7						_CSLoop:
.8fb7		b2 30		lda ($30)			lda 	(codePtr)
.8fb9		f0 17		beq $8fd2			beq 	_CSExit
.8fbb		20 ff 8f	jsr $8fff			jsr 	CSGetCleanLine
.8fbe		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.8fc0		85 36		sta $36				sta 	zTemp0
.8fc2		20 de 8f	jsr $8fde			jsr 	CLWriteByteBlock 			; write the block out.
.8fc5		18		clc				clc
.8fc6		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8fc8		65 30		adc $30				adc 	codePtr
.8fca		85 30		sta $30				sta 	codePtr
.8fcc		90 02		bcc $8fd0			bcc 	_CREExit
.8fce		e6 31		inc $31				inc 	codePtr+1 					; carry
.8fd0						_CREExit:
.8fd0		80 e5		bra $8fb7			bra 	_CSLoop
.8fd2						_CSExit:
.8fd2		ad 5e 06	lda $065e			lda 	CurrentFileStream 			; close file
.8fd5		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8fd8		4c 59 8a	jmp $8a59			jmp 	CLComplete 					; display complete message.
.8fdb						CSErrorHandler:
.8fdb		4c 76 8a	jmp $8a76			jmp 	CLErrorHandler
.8fde						CLWriteByteBlock:
.8fde		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.8fe0		f0 1c		beq $8ffe			beq 	_CLWBBExit					; if so, exit
.8fe2		ad 5e 06	lda $065e			lda 	CurrentFileStream 			; stream to write, count in X
.8fe5		20 71 80	jsr $8071			jsr 	KNLWriteBlock 				; call one write attempt
.8fe8		b0 f1		bcs $8fdb			bcs 	CSErrorHandler 				; error occurred
.8fea		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.8fec		8a		txa				txa 								; subtract bytes written from X, total count.
.8fed		38		sec				sec
.8fee		e5 38		sbc $38				sbc 	zTemp1
.8ff0		aa		tax				tax
.8ff1		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.8ff2		a5 36		lda $36				lda 	zTemp0
.8ff4		65 38		adc $38				adc 	zTemp1
.8ff6		85 36		sta $36				sta 	zTemp0
.8ff8		90 e4		bcc $8fde			bcc 	CLWriteByteBlock
.8ffa		e6 37		inc $37				inc 	zTemp0+1
.8ffc		80 e0		bra $8fde			bra 	CLWriteByteBlock 			; and retry write out.
.8ffe						_CLWBBExit:
.8ffe		60		rts				rts
.8fff						CSGetCleanLine:
.8fff		a9 00		lda #$00			lda 	#0 							; no indent.
.9001		20 a3 80	jsr $80a3			jsr 	TKListConvertLine 			; convert line into token Buffer
.9004		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.9006		a0 00		ldy #$00			ldy 	#0
.9008						_CSClean:
.9008		b9 2d 04	lda $042d,y			lda 	tokenBuffer,y
.900b		f0 09		beq $9016			beq 	_CSDoneClean
.900d		30 04		bmi $9013			bmi 	_CSIgnoreCharacter
.900f		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.9012		e8		inx				inx
.9013						_CSIgnoreCharacter:
.9013		c8		iny				iny
.9014		80 f2		bra $9008			bra 	_CSClean
.9016						_CSDoneClean:
.9016		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.9018		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.901b		e8		inx				inx
.901c		9e 2a 05	stz $052a,x			stz 	lineBuffer,x
.901f		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.9021		a9 2a		lda #$2a			lda 	#(lineBuffer & $FF)
.9023		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9024						StopCommand:
.9024		a9 08		lda #$08		lda	#8
.9026		4c 39 91	jmp $9139		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9029						ProcedureScan:
.9029		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.902b		85 30		sta $30				sta 	codePtr
.902d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.902f		85 31		sta $31				sta 	codePtr+1
.9031						_PSLoop:
.9031		b2 30		lda ($30)			lda 	(codePtr)
.9033		f0 42		beq $9077			beq 	_PSExit
.9035		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.9037		b1 30		lda ($30),y			lda 	(codePtr),y
.9039		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.903b		d0 2d		bne $906a			bne 	_PSNext
.903d		c8		iny				iny 								; get the address of the record to zTemp0 and
.903e		b1 30		lda ($30),y			lda 	(codePtr),y
.9040		29 c0		and #$c0			and 	#$C0
.9042		c9 40		cmp #$40			cmp 	#$40
.9044		d0 32		bne $9078			bne 	_PSSyntax
.9046		b1 30		lda ($30),y			lda 	(codePtr),y
.9048		18		clc				clc
.9049		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.904b		85 37		sta $37				sta 	zTemp0+1
.904d		c8		iny				iny 								; LSB
.904e		b1 30		lda ($30),y			lda 	(codePtr),y
.9050		85 36		sta $36				sta 	zTemp0
.9052		c8		iny				iny 								; character after variable call.
.9053		98		tya				tya 								; save Y offset at +7 (exponent slot)
.9054		a0 07		ldy #$07			ldy 	#7
.9056		91 36		sta ($36),y			sta 	(zTemp0),y
.9058		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.905a		a0 02		ldy #$02			ldy 	#2
.905c		91 36		sta ($36),y			sta 	(zTemp0),y
.905e		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.9060						_PSCopy:
.9060		b5 30		lda $30,x			lda 	safePtr,x
.9062		c8		iny				iny
.9063		91 36		sta ($36),y			sta 	(zTemp0),y
.9065		e8		inx				inx
.9066		e0 04		cpx #$04			cpx 	#4
.9068		d0 f6		bne $9060			bne 	_PSCopy
.906a						_PSNext:
.906a		18		clc				clc
.906b		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.906d		65 30		adc $30				adc 	codePtr
.906f		85 30		sta $30				sta 	codePtr
.9071		90 02		bcc $9075			bcc 	_CREExit
.9073		e6 31		inc $31				inc 	codePtr+1 					; carry
.9075						_CREExit:
.9075		80 ba		bra $9031			bra 	_PSLoop
.9077						_PSExit:
.9077		60		rts				rts
.9078						_PSSyntax:
.9078		4c 02 a2	jmp $a202			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.907b						ScanForward:
.907b		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.907d		86 37		stx $37				stx 	zTemp0+1
.907f		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.9081						_ScanLoop:
.9081		b1 30		lda ($30),y			lda 	(codePtr),y
.9083		c8		iny				iny
.9084		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9086		d0 0e		bne $9096			bne 	_ScanGoNext
.9088		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.908a		f0 04		beq $9090			beq 	_ScanMatch
.908c		c5 37		cmp $37				cmp 	zTemp0+1
.908e		d0 06		bne $9096			bne 	_ScanGoNext
.9090						_ScanMatch:
.9090		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9092		d0 01		bne $9095			bne 	_ScanNotEndEOL
.9094		88		dey				dey
.9095						_ScanNotEndEOL:
.9095		60		rts				rts
.9096						_ScanGoNext:
.9096		20 9b 90	jsr $909b			jsr  	ScanForwardOne 				; allows for shifts and so on.
.9099		80 e6		bra $9081			bra 	_ScanLoop
.909b						ScanForwardOne:
.909b		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.909d		90 3e		bcc $90dd			bcc 	_SFWExit
.909f		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.90a1		90 18		bcc $90bb			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.90a3		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.90a5		b0 2f		bcs $90d6			bcs 	_ScanSkipData
.90a7		c9 a6		cmp #$a6			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.90a9		90 32		bcc $90dd			bcc 	_SFWExit 					; if not, ordinary keywords.
.90ab		c9 b1		cmp #$b1			cmp 	#KWC_LAST_STRUCTURE+1
.90ad		b0 2e		bcs $90dd			bcs 	_SFWExit
.90af		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.90b1		c9 ab		cmp #$ab			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.90b3		b0 28		bcs $90dd			bcs 	_SFWExit
.90b5		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.90b7		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.90b9		80 22		bra $90dd			bra 	_SFWExit
.90bb						_ScanSkipOne:
.90bb		c8		iny				iny 								; consume the extra one.
.90bc		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.90be		d0 1d		bne $90dd			bne 	_SFWExit
.90c0		18		clc				clc
.90c1		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.90c3		65 30		adc $30				adc 	codePtr
.90c5		85 30		sta $30				sta 	codePtr
.90c7		90 02		bcc $90cb			bcc 	_CREExit
.90c9		e6 31		inc $31				inc 	codePtr+1 					; carry
.90cb						_CREExit:
.90cb		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.90cd		b2 30		lda ($30)			lda 	(codePtr)
.90cf		d0 0c		bne $90dd			bne 	_SFWExit 					; if not zero, more to scan
.90d1		a9 13		lda #$13		lda	#19
.90d3		4c 39 91	jmp $9139		jmp	ErrorHandler
.90d6						_ScanSkipData:
.90d6		88		dey				dey 								; point at data token
.90d7		c8		iny				iny 								; point to offset
.90d8		98		tya				tya 								; A = offset position
.90d9		38		sec				sec 								; add size +1 hence SEC
.90da		71 30		adc ($30),y			adc 	(codePtr),y
.90dc		a8		tay				tay 								; make current position.
.90dd						_SFWExit:
.90dd		60		rts				rts
.90de						ScanGetCurrentLineStep:
.90de		64 38		stz $38				stz 	zTemp1
.90e0		a0 03		ldy #$03			ldy 	#3
.90e2						_SGCLSLoop:
.90e2		b1 30		lda ($30),y			lda 	(codePtr),y
.90e4		c8		iny				iny
.90e5		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.90e7		f0 05		beq $90ee			beq 	_SGCLSExit
.90e9		20 9b 90	jsr $909b			jsr 	ScanForwardOne
.90ec		80 f4		bra $90e2			bra 	_SGCLSLoop
.90ee						_SGCLSExit:
.90ee		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.90f0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.90f1						Command_WHILE:
.90f1		5a		phy				phy 								; save position of the test
.90f2		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.90f4		20 d2 9f	jsr $9fd2			jsr 	EvaluateNumber
.90f7		20 a6 a0	jsr $a0a6			jsr 	NSMIsZero 					; check if zero
.90fa		f0 0e		beq $910a			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.90fc		98		tya				tya 								; position *after* test.
.90fd		7a		ply				ply 								; restore position before test, at WHILE
.90fe		88		dey				dey 								; so we execute the WHILE command again.
.90ff		48		pha				pha 								; push after test on the stack
.9100		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9102		20 63 b1	jsr $b163			jsr 	StackOpen
.9105		20 a8 b1	jsr $b1a8			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9108		7a		ply				ply 								; restore the position *after* the test
.9109		60		rts				rts
.910a						_WHExitLoop:
.910a		68		pla				pla 								; throw post loop position
.910b		a9 b0		lda #$b0			lda 	#KWD_WEND 					; scan forward past WEND
.910d		aa		tax				tax
.910e		20 7b 90	jsr $907b			jsr 	ScanForward
.9111		60		rts				rts
.9112						Command_WEND:
.9112		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9114		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9116		20 90 b1	jsr $b190			jsr 	StackCheckFrame
.9119		20 b9 b1	jsr $b1b9			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.911c		20 82 b1	jsr $b182			jsr 	StackClose		 			; erase the frame
.911f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9120						CheckRightBracket:
.9120		b1 30		lda ($30),y			lda 	(codePtr),y
.9122		c8		iny				iny
.9123		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9125		d0 0f		bne $9136			bne 	CNAFail
.9127		60		rts				rts
.9128						CheckComma:
.9128		b1 30		lda ($30),y			lda 	(codePtr),y
.912a		c8		iny				iny
.912b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.912d		d0 07		bne $9136			bne 	CNAFail
.912f		60		rts				rts
.9130						CheckNextA:
.9130		d1 30		cmp ($30),y			cmp 	(codePtr),y
.9132		d0 02		bne $9136			bne 	CNAFail
.9134		c8		iny				iny 								; skip character
.9135		60		rts				rts 								; and exit
.9136						CNAFail:
.9136		4c 02 a2	jmp $a202			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9139						ErrorHandler:
.9139		a8		tay				tay 								; find the error text
.913a		f0 49		beq $9185			beq 	_EHEnd
.913c		a2 00		ldx #$00			ldx 	#0
.913e		a9 1b		lda #$1b			lda 	#((ErrorText) & $FF)
.9140		85 36		sta $36				sta 	0+zTemp0
.9142		a9 a2		lda #$a2			lda 	#((ErrorText) >> 8)
.9144		85 37		sta $37				sta 	1+zTemp0
.9146						_EHFind:
.9146		88		dey				dey 								; keep looking through text
.9147		f0 0e		beq $9157			beq 	_EHFound
.9149						_EHFindZero:
.9149		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.914b		e6 36		inc $36				inc 	zTemp0
.914d		d0 02		bne $9151			bne 	_EHFNoCarry
.914f		e6 37		inc $37				inc 	zTemp0+1
.9151						_EHFNoCarry:
.9151		c9 00		cmp #$00			cmp 	#0
.9153		d0 f4		bne $9149			bne 	_EHFindZero
.9155		80 ef		bra $9146			bra 	_EHFind
.9157						_EHFound:
.9157		a5 36		lda $36				lda 	zTemp0 						; print message
.9159		a6 37		ldx $37				ldx 	zTemp0+1
.915b		20 92 91	jsr $9192			jsr 	PrintStringXA
.915e		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.9160		b1 30		lda ($30),y			lda 	(codePtr),y
.9162		d0 05		bne $9169			bne 	_EHAtMsg
.9164		c8		iny				iny
.9165		b1 30		lda ($30),y			lda 	(codePtr),y
.9167		f0 17		beq $9180			beq 	_EHCREnd
.9169						_EHAtMsg:
.9169		a2 91		ldx #$91			ldx 	#_AtMsg >> 8 				; print " at "
.916b		a9 88		lda #$88			lda 	#_AtMsg & $FF
.916d		20 92 91	jsr $9192			jsr 	PrintStringXA
.9170		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9172		b1 30		lda ($30),y			lda 	(codePtr),y
.9174		48		pha				pha
.9175		c8		iny				iny
.9176		b1 30		lda ($30),y			lda 	(codePtr),y
.9178		aa		tax				tax
.9179		68		pla				pla
.917a		20 a8 95	jsr $95a8			jsr 	ConvertInt16 				; convert XA to string
.917d		20 92 91	jsr $9192			jsr 	PrintStringXA 				; and print it.
.9180						_EHCREnd:
.9180		a9 0d		lda #$0d			lda 	#13 						; new line
.9182		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.9185						_EHEnd:
.9185		4c 28 84	jmp $8428			jmp 	WarmStart
>9188		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9190		20 00
.9192						PrintStringXA:
.9192		5a		phy				phy
.9193		86 37		stx $37				stx 	zTemp0+1
.9195		85 36		sta $36				sta 	zTemp0
.9197		a0 00		ldy #$00			ldy 	#0
.9199						_PSXALoop:
.9199		b1 36		lda ($36),y			lda 	(zTemp0),y
.919b		f0 06		beq $91a3			beq 	_PSXAExit
.919d		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.91a0		c8		iny				iny
.91a1		80 f6		bra $9199			bra 	_PSXALoop
.91a3						_PSXAExit:
.91a3		7a		ply				ply
.91a4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.91a5						UnaryTrue:
.91a5		fa		plx				plx
.91a6						ReturnTrue:
.91a6		a9 01		lda #$01			lda 	#1  						; set to 1
.91a8		20 86 a0	jsr $a086			jsr 	NSMSetByte
.91ab		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.91ad		95 50		sta $50,x			sta 	NSStatus,x
.91af		60		rts				rts
.91b0						UnaryFalse:
.91b0		fa		plx				plx
.91b1						ReturnFalse:
.91b1		4c 84 a0	jmp $a084			jmp 	NSMSetZero 					; set it all to zero
.91b4						BinaryCompareEqual:
.91b4		fa		plx				plx
.91b5		20 f0 91	jsr $91f0			jsr 	CompareBaseCode
.91b8		c9 00		cmp #$00			cmp 	#0
.91ba		f0 ea		beq $91a6			beq 	ReturnTrue
.91bc		80 f3		bra $91b1			bra 	ReturnFalse
.91be						BinaryCompareLess:
.91be		fa		plx				plx
.91bf		20 f0 91	jsr $91f0			jsr 	CompareBaseCode
.91c2		c9 ff		cmp #$ff			cmp 	#$FF
.91c4		f0 e0		beq $91a6			beq 	ReturnTrue
.91c6		80 e9		bra $91b1			bra 	ReturnFalse
.91c8						BinaryCompareGreater:
.91c8		fa		plx				plx
.91c9		20 f0 91	jsr $91f0			jsr 	CompareBaseCode
.91cc		c9 01		cmp #$01			cmp 	#1
.91ce		f0 d6		beq $91a6			beq 	ReturnTrue
.91d0		80 df		bra $91b1			bra 	ReturnFalse
.91d2						BinaryCompareNotEqual:
.91d2		fa		plx				plx
.91d3		20 f0 91	jsr $91f0			jsr 	CompareBaseCode
.91d6		c9 00		cmp #$00			cmp 	#0
.91d8		d0 cc		bne $91a6			bne 	ReturnTrue
.91da		80 d5		bra $91b1			bra 	ReturnFalse
.91dc						BinaryCompareLessEqual:
.91dc		fa		plx				plx
.91dd		20 f0 91	jsr $91f0			jsr 	CompareBaseCode
.91e0		c9 01		cmp #$01			cmp 	#1
.91e2		d0 c2		bne $91a6			bne 	ReturnTrue
.91e4		80 cb		bra $91b1			bra 	ReturnFalse
.91e6						BinaryCompareGreaterEqual:
.91e6		fa		plx				plx
.91e7		20 f0 91	jsr $91f0			jsr 	CompareBaseCode
.91ea		c9 ff		cmp #$ff			cmp 	#$FF
.91ec		d0 b8		bne $91a6			bne 	ReturnTrue
.91ee		80 c1		bra $91b1			bra 	ReturnFalse
.91f0						CompareBaseCode:
.91f0		20 fb 98	jsr $98fb			jsr 	DereferenceTopTwo 			; make both values if references.
.91f3		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.91f5		15 51		ora $51,x			ora 	NSStatus+1,x
.91f7		29 10		and #$10			and 	#NSTString
.91f9		d0 37		bne $9232			bne 	_CBCString 					; if so do string code, which will check if both.
.91fb		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.91fd		15 79		ora $79,x			ora 	NSExponent+1,x
.91ff		d0 34		bne $9235			bne 	_CBCFloat
.9201		b5 50		lda $50,x			lda 	NSStatus,x
.9203		15 51		ora $51,x			ora 	NSStatus+1,x
.9205		29 08		and #$08			and 	#NSTFloat
.9207		d0 2c		bne $9235			bne 	_CBCFloat
.9209		20 38 92	jsr $9238			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.920c		e8		inx				inx
.920d		20 38 92	jsr $9238			jsr 	CompareFixMinusZero
.9210		ca		dex				dex
.9211		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9213		55 51		eor $51,x			eor 	NSStatus+1,x
.9215		10 0a		bpl $9221			bpl 	_CDCSameSign
.9217		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9219		30 14		bmi $922f			bmi 	_CBCLess 					; return $FF
.921b						_CBCGreater:
.921b		a9 01		lda #$01			lda 	#1
.921d		60		rts				rts
.921e						_CBCEqual:
.921e		a9 00		lda #$00			lda 	#0
.9220		60		rts				rts
.9221						_CDCSameSign:
.9221		20 4d 94	jsr $944d			jsr 	SubTopTwoStack 				; unsigned subtract
.9224		20 a6 a0	jsr $a0a6			jsr 	NSMIsZero 					; or the mantissa together
.9227		f0 f5		beq $921e			beq 	_CBCEqual 					; -0 == 0
.9229		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.922b		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.922d		10 ec		bpl $921b			bpl 	_CBCGreater
.922f						_CBCLess:
.922f		a9 ff		lda #$ff			lda 	#$FF
.9231		60		rts				rts
.9232						_CBCString:
.9232		4c be 93	jmp $93be			jmp 	CompareStrings
.9235						_CBCFloat:
.9235		4c 08 97	jmp $9708			jmp 	CompareFloat
.9238						CompareFixMinusZero:
.9238		20 a6 a0	jsr $a0a6			jsr 	NSMIsZero
.923b		d0 02		bne $923f			bne 	_CFXMZNotZero
.923d		74 50		stz $50,x			stz 	NSStatus,x
.923f						_CFXMZNotZero:
.923f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9240						StringConcat:
.9240		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.9242		35 51		and $51,x			and 	NSStatus+1,x
.9244		29 18		and #$18			and 	#NSBTypeMask
.9246		c9 10		cmp #$10			cmp 	#NSTString
.9248		d0 50		bne $929a			bne		_SCType
.924a		64 38		stz $38				stz 	zTemp1 						; counting total length
.924c		e8		inx				inx
.924d		20 6b 92	jsr $926b			jsr 	_SCSetupZ0 					; setup for second
.9250		20 74 92	jsr $9274			jsr 	_SCLengthZ0 				; length for second
.9253		ca		dex				dex
.9254		20 6b 92	jsr $926b			jsr 	_SCSetupZ0 					; setup for first
.9257		20 74 92	jsr $9274			jsr 	_SCLengthZ0 				; length for first
.925a		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.925c		20 53 b2	jsr $b253			jsr 	StringTempAllocate
.925f		20 8b 92	jsr $928b			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9262		e8		inx				inx
.9263		20 6b 92	jsr $926b			jsr 	_SCSetupZ0 					; copy second out
.9266		20 8b 92	jsr $928b			jsr 	_SCCopy
.9269		ca		dex				dex
.926a		60		rts				rts
.926b						_SCSetupZ0:
.926b		b5 58		lda $58,x			lda 	NSMantissa0,x
.926d		85 36		sta $36				sta 	zTemp0
.926f		b5 60		lda $60,x			lda 	NSMantissa1,x
.9271		85 37		sta $37				sta 	zTemp0+1
.9273		60		rts				rts
.9274						_SCLengthZ0:
.9274		5a		phy				phy
.9275		a0 00		ldy #$00			ldy 	#0
.9277						_SCLenLoop:
.9277		b1 36		lda ($36),y			lda 	(zTemp0),y
.9279		f0 0e		beq $9289			beq 	_SCLExit
.927b		c8		iny				iny
.927c		e6 38		inc $38				inc 	zTemp1
.927e		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9280		c9 fd		cmp #$fd			cmp 	#253
.9282		d0 f3		bne $9277			bne		_SCLenLoop
.9284		a9 09		lda #$09		lda	#9
.9286		4c 39 91	jmp $9139		jmp	ErrorHandler
.9289						_SCLExit:
.9289		7a		ply				ply
.928a		60		rts				rts
.928b						_SCCopy:
.928b		5a		phy				phy
.928c		a0 00		ldy #$00			ldy 	#0
.928e						_SCCopyLoop:
.928e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9290		f0 06		beq $9298			beq 	_SCCExit
.9292		20 8c b2	jsr $b28c			jsr 	StringTempWrite
.9295		c8		iny				iny
.9296		80 f6		bra $928e			bra 	_SCCopyLoop
.9298						_SCCExit:
.9298		7a		ply				ply
.9299		60		rts				rts
.929a						_SCType:
.929a		4c 0c a2	jmp $a20c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.929d						IntegerDivide:
.929d		fa		plx				plx
.929e		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.92a0		15 51		ora $51,x			ora 	NSStatus+1,x
.92a2		0a		asl a				asl 	a 							; shift reference bit into sign bit
.92a3		0a		asl a				asl 	a
.92a4		10 05		bpl $92ab			bpl 	_NotRef
.92a6		48		pha				pha
.92a7		20 fb 98	jsr $98fb			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92aa		68		pla				pla
.92ab						_NotRef:
.92ab		0a		asl a				asl 	a
.92ac		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92ae		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92b0		15 79		ora $79,x			ora 	NSExponent+1,x
.92b2		f0 03		beq $92b7			beq 	_IntegerCode 				; if clear, then we have two integers
.92b4		4c 0c a2	jmp $a20c			jmp 	TypeError 					; anything else, type mismatch.
.92b7						_IntegerCode:
.92b7		20 d1 92	jsr $92d1			jsr 	CheckDivideZero 			; do div zero check
.92ba		20 03 93	jsr $9303			jsr 	Int32Divide 				; do the division
.92bd		20 b4 93	jsr $93b4			jsr 	CalculateSign 				; calculate result sign
.92c0						NSMCopyPlusTwoToZero:
.92c0		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.92c2		95 58		sta $58,x			sta 	NSMantissa0,x
.92c4		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.92c6		95 60		sta $60,x			sta 	NSMantissa1,x
.92c8		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.92ca		95 68		sta $68,x			sta 	NSMantissa2,x
.92cc		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.92ce		95 70		sta $70,x			sta 	NSMantissa3,x
.92d0		60		rts				rts
.92d1						CheckDivideZero:
.92d1		e8		inx				inx
.92d2		20 a6 a0	jsr $a0a6			jsr 	NSMIsZero
.92d5		f0 02		beq $92d9			beq 	_CDVError
.92d7		ca		dex				dex
.92d8		60		rts				rts
.92d9						_CDVError:
.92d9		a9 03		lda #$03		lda	#3
.92db		4c 39 91	jmp $9139		jmp	ErrorHandler
.92de						IntegerModulus:
.92de		fa		plx				plx
.92df		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.92e1		15 51		ora $51,x			ora 	NSStatus+1,x
.92e3		0a		asl a				asl 	a 							; shift reference bit into sign bit
.92e4		0a		asl a				asl 	a
.92e5		10 05		bpl $92ec			bpl 	_NotRef
.92e7		48		pha				pha
.92e8		20 fb 98	jsr $98fb			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92eb		68		pla				pla
.92ec						_NotRef:
.92ec		0a		asl a				asl 	a
.92ed		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92ef		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92f1		15 79		ora $79,x			ora 	NSExponent+1,x
.92f3		f0 03		beq $92f8			beq 	_IntegerCode 				; if clear, then we have two integers
.92f5		4c 0c a2	jmp $a20c			jmp 	TypeError 					; anything else, type mismatch.
.92f8						_IntegerCode:
.92f8						IntegerModulusNoCheck:
.92f8		20 d1 92	jsr $92d1			jsr 	CheckDivideZero 			; do div zero check
.92fb		20 03 93	jsr $9303			jsr 	Int32Divide 				; do the division
.92fe		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9300		56 50		lsr $50,x			lsr 	NSStatus,x
.9302		60		rts				rts
.9303						Int32Divide:
.9303		48		pha				pha 								; save AXY
.9304		5a		phy				phy
.9305		20 67 a0	jsr $a067			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9308		20 80 a0	jsr $a080			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.930b		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.930d						_I32DivideLoop:
.930d		e8		inx				inx
.930e		e8		inx				inx
.930f		20 93 a0	jsr $a093			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9312		ca		dex				dex
.9313		ca		dex				dex
.9314		20 94 a0	jsr $a094			jsr 	NSMRotateLeft
.9317		20 42 93	jsr $9342			jsr 	DivideCheckSubtract 		; check if subtract possible
.931a		90 02		bcc $931e			bcc 	_I32DivideNoCarryIn
.931c		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.931e						_I32DivideNoCarryIn:
.931e		88		dey				dey 								; loop round till division completed.
.931f		d0 ec		bne $930d			bne 	_I32DivideLoop
.9321		7a		ply				ply 								; restore AXY and exit
.9322		68		pla				pla
.9323		60		rts				rts
.9324						Int32ShiftDivide:
.9324		48		pha				pha 								; save AY
.9325		5a		phy				phy
.9326		e8		inx				inx 								; clear S[X+2]
.9327		e8		inx				inx
.9328		20 84 a0	jsr $a084			jsr 	NSMSetZero
.932b		ca		dex				dex
.932c		ca		dex				dex
.932d		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.932f						_I32SDLoop:
.932f		20 42 93	jsr $9342			jsr 	DivideCheckSubtract 		; check if subtract possible
.9332		e8		inx				inx
.9333		e8		inx				inx
.9334		20 94 a0	jsr $a094			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9337		ca		dex				dex
.9338		ca		dex				dex
.9339		20 94 a0	jsr $a094			jsr 	NSMRotateLeft
.933c		88		dey				dey 	 							; do 31 times
.933d		d0 f0		bne $932f			bne 	_I32SDLoop
.933f		7a		ply				ply 								; restore AY and exit
.9340		68		pla				pla
.9341		60		rts				rts
.9342						DivideCheckSubtract:
.9342		20 4d 94	jsr $944d			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9345		b0 04		bcs $934b			bcs 	_DCSExit 					; if carry set, then could do, exit
.9347		20 33 94	jsr $9433			jsr 	AddTopTwoStack 				; add it back in
.934a		18		clc				clc 								; and return False
.934b						_DCSExit:
.934b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.934c						MulInteger:
.934c		fa		plx				plx
.934d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.934f		15 51		ora $51,x			ora 	NSStatus+1,x
.9351		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9352		0a		asl a				asl 	a
.9353		10 05		bpl $935a			bpl 	_NotRef
.9355		48		pha				pha
.9356		20 fb 98	jsr $98fb			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9359		68		pla				pla
.935a						_NotRef:
.935a		0a		asl a				asl 	a 							; put MSB of type into A:7
.935b		30 09		bmi $9366			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.935d		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.935f		15 79		ora $79,x			ora 	NSExponent+1,x
.9361		f0 06		beq $9369			beq 	_IntegerCode 				; if clear, then we have two integers
.9363		4c ca 97	jmp $97ca			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9366						_StringData:
.9366		4c 16 a2	jmp $a216			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9369						_IntegerCode:
.9369		20 76 93	jsr $9376			jsr 	MultiplyShort
.936c		c9 00		cmp #$00			cmp 	#0
.936e		f0 05		beq $9375			beq 	_MIExit
.9370		a9 04		lda #$04		lda	#4
.9372		4c 39 91	jmp $9139		jmp	ErrorHandler
.9375						_MIExit:
.9375		60		rts				rts
.9376						MultiplyShort:
.9376		5a		phy				phy 								; save Y
.9377		20 67 a0	jsr $a067			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.937a		20 80 a0	jsr $a080			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.937d		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.937f						_I32MLoop:
.937f		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9381		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9383		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9385		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9387		f0 25		beq $93ae			beq 	_I32MExit 					; exit if zero
.9389		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.938b		29 01		and #$01			and 	#1
.938d		f0 0d		beq $939c			beq 	_I32MNoAdd
.938f		20 33 94	jsr $9433			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9392		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9394		10 06		bpl $939c			bpl 	_I32MNoAdd
.9396						_I32ShiftRight:
.9396		20 9d a0	jsr $a09d			jsr 	NSMShiftRight 				; shift S[X] right
.9399		c8		iny				iny 								; increment shift count
.939a		80 09		bra $93a5			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.939c						_I32MNoAdd:
.939c		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.939e		70 f6		bvs $9396			bvs 	_I32ShiftRight 				; instead.
.93a0		e8		inx				inx
.93a1		20 93 a0	jsr $a093			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.93a4		ca		dex				dex
.93a5						_I32MShiftUpper:
.93a5		e8		inx				inx 								; shift S[X+2] right
.93a6		e8		inx				inx
.93a7		20 9d a0	jsr $a09d			jsr 	NSMShiftRight
.93aa		ca		dex				dex
.93ab		ca		dex				dex
.93ac		80 d1		bra $937f			bra 	_I32MLoop 					; try again.
.93ae						_I32MExit:
.93ae		20 b4 93	jsr $93b4			jsr 	CalculateSign
.93b1		98		tya				tya 								; shift in A
.93b2		7a		ply				ply 								; restore Y and exit
.93b3		60		rts				rts
.93b4						CalculateSign:
.93b4		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.93b6		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.93b8		55 51		eor $51,x			eor 	NSStatus+1,x
.93ba		0a		asl a				asl 	a 							; shift bit 7 into carry
.93bb		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.93bd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.93be						CompareStrings:
.93be		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.93c0		35 51		and $51,x			and 	NSStatus+1,x
.93c2		29 10		and #$10			and 	#NSBIsString
.93c4		f0 28		beq $93ee			beq 	_CSTypeError
.93c6		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.93c8		85 36		sta $36				sta 	zTemp0
.93ca		b5 60		lda $60,x			lda 	NSMantissa1,x
.93cc		85 37		sta $37				sta 	zTemp0+1
.93ce		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.93d0		85 38		sta $38				sta 	zTemp1
.93d2		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.93d4		85 39		sta $39				sta 	zTemp1+1
.93d6		5a		phy				phy 								; save Y so we can access strings
.93d7		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.93d9						_CSLoop:
.93d9		c8		iny				iny
.93da		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.93dc		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.93de		d0 06		bne $93e6			bne 	_CSDifferent
.93e0		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.93e2		d0 f5		bne $93d9			bne 	_CSLoop 					; still comparing
.93e4						_CSExit:
.93e4		7a		ply				ply 								; reached end, return zero in A from EOS
.93e5		60		rts				rts
.93e6						_CSDifferent:
.93e6		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.93e8		90 fa		bcc $93e4			bcc		_CSExit
.93ea		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.93ec		80 f6		bra $93e4			bra 	_CSExit
.93ee						_CSTypeError:
.93ee		4c 0c a2	jmp $a20c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.93f1						ShiftLeft:
.93f1		38		sec				sec 								; common code, carry determines which way.
.93f2		80 01		bra $93f5			bra 	ShiftMain
.93f4						ShiftRight:
.93f4		18		clc				clc
.93f5						ShiftMain:
.93f5		fa		plx				plx 								; restore X
.93f6		08		php				php 								; save direction
.93f7		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.93f9		15 51		ora $51,x			ora 	NSStatus+1,x
.93fb		0a		asl a				asl 	a 							; shift reference bit into sign bit
.93fc		0a		asl a				asl 	a
.93fd		10 05		bpl $9404			bpl 	_NotRef
.93ff		48		pha				pha
.9400		20 fb 98	jsr $98fb			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9403		68		pla				pla
.9404						_NotRef:
.9404		0a		asl a				asl 	a
.9405		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9407		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9409		15 79		ora $79,x			ora 	NSExponent+1,x
.940b		f0 03		beq $9410			beq 	_IntegerCode 				; if clear, then we have two integers
.940d		4c 0c a2	jmp $a20c			jmp 	TypeError 					; anything else, type mismatch.
.9410						_IntegerCode:
.9410		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9412		29 e0		and #$e0			and 	#$E0
.9414		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9416		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9418		15 71		ora $71,x			ora 	NSMantissa3+1,x
.941a		d0 12		bne $942e			bne 	_SMExit0 					; if >= 32 it will always return zero.
.941c						_SMLoop:
.941c		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.941e		30 11		bmi $9431			bmi 	_SMExit 					; exit if done.
.9420		28		plp				plp 								; restore direction setting
.9421		08		php				php
.9422		90 05		bcc $9429			bcc 	_SMRight
.9424		20 93 a0	jsr $a093			jsr 	NSMShiftLeft 				; shift left if CS
.9427		80 f3		bra $941c			bra 	_SMLoop
.9429						_SMRight:
.9429		20 9d a0	jsr $a09d			jsr 	NSMShiftRight 				; shift right if CC
.942c		80 ee		bra $941c			bra 	_SMLoop
.942e						_SMExit0:
.942e		20 84 a0	jsr $a084			jsr 	NSMSetZero 					; return zero.
.9431						_SMExit:
.9431		28		plp				plp 								; throw direction
.9432		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9433						AddTopTwoStack:
.9433		18		clc				clc
.9434		b5 58		lda $58,x			lda		NSMantissa0,x
.9436		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9438		95 58		sta $58,x			sta 	NSMantissa0,x
.943a		b5 60		lda $60,x			lda		NSMantissa1,x
.943c		75 61		adc $61,x			adc 		NSMantissa1+1,x
.943e		95 60		sta $60,x			sta 	NSMantissa1,x
.9440		b5 68		lda $68,x			lda		NSMantissa2,x
.9442		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9444		95 68		sta $68,x			sta 	NSMantissa2,x
.9446		b5 70		lda $70,x			lda		NSMantissa3,x
.9448		75 71		adc $71,x			adc 		NSMantissa3+1,x
.944a		95 70		sta $70,x			sta 	NSMantissa3,x
.944c		60		rts				rts
.944d						SubTopTwoStack:
.944d		38		sec				sec
.944e		b5 58		lda $58,x			lda		NSMantissa0,x
.9450		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9452		95 58		sta $58,x			sta 	NSMantissa0,x
.9454		b5 60		lda $60,x			lda		NSMantissa1,x
.9456		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9458		95 60		sta $60,x			sta 	NSMantissa1,x
.945a		b5 68		lda $68,x			lda		NSMantissa2,x
.945c		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.945e		95 68		sta $68,x			sta 	NSMantissa2,x
.9460		b5 70		lda $70,x			lda		NSMantissa3,x
.9462		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9464		95 70		sta $70,x			sta 	NSMantissa3,x
.9466		60		rts				rts
.9467						AddInteger:
.9467		fa		plx				plx
.9468		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.946a		15 51		ora $51,x			ora 	NSStatus+1,x
.946c		0a		asl a				asl 	a 							; shift reference bit into sign bit
.946d		0a		asl a				asl 	a
.946e		10 05		bpl $9475			bpl 	_NotRef
.9470		48		pha				pha
.9471		20 fb 98	jsr $98fb			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9474		68		pla				pla
.9475						_NotRef:
.9475		0a		asl a				asl 	a 							; put MSB of type into A:7
.9476		30 09		bmi $9481			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9478		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.947a		15 79		ora $79,x			ora 	NSExponent+1,x
.947c		f0 06		beq $9484			beq 	_IntegerCode 				; if clear, then we have two integers
.947e		4c 7a 96	jmp $967a			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9481						_StringData:
.9481		4c 40 92	jmp $9240			jmp 	StringConcat							; at least one string - don't know both are strings.
.9484						_IntegerCode:
.9484						AddCode:
.9484		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9486		55 51		eor $51,x			eor 	NSStatus+1,x
.9488		10 a9		bpl $9433			bpl 	AddTopTwoStack
.948a		20 4d 94	jsr $944d			jsr 	SubTopTwoStack 				; do a physical subtraction
.948d		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.948f		10 07		bpl $9498			bpl 	_AddExit
.9491		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9493		95 50		sta $50,x			sta 	NSStatus,x
.9495		20 4d a0	jsr $a04d			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9498						_AddExit:
.9498		20 a6 a0	jsr $a0a6			jsr 	NSMIsZero 					; check for -0
.949b		d0 02		bne $949f			bne 	_AddNonZero
.949d		74 50		stz $50,x			stz 	NSStatus,x
.949f						_AddNonZero:
.949f		60		rts				rts
.94a0						SubInteger:
.94a0		fa		plx				plx
.94a1		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.94a3		15 51		ora $51,x			ora 	NSStatus+1,x
.94a5		0a		asl a				asl 	a 							; shift reference bit into sign bit
.94a6		0a		asl a				asl 	a
.94a7		10 05		bpl $94ae			bpl 	_NotRef
.94a9		48		pha				pha
.94aa		20 fb 98	jsr $98fb			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94ad		68		pla				pla
.94ae						_NotRef:
.94ae		0a		asl a				asl 	a 							; put MSB of type into A:7
.94af		30 09		bmi $94ba			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.94b1		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94b3		15 79		ora $79,x			ora 	NSExponent+1,x
.94b5		f0 06		beq $94bd			beq 	_IntegerCode 				; if clear, then we have two integers
.94b7		4c 7f 96	jmp $967f			jmp 	FloatingPointSub 							; otherwise at least one float.
.94ba						_StringData:
.94ba		4c 16 a2	jmp $a216			jmp 	NotDoneError							; at least one string - don't know both are strings.
.94bd						_IntegerCode:
.94bd		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.94bf		49 80		eor #$80			eor 	#$80
.94c1		95 51		sta $51,x			sta 	NSStatus+1,x
.94c3		80 bf		bra $9484			bra 	AddCode 					; and do the same code as add.
.94c5						AndInteger:
.94c5		fa		plx				plx
.94c6		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.94c8		15 51		ora $51,x			ora 	NSStatus+1,x
.94ca		0a		asl a				asl 	a 							; shift reference bit into sign bit
.94cb		0a		asl a				asl 	a
.94cc		10 05		bpl $94d3			bpl 	_NotRef
.94ce		48		pha				pha
.94cf		20 fb 98	jsr $98fb			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94d2		68		pla				pla
.94d3						_NotRef:
.94d3		0a		asl a				asl 	a
.94d4		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.94d6		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94d8		15 79		ora $79,x			ora 	NSExponent+1,x
.94da		f0 03		beq $94df			beq 	_IntegerCode 				; if clear, then we have two integers
.94dc		4c 0c a2	jmp $a20c			jmp 	TypeError 					; anything else, type mismatch.
.94df						_IntegerCode:
.94df		b5 58		lda $58,x			lda		NSMantissa0,x
.94e1		35 59		and $59,x			and 		NSMantissa0+1,x
.94e3		95 58		sta $58,x			sta 	NSMantissa0,x
.94e5		b5 60		lda $60,x			lda		NSMantissa1,x
.94e7		35 61		and $61,x			and 		NSMantissa1+1,x
.94e9		95 60		sta $60,x			sta 	NSMantissa1,x
.94eb		b5 68		lda $68,x			lda		NSMantissa2,x
.94ed		35 69		and $69,x			and 		NSMantissa2+1,x
.94ef		95 68		sta $68,x			sta 	NSMantissa2,x
.94f1		b5 70		lda $70,x			lda		NSMantissa3,x
.94f3		35 71		and $71,x			and 		NSMantissa3+1,x
.94f5		95 70		sta $70,x			sta 	NSMantissa3,x
.94f7		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.94f9		60		rts				rts
.94fa						OraInteger:
.94fa		fa		plx				plx
.94fb		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.94fd		15 51		ora $51,x			ora 	NSStatus+1,x
.94ff		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9500		0a		asl a				asl 	a
.9501		10 05		bpl $9508			bpl 	_NotRef
.9503		48		pha				pha
.9504		20 fb 98	jsr $98fb			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9507		68		pla				pla
.9508						_NotRef:
.9508		0a		asl a				asl 	a
.9509		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.950b		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.950d		15 79		ora $79,x			ora 	NSExponent+1,x
.950f		f0 03		beq $9514			beq 	_IntegerCode 				; if clear, then we have two integers
.9511		4c 0c a2	jmp $a20c			jmp 	TypeError 					; anything else, type mismatch.
.9514						_IntegerCode:
.9514		b5 58		lda $58,x			lda		NSMantissa0,x
.9516		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9518		95 58		sta $58,x			sta 	NSMantissa0,x
.951a		b5 60		lda $60,x			lda		NSMantissa1,x
.951c		15 61		ora $61,x			ora 		NSMantissa1+1,x
.951e		95 60		sta $60,x			sta 	NSMantissa1,x
.9520		b5 68		lda $68,x			lda		NSMantissa2,x
.9522		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9524		95 68		sta $68,x			sta 	NSMantissa2,x
.9526		b5 70		lda $70,x			lda		NSMantissa3,x
.9528		15 71		ora $71,x			ora 		NSMantissa3+1,x
.952a		95 70		sta $70,x			sta 	NSMantissa3,x
.952c		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.952e		60		rts				rts
.952f						EorInteger:
.952f		fa		plx				plx
.9530		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9532		15 51		ora $51,x			ora 	NSStatus+1,x
.9534		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9535		0a		asl a				asl 	a
.9536		10 05		bpl $953d			bpl 	_NotRef
.9538		48		pha				pha
.9539		20 fb 98	jsr $98fb			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.953c		68		pla				pla
.953d						_NotRef:
.953d		0a		asl a				asl 	a
.953e		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9540		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9542		15 79		ora $79,x			ora 	NSExponent+1,x
.9544		f0 03		beq $9549			beq 	_IntegerCode 				; if clear, then we have two integers
.9546		4c 0c a2	jmp $a20c			jmp 	TypeError 					; anything else, type mismatch.
.9549						_IntegerCode:
.9549		b5 58		lda $58,x			lda		NSMantissa0,x
.954b		55 59		eor $59,x			eor 		NSMantissa0+1,x
.954d		95 58		sta $58,x			sta 	NSMantissa0,x
.954f		b5 60		lda $60,x			lda		NSMantissa1,x
.9551		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9553		95 60		sta $60,x			sta 	NSMantissa1,x
.9555		b5 68		lda $68,x			lda		NSMantissa2,x
.9557		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9559		95 68		sta $68,x			sta 	NSMantissa2,x
.955b		b5 70		lda $70,x			lda		NSMantissa3,x
.955d		55 71		eor $71,x			eor 		NSMantissa3+1,x
.955f		95 70		sta $70,x			sta 	NSMantissa3,x
.9561		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9563		60		rts				rts
.9564						WordIndirect:
.9564		fa		plx				plx
.9565		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9567		15 51		ora $51,x			ora 	NSStatus+1,x
.9569		0a		asl a				asl 	a 							; shift reference bit into sign bit
.956a		0a		asl a				asl 	a
.956b		10 05		bpl $9572			bpl 	_NotRef
.956d		48		pha				pha
.956e		20 fb 98	jsr $98fb			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9571		68		pla				pla
.9572						_NotRef:
.9572		0a		asl a				asl 	a
.9573		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9575		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9577		15 79		ora $79,x			ora 	NSExponent+1,x
.9579		f0 03		beq $957e			beq 	_IntegerCode 				; if clear, then we have two integers
.957b		4c 0c a2	jmp $a20c			jmp 	TypeError 					; anything else, type mismatch.
.957e						_IntegerCode:
.957e		20 84 94	jsr $9484			jsr 	AddCode 					; add the two values
.9581		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9583		95 50		sta $50,x			sta 	NSStatus,x
.9585		60		rts				rts
.9586						ByteIndirect:
.9586		fa		plx				plx
.9587		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9589		15 51		ora $51,x			ora 	NSStatus+1,x
.958b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.958c		0a		asl a				asl 	a
.958d		10 05		bpl $9594			bpl 	_NotRef
.958f		48		pha				pha
.9590		20 fb 98	jsr $98fb			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9593		68		pla				pla
.9594						_NotRef:
.9594		0a		asl a				asl 	a
.9595		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9597		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9599		15 79		ora $79,x			ora 	NSExponent+1,x
.959b		f0 03		beq $95a0			beq 	_IntegerCode 				; if clear, then we have two integers
.959d		4c 0c a2	jmp $a20c			jmp 	TypeError 					; anything else, type mismatch.
.95a0						_IntegerCode:
.95a0		20 84 94	jsr $9484			jsr 	AddCode 					; add the two values
.95a3		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.95a5		95 50		sta $50,x			sta 	NSStatus,x
.95a7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.95a8						ConvertInt16:
.95a8		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.95aa		86 60		stx $60				stx 	NSMantissa1
.95ac		64 68		stz $68				stz 	NSMantissa2
.95ae		64 70		stz $70				stz 	NSMantissa3
.95b0		64 50		stz $50				stz 	NSStatus 					; positive integer
.95b2		a2 00		ldx #$00			ldx 	#0 							; stack level
.95b4		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.95b6		80 00		bra $95b8			bra 	ConvertInt32
.95b8						ConvertInt32:
.95b8		5a		phy				phy
.95b9		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.95bb		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.95bd		10 08		bpl $95c7			bpl 	_CI32NotNeg
.95bf		48		pha				pha
.95c0		a9 2d		lda #$2d			lda 	#'-'
.95c2		99 27 06	sta $0627,y			sta 	numberBuffer,y
.95c5		c8		iny				iny
.95c6		68		pla				pla
.95c7						_CI32NotNeg:
.95c7		20 d5 95	jsr $95d5			jsr 	_CI32DivideConvert 			; recursive conversion
.95ca		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.95cc		99 27 06	sta $0627,y			sta 	numberBuffer,y
.95cf		7a		ply				ply
.95d0		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.95d2		a9 27		lda #$27			lda 	#numberBuffer & $FF
.95d4		60		rts				rts
.95d5						_CI32DivideConvert:
.95d5		e8		inx				inx 								; write to next slot up
.95d6		20 86 a0	jsr $a086			jsr 	NSMSetByte 		 			; write the base out.
.95d9		ca		dex				dex
.95da		20 03 93	jsr $9303			jsr 	Int32Divide 				; divide
.95dd		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.95df		48		pha				pha
.95e0		20 c0 92	jsr $92c0			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.95e3		20 a6 a0	jsr $a0a6			jsr 	NSMIsZero 					; is it zero ?
.95e6		f0 05		beq $95ed			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.95e8		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.95ea		20 d5 95	jsr $95d5			jsr 	_CI32DivideConvert 			; and recusrively call.
.95ed						_CI32NoRecurse:
.95ed		68		pla				pla 								; remainder
.95ee		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.95f0		90 02		bcc $95f4			bcc 	_CI32NotHex
.95f2		69 26		adc #$26			adc 	#6+32
.95f4						_CI32NotHex:
.95f4		69 30		adc #$30			adc 	#48
.95f6		99 27 06	sta $0627,y			sta 	numberBuffer,y 				; write out and exit
.95f9		c8		iny				iny
.95fa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.95fb						PrecedenceLevel:
>95fb		04					.byte	 4	; $00 <<
>95fc		02					.byte	 2	; $01 <=
>95fd		02					.byte	 2	; $02 <>
>95fe		00					.byte	 0	; $03 !!3
>95ff		00					.byte	 0	; $04 ><
>9600		02					.byte	 2	; $05 >=
>9601		04					.byte	 4	; $06 >>
>9602		00					.byte	 0	; $07 !!7
>9603		00					.byte	 0	; $08 !!8
>9604		00					.byte	 0	; $09 !!9
>9605		00					.byte	 0	; $0a !!10
>9606		00					.byte	 0	; $0b !!11
>9607		00					.byte	 0	; $0c !!12
>9608		00					.byte	 0	; $0d !!13
>9609		00					.byte	 0	; $0e !!14
>960a		00					.byte	 0	; $0f !!15
>960b		00					.byte	 0	; $10 @
>960c		00					.byte	 0	; $11 !!17
>960d		00					.byte	 0	; $12 !!18
>960e		00					.byte	 0	; $13 [
>960f		04					.byte	 4	; $14 \
>9610		00					.byte	 0	; $15 ]
>9611		01					.byte	 1	; $16 ^
>9612		00					.byte	 0	; $17 _
>9613		00					.byte	 0	; $18 `
>9614		00					.byte	 0	; $19 !!25
>9615		00					.byte	 0	; $1a !!26
>9616		00					.byte	 0	; $1b {
>9617		01					.byte	 1	; $1c |
>9618		00					.byte	 0	; $1d }
>9619		00					.byte	 0	; $1e ~
>961a		00					.byte	 0	; $1f [7m<7F>[m
>961b		00					.byte	 0	; $20
>961c		05					.byte	 5	; $21 !
>961d		00					.byte	 0	; $22 "
>961e		00					.byte	 0	; $23 #
>961f		05					.byte	 5	; $24 $
>9620		04					.byte	 4	; $25 %
>9621		01					.byte	 1	; $26 &
>9622		00					.byte	 0	; $27 '
>9623		00					.byte	 0	; $28 (
>9624		00					.byte	 0	; $29 )
>9625		04					.byte	 4	; $2a *
>9626		03					.byte	 3	; $2b +
>9627		00					.byte	 0	; $2c ,
>9628		03					.byte	 3	; $2d -
>9629		00					.byte	 0	; $2e .
>962a		04					.byte	 4	; $2f /
>962b		00					.byte	 0	; $30 0
>962c		00					.byte	 0	; $31 1
>962d		00					.byte	 0	; $32 2
>962e		00					.byte	 0	; $33 3
>962f		00					.byte	 0	; $34 4
>9630		00					.byte	 0	; $35 5
>9631		00					.byte	 0	; $36 6
>9632		00					.byte	 0	; $37 7
>9633		00					.byte	 0	; $38 8
>9634		00					.byte	 0	; $39 9
>9635		00					.byte	 0	; $3a :
>9636		00					.byte	 0	; $3b ;
>9637		02					.byte	 2	; $3c <
>9638		02					.byte	 2	; $3d =
>9639		02					.byte	 2	; $3e >
>963a		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.963b						EvaluateExpressionAt0:
.963b		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.963d						EvaluateExpression:
.963d		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.963f						EvaluateExpressionAtPrecedence:
.963f		48		pha				pha 								; save precedence level
.9640		20 87 9a	jsr $9a87			jsr 	EvaluateTerm 				; evaluate term into level X.
.9643		68		pla				pla 								; restore precedence level.
.9644						_EXPRLoop:
.9644		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9646		b1 30		lda ($30),y			lda 	(codePtr),y
.9648		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.964a		b0 25		bcs $9671			bcs 	_EXPRExit
.964c		da		phx				phx 								; read the operator precedence
.964d		aa		tax				tax
.964e		bd fb 95	lda $95fb,x			lda 	PrecedenceLevel,x
.9651		fa		plx				plx
.9652		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9654		f0 1b		beq $9671			beq 	_EXPRExit
.9656		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9658		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.965a		c5 37		cmp $37				cmp 	zTemp0+1
.965c		b0 13		bcs $9671			bcs		_EXPRExit 					; if current >= operator exit
.965e		48		pha				pha 								; save current precedence.
.965f		b1 30		lda ($30),y			lda 	(codePtr),y
.9661		c8		iny				iny
.9662		48		pha				pha
.9663		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9665		e8		inx				inx 								; work out the right hand side.
.9666		20 3f 96	jsr $963f			jsr 	EvaluateExpressionAtPrecedence
.9669		ca		dex				dex
.966a		68		pla				pla 								; get operator, call the code.
.966b		20 74 96	jsr $9674			jsr 	_EXPRCaller
.966e		68		pla				pla 								; restore precedence level
.966f		80 d3		bra $9644			bra 	_EXPRLoop 					; and go round.
.9671						_EXPRExit:
.9671		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9673		60		rts				rts
.9674						_EXPRCaller:
.9674		da		phx				phx 								; save on stack, first thing is to restore it
.9675		0a		asl a				asl 	a 							; double so can use vectors into X
.9676		aa		tax				tax
.9677		7c a8 8d	jmp ($8da8,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.967a						FloatingPointAdd:
.967a		20 f0 97	jsr $97f0			jsr 	FloatPrepare 				; prepare for floats
.967d		80 09		bra $9688			bra 	FloatAdd
.967f						FloatingPointSub:
.967f		20 f0 97	jsr $97f0			jsr 	FloatPrepare 				; prepare for floats
.9682						FloatSubtract:
.9682		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9684		49 80		eor #$80			eor 	#$80
.9686		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9688						FloatAdd:
.9688		48		pha				pha
.9689		5a		phy				phy
.968a		20 ff 97	jsr $97ff			jsr 	NSNormalise 				; normalise S[X]
.968d		f0 51		beq $96e0			beq 	_FAReturn1
.968f		e8		inx				inx 								; normalise S[X+1]
.9690		20 ff 97	jsr $97ff			jsr 	NSNormalise
.9693		ca		dex				dex
.9694		c9 00		cmp #$00			cmp 	#0
.9696		f0 60		beq $96f8			beq 	_FAExit 					; if so, just return A
.9698		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.969a		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.969c		f0 18		beq $96b6			beq 	_FAExponentsEqual
.969e		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.96a0		a8		tay				tay
.96a1		38		sec				sec 								; do a signed comparison of the exponents.
.96a2		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.96a4		50 02		bvc $96a8			bvc 	_FANoSignedChange
.96a6		49 80		eor #$80			eor 	#$80
.96a8						_FANoSignedChange:
.96a8		29 80		and #$80			and 	#$80
.96aa		10 02		bpl $96ae			bpl 	_FAHaveMax
.96ac		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.96ae						_FAHaveMax:
.96ae		20 fb 96	jsr $96fb			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.96b1		e8		inx				inx
.96b2		20 fb 96	jsr $96fb			jsr 	_FAShiftToExponent
.96b5		ca		dex				dex
.96b6						_FAExponentsEqual:
.96b6		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.96b8		55 51		eor $51,x			eor 	NSStatus+1,x
.96ba		30 0e		bmi $96ca			bmi 	_FADifferentSigns
.96bc		20 33 94	jsr $9433			jsr 	AddTopTwoStack 				; do the add of the mantissae
.96bf		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.96c1		10 35		bpl $96f8			bpl 	_FAExit 					; if no, we are done.
.96c3		20 9d a0	jsr $a09d			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.96c6		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.96c8		80 2e		bra $96f8			bra 	_FAExit
.96ca						_FADifferentSigns:
.96ca		20 4d 94	jsr $944d			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.96cd		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.96cf		10 06		bpl $96d7			bpl 	_FACheckZero 				; if no, check for -0
.96d1		20 46 a0	jsr $a046			jsr 	NSMNegate 					; netate result
.96d4		20 4d a0	jsr $a04d			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.96d7						_FACheckZero:
.96d7		20 a6 a0	jsr $a0a6			jsr 	NSMIsZero	 				; check for -0
.96da		d0 1c		bne $96f8			bne 	_FAExit
.96dc		74 50		stz $50,x			stz 	NSStatus,x
.96de		80 18		bra $96f8			bra 	_FAExit
.96e0						_FAReturn1:
.96e0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.96e2		95 58		sta $58,x			sta 	NSMantissa0,x
.96e4		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.96e6		95 60		sta $60,x			sta 	NSMantissa1,x
.96e8		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.96ea		95 68		sta $68,x			sta 	NSMantissa2,x
.96ec		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.96ee		95 70		sta $70,x			sta 	NSMantissa3,x
.96f0		b5 79		lda $79,x			lda 	NSExponent+1,x
.96f2		95 78		sta $78,x			sta 	NSExponent,x
.96f4		b5 51		lda $51,x			lda 	NSStatus+1,x
.96f6		95 50		sta $50,x			sta 	NSStatus,x
.96f8						_FAExit:
.96f8		7a		ply				ply
.96f9		68		pla				pla
.96fa		60		rts				rts
.96fb						_FAShiftToExponent:
.96fb						_FAShiftToExponent2:
.96fb		98		tya				tya 								; compare Y to exponent
.96fc		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.96fe		f0 07		beq $9707			beq 	_FASEExit 					; exit if so.
.9700		20 9d a0	jsr $a09d			jsr 	NSMShiftRight	 			; shift the mantissa right
.9703		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9705		80 f4		bra $96fb			bra 	_FAShiftToExponent2
.9707						_FASEExit:
.9707		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9708						CompareFloat:
.9708		20 82 96	jsr $9682			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.970b		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.970d		29 f8		and #$f8			and 	#$F8
.970f		15 68		ora $68,x			ora 	NSMantissa2,x
.9711		15 70		ora $70,x			ora 	NSMantissa3,x
.9713		f0 08		beq $971d			beq 	_FCExit 					; zero, so approximately identical
.9715		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9717		34 50		bit $50,x			bit 	NSStatus,x
.9719		10 02		bpl $971d			bpl 	_FCExit
.971b						_FCNegative:
.971b		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.971d						_FCExit:
.971d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.971e						FDivideCommand:
.971e		fa		plx				plx	 								; restore stack position
.971f		20 f0 97	jsr $97f0			jsr 	FloatPrepare 				; prepare for floats
.9722						FloatDivide:
.9722		48		pha				pha
.9723		e8		inx				inx
.9724		20 ff 97	jsr $97ff			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9727		ca		dex				dex
.9728		c9 00		cmp #$00			cmp 	#0
.972a		f0 1d		beq $9749			beq 	_FDZero
.972c		20 ff 97	jsr $97ff			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.972f		f0 16		beq $9747			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9731		20 24 93	jsr $9324			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9734		20 c0 92	jsr $92c0			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9737		20 ff 97	jsr $97ff			jsr		NSNormalise 				; renormalise
.973a		20 b4 93	jsr $93b4			jsr 	CalculateSign 				; calculate result sign
.973d		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.973f		38		sec				sec
.9740		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9742		38		sec				sec
.9743		e9 1e		sbc #$1e			sbc 	#30
.9745		95 78		sta $78,x			sta 	NSExponent,x
.9747						_FDExit:
.9747		68		pla				pla
.9748		60		rts				rts
.9749						_FDZero:
.9749		a9 03		lda #$03		lda	#3
.974b		4c 39 91	jmp $9139		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.974e						FloatFractionalPart:
.974e		5a		phy				phy
.974f		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9751		29 7f		and #$7f			and 	#$7F
.9753		95 50		sta $50,x			sta 	NSStatus,x
.9755		20 ff 97	jsr $97ff			jsr 	NSNormalise
.9758		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.975a		38		sec				sec
.975b		e9 e0		sbc #$e0			sbc 	#$E0
.975d		90 29		bcc $9788			bcc 	_FFPExit 					; already fractional
.975f		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9761		b0 22		bcs $9785			bcs 	_FFPZero
.9763		a8		tay				tay 								; put count to do in Y
.9764		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9766		20 8a 97	jsr $978a			jsr 	_FFPPartial
.9769		95 70		sta $70,x			sta 	NSMantissa3,x
.976b		b5 68		lda $68,x			lda 	NSMantissa2,x
.976d		20 8a 97	jsr $978a			jsr 	_FFPPartial
.9770		95 68		sta $68,x			sta 	NSMantissa2,x
.9772		b5 60		lda $60,x			lda 	NSMantissa1,x
.9774		20 8a 97	jsr $978a			jsr 	_FFPPartial
.9777		95 60		sta $60,x			sta 	NSMantissa1,x
.9779		b5 58		lda $58,x			lda 	NSMantissa0,x
.977b		20 8a 97	jsr $978a			jsr 	_FFPPartial
.977e		95 58		sta $58,x			sta 	NSMantissa0,x
.9780		20 a6 a0	jsr $a0a6			jsr 	NSMIsZero 					; zeroed check.
.9783		d0 03		bne $9788			bne 	_FFPExit
.9785						_FFPZero:
.9785		20 84 a0	jsr $a084			jsr 	NSMSetZero
.9788						_FFPExit:
.9788		7a		ply				ply
.9789		60		rts				rts
.978a						_FFPPartial:
.978a		c0 00		cpy #$00			cpy 	#0 							; no more to do
.978c		f0 17		beq $97a5			beq 	_FFFPPExit
.978e		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9790		b0 0c		bcs $979e			bcs 	_FFFPPWholeByte
.9792		5a		phy				phy
.9793						_FFFPPLeft:
.9793		0a		asl a				asl 	a
.9794		88		dey				dey
.9795		d0 fc		bne $9793			bne 	_FFFPPLeft
.9797		7a		ply				ply
.9798						_FFFPPRight:
.9798		4a		lsr a				lsr 	a
.9799		88		dey				dey
.979a		d0 fc		bne $9798			bne 	_FFFPPRight
.979c		80 07		bra $97a5			bra 	_FFFPPExit
.979e						_FFFPPWholeByte:
.979e		98		tya				tya 								; subtract 8 from count
.979f		38		sec				sec
.97a0		e9 08		sbc #$08			sbc 	#8
.97a2		a8		tay				tay
.97a3		a9 00		lda #$00			lda 	#0 							; and clear all
.97a5						_FFFPPExit:
.97a5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.97a6						FloatIntegerPart:
.97a6		48		pha				pha
.97a7		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.97a9		f0 1d		beq $97c8			beq 	_FIPExit 					; if so do nothing
.97ab		20 a6 a0	jsr $a0a6			jsr 	NSMIsZero 					; is it zero ?
.97ae		f0 15		beq $97c5			beq 	_FIPZero 					; if so return zero.
.97b0		20 ff 97	jsr $97ff			jsr 	NSNormalise 				; normalise
.97b3		f0 10		beq $97c5			beq 	_FIPZero 					; normalised to zero, exit zero
.97b5						_FIPShift:
.97b5		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.97b7		10 07		bpl $97c0			bpl 	_FIPCheckZero
.97b9		20 9d a0	jsr $a09d			jsr 	NSMShiftRight 				; shift mantissa right
.97bc		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.97be		80 f5		bra $97b5			bra 	_FIPShift
.97c0						_FIPCheckZero:
.97c0		20 a6 a0	jsr $a0a6			jsr 	NSMIsZero 					; avoid -0 problem
.97c3		d0 03		bne $97c8			bne 	_FIPExit 					; set to zero if mantissa zero.
.97c5						_FIPZero:
.97c5		20 84 a0	jsr $a084			jsr 	NSMSetZero
.97c8						_FIPExit:
.97c8		68		pla				pla
.97c9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.97ca						FloatingPointMultiply:
.97ca		20 f0 97	jsr $97f0			jsr 	FloatPrepare 				; prepare for floats
.97cd						FloatMultiply:
.97cd		48		pha				pha
.97ce		20 ff 97	jsr $97ff			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.97d1		f0 18		beq $97eb			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.97d3		e8		inx				inx
.97d4		20 ff 97	jsr $97ff			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.97d7		ca		dex				dex
.97d8		c9 00		cmp #$00			cmp 	#0
.97da		f0 0c		beq $97e8			beq 	_FDSetZero
.97dc		20 76 93	jsr $9376			jsr 	MultiplyShort 				; calculate the result.
.97df		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.97e1		18		clc				clc
.97e2		75 79		adc $79,x			adc 	NSExponent+1,x
.97e4		95 78		sta $78,x			sta 	NSExponent,x
.97e6		80 03		bra $97eb			bra 	_FDExit
.97e8						_FDSetZero:
.97e8		20 84 a0	jsr $a084			jsr 	NSMSetZero 					; return 0
.97eb						_FDExit:
.97eb		20 ff 97	jsr $97ff			jsr 	NSNormalise 				; normalise the result
.97ee		68		pla				pla
.97ef		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.97f0						FloatPrepare:
.97f0		20 fb 98	jsr $98fb			jsr 	DereferenceTopTwo 			; dereference the top two values
.97f3		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.97f5		15 51		ora $51,x			ora 	NSStatus+1,x
.97f7		29 10		and #$10			and 	#NSBIsString
.97f9		d0 01		bne $97fc			bne 	_FDType
.97fb		60		rts				rts
.97fc						_FDType:
.97fc		4c 0c a2	jmp $a20c			jmp 	TypeError
.97ff						NSNormalise:
.97ff		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9801		29 80		and #$80			and 	#$80
.9803		09 08		ora #$08			ora 	#NSTFloat
.9805		95 50		sta $50,x			sta 	NSStatus,x
.9807		20 a6 a0	jsr $a0a6			jsr 	NSMIsZero 					; if zero exit
.980a		d0 07		bne $9813			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.980c		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.980e		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9810		a9 00		lda #$00			lda 	#0 							; set Z flag
.9812		60		rts				rts
.9813						_NSNormaliseOptimise:
.9813		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9815		d0 19		bne $9830			bne 	_NSNormaliseLoop
.9817		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9819		30 15		bmi $9830			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.981b		95 70		sta $70,x			sta 	NSMantissa3,x
.981d		b5 60		lda $60,x			lda 	NSMantissa1,x
.981f		95 68		sta $68,x			sta 	NSMantissa2,x
.9821		b5 58		lda $58,x			lda 	NSMantissa0,x
.9823		95 60		sta $60,x			sta 	NSMantissa1,x
.9825		74 58		stz $58,x			stz 	NSMantissa0,x
.9827		b5 78		lda $78,x			lda 	NSExponent,x
.9829		38		sec				sec
.982a		e9 08		sbc #$08			sbc 	#8
.982c		95 78		sta $78,x			sta 	NSExponent,x
.982e		80 e3		bra $9813			bra 	_NSNormaliseOptimise
.9830						_NSNormaliseLoop:
.9830		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9832		70 07		bvs $983b			bvs 	_NSNExit 					; exit if so with Z flag clear
.9834		20 93 a0	jsr $a093			jsr 	NSMShiftLeft 				; shift mantissa left
.9837		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9839		80 f5		bra $9830			bra 	_NSNormaliseLoop
.983b						_NSNExit:
.983b		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.983d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.983e						AssignNumber:
.983e		5a		phy				phy
.983f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9841		85 36		sta $36				sta 	zTemp0
.9843		b5 60		lda $60,x			lda 	NSMantissa1,x
.9845		85 37		sta $37				sta 	zTemp0+1
.9847		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9849		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.984b		95 50		sta $50,x			sta 	NSStatus,x
.984d		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.984f		c9 08		cmp #$08			cmp 	#NSTFloat
.9851		f0 24		beq $9877			beq 	_ANFloat
.9853		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9855		f0 03		beq $985a			beq		_ANNotFloat
.9857		4c 07 a2	jmp $a207			jmp 	RangeError					; if it is, report an error.
.985a						_ANNotFloat:
.985a		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.985c		29 03		and #$03			and 	#3
.985e		d0 05		bne $9865			bne 	_ANByteWord
.9860		20 82 98	jsr $9882			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9863		80 1b		bra $9880			bra 	_ANExit
.9865						_ANByteWord:
.9865		48		pha				pha 								; save count
.9866		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9868		92 36		sta ($36)			sta 	(zTemp0)
.986a		68		pla				pla
.986b		c9 01		cmp #$01			cmp	 	#1
.986d		f0 11		beq $9880			beq 	_ANExit
.986f		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9871		a0 01		ldy #$01			ldy 	#1
.9873		91 36		sta ($36),y			sta 	(zTemp0),y
.9875		80 09		bra $9880			bra 	_ANExit
.9877						_ANFloat:
.9877		20 82 98	jsr $9882			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.987a		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.987c		a0 04		ldy #$04			ldy 	#4
.987e		91 36		sta ($36),y			sta 	(zTemp0),y
.9880						_ANExit:
.9880		7a		ply				ply
.9881		60		rts				rts
.9882						_ANCopy4PackSign:
.9882		a0 03		ldy #$03			ldy 	#3
.9884		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9886		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9888		15 71		ora $71,x			ora 	NSMantissa3+1,x
.988a		91 36		sta ($36),y			sta 	(zTemp0),y
.988c		88		dey				dey
.988d		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.988f		91 36		sta ($36),y			sta 	(zTemp0),y
.9891		88		dey				dey
.9892		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9894		91 36		sta ($36),y			sta 	(zTemp0),y
.9896		88		dey				dey
.9897		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9899		91 36		sta ($36),y			sta 	(zTemp0),y
.989b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.989c						AssignString:
.989c		5a		phy				phy
.989d		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.989f		85 38		sta $38				sta 	zTemp1
.98a1		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.98a3		85 39		sta $39				sta 	zTemp1+1
.98a5		b5 58		lda $58,x			lda 	NSMantissa0,x
.98a7		85 36		sta $36				sta 	zTemp0
.98a9		b5 60		lda $60,x			lda 	NSMantissa1,x
.98ab		85 37		sta $37				sta 	zTemp0+1
.98ad		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.98af		b1 36		lda ($36),y			lda 	(zTemp0),y
.98b1		f0 23		beq $98d6			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.98b3		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.98b4		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.98b6		e9 02		sbc #$02			sbc 	#2
.98b8		85 3c		sta $3c				sta 	zsTemp
.98ba		a0 01		ldy #$01			ldy 	#1
.98bc		b1 36		lda ($36),y			lda 	(zTemp0),y
.98be		e9 00		sbc #$00			sbc 	#0
.98c0		85 3d		sta $3d				sta 	zsTemp+1
.98c2		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.98c4						_ASGetLength:
.98c4		c8		iny				iny
.98c5		b1 38		lda ($38),y			lda 	(zTemp1),y
.98c7		d0 fb		bne $98c4			bne 	_ASGetLength
.98c9		98		tya				tya 								; is this length <= current length
.98ca		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.98cc		90 1e		bcc $98ec			bcc 	_ASCopyString
.98ce		f0 1c		beq $98ec			beq 	_ASCopyString
.98d0		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.98d2		a0 01		ldy #$01			ldy 	#1
.98d4		91 3c		sta ($3c),y			sta 	(zsTemp),y
.98d6						_ASNewStringRequired:
.98d6		e8		inx				inx 								; concrete the new string.
.98d7		20 d6 b1	jsr $b1d6			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.98da		ca		dex				dex
.98db		18		clc				clc
.98dc		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.98de		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.98e0		92 36		sta ($36)			sta 	(zTemp0)
.98e2		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.98e4		69 00		adc #$00			adc 	#0
.98e6		a0 01		ldy #$01			ldy 	#1
.98e8		91 36		sta ($36),y			sta 	(zTemp0),y
.98ea		80 0d		bra $98f9			bra 	_ASExit
.98ec						_ASCopyString:
.98ec		a0 00		ldy #$00			ldy 	#0
.98ee						_ASCopyLoop:
.98ee		b1 38		lda ($38),y			lda 	(zTemp1),y
.98f0		c8		iny				iny
.98f1		c8		iny				iny
.98f2		91 3c		sta ($3c),y			sta 	(zsTemp),y
.98f4		88		dey				dey
.98f5		c9 00		cmp #$00			cmp 	#0
.98f7		d0 f5		bne $98ee			bne 	_ASCopyLoop
.98f9						_ASExit:
.98f9		7a		ply				ply
.98fa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.98fb						DereferenceTopTwo:
.98fb		e8		inx				inx
.98fc		20 00 99	jsr $9900			jsr 	Dereference 				; deref x+1
.98ff		ca		dex				dex  								; falls through to deref x
.9900						Dereference:
.9900		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9902		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9904		f0 48		beq $994e			beq 	_DRFExit 					; not a reference, so exit.
.9906		5a		phy				phy
.9907		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9909		85 36		sta $36				sta 	zTemp0
.990b		b5 60		lda $60,x			lda 	NSMantissa1,x
.990d		85 37		sta $37				sta 	zTemp0+1
.990f		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9911		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9913		95 58		sta $58,x			sta 	NSMantissa0,x
.9915		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9917		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9919		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.991b		f0 0e		beq $992b			beq 	_DRFDereferenceTwo
.991d		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.991f		f0 2f		beq $9950			beq 	_DRFFull
.9921		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9923		29 03		and #$03			and 	#3
.9925		f0 29		beq $9950			beq 	_DRFFull 					; the whole word
.9927		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9929		f0 06		beq $9931			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.992b						_DRFDereferenceTwo:
.992b		a0 01		ldy #$01			ldy 	#1
.992d		b1 36		lda ($36),y			lda 	(zTemp0),y
.992f		95 60		sta $60,x			sta 	NSMantissa1,x
.9931						_DRFClear23:
.9931		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9933		74 70		stz $70,x			stz 	NSMantissa3,x
.9935		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9937		29 18		and #$18			and 	#NSBTypeMask
.9939		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.993b		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.993d		d0 0e		bne $994d			bne 	_DRFNotString
.993f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9941		15 60		ora $60,x			ora 	NSMantissa1,x
.9943		d0 08		bne $994d			bne 	_DRFNotString
.9945		a9 4f		lda #$4f			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9947		95 58		sta $58,x			sta 	NSMantissa0,x
.9949		a9 99		lda #$99			lda 	#_DRFNullString >> 8
.994b		95 60		sta $60,x			sta 	NSMantissa1,x
.994d						_DRFNotString
.994d		7a		ply				ply 								; restore Y and exit
.994e						_DRFExit:
.994e		60		rts				rts
.994f						_DRFNullString:
>994f		00						.byte 	0
.9950						_DRFFull:
.9950		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9952		b1 36		lda ($36),y			lda 	(zTemp0),y
.9954		95 60		sta $60,x			sta 	NSMantissa1,x
.9956		c8		iny				iny
.9957		b1 36		lda ($36),y			lda 	(zTemp0),y
.9959		95 68		sta $68,x			sta 	NSMantissa2,x
.995b		c8		iny				iny
.995c		b1 36		lda ($36),y			lda 	(zTemp0),y
.995e		95 70		sta $70,x			sta 	NSMantissa3,x
.9960		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9962		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9964		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9966		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9968		f0 05		beq $996f			beq 	_DRFNoExponent
.996a		c8		iny				iny 								; if not, read the exponent as well.
.996b		b1 36		lda ($36),y			lda 	(zTemp0),y
.996d		95 78		sta $78,x			sta 	NSExponent,x
.996f						_DRFNoExponent:
.996f		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9971		10 0a		bpl $997d			bpl 	_DRFExit2 					; if not, then exit.
.9973		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9975		95 70		sta $70,x			sta 	NSMantissa3,x
.9977		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9979		09 80		ora #$80			ora 	#NSBIsNegative
.997b		95 50		sta $50,x			sta 	NSStatus,x
.997d						_DRFExit2:
.997d		7a		ply				ply
.997e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.997f						EncodeNumberStart:
.997f		38		sec				sec
.9980		80 01		bra $9983			bra 	EncodeNumberContinue+1
.9982						EncodeNumberContinue:
.9982		18		clc				clc
.9983						EncodeNumber:
.9983		08		php				php 								; save reset flag.
.9984		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9986		f0 12		beq $999a			beq 	_ENIsOkay
.9988		c9 30		cmp #$30			cmp 	#"0"
.998a		90 04		bcc $9990			bcc 	_ENBadNumber
.998c		c9 3a		cmp #$3a			cmp 	#"9"+1
.998e		90 0a		bcc $999a			bcc 	_ENIsOkay
.9990						_ENBadNumber:
.9990		28		plp				plp 								; throw saved reset
.9991		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9994		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9996		f0 7b		beq $9a13			beq 	_ENConstructFinal
.9998						_ENFail:
.9998		18		clc				clc 								; not allowed
.9999		60		rts				rts
.999a						_ENIsOkay:
.999a		28		plp				plp 								; are we restarting
.999b		90 15		bcc $99b2			bcc 	_ENNoRestart
.999d						_ENStartEncode:
.999d		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.999f		f0 0c		beq $99ad			beq 	_ENFirstDP
.99a1		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.99a3		20 86 a0	jsr $a086			jsr 	NSMSetByte 					; in single byte mode.
.99a6		a9 01		lda #$01			lda 	#ESTA_Low
.99a8						_ENExitChange:
.99a8		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.99ab		38		sec				sec
.99ac		60		rts				rts
.99ad						_ENFirstDP:
.99ad		20 84 a0	jsr $a084			jsr 	NSMSetZero 					; clear integer part
.99b0		80 3c		bra $99ee			bra 	_ESTASwitchFloat			; go straight to float and exi
.99b2						_ENNoRestart:
.99b2		48		pha				pha 								; save digit or DP on stack.
.99b3		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.99b6		c9 01		cmp #$01			cmp 	#ESTA_Low
.99b8		f0 09		beq $99c3			beq  	_ESTALowState
.99ba		c9 02		cmp #$02			cmp 	#ESTA_High
.99bc		f0 26		beq $99e4			beq 	_ESTAHighState
.99be		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.99c0		f0 38		beq $99fa			beq 	_ESTADecimalState
>99c2		db						.byte 	$DB 						; causes a break in the emulator
.99c3						_ESTALowState:
.99c3		68		pla				pla 								; get value back
.99c4		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.99c6		f0 26		beq $99ee			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.99c8		29 0f		and #$0f			and 	#15 						; make digit
.99ca		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.99cd		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.99cf		0a		asl a				asl 	a
.99d0		0a		asl a				asl 	a
.99d1		75 58		adc $58,x			adc 	NSMantissa0,x
.99d3		0a		asl a				asl 	a
.99d4		6d 06 04	adc $0406			adc 	digitTemp
.99d7		95 58		sta $58,x			sta 	NSMantissa0,x
.99d9		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.99db		90 05		bcc $99e2			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.99dd		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.99df		8d 05 04	sta $0405			sta 	encodeState
.99e2						_ESTANoSwitch:
.99e2		38		sec				sec
.99e3		60		rts				rts
.99e4						_ESTAHighState:
.99e4		68		pla				pla 								; get value back
.99e5		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.99e7		f0 05		beq $99ee			beq 	_ESTASwitchFloat
.99e9		20 47 9a	jsr $9a47			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.99ec		38		sec				sec
.99ed		60		rts				rts
.99ee						_ESTASwitchFloat:
.99ee		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.99f1		e8		inx				inx 								; zero the decimal additive.
.99f2		20 84 a0	jsr $a084			jsr 	NSMSetZero
.99f5		ca		dex				dex
.99f6		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.99f8		80 ae		bra $99a8			bra 	_ENExitChange
.99fa						_ESTADecimalState:
.99fa		68		pla				pla 								; digit.
.99fb		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.99fd		f0 99		beq $9998			beq 	_ENFail
.99ff		e8		inx				inx 								; put digit into fractional part of X+1
.9a00		20 47 9a	jsr $9a47			jsr 	ESTAShiftDigitIntoMantissa
.9a03		ca		dex				dex
.9a04		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9a07		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9a0a		c9 0b		cmp #$0b			cmp 	#11
.9a0c		f0 02		beq $9a10			beq 	_ESTADSFail
.9a0e		38		sec				sec
.9a0f		60		rts				rts
.9a10						_ESTADSFail:
.9a10		4c 07 a2	jmp $a207			jmp 	RangeError
.9a13						_ENConstructFinal:
.9a13		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9a16		f0 2d		beq $9a45			beq 	_ENCFExit 					; no decimals
.9a18		5a		phy				phy
.9a19		0a		asl a				asl 	a 							; x 4 and CLC
.9a1a		0a		asl a				asl 	a
.9a1b		6d 07 04	adc $0407			adc 	decimalCount
.9a1e		a8		tay				tay
.9a1f		b9 c6 a1	lda $a1c6,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9a22		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9a24		b9 c7 a1	lda $a1c7,y			lda 	DecimalScalarTable-5+1,y
.9a27		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9a29		b9 c8 a1	lda $a1c8,y			lda 	DecimalScalarTable-5+2,y
.9a2c		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9a2e		b9 c9 a1	lda $a1c9,y			lda 	DecimalScalarTable-5+3,y
.9a31		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9a33		b9 ca a1	lda $a1ca,y			lda 	DecimalScalarTable-5+4,y
.9a36		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9a38		a9 08		lda #$08			lda 	#NSTFloat
.9a3a		95 52		sta $52,x			sta 	NSStatus+2,x
.9a3c		7a		ply				ply
.9a3d		e8		inx				inx 								; multiply decimal const by decimal scalar
.9a3e		20 cd 97	jsr $97cd			jsr 	FloatMultiply
.9a41		ca		dex				dex
.9a42		20 88 96	jsr $9688			jsr 	FloatAdd 					; add to integer part.
.9a45						_ENCFExit:
.9a45		18		clc				clc 								; reject the digit.
.9a46		60		rts				rts
.9a47						ESTAShiftDigitIntoMantissa:
.9a47		29 0f		and #$0f			and 	#15 						; save digit
.9a49		48		pha				pha
.9a4a		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9a4c		48		pha				pha
.9a4d		b5 68		lda $68,x			lda 	NSMantissa2,x
.9a4f		48		pha				pha
.9a50		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a52		48		pha				pha
.9a53		b5 58		lda $58,x			lda 	NSMantissa0,x
.9a55		48		pha				pha
.9a56		20 93 a0	jsr $a093			jsr 	NSMShiftLeft 				; x 2
.9a59		20 93 a0	jsr $a093			jsr 	NSMShiftLeft 				; x 4
.9a5c		18		clc				clc 								; pop mantissa and add
.9a5d		68		pla				pla
.9a5e		75 58		adc $58,x			adc 	NSMantissa0,x
.9a60		95 58		sta $58,x			sta 	NSMantissa0,x
.9a62		68		pla				pla
.9a63		75 60		adc $60,x			adc 	NSMantissa1,x
.9a65		95 60		sta $60,x			sta 	NSMantissa1,x
.9a67		68		pla				pla
.9a68		75 68		adc $68,x			adc 	NSMantissa2,x
.9a6a		95 68		sta $68,x			sta 	NSMantissa2,x
.9a6c		68		pla				pla
.9a6d		75 70		adc $70,x			adc 	NSMantissa3,x
.9a6f		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9a71		20 93 a0	jsr $a093			jsr 	NSMShiftLeft 				; x 10
.9a74		68		pla				pla 								; add digit
.9a75		18		clc				clc
.9a76		75 58		adc $58,x			adc 	NSMantissa0,x
.9a78		95 58		sta $58,x			sta 	NSMantissa0,x
.9a7a		90 0a		bcc $9a86			bcc 	_ESTASDExit
.9a7c		f6 60		inc $60,x			inc 	NSMantissa1,x
.9a7e		d0 06		bne $9a86			bne 	_ESTASDExit
.9a80		f6 68		inc $68,x			inc 	NSMantissa2,x
.9a82		d0 02		bne $9a86			bne 	_ESTASDExit
.9a84		f6 70		inc $70,x			inc 	NSMantissa3,x
.9a86						_ESTASDExit:
.9a86		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9a87						EvaluateTerm:
.9a87		b1 30		lda ($30),y			lda 	(codePtr),y
.9a89		30 18		bmi $9aa3			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9a8b		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9a8d		b0 6c		bcs $9afb			bcs 	_ETVariable
.9a8f		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9a91		90 6b		bcc $9afe			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9a93		c9 3a		cmp #$3a			cmp 	#'9'+1
.9a95		b0 67		bcs $9afe			bcs 	_ETPuncUnary
.9a97		20 7f 99	jsr $997f			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9a9a						_ETNumber:
.9a9a		c8		iny				iny 								; keep encoding until we have the numbers
.9a9b		b1 30		lda ($30),y			lda 	(codePtr),y
.9a9d		20 82 99	jsr $9982			jsr 	EncodeNumberContinue
.9aa0		b0 f8		bcs $9a9a			bcs 	_ETNumber 					; go back if accepted.
.9aa2		60		rts				rts
.9aa3						_ETCheckUnary:
.9aa3		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9aa5		f0 3f		beq $9ae6			beq 	_ETString
.9aa7		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9aa9		f0 12		beq $9abd			beq 	_ETHexConstant
.9aab		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9aad		90 0b		bcc $9aba			bcc 	_ETSyntaxError
.9aaf		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1
.9ab1		b0 07		bcs $9aba			bcs 	_ETSyntaxError
.9ab3		da		phx				phx 								; push X on the stack
.9ab4		0a		asl a				asl 	a 							; put vector x 2 into X
.9ab5		aa		tax				tax
.9ab6		c8		iny				iny 								; consume unary function token
.9ab7		7c 28 8e	jmp ($8e28,x)			jmp 	(VectorSet0,x) 				; and do it.
.9aba						_ETSyntaxError:
.9aba		4c 02 a2	jmp $a202			jmp 	SyntaxError
.9abd						_ETHexConstant:
.9abd		c8		iny				iny 								; skip #
.9abe		c8		iny				iny 								; skip count
.9abf		20 84 a0	jsr $a084			jsr 	NSMSetZero 					; clear result
.9ac2						_ETHLoop:
.9ac2		b1 30		lda ($30),y			lda 	(codePtr),y
.9ac4		c8		iny				iny 								; and consume
.9ac5		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9ac7		f0 1c		beq $9ae5			beq 	_ETHExit
.9ac9		48		pha				pha 								; save on stack.
.9aca		20 93 a0	jsr $a093			jsr 	NSMShiftLeft 				; x 2
.9acd		20 93 a0	jsr $a093			jsr 	NSMShiftLeft 				; x 4
.9ad0		20 93 a0	jsr $a093			jsr 	NSMShiftLeft 				; x 8
.9ad3		20 93 a0	jsr $a093			jsr 	NSMShiftLeft 				; x 16
.9ad6		68		pla				pla 								; ASCII
.9ad7		c9 41		cmp #$41			cmp 	#'A'
.9ad9		90 02		bcc $9add			bcc 	_ETHNotChar
.9adb		e9 07		sbc #$07			sbc 	#7
.9add						_ETHNotChar:
.9add		29 0f		and #$0f			and 	#15 						; digit now
.9adf		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9ae1		95 58		sta $58,x			sta 	NSMantissa0,x
.9ae3		80 dd		bra $9ac2			bra 	_ETHLoop 					; go round.
.9ae5						_ETHExit:
.9ae5		60		rts				rts
.9ae6						_ETString:
.9ae6		c8		iny				iny 								; look at length
.9ae7		b1 30		lda ($30),y			lda 	(codePtr),y
.9ae9		48		pha				pha
.9aea		c8		iny				iny 								; first character
.9aeb		20 fe a7	jsr $a7fe			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9aee		68		pla				pla 								; restore count and save
.9aef		85 36		sta $36				sta 	zTemp0
.9af1		98		tya				tya 								; add length to Y to skip it.
.9af2		18		clc				clc
.9af3		65 36		adc $36				adc 	zTemp0
.9af5		a8		tay				tay
.9af6		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9af8		95 50		sta $50,x			sta 	NSStatus,x
.9afa		60		rts				rts
.9afb						_ETVariable:
.9afb		4c 50 9b	jmp $9b50			jmp 	VariableHandler
.9afe						_ETPuncUnary:
.9afe		c8		iny				iny 								; consume the unary character
.9aff		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9b01		f0 2b		beq $9b2e			beq 	_ETUnaryNegate
.9b03		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9b05		f0 36		beq $9b3d			beq 	_ETDereference
.9b07		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9b09		f0 3e		beq $9b49			beq 	_ETParenthesis
.9b0b		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9b0d		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9b0f		f0 06		beq $9b17			beq 	_ETIndirection
.9b11		e6 36		inc $36				inc 	zTemp0
.9b13		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9b15		d0 a3		bne $9aba			bne 	_ETSyntaxError
.9b17						_ETIndirection:
.9b17		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9b19		1a		inc a				inc 	a
.9b1a		48		pha				pha
.9b1b		20 87 9a	jsr $9a87			jsr 	EvaluateTerm				; evaluate the term
.9b1e		20 00 99	jsr $9900			jsr 	Dereference 				; dereference it.
.9b21		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9b23		d0 06		bne $9b2b			bne 	_ETTypeMismatch
.9b25		68		pla				pla 								; indirection 1-2
.9b26		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9b28		95 50		sta $50,x			sta 	NSStatus,x
.9b2a		60		rts				rts
.9b2b						_ETTypeMismatch:
.9b2b		4c 0c a2	jmp $a20c			jmp 	TypeError
.9b2e						_ETUnaryNegate:
.9b2e		20 87 9a	jsr $9a87			jsr 	EvaluateTerm				; evaluate the term
.9b31		20 00 99	jsr $9900			jsr 	Dereference 				; dereference it.
.9b34		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9b36		29 10		and #$10			and 	#NSTString
.9b38		d0 f1		bne $9b2b			bne 	_ETTypeMismatch
.9b3a		4c 46 a0	jmp $a046			jmp 	NSMNegate  					; just toggles the sign bit.
.9b3d						_ETDereference:
.9b3d		20 87 9a	jsr $9a87			jsr 	EvaluateTerm				; evaluate the term
.9b40		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9b42		29 20		and #$20			and 	#NSBIsReference
.9b44		f0 e5		beq $9b2b			beq 	_ETTypeMismatch
.9b46		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9b48		60		rts				rts
.9b49						_ETParenthesis:
.9b49		20 3d 96	jsr $963d			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9b4c		20 20 91	jsr $9120			jsr 	CheckRightBracket 			; check for )
.9b4f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9b50						VariableHandler:
.9b50		b1 30		lda ($30),y			lda 	(codePtr),y
.9b52		18		clc				clc
.9b53		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9b55		85 37		sta $37				sta 	zTemp0+1
.9b57		c8		iny				iny
.9b58		b1 30		lda ($30),y			lda 	(codePtr),y
.9b5a		85 36		sta $36				sta 	zTemp0
.9b5c		c8		iny				iny
.9b5d		18		clc				clc									; copy variable address+3 to mantissa
.9b5e		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9b60		95 58		sta $58,x			sta 	NSMantissa0,x
.9b62		a5 37		lda $37				lda 	zTemp0+1
.9b64		69 00		adc #$00			adc 	#0
.9b66		95 60		sta $60,x			sta 	NSMantissa1,x
.9b68		74 68		stz $68,x			stz 	NSMantissa2,x
.9b6a		74 70		stz $70,x			stz 	NSMantissa3,x
.9b6c		74 78		stz $78,x			stz 	NSExponent,x
.9b6e		5a		phy				phy
.9b6f		a0 02		ldy #$02			ldy 	#2 							; read type
.9b71		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b73		7a		ply				ply
.9b74		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9b76		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9b78		95 50		sta $50,x			sta 	NSStatus,x
.9b7a		29 04		and #$04			and 	#NSBIsArray
.9b7c		d0 01		bne $9b7f			bne 	_VHArray
.9b7e		60		rts				rts
.9b7f						_VHArray:
.9b7f		e8		inx				inx
.9b80		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9b83		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9b85		95 51		sta $51,x			sta 	NSStatus+1,x
.9b87		b1 30		lda ($30),y			lda 	(codePtr),y
.9b89		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9b8b		d0 06		bne $9b93			bne 	_VHNoSecondIndex
.9b8d		c8		iny				iny 								; skip the comma
.9b8e		e8		inx				inx
.9b8f		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9b92		ca		dex				dex
.9b93						_VHNoSecondIndex:
.9b93		ca		dex				dex 								; set X back.
.9b94		20 20 91	jsr $9120			jsr 	CheckRightBracket 			; and check the right bracket.
.9b97		5a		phy				phy 								; save position
.9b98		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9b9a		85 3e		sta $3e				sta 	zaTemp
.9b9c		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b9e		85 3f		sta $3f				sta 	zaTemp+1
.9ba0		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9ba2		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ba4		f0 5d		beq $9c03			beq 	_VHBadArray
.9ba6		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9ba8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9baa		f0 02		beq $9bae			beq 	_VHHas2Mask
.9bac		a9 ff		lda #$ff			lda 	#$FF
.9bae						_VHHas2Mask:
.9bae		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9bb0		f0 4c		beq $9bfe			beq 	_VHBadIndex
.9bb2		0a		asl a				asl 	a 							; carry will be set if a second index
.9bb3		90 08		bcc $9bbd			bcc 	_VHCheckFirstIndex
.9bb5		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9bb7		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bb9		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9bbb		90 41		bcc $9bfe			bcc 	_VHBadIndex
.9bbd						_VHCheckFirstIndex:
.9bbd		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9bbf		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bc1		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9bc3		90 39		bcc $9bfe			bcc 	_VHBadIndex
.9bc5		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9bc7		64 37		stz $37				stz 	zTemp0+1
.9bc9		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9bcb		30 0e		bmi $9bdb			bmi 	_VHNoMultiply
.9bcd		da		phx				phx
.9bce		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9bd0		48		pha				pha
.9bd1		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9bd3		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bd5		1a		inc a				inc 	a 							; add 1 for zero base
.9bd6		fa		plx				plx
.9bd7		20 2f a0	jsr $a02f			jsr 	Multiply8x8 				; calculate -> Z0
.9bda		fa		plx				plx
.9bdb						_VHNoMultiply:
.9bdb		18		clc				clc
.9bdc		a5 36		lda $36				lda 	zTemp0
.9bde		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9be0		85 36		sta $36				sta 	zTemp0
.9be2		a5 37		lda $37				lda 	zTemp0+1
.9be4		69 00		adc #$00			adc 	#0
.9be6		85 37		sta $37				sta 	zTemp0+1
.9be8		b5 50		lda $50,x			lda 	NSStatus,x
.9bea		20 c1 85	jsr $85c1			jsr 	ScaleByBaseType
.9bed		18		clc				clc
.9bee		b2 3e		lda ($3e)			lda 	(zaTemp)
.9bf0		65 36		adc $36				adc 	zTemp0
.9bf2		95 58		sta $58,x			sta 	NSMantissa0,x
.9bf4		a0 01		ldy #$01			ldy 	#1
.9bf6		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bf8		65 37		adc $37				adc 	zTemp0+1
.9bfa		95 60		sta $60,x			sta 	NSMantissa1,x
.9bfc		7a		ply				ply 								; restore position
.9bfd		60		rts				rts
.9bfe						_VHBadIndex:
.9bfe		a9 17		lda #$17		lda	#23
.9c00		4c 39 91	jmp $9139		jmp	ErrorHandler
.9c03						_VHBadArray:
.9c03		a9 18		lda #$18		lda	#24
.9c05		4c 39 91	jmp $9139		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9c08						AbsUnary:
.9c08		fa		plx				plx 								; restore stack pos
.9c09		20 d2 9f	jsr $9fd2			jsr 	EvaluateNumber 				; get a float or int
.9c0c		20 20 91	jsr $9120			jsr 	CheckRightBracket
.9c0f		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9c11		29 7f		and #$7f			and 	#$7F
.9c13		95 50		sta $50,x			sta 	NSStatus,x
.9c15		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9c16						AllocUnary:
.9c16		fa		plx				plx 								; restore stack pos
.9c17		20 04 a0	jsr $a004			jsr 	Evaluate16BitInteger		; get bytes required.
.9c1a		20 20 91	jsr $9120			jsr 	CheckRightBracket
.9c1d		da		phx				phx 								; save X/Y
.9c1e		5a		phy				phy
.9c1f		8a		txa				txa 								; copy X into Y
.9c20		a8		tay				tay
.9c21		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9c24		aa		tax				tax
.9c25		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9c28		20 35 9c	jsr $9c35			jsr 	AllocateXABytes 			; allocate memory
.9c2b		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9c2e		8a		txa				txa 	 							; typing is 16 bit integer.
.9c2f		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9c32		7a		ply				ply
.9c33		fa		plx				plx
.9c34		60		rts				rts
.9c35						AllocateXABytes:
.9c35		5a		phy				phy
.9c36		ac 0c 04	ldy $040c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9c39		84 36		sty $36				sty 	zTemp0
.9c3b		5a		phy				phy
.9c3c		ac 0d 04	ldy $040d			ldy 	lowMemPtr+1
.9c3f		84 37		sty $37				sty 	zTemp0+1
.9c41		5a		phy				phy
.9c42		18		clc				clc 								; add to low memory pointer
.9c43		6d 0c 04	adc $040c			adc 	lowMemPtr
.9c46		8d 0c 04	sta $040c			sta 	lowMemPtr
.9c49		8a		txa				txa
.9c4a		6d 0d 04	adc $040d			adc 	lowMemPtr+1
.9c4d		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.9c50		b0 2f		bcs $9c81			bcs 	CISSMemory
.9c52		20 73 9c	jsr $9c73			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9c55						_ClearMemory:
.9c55		ad 0c 04	lda $040c			lda 	lowMemPtr 					; cleared all memory allocated
.9c58		c5 36		cmp $36				cmp 	zTemp0
.9c5a		d0 07		bne $9c63			bne 	_CMClearNext
.9c5c		ad 0d 04	lda $040d			lda 	lowMemPtr+1
.9c5f		c5 37		cmp $37				cmp 	zTemp0+1
.9c61		f0 0c		beq $9c6f			beq 	_CMExit
.9c63						_CMClearNext:
.9c63		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9c65		92 36		sta ($36)			sta 	(zTemp0)
.9c67		e6 36		inc $36				inc 	zTemp0
.9c69		d0 ea		bne $9c55			bne 	_ClearMemory
.9c6b		e6 37		inc $37				inc		zTemp0+1
.9c6d		80 e6		bra $9c55			bra 	_ClearMemory
.9c6f						_CMExit:
.9c6f		fa		plx				plx
.9c70		68		pla				pla
.9c71		7a		ply				ply
.9c72		60		rts				rts
.9c73						CheckIdentifierStringSpace:
.9c73		48		pha				pha
.9c74		ad 0d 04	lda $040d			lda 	lowMemPtr+1 				; get low memory pointer
.9c77		18		clc				clc
.9c78		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9c7a		cd 0f 04	cmp $040f			cmp 	stringMemory+1 				; is it >= StringMemory
.9c7d		b0 02		bcs $9c81			bcs 	CISSMemory
.9c7f		68		pla				pla
.9c80		60		rts				rts
.9c81						CISSMemory:
.9c81		a9 06		lda #$06		lda	#6
.9c83		4c 39 91	jmp $9139		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9c86						AscUnary:
.9c86		fa		plx				plx 								; restore stack pos
.9c87		20 dc 9f	jsr $9fdc			jsr 	EvaluateString 				; get a string
.9c8a		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9c8c		20 86 a0	jsr $a086			jsr 	NSMSetByte 					; ASC("") will return zero.
.9c8f		20 20 91	jsr $9120			jsr 	CheckRightBracket
.9c92		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9c93						FracUnary:
.9c93		fa		plx				plx 								; restore stack pos
.9c94		20 d2 9f	jsr $9fd2			jsr 	EvaluateNumber 				; get a float or int
.9c97		20 20 91	jsr $9120			jsr 	CheckRightBracket
.9c9a		b5 50		lda $50,x			lda 	NSStatus,x
.9c9c		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9c9e		f0 04		beq $9ca4			beq 	_IUZero
.9ca0		20 4e 97	jsr $974e			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9ca3		60		rts				rts
.9ca4						_IUZero:
.9ca4		20 84 a0	jsr $a084			jsr 	NSMSetZero
.9ca7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9ca8						IntUnary:
.9ca8		fa		plx				plx 								; restore stack pos
.9ca9		20 d2 9f	jsr $9fd2			jsr 	EvaluateNumber 				; get a float or int
.9cac		20 20 91	jsr $9120			jsr 	CheckRightBracket
.9caf		b5 50		lda $50,x			lda 	NSStatus,x
.9cb1		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9cb3		f0 03		beq $9cb8			beq 	_IUExit
.9cb5		20 a6 97	jsr $97a6			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9cb8						_IUExit:
.9cb8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9cb9						LenUnary:
.9cb9		fa		plx				plx 								; restore stack pos
.9cba		20 dc 9f	jsr $9fdc			jsr 	EvaluateString 				; get a string
.9cbd		5a		phy				phy
.9cbe		a0 00		ldy #$00			ldy 	#0 							; find length
.9cc0						_LenFind:
.9cc0		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9cc2		f0 06		beq $9cca			beq 	_LenExit
.9cc4		c8		iny				iny
.9cc5		d0 f9		bne $9cc0			bne 	_LenFind
.9cc7		4c 07 a2	jmp $a207			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9cca						_LenExit:
.9cca		98		tya				tya		 							; return length
.9ccb		20 86 a0	jsr $a086			jsr 	NSMSetByte
.9cce		7a		ply				ply
.9ccf		20 20 91	jsr $9120			jsr 	CheckRightBracket
.9cd2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9cd3						Unary_Min:
.9cd3		a9 01		lda #$01			lda 	#1
.9cd5		80 02		bra $9cd9			bra 	UnaryMinMaxMain
.9cd7						Unary_Max:
.9cd7		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9cd9						UnaryMinMaxMain:
.9cd9		fa		plx				plx 								; get index on number stack
.9cda		48		pha				pha 								; save comparator
.9cdb		20 c9 9f	jsr $9fc9			jsr 	EvaluateValue 				; get the first value.
.9cde						_UMMMLoop:
.9cde		b1 30		lda ($30),y			lda 	(codePtr),y
.9ce0		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9ce2		f0 22		beq $9d06			beq 	_UMMMDone
.9ce4		20 28 91	jsr $9128			jsr 	CheckComma 					; must be a comma
.9ce7		e8		inx				inx
.9ce8		20 c9 9f	jsr $9fc9			jsr 	EvaluateValue
.9ceb		ca		dex				dex
.9cec		20 67 a0	jsr $a067			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9cef		e8		inx				inx
.9cf0		20 67 a0	jsr $a067			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9cf3		e8		inx				inx
.9cf4		20 f0 91	jsr $91f0			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9cf7		ca		dex				dex
.9cf8		ca		dex				dex
.9cf9		85 36		sta $36				sta 	zTemp0 						; save required result
.9cfb		68		pla				pla 								; get and save comparator
.9cfc		48		pha				pha
.9cfd		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9cff		d0 dd		bne $9cde			bne 	_UMMMLoop
.9d01		20 09 9d	jsr $9d09			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9d04		80 d8		bra $9cde			bra 	_UMMMLoop
.9d06						_UMMMDone:
.9d06		68		pla				pla 								; throw the comparator
.9d07		c8		iny				iny 								; skip )
.9d08		60		rts				rts
.9d09						ExpCopyAboveDown:
.9d09		b5 51		lda $51,x			lda 	NSStatus+1,x
.9d0b		95 50		sta $50,x			sta 	NSStatus,x
.9d0d		b5 79		lda $79,x			lda 	NSExponent+1,x
.9d0f		95 78		sta $78,x			sta 	NSExponent,x
.9d11		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9d13		95 58		sta $58,x			sta 	NSMantissa0,x
.9d15		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9d17		95 60		sta $60,x			sta 	NSMantissa1,x
.9d19		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9d1b		95 68		sta $68,x			sta 	NSMantissa2,x
.9d1d		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9d1f		95 70		sta $70,x			sta 	NSMantissa3,x
.9d21		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9d22						Unary_Not:
.9d22		fa		plx				plx
.9d23		20 f1 9f	jsr $9ff1			jsr 	EvaluateInteger 			; get integer
.9d26		20 20 91	jsr $9120			jsr 	CheckRightBracket
.9d29		20 a6 a0	jsr $a0a6			jsr 	NSMIsZero 					; zero mantissa ?
.9d2c		f0 04		beq $9d32			beq 	_NotZero
.9d2e		20 84 a0	jsr $a084			jsr 	NSMSetZero
.9d31		60		rts				rts
.9d32						_NotZero:
.9d32		4c a6 91	jmp $91a6			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9d35						PeekByteUnary:
.9d35		a9 01		lda #$01			lda 	#1
.9d37		80 0a		bra $9d43			bra 	PeekUnary
.9d39						PeekWUnary:
.9d39		a9 02		lda #$02			lda 	#2
.9d3b		80 06		bra $9d43			bra 	PeekUnary
.9d3d						PeekLUnary:
.9d3d		a9 03		lda #$03			lda 	#3
.9d3f		80 02		bra $9d43			bra 	PeekUnary
.9d41						PeekDUnary:
.9d41		a9 04		lda #$04			lda 	#4
.9d43						PeekUnary:
.9d43		fa		plx				plx 								; restore position.
.9d44		48		pha				pha 								; save count to copy on stack
.9d45		20 04 a0	jsr $a004			jsr		Evaluate16BitInteger 		; address as constant.
.9d48		20 20 91	jsr $9120			jsr 	CheckRightBracket
.9d4b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9d4d		85 36		sta $36				sta 	zTemp0
.9d4f		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d51		85 37		sta $37				sta 	zTemp0+1
.9d53		20 84 a0	jsr $a084			jsr 	NSMSetZero 					; clear the result to zero.
.9d56		68		pla				pla 								; count in zTemp2
.9d57		85 3a		sta $3a				sta 	zTemp2
.9d59		da		phx				phx 								; save stack position and offset of read
.9d5a		5a		phy				phy
.9d5b		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9d5d						_PULoop:
.9d5d		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9d5f		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9d61		c8		iny				iny 								; next byte to write
.9d62		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9d63		18		clc				clc
.9d64		69 08		adc #$08			adc 	#MathStackSize
.9d66		aa		tax				tax
.9d67		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9d69		d0 f2		bne $9d5d			bne 	_PULoop
.9d6b		7a		ply				ply 								; restore stack/code pos and exit.
.9d6c		fa		plx				plx
.9d6d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9d6e						Unary_Random:
.9d6e		fa		plx				plx
.9d6f		20 e0 9d	jsr $9de0			jsr 	Random32Bit 				; get a random number
.9d72		20 c9 9d	jsr $9dc9			jsr 	URCopyToMantissa  			; put in mantissa
.9d75		b1 30		lda ($30),y			lda 	(codePtr),y
.9d77		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9d79		f0 08		beq $9d83			beq 	_URNoModulus 				; then we return a random 30 bit number.
.9d7b		e8		inx				inx
.9d7c		20 04 a0	jsr $a004			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9d7f		ca		dex				dex
.9d80		20 f8 92	jsr $92f8			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.9d83						_URNoModulus:
.9d83		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.9d85		74 78		stz $78,x			stz 	NSExponent,x
.9d87		20 20 91	jsr $9120			jsr 	CheckRightBracket
.9d8a		60		rts				rts
.9d8b						Unary_Rnd:
.9d8b		fa		plx				plx
.9d8c		20 d2 9f	jsr $9fd2			jsr 	EvaluateNumber 				; number to use.
.9d8f		20 20 91	jsr $9120			jsr 	CheckRightBracket 			; closing bracket
.9d92		20 a6 a0	jsr $a0a6			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9d95		f0 26		beq $9dbd			beq 	_URCopySeed
.9d97		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9d99		10 1f		bpl $9dba			bpl 	_URDontSeed
.9d9b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9d9d		49 17		eor #$17			eor 	#$17
.9d9f		8d 08 04	sta $0408			sta 	randomSeed+0
.9da2		b5 60		lda $60,x			lda 	NSMantissa1,x
.9da4		49 a5		eor #$a5			eor 	#$A5
.9da6		8d 09 04	sta $0409			sta 	randomSeed+1
.9da9		b5 68		lda $68,x			lda 	NSMantissa2,x
.9dab		49 c2		eor #$c2			eor 	#$C2
.9dad		8d 0a 04	sta $040a			sta 	randomSeed+2
.9db0		b5 70		lda $70,x			lda 	NSMantissa3,x
.9db2		49 9d		eor #$9d			eor 	#$9D
.9db4		8d 0b 04	sta $040b			sta 	randomSeed+3
.9db7		20 e0 9d	jsr $9de0			jsr 	Random32Bit
.9dba						_URDontSeed:
.9dba		20 e0 9d	jsr $9de0			jsr 	Random32Bit 				; generate a number
.9dbd						_URCopySeed:
.9dbd		20 c9 9d	jsr $9dc9			jsr 	URCopyToMantissa 			; copy into mantissa
.9dc0		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.9dc2		95 78		sta $78,x			sta 	NSExponent,x
.9dc4		a9 08		lda #$08			lda 	#NSTFloat
.9dc6		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.9dc8		60		rts				rts
.9dc9						URCopyToMantissa:
.9dc9		ad 08 04	lda $0408			lda 	randomSeed+0
.9dcc		95 58		sta $58,x			sta 	NSMantissa0,x
.9dce		ad 09 04	lda $0409			lda 	randomSeed+1
.9dd1		95 60		sta $60,x			sta 	NSMantissa1,x
.9dd3		ad 0a 04	lda $040a			lda 	randomSeed+2
.9dd6		95 68		sta $68,x			sta 	NSMantissa2,x
.9dd8		ad 0b 04	lda $040b			lda 	randomSeed+3
.9ddb		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9ddd		95 70		sta $70,x			sta 	NSMantissa3,x
.9ddf		60		rts				rts
.9de0						Random32Bit:
.9de0		5a		phy				phy
.9de1		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9de3		ad 08 04	lda $0408			lda 	randomSeed+0 				; check the seed isn't zero
.9de6		d0 03		bne $9deb			bne 	_Random1
.9de8		a8		tay				tay 								; if so do it 256 times
.9de9		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9deb						_Random1:
.9deb		0a		asl a				asl 	a 							; LSFR RNG
.9dec		2e 09 04	rol $0409			rol 	randomSeed+1
.9def		2e 0a 04	rol $040a			rol 	randomSeed+2
.9df2		2e 0b 04	rol $040b			rol 	randomSeed+3
.9df5		90 02		bcc $9df9			bcc 	_Random2
.9df7		49 c5		eor #$c5			eor 	#$C5
.9df9						_Random2:
.9df9		88		dey				dey
.9dfa		d0 ef		bne $9deb			bne 	_Random1
.9dfc		8d 08 04	sta $0408			sta 	randomSeed+0
.9dff		7a		ply				ply
.9e00		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9e01						SgnUnary:
.9e01		fa		plx				plx 								; restore stack pos
.9e02		20 d2 9f	jsr $9fd2			jsr 	EvaluateNumber 				; get a float or int
.9e05		20 20 91	jsr $9120			jsr 	CheckRightBracket
.9e08		20 a6 a0	jsr $a0a6			jsr 	NSMIsZero 					; if zero
.9e0b		f0 0e		beq $9e1b			beq 	_SGZero  					; return Int Zero
.9e0d		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9e0f		48		pha				pha
.9e10		a9 01		lda #$01			lda 	#1 							; set to 1
.9e12		20 86 a0	jsr $a086			jsr 	NSMSetByte
.9e15		68		pla				pla
.9e16		29 80		and #$80			and		#$80 						; copy the sign byte out
.9e18		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9e1a		60		rts				rts
.9e1b		20 84 a0	jsr $a084	_SGZero:jsr 	NSMSetZero
.9e1e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9e1f						ValUnary:
.9e1f		fa		plx				plx 								; restore stack pos
.9e20		20 35 9e	jsr $9e35			jsr 	ValMainCode 				; do the main val() code
.9e23		b0 01		bcs $9e26			bcs 	_VUError 					; couldn't convert
.9e25		60		rts				rts
.9e26						_VUError:
.9e26		4c 0c a2	jmp $a20c			jmp 	TypeError
.9e29						IsValUnary:
.9e29		fa		plx				plx 								; restore stack pos
.9e2a		20 35 9e	jsr $9e35			jsr 	ValMainCode 				; do the main val() code
.9e2d		b0 03		bcs $9e32			bcs 	_VUBad
.9e2f		4c a6 91	jmp $91a6			jmp 	ReturnTrue
.9e32						_VUBad:
.9e32		4c b1 91	jmp $91b1			jmp 	ReturnFalse
.9e35						ValMainCode:
.9e35		20 dc 9f	jsr $9fdc			jsr 	EvaluateString 				; get a string
.9e38		20 20 91	jsr $9120			jsr 	CheckRightBracket 			; check right bracket present
.9e3b						ValEvaluateZTemp0:
.9e3b		5a		phy				phy
.9e3c		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9e3e		f0 17		beq $9e57			beq 	_VMCFail2
.9e40		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9e42		48		pha				pha 								; save first character
.9e43		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.9e45		d0 01		bne $9e48			bne 	_VMCStart
.9e47		c8		iny				iny 								; skip over -
.9e48						_VMCStart:
.9e48		38		sec				sec 								; initialise first time round.
.9e49						_VMCNext:
.9e49		c8		iny				iny 								; pre-increment
.9e4a		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.9e4c		f0 0c		beq $9e5a			beq 	_VMCSuccess 				; successful.
.9e4e		20 83 99	jsr $9983			jsr 	EncodeNumber 				; send it to the number-builder
.9e51		90 03		bcc $9e56			bcc 	_VMCFail 					; if failed, give up.
.9e53		18		clc				clc 								; next time round, countinue
.9e54		80 f3		bra $9e49			bra 	_VMCNext
.9e56						_VMCFail:
.9e56		68		pla				pla
.9e57						_VMCFail2:
.9e57		7a		ply				ply
.9e58		38		sec				sec
.9e59		60		rts				rts
.9e5a						_VMCSuccess:
.9e5a		a9 00		lda #$00			lda 	#0 							; construct final
.9e5c		20 83 99	jsr $9983			jsr 	EncodeNumber 				; by sending a duff value.
.9e5f		68		pla				pla 								; if it was -ve
.9e60		c9 2d		cmp #$2d			cmp 	#"-"
.9e62		d0 03		bne $9e67			bne 	_VMCNotNegative
.9e64		20 46 a0	jsr $a046			jsr		NSMNegate 					; negate it.
.9e67						_VMCNotNegative:
.9e67		7a		ply				ply
.9e68		18		clc				clc
.9e69		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9e6a						ChrUnary:
.9e6a		fa		plx				plx 								; restore stack pos
.9e6b		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.9e6e		48		pha				pha
.9e6f		20 20 91	jsr $9120			jsr 	CheckRightBracket
.9e72		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9e74		20 53 b2	jsr $b253			jsr 	StringTempAllocate
.9e77		68		pla				pla 								; write number to it
.9e78		20 8c b2	jsr $b28c			jsr 	StringTempWrite
.9e7b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9e7c						SpcUnary:
.9e7c		fa		plx				plx 								; restore stack pos
.9e7d		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger			; get value
.9e80		5a		phy				phy
.9e81		48		pha				pha 								; save count
.9e82		20 53 b2	jsr $b253			jsr 	StringTempAllocate
.9e85		7a		ply				ply 								; to do count in Y
.9e86						_SpcLoop:
.9e86		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.9e88		f0 08		beq $9e92			beq 	_SpcExit
.9e8a		a9 20		lda #$20			lda 	#32
.9e8c		20 8c b2	jsr $b28c			jsr 	StringTempWrite
.9e8f		88		dey				dey
.9e90		80 f4		bra $9e86			bra 	_SpcLoop
.9e92						_SpcExit:
.9e92		7a		ply				ply
.9e93		20 20 91	jsr $9120			jsr 	CheckRightBracket
.9e96		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9e97						Unary_Str:
.9e97		fa		plx				plx
.9e98		20 d2 9f	jsr $9fd2			jsr 	EvaluateNumber  			; get number
.9e9b		20 20 91	jsr $9120			jsr 	CheckRightBracket 			; closing bracket
.9e9e		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9ea0		20 b9 9e	jsr $9eb9			jsr 	ConvertNumberToString 		; do the conversion.
.9ea3		a9 21		lda #$21			lda		#33 						; create buffer
.9ea5		20 53 b2	jsr $b253			jsr 	StringTempAllocate 			; allocate memory
.9ea8		da		phx				phx  								; copy the converted string into the buffer.
.9ea9		a2 00		ldx #$00			ldx 	#0
.9eab						_USCopy:
.9eab		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.9eae		20 8c b2	jsr $b28c			jsr 	StringTempWrite
.9eb1		e8		inx				inx
.9eb2		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.9eb5		d0 f4		bne $9eab			bne 	_USCopy
.9eb7		fa		plx				plx
.9eb8		60		rts				rts
.9eb9						ConvertNumberToString:
.9eb9		5a		phy				phy 								; save code position
.9eba		8d 14 04	sta $0414			sta 	decimalPlaces	 			; save number of DPs.
.9ebd		9c 15 04	stz $0415			stz 	dbOffset 					; offset into decimal buffer = start.
.9ec0		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.9ec2		10 09		bpl $9ecd			bpl 	_CNTSNotNegative
.9ec4		29 7f		and #$7f			and 	#$7F 						; make +ve
.9ec6		95 50		sta $50,x			sta 	NSStatus,x
.9ec8		a9 2d		lda #$2d			lda 	#"-"
.9eca		20 2e 9f	jsr $9f2e			jsr 	WriteDecimalBuffer
.9ecd						_CNTSNotNegative:
.9ecd		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.9ecf		f0 12		beq $9ee3			beq 	_CNTSNotFloat
.9ed1		e8		inx				inx 								; round up so we don't get too many 6.999999
.9ed2		a9 01		lda #$01			lda 	#1
.9ed4		20 86 a0	jsr $a086			jsr 	NSMSetByte
.9ed7		ca		dex				dex
.9ed8		b5 78		lda $78,x			lda		NSExponent,x
.9eda		95 79		sta $79,x			sta 	NSExponent+1,x
.9edc		a9 08		lda #$08			lda 	#NSTFloat
.9ede		95 51		sta $51,x			sta 	NSStatus+1,x
.9ee0		20 88 96	jsr $9688			jsr 	FloatAdd
.9ee3						_CNTSNotFloat:
.9ee3		20 10 9f	jsr $9f10			jsr 	MakePlusTwoString 			; do the integer part.
.9ee6		20 4e 97	jsr $974e			jsr 	FloatFractionalPart 		; get the fractional part
.9ee9		20 ff 97	jsr $97ff			jsr 	NSNormalise					; normalise , exit if zero
.9eec		f0 20		beq $9f0e			beq 	_CNTSExit
.9eee		a9 2e		lda #$2e			lda 	#"."
.9ef0		20 2e 9f	jsr $9f2e			jsr 	WriteDecimalBuffer 			; write decimal place
.9ef3						_CNTSDecimal:
.9ef3		ce 14 04	dec $0414			dec 	decimalPlaces 				; done all the decimals
.9ef6		30 16		bmi $9f0e			bmi 	_CNTSExit
.9ef8		e8		inx				inx 								; x 10.0
.9ef9		a9 0a		lda #$0a			lda 	#10
.9efb		20 86 a0	jsr $a086			jsr 	NSMSetByte
.9efe		a9 08		lda #$08			lda 	#NSTFloat
.9f00		95 50		sta $50,x			sta 	NSStatus,x
.9f02		ca		dex				dex
.9f03		20 cd 97	jsr $97cd			jsr 	FloatMultiply
.9f06		20 10 9f	jsr $9f10			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.9f09		20 4e 97	jsr $974e			jsr 	FloatFractionalPart 		; get the fractional part
.9f0c		80 e5		bra $9ef3			bra 	_CNTSDecimal 				; keep going.
.9f0e						_CNTSExit:
.9f0e		7a		ply				ply
.9f0f		60		rts				rts
.9f10						MakePlusTwoString:
.9f10		da		phx				phx
.9f11		20 67 a0	jsr $a067			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9f14		e8		inx				inx 								; access it
.9f15		e8		inx				inx
.9f16		20 a6 97	jsr $97a6			jsr 	FloatIntegerPart 			; make it an integer
.9f19		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9f1b		20 b8 95	jsr $95b8			jsr 	ConvertInt32
.9f1e		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.9f20						_MPTSCopy:
.9f20		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.9f23		20 2e 9f	jsr $9f2e			jsr 	WriteDecimalBuffer
.9f26		e8		inx				inx
.9f27		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.9f2a		d0 f4		bne $9f20			bne 	_MPTSCopy
.9f2c		fa		plx				plx
.9f2d		60		rts				rts
.9f2e						WriteDecimalBuffer:
.9f2e		da		phx				phx
.9f2f		ae 15 04	ldx $0415			ldx 	dbOffset
.9f32		9d 49 06	sta $0649,x			sta 	decimalBuffer,x
.9f35		9e 4a 06	stz $064a,x			stz 	decimalBuffer+1,x
.9f38		ee 15 04	inc $0415			inc 	dbOffset
.9f3b		fa		plx				plx
.9f3c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9f3d						Unary_Left:
.9f3d		fa		plx				plx
.9f3e		18		clc				clc 								; only one parameter
.9f3f		20 a2 9f	jsr $9fa2			jsr 	SubstringInitial 			; set up.
.9f42		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9f44		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9f46		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9f48		80 25		bra $9f6f			bra 	SubstringMain
.9f4a						Unary_Right:
.9f4a		fa		plx				plx
.9f4b		18		clc				clc 								; only one parameter
.9f4c		20 a2 9f	jsr $9fa2			jsr 	SubstringInitial 			; set up.
.9f4f		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.9f51		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9f53		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.9f55		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.9f57		b0 02		bcs $9f5b			bcs 	_URNotUnderflow
.9f59		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9f5b						_URNotUnderflow:
.9f5b		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.9f5d		80 10		bra $9f6f			bra 	SubstringMain
.9f5f						Unary_Mid:
.9f5f		fa		plx				plx
.9f60		38		sec				sec 								; two parameters
.9f61		20 a2 9f	jsr $9fa2			jsr 	SubstringInitial 			; set up.
.9f64		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9f66		f0 04		beq $9f6c			beq 	_UMError
.9f68		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9f6a		80 03		bra $9f6f			bra 	SubstringMain
.9f6c						_UMError:
.9f6c		4c 11 a2	jmp $a211			jmp 	ArgumentError
.9f6f						SubstringMain:
.9f6f		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9f71		d5 78		cmp $78,x			cmp 	NSExponent,x
.9f73		b0 27		bcs $9f9c			bcs 	_SSMNull 					; if so, return an empty string.
.9f75		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9f77		f0 23		beq $9f9c			beq 	_SSMNull 					; return empty string.
.9f79		18		clc				clc 								; add the offset +1 to the address and
.9f7a		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.9f7c		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9f7e		85 36		sta $36				sta 	zTemp0
.9f80		b5 60		lda $60,x			lda	 	NSMantissa1,x
.9f82		69 00		adc #$00			adc 	#0
.9f84		85 37		sta $37				sta 	zTemp0+1
.9f86						_SSMNoCarry:
.9f86		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.9f88		20 53 b2	jsr $b253			jsr 	StringTempAllocate 			; allocate that many characters
.9f8b		5a		phy				phy 								; save Y
.9f8c		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9f8e						_SSMCopy:
.9f8e		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9f90		f0 08		beq $9f9a			beq 	_SSMEString 				; no more to copy
.9f92		20 8c b2	jsr $b28c			jsr 	StringTempWrite 			; and write it out.
.9f95		c8		iny				iny
.9f96		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.9f98		d0 f4		bne $9f8e			bne 	_SSMCopy
.9f9a						_SSMEString:
.9f9a		7a		ply				ply
.9f9b						_SSMExit:
.9f9b		60		rts				rts
.9f9c						_SSMNull:
.9f9c		a9 00		lda #$00			lda 	#0
.9f9e		20 53 b2	jsr $b253			jsr 	StringTempAllocate
.9fa1		60		rts				rts
.9fa2						SubstringInitial:
.9fa2		da		phx				phx 								; save initial stack position
.9fa3		08		php				php 								; save carry on stack indicating 2 parameters
.9fa4		20 dc 9f	jsr $9fdc			jsr 	EvaluateString 				; get a string
.9fa7		5a		phy				phy 								; calculate length to exponent.
.9fa8		a0 ff		ldy #$ff			ldy 	#$FF
.9faa						_SIFindLength:
.9faa		c8		iny				iny
.9fab		b1 36		lda ($36),y			lda 	(zTemp0),y
.9fad		d0 fb		bne $9faa			bne 	_SIFindLength
.9faf		98		tya				tya
.9fb0		95 78		sta $78,x			sta 	NSExponent,x
.9fb2		7a		ply				ply
.9fb3		e8		inx				inx
.9fb4		20 28 91	jsr $9128			jsr 	CheckComma 					; comma next
.9fb7		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; get next parameter
.9fba		28		plp				plp 								; is it the last parameter ?
.9fbb		90 07		bcc $9fc4			bcc 	_SSIExit 					; if so, exit.
.9fbd		e8		inx				inx
.9fbe		20 28 91	jsr $9128			jsr 	CheckComma 					; comma next
.9fc1		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; get last parameter
.9fc4						_SSIExit:
.9fc4		fa		plx				plx
.9fc5		20 20 91	jsr $9120			jsr 	CheckRightBracket 			; check closing bracket
.9fc8		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9fc9						EvaluateValue:
.9fc9		48		pha				pha
.9fca		20 3d 96	jsr $963d			jsr		EvaluateExpression 			; expression
.9fcd		20 00 99	jsr $9900			jsr 	Dereference					; derefernce it
.9fd0		68		pla				pla
.9fd1		60		rts				rts
.9fd2						EvaluateNumber:
.9fd2		20 c9 9f	jsr $9fc9			jsr 	EvaluateValue 				; get a value
.9fd5		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9fd7		29 10		and #$10			and 	#NSBIsString
.9fd9		d0 13		bne $9fee			bne 	HelperTypeError
.9fdb		60		rts				rts
.9fdc						EvaluateString:
.9fdc		20 c9 9f	jsr $9fc9			jsr 	EvaluateValue 				; get a value
.9fdf		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9fe1		29 10		and #$10			and 	#NSBIsString
.9fe3		f0 09		beq $9fee			beq 	HelperTypeError
.9fe5						CopyAddressToTemp0:
.9fe5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9fe7		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.9fe9		b5 60		lda $60,x			lda 	NSMantissa1,x
.9feb		85 37		sta $37				sta 	zTemp0+1
.9fed		60		rts				rts
.9fee						HelperTypeError:
.9fee		4c 0c a2	jmp $a20c			jmp 	TypeError
.9ff1						EvaluateInteger:
.9ff1		20 d2 9f	jsr $9fd2			jsr 	EvaluateNumber
.9ff4		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.9ff6		d0 09		bne $a001			bne 	HelperValueError 			; if not, it's a float.
.9ff8		60		rts				rts
.9ff9						EvaluateUnsignedInteger:
.9ff9		20 f1 9f	jsr $9ff1			jsr 	EvaluateInteger 			; check integer is +ve
.9ffc		b5 50		lda $50,x			lda 	NSStatus,x
.9ffe		30 01		bmi $a001			bmi 	HelperValueError
.a000		60		rts				rts
.a001						HelperValueError:
.a001		4c 11 a2	jmp $a211			jmp 	ArgumentError
.a004						Evaluate16BitInteger:
.a004		20 f9 9f	jsr $9ff9			jsr	 	EvaluateUnsignedInteger		; get integer
.a007		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a009		15 68		ora $68,x			ora 	NSMantissa2,x
.a00b		d0 f4		bne $a001			bne 	HelperValueError
.a00d		60		rts				rts
.a00e						Evaluate16BitIntegerSigned:
.a00e		20 f1 9f	jsr $9ff1			jsr	 	EvaluateInteger				; get integer
.a011		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a013		15 68		ora $68,x			ora 	NSMantissa2,x
.a015		d0 ea		bne $a001			bne 	HelperValueError
.a017		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a019		10 03		bpl $a01e			bpl 	_EISNotSigned
.a01b		20 4d a0	jsr $a04d			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a01e						_EISNotSigned:
.a01e		60		rts				rts
.a01f						Evaluate8BitInteger:
.a01f		20 f9 9f	jsr $9ff9			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a022		d0 dd		bne $a001			bne 	HelperValueError
.a024		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a026		15 68		ora $68,x			ora 	NSMantissa2,x
.a028		15 60		ora $60,x			ora 	NSMantissa1,x
.a02a		d0 d5		bne $a001			bne 	HelperValueError
.a02c		b5 58		lda $58,x			lda 	NSMantissa0,x
.a02e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a02f						Multiply8x8:
.a02f		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a030		85 36		sta $36			  	sta 	zTemp0
.a032		86 37		stx $37				stx 	zTemp0+1
.a034		a9 00		lda #$00			lda 	#0
.a036		a2 08		ldx #$08			ldx 	#8
.a038						_M88Loop:
.a038		90 03		bcc $a03d			bcc 	_M88NoAdd
.a03a		18		clc				clc
.a03b		65 37		adc $37				adc 	zTemp0+1
.a03d						_M88NoAdd:
.a03d		6a		ror a				ror 	a
.a03e		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a040		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a041		d0 f5		bne $a038			bne 	_M88Loop
.a043		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a045		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a046						NSMNegate:
.a046		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a048		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a04a		95 50		sta $50,x			sta 	NSStatus,x
.a04c		60		rts				rts
.a04d						NSMNegateMantissa:
.a04d		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a04e		a9 00		lda #$00			lda 	#0
.a050		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a052		95 58		sta $58,x			sta 	NSMantissa0,x
.a054		a9 00		lda #$00			lda 	#0
.a056		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a058		95 60		sta $60,x			sta 	NSMantissa1,x
.a05a		a9 00		lda #$00			lda 	#0
.a05c		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a05e		95 68		sta $68,x			sta 	NSMantissa2,x
.a060		a9 00		lda #$00			lda 	#0
.a062		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a064		95 70		sta $70,x			sta 	NSMantissa3,x
.a066		60		rts				rts
.a067						NSMShiftUpTwo:
.a067		b5 58		lda $58,x			lda 	NSMantissa0,x
.a069		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a06b		b5 60		lda $60,x			lda 	NSMantissa1,x
.a06d		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a06f		b5 68		lda $68,x			lda 	NSMantissa2,x
.a071		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a073		b5 70		lda $70,x			lda 	NSMantissa3,x
.a075		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a077		b5 78		lda $78,x			lda 	NSExponent,x
.a079		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a07b		b5 50		lda $50,x			lda 	NSStatus,x
.a07d		95 52		sta $52,x			sta 	NSStatus+2,x
.a07f		60		rts				rts
.a080						NSMSetZeroMantissaOnly:
.a080		a9 00		lda #$00			lda 	#0
.a082		80 06		bra $a08a			bra 	NSMSetMantissa
.a084						NSMSetZero:
.a084		a9 00		lda #$00			lda 	#0
.a086						NSMSetByte:
.a086		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a088		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a08a						NSMSetMantissa:
.a08a		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a08c		74 60		stz $60,x			stz 	NSMantissa1,x
.a08e		74 68		stz $68,x			stz 	NSMantissa2,x
.a090		74 70		stz $70,x			stz 	NSMantissa3,x
.a092		60		rts				rts
.a093						NSMShiftLeft:
.a093		18		clc				clc
.a094						NSMRotateLeft:
.a094		36 58		rol $58,x			rol 	NSMantissa0,x
.a096		36 60		rol $60,x			rol		NSMantissa1,x
.a098		36 68		rol $68,x			rol		NSMantissa2,x
.a09a		36 70		rol $70,x			rol		NSMantissa3,x
.a09c		60		rts				rts
.a09d						NSMShiftRight:
.a09d		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a09f		76 68		ror $68,x			ror		NSMantissa2,x
.a0a1		76 60		ror $60,x			ror		NSMantissa1,x
.a0a3		76 58		ror $58,x			ror		NSMantissa0,x
.a0a5		60		rts				rts
.a0a6						NSMIsZero:
.a0a6		b5 70		lda $70,x			lda 	NSMantissa3,x
.a0a8		15 68		ora $68,x			ora		NSMantissa2,x
.a0aa		15 60		ora $60,x			ora		NSMantissa1,x
.a0ac		15 58		ora $58,x			ora		NSMantissa0,x
.a0ae		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.a0af						TickHandler:
.a0af		5a		phy				phy 								; need to preserve Y
.a0b0		20 99 80	jsr $8099			jsr 	SNDUpdate 					; update sound
.a0b3		7a		ply				ply
.a0b4		60		rts				rts
.065f						LastTick:
>065f								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a0b5						Assemble_ora:
.a0b5		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a0b8		01					.byte $01
.a0b9						Assemble_and:
.a0b9		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a0bc		21					.byte $21
.a0bd						Assemble_eor:
.a0bd		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a0c0		41					.byte $41
.a0c1						Assemble_adc:
.a0c1		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a0c4		61					.byte $61
.a0c5						Assemble_sta:
.a0c5		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a0c8		81					.byte $81
.a0c9						Assemble_lda:
.a0c9		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a0cc		a1					.byte $a1
.a0cd						Assemble_cmp:
.a0cd		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a0d0		c1					.byte $c1
.a0d1						Assemble_sbc:
.a0d1		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a0d4		e1					.byte $e1
.a0d5						Assemble_asl:
.a0d5		20 01 81	jsr $8101		jsr	AssembleGroup2
>a0d8		02					.byte $02
>a0d9		75					.byte $75
.a0da						Assemble_rol:
.a0da		20 01 81	jsr $8101		jsr	AssembleGroup2
>a0dd		22					.byte $22
>a0de		75					.byte $75
.a0df						Assemble_lsr:
.a0df		20 01 81	jsr $8101		jsr	AssembleGroup2
>a0e2		42					.byte $42
>a0e3		75					.byte $75
.a0e4						Assemble_ror:
.a0e4		20 01 81	jsr $8101		jsr	AssembleGroup2
>a0e7		62					.byte $62
>a0e8		75					.byte $75
.a0e9						Assemble_stx:
.a0e9		20 01 81	jsr $8101		jsr	AssembleGroup2
>a0ec		82					.byte $82
>a0ed		50					.byte $50
.a0ee						Assemble_ldx:
.a0ee		20 01 81	jsr $8101		jsr	AssembleGroup2
>a0f1		a2					.byte $a2
>a0f2		d0					.byte $d0
.a0f3						Assemble_dec:
.a0f3		20 01 81	jsr $8101		jsr	AssembleGroup2
>a0f6		c2					.byte $c2
>a0f7		55					.byte $55
.a0f8						Assemble_inc:
.a0f8		20 01 81	jsr $8101		jsr	AssembleGroup2
>a0fb		e2					.byte $e2
>a0fc		55					.byte $55
.a0fd						Assemble_stz:
.a0fd		20 01 81	jsr $8101		jsr	AssembleGroup2
>a100		60					.byte $60
>a101		44					.byte $44
.a102						Assemble_bit:
.a102		20 01 81	jsr $8101		jsr	AssembleGroup2
>a105		20					.byte $20
>a106		55					.byte $55
.a107						Assemble_sty:
.a107		20 01 81	jsr $8101		jsr	AssembleGroup2
>a10a		80					.byte $80
>a10b		54					.byte $54
.a10c						Assemble_ldy:
.a10c		20 01 81	jsr $8101		jsr	AssembleGroup2
>a10f		a0					.byte $a0
>a110		d5					.byte $d5
.a111						Assemble_cpy:
.a111		20 01 81	jsr $8101		jsr	AssembleGroup2
>a114		c0					.byte $c0
>a115		d4					.byte $d4
.a116						Assemble_cpx:
.a116		20 01 81	jsr $8101		jsr	AssembleGroup2
>a119		e0					.byte $e0
>a11a		d0					.byte $d0
.a11b						Assemble_tsb:
.a11b		20 01 81	jsr $8101		jsr	AssembleGroup2
>a11e		00					.byte $00
>a11f		50					.byte $50
.a120						Assemble_trb:
.a120		20 01 81	jsr $8101		jsr	AssembleGroup2
>a123		10					.byte $10
>a124		50					.byte $50
.a125						Assemble_jsr:
.a125		20 01 81	jsr $8101		jsr	AssembleGroup2
>a128		14					.byte $14
>a129		10					.byte $10
.a12a						Assemble_jmp:
.a12a		20 01 81	jsr $8101		jsr	AssembleGroup2
>a12d		40					.byte $40
>a12e		10					.byte $10
.a12f						Assemble_bpl:
.a12f		20 52 81	jsr $8152		jsr	AssembleGroup3
>a132		10					.byte $10
.a133						Assemble_bmi:
.a133		20 52 81	jsr $8152		jsr	AssembleGroup3
>a136		30					.byte $30
.a137						Assemble_bvc:
.a137		20 52 81	jsr $8152		jsr	AssembleGroup3
>a13a		50					.byte $50
.a13b						Assemble_bvs:
.a13b		20 52 81	jsr $8152		jsr	AssembleGroup3
>a13e		70					.byte $70
.a13f						Assemble_bcc:
.a13f		20 52 81	jsr $8152		jsr	AssembleGroup3
>a142		90					.byte $90
.a143						Assemble_bcs:
.a143		20 52 81	jsr $8152		jsr	AssembleGroup3
>a146		b0					.byte $b0
.a147						Assemble_bne:
.a147		20 52 81	jsr $8152		jsr	AssembleGroup3
>a14a		d0					.byte $d0
.a14b						Assemble_beq:
.a14b		20 52 81	jsr $8152		jsr	AssembleGroup3
>a14e		f0					.byte $f0
.a14f						Assemble_bra:
.a14f		20 52 81	jsr $8152		jsr	AssembleGroup3
>a152		80					.byte $80
.a153						Assemble_brk:
.a153		20 86 81	jsr $8186		jsr	AssembleGroup4
>a156		00					.byte $00
.a157						Assemble_php:
.a157		20 86 81	jsr $8186		jsr	AssembleGroup4
>a15a		08					.byte $08
.a15b						Assemble_clc:
.a15b		20 86 81	jsr $8186		jsr	AssembleGroup4
>a15e		18					.byte $18
.a15f						Assemble_plp:
.a15f		20 86 81	jsr $8186		jsr	AssembleGroup4
>a162		28					.byte $28
.a163						Assemble_sec:
.a163		20 86 81	jsr $8186		jsr	AssembleGroup4
>a166		38					.byte $38
.a167						Assemble_rti:
.a167		20 86 81	jsr $8186		jsr	AssembleGroup4
>a16a		40					.byte $40
.a16b						Assemble_pha:
.a16b		20 86 81	jsr $8186		jsr	AssembleGroup4
>a16e		48					.byte $48
.a16f						Assemble_cli:
.a16f		20 86 81	jsr $8186		jsr	AssembleGroup4
>a172		58					.byte $58
.a173						Assemble_phy:
.a173		20 86 81	jsr $8186		jsr	AssembleGroup4
>a176		5a					.byte $5a
.a177						Assemble_rts:
.a177		20 86 81	jsr $8186		jsr	AssembleGroup4
>a17a		60					.byte $60
.a17b						Assemble_pla:
.a17b		20 86 81	jsr $8186		jsr	AssembleGroup4
>a17e		68					.byte $68
.a17f						Assemble_sei:
.a17f		20 86 81	jsr $8186		jsr	AssembleGroup4
>a182		78					.byte $78
.a183						Assemble_ply:
.a183		20 86 81	jsr $8186		jsr	AssembleGroup4
>a186		7a					.byte $7a
.a187						Assemble_dey:
.a187		20 86 81	jsr $8186		jsr	AssembleGroup4
>a18a		88					.byte $88
.a18b						Assemble_txa:
.a18b		20 86 81	jsr $8186		jsr	AssembleGroup4
>a18e		8a					.byte $8a
.a18f						Assemble_tya:
.a18f		20 86 81	jsr $8186		jsr	AssembleGroup4
>a192		98					.byte $98
.a193						Assemble_txs:
.a193		20 86 81	jsr $8186		jsr	AssembleGroup4
>a196		9a					.byte $9a
.a197						Assemble_tay:
.a197		20 86 81	jsr $8186		jsr	AssembleGroup4
>a19a		a8					.byte $a8
.a19b						Assemble_tax:
.a19b		20 86 81	jsr $8186		jsr	AssembleGroup4
>a19e		aa					.byte $aa
.a19f						Assemble_clv:
.a19f		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1a2		b8					.byte $b8
.a1a3						Assemble_tsx:
.a1a3		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1a6		ba					.byte $ba
.a1a7						Assemble_iny:
.a1a7		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1aa		c8					.byte $c8
.a1ab						Assemble_dex:
.a1ab		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1ae		ca					.byte $ca
.a1af						Assemble_cld:
.a1af		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1b2		d8					.byte $d8
.a1b3						Assemble_phx:
.a1b3		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1b6		da					.byte $da
.a1b7						Assemble_stp:
.a1b7		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1ba		db					.byte $db
.a1bb						Assemble_inx:
.a1bb		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1be		e8					.byte $e8
.a1bf						Assemble_nop:
.a1bf		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1c2		ea					.byte $ea
.a1c3						Assemble_sed:
.a1c3		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1c6		f8					.byte $f8
.a1c7						Assemble_plx:
.a1c7		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1ca		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a1cb						DecimalScalarTable:
>a1cb		66 66 66 66				.dword $66666666 ; 0.1
>a1cf		de					.byte $de
>a1d0		1f 85 eb 51				.dword $51eb851f ; 0.01
>a1d4		db					.byte $db
>a1d5		4c 37 89 41				.dword $4189374c ; 0.001
>a1d9		d8					.byte $d8
>a1da		ac 8b db 68				.dword $68db8bac ; 0.0001
>a1de		d4					.byte $d4
>a1df		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a1e3		d1					.byte $d1
>a1e4		83 de 1b 43				.dword $431bde83 ; 1e-06
>a1e8		ce					.byte $ce
>a1e9		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a1ed		ca					.byte $ca
>a1ee		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a1f2		c7					.byte $c7
>a1f3		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a1f7		c4					.byte $c4
>a1f8		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a1fc		c0					.byte $c0
>a1fd		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a201		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a202						SyntaxError:
.a202		a9 02		lda #$02		lda	#2
.a204		4c 39 91	jmp $9139		jmp	ErrorHandler
.a207						RangeError:
.a207		a9 04		lda #$04		lda	#4
.a209		4c 39 91	jmp $9139		jmp	ErrorHandler
.a20c						TypeError:
.a20c		a9 05		lda #$05		lda	#5
.a20e		4c 39 91	jmp $9139		jmp	ErrorHandler
.a211						ArgumentError:
.a211		a9 07		lda #$07		lda	#7
.a213		4c 39 91	jmp $9139		jmp	ErrorHandler
.a216						NotDoneError:
.a216		a9 0c		lda #$0c		lda	#12
.a218		4c 39 91	jmp $9139		jmp	ErrorHandler
.a21b						ErrorText:
>a21b		42 72 65 61 6b 00			.text	"Break",0
>a221		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a229		72 72 6f 72 00
>a22e		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a236		20 62 79 20 7a 65 72 6f 00
>a23f		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a247		61 6e 67 65 00
>a24c		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a254		6d 61 74 63 68 00
>a25a		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a262		65 6d 6f 72 79 00
>a268		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a270		61 72 67 75 6d 65 6e 74 00
>a279		53 74 6f 70 00				.text	"Stop",0
>a27e		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a286		6f 6f 20 6c 6f 6e 67 00
>a28e		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a296		6e 20 66 61 69 6c 65 64 00
>a29f		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a2a7		61 74 61 00
>a2ab		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a2b3		65 6e 74 65 64 00
>a2b9		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a2c1		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a2cd		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a2d5		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a2e2		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a2ea		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a2f7		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a2ff		68 6f 75 74 20 57 68 69 6c 65 00
>a30a		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a312		68 6f 75 74 20 46 6f 72 00
>a31b		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a323		61 63 6b 20 66 75 6c 6c 00
>a32c		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a334		75 63 74 75 72 65 00
>a33b		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a343		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a350		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a358		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a366		41 72 72 61 79 20 73 69			.text	"Array size",0
>a36e		7a 65 00
>a371		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a379		79 20 69 6e 64 65 78 00
>a381		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a389		74 20 64 65 63 6c 61 72 65 64 00
>a394		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a39c		20 66 6f 75 6e 64 00
>a3a3		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a3ab		65 72 72 6f 72 00
>a3b1		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a3b9		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dd54		09 09 30 32 2f 30 31 2f			.text 9,9,"02/01/23  23"
>dd5c		32 33 20 20 32 33

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a3bf						RectangleCommand:
.a3bf		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a3c1		80 02		bra $a3c5			bra 	ShapeDrawCmd
.a3c3						CircleCommand:
.a3c3		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a3c5						ShapeDrawCmd:
.a3c5		20 4f a4	jsr $a44f			jsr 	RunGraphicsCommand
.a3c8						ShapeDraw:
.a3c8		0d 61 06	ora $0661			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a3cb		4c 43 a4	jmp $a443			jmp 	ExecuteGraphicCommand	 	; and complete
.a3ce						SpriteCommand:
.a3ce		a2 00		ldx #$00			ldx 	#0
.a3d0		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; get image number.
.a3d3		5a		phy				phy
.a3d4		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a3d6		a6 58		ldx $58				ldx 	NSMantissa0
.a3d8		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a3da		b0 0d		bcs $a3e9			bcs 	_SCRange
.a3dc		a0 ff		ldy #$ff			ldy 	#255
.a3de		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a3e1		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a3e3		7a		ply				ply
.a3e4		20 4f a4	jsr $a44f			jsr 	RunGraphicsCommand
.a3e7		80 5a		bra $a443			bra 	ExecuteGraphicCommand
.a3e9						_SCRange:
.a3e9		4c 07 a2	jmp $a207			jmp 	RangeError
.a3ec						ImageCommand:
.a3ec		a2 00		ldx #$00			ldx 	#0
.a3ee		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; get image number.
.a3f1		20 4f a4	jsr $a44f			jsr 	RunGraphicsCommand
.a3f4						ImageRunDraw:
.a3f4		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a3f6		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a3f9		ad 67 06	lda $0667			lda 	gxDrawScale
.a3fc		0a		asl a				asl 	a
.a3fd		0a		asl a				asl 	a
.a3fe		0a		asl a				asl 	a
.a3ff		a8		tay				tay
.a400		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a402		a6 58		ldx $58				ldx 	NSMantissa0
.a404		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a407		60		rts				rts
.a408						TextCommand:
.a408		a2 00		ldx #$00			ldx 	#0
.a40a		20 dc 9f	jsr $9fdc			jsr 	EvaluateString 				; get text
.a40d		20 4f a4	jsr $a44f			jsr 	RunGraphicsCommand
.a410						TextRunDraw:
.a410		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a412		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a415		a0 00		ldy #$00			ldy 	#0
.a417						_IRDLoop:
.a417		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a419		85 37		sta $37				sta 	zTemp0+1
.a41b		a5 58		lda $58				lda 	NSMantissa0
.a41d		85 36		sta $36				sta 	zTemp0
.a41f		b1 36		lda ($36),y			lda 	(zTemp0),y
.a421		f0 13		beq $a436			beq 	_IRDExit
.a423		5a		phy				phy									; save string pos
.a424		48		pha				pha 								; save char
.a425		ad 67 06	lda $0667			lda 	gxDrawScale 				; get scale
.a428		0a		asl a				asl 	a
.a429		0a		asl a				asl 	a
.a42a		0a		asl a				asl 	a
.a42b		a8		tay				tay
.a42c		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a42e		fa		plx				plx 								; char to draw
.a42f		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a432		7a		ply				ply 								; restore string pos
.a433		c8		iny				iny
.a434		90 e1		bcc $a417			bcc 	_IRDLoop 					; go back if no error.
.a436						_IRDExit:
.a436		60		rts				rts
.a437						PlotCommand:
.a437		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a439		20 4f a4	jsr $a44f			jsr 	RunGraphicsCommand
.a43c		80 05		bra $a443			bra 	ExecuteGraphicCommand
.a43e						LineCommand:
.a43e		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a440		20 4f a4	jsr $a44f			jsr 	RunGraphicsCommand
.a443						ExecuteGraphicCommand:
.a443		0d 60 06	ora $0660			ora 	gxCommandID 				; make a full command
.a446		20 85 80	jsr $8085			jsr 	GXGraphicDraw 				; draw it and exit
.a449		b0 01		bcs $a44c			bcs 	_EGCError
.a44b		60		rts				rts
.a44c						_EGCError:
.a44c		4c 02 a2	jmp $a202			jmp 	SyntaxError
.a44f						RunGraphicsCommand:
.a44f		8d 60 06	sta $0660			sta 	gxCommandID					; save TODO graphics command.
.a452		68		pla				pla 								; pop handler address
.a453		fa		plx				plx
.a454		1a		inc a				inc 	a
.a455		d0 01		bne $a458			bne 	_RGINoCarry
.a457		e8		inx				inx
.a458						_RGINoCarry:
.a458		8d 65 06	sta $0665			sta 	gxHandler
.a45b		8e 66 06	stx $0666			stx 	gxHandler+1
.a45e						_RGICommandLoop:
.a45e		b1 30		lda ($30),y			lda 	(codePtr),y
.a460		c8		iny				iny
.a461		c9 d9		cmp #$d9			cmp 	#KWD_TO						; is it TO x,y
.a463		f0 53		beq $a4b8			beq 	_RGI_To
.a465		c9 c1		cmp #$c1			cmp 	#KWD_HERE 					; do it here.
.a467		f0 55		beq $a4be			beq 	_RGI_Here
.a469		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a46b		f0 3d		beq $a4aa			beq 	_RGI_Exit
.a46d		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a46f		f0 39		beq $a4aa			beq 	_RGI_Exit
.a471		c9 c9		cmp #$c9			cmp 	#KWD_OUTLINE 				; solid or outline
.a473		f0 3e		beq $a4b3			beq 	_RGI_Frame
.a475		c9 d5		cmp #$d5			cmp 	#KWD_SOLID
.a477		f0 33		beq $a4ac			beq 	_RGI_Solid
.a479		c9 b1		cmp #$b1			cmp 	#KWD_BY 					; by offset
.a47b		f0 4b		beq $a4c8			beq 	_RGI_By
.a47d		c9 bd		cmp #$bd			cmp 	#KWD_FROM 					; from
.a47f		f0 17		beq $a498			beq 	_RGI_Move2
.a481		c9 ba		cmp #$ba			cmp 	#KWD_DIM 					; dim (set scale)
.a483		f0 62		beq $a4e7			beq 	_RGI_Dim
.a485		c9 b7		cmp #$b7			cmp 	#KWD_COLOUR 				; colour or Color
.a487		f0 74		beq $a4fd			beq 	_RGI_Colour
.a489		c9 b6		cmp #$b6			cmp 	#KWD_COLOR
.a48b		f0 70		beq $a4fd			beq 	_RGI_Colour
.a48d		ae 60 06	ldx $0660			ldx 	gxCommandID
.a490		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a492		d0 03		bne $a497			bne 	_RGI_Move 					; move
.a494		4c 25 a5	jmp $a525			jmp		_RGI_SpriteInstructions
.a497						_RGI_Move:
.a497		88		dey				dey 								; unpick get.
.a498						_RGI_Move2:
.a498		20 4b a5	jsr $a54b			jsr 	GCGetCoordinatePair 		; move to here
.a49b		20 72 a5	jsr $a572			jsr 	GCCopyPairToStore 			; save
.a49e		5a		phy				phy
.a49f		20 68 a5	jsr $a568			jsr 	GCLoadAXY 					; load in
.a4a2		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a4a4		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a4a7		7a		ply				ply
.a4a8		80 b4		bra $a45e			bra 	_RGICommandLoop 			; and go round
.a4aa						_RGI_Exit:
.a4aa		88		dey				dey 								; unpick : / EOL
.a4ab		60		rts				rts
.a4ac						_RGI_Solid:
.a4ac		a9 02		lda #$02			lda 	#2
.a4ae		8d 61 06	sta $0661			sta 	gxFillSolid
.a4b1		80 ab		bra $a45e			bra 	_RGICommandLoop
.a4b3						_RGI_Frame:
.a4b3		9c 61 06	stz $0661			stz 	gxFillSolid
.a4b6		80 a6		bra $a45e			bra 	_RGICommandLoop
.a4b8						_RGI_To:
.a4b8		20 4b a5	jsr $a54b			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a4bb		20 72 a5	jsr $a572			jsr 	GCCopyPairToStore
.a4be						_RGI_Here:
.a4be		5a		phy				phy
.a4bf		20 68 a5	jsr $a568			jsr 	GCLoadAXY 					; load it into AXY
.a4c2		20 22 a5	jsr $a522			jsr 	_RGICallHandler 			; go do whatever it is.
.a4c5		7a		ply				ply
.a4c6		80 96		bra $a45e			bra 	_RGICommandLoop 			; and go round
.a4c8						_RGI_By:
.a4c8		20 58 a5	jsr $a558			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a4cb		18		clc				clc
.a4cc		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a4ce		6d 62 06	adc $0662			adc 	gxXPos
.a4d1		8d 62 06	sta $0662			sta 	gxXPos
.a4d4		a5 61		lda $61				lda 	NSMantissa1+1
.a4d6		6d 63 06	adc $0663			adc 	gxXPos+1
.a4d9		8d 63 06	sta $0663			sta 	gxXPos+1
.a4dc		a5 5a		lda $5a				lda 	NSMantissa0+2
.a4de		18		clc				clc
.a4df		6d 64 06	adc $0664			adc 	gxYPos
.a4e2		8d 64 06	sta $0664			sta 	gxYPos
.a4e5		80 d7		bra $a4be			bra 	_RGI_Here
.a4e7						_RGI_Dim:
.a4e7		a2 01		ldx #$01			ldx	 	#1
.a4e9		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger
.a4ec		a5 59		lda $59				lda 	NSMantissa0+1
.a4ee		c9 00		cmp #$00			cmp 	#0
.a4f0		f0 2d		beq $a51f			beq 	_RGIRange
.a4f2		c9 09		cmp #$09			cmp 	#8+1
.a4f4		b0 29		bcs $a51f			bcs		_RGIRange
.a4f6		3a		dec a				dec 	a
.a4f7		8d 67 06	sta $0667			sta 	gxDrawScale
.a4fa		4c 5e a4	jmp $a45e			jmp 	_RGICommandLoop
.a4fd						_RGI_Colour:
.a4fd		a2 01		ldx #$01			ldx 	#1 							; colour
.a4ff		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger
.a502		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a504		20 84 a0	jsr $a084			jsr 	NSMSetZero
.a507		b1 30		lda ($30),y			lda 	(codePtr),y
.a509		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a50b		d0 04		bne $a511			bne 	_RGICDefaultMode
.a50d		c8		iny				iny
.a50e		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger
.a511						_RGICDefaultMode:
.a511		5a		phy				phy
.a512		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a514		a6 59		ldx $59				ldx 	NSMantissa0+1
.a516		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a518		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a51b		7a		ply				ply
.a51c		4c 5e a4	jmp $a45e			jmp 	_RGICommandLoop 			; and go round
.a51f						_RGIRange:
.a51f		4c 07 a2	jmp $a207			jmp 	RangeError
.a522						_RGICallHandler:
.a522		6c 65 06	jmp ($0665)			jmp 	(gxHandler)
.a525						_RGI_SpriteInstructions:
.a525		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a527		f0 07		beq $a530			beq 	_RGISpriteOff
.a529		c9 c2		cmp #$c2			cmp 	#KWD_IMAGE
.a52b		f0 13		beq $a540			beq 	_RGISetImage
.a52d		4c 97 a4	jmp $a497			jmp 	_RGI_Move
.a530						_RGISpriteOff:
.a530		5a		phy				phy
.a531		a0 01		ldy #$01			ldy 	#1
.a533		a2 00		ldx #$00			ldx 	#0
.a535						_RGIDoCommandLoop:
.a535		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a537		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a53a		7a		ply				ply
.a53b		b0 e2		bcs $a51f			bcs 	_RGIRange
.a53d		4c 5e a4	jmp $a45e			jmp 	_RGICommandLoop
.a540						_RGISetImage:
.a540		a2 01		ldx #$01			ldx 	#1
.a542		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger
.a545		5a		phy				phy
.a546		aa		tax				tax
.a547		a0 00		ldy #$00			ldy 	#0
.a549		80 ea		bra $a535			bra 	_RGIDoCommandLoop
.a54b						GCGetCoordinatePair:
.a54b		a2 01		ldx #$01			ldx 	#1
.a54d		20 04 a0	jsr $a004			jsr 	Evaluate16BitInteger
.a550		20 28 91	jsr $9128			jsr 	CheckComma
.a553		e8		inx				inx
.a554		20 04 a0	jsr $a004			jsr 	Evaluate16BitInteger
.a557		60		rts				rts
.a558						GCSignedCoordinatePair:
.a558		a2 01		ldx #$01			ldx 	#1
.a55a		20 0e a0	jsr $a00e			jsr 	Evaluate16BitIntegerSigned
.a55d		20 28 91	jsr $9128			jsr 	CheckComma
.a560		e8		inx				inx
.a561		20 0e a0	jsr $a00e			jsr 	Evaluate16BitIntegerSigned
.a564		60		rts				rts
.a565						_GCCPRange:
.a565		4c 07 a2	jmp $a207			jmp 	RangeError
.a568						GCLoadAXY:
.a568		ad 63 06	lda $0663			lda 	gxXPos+1
.a56b		ae 62 06	ldx $0662			ldx 	gxXPos
.a56e		ac 64 06	ldy $0664			ldy 	gxYPos
.a571		60		rts				rts
.a572						GCCopyPairToStore:
.a572		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a574		8d 62 06	sta $0662			sta 	gxXPos
.a577		a5 61		lda $61				lda 	NSMantissa1+1
.a579		8d 63 06	sta $0663			sta 	gxXPos+1
.a57c		a5 5a		lda $5a				lda 	NSMantissa0+2
.a57e		8d 64 06	sta $0664			sta 	gxYPos
.a581		60		rts				rts
.0660						gxCommandID:
>0660								.fill 	1
.0661						gxFillSolid:
>0661								.fill 	1
.0662						gxXPos:
>0662								.fill 	2
.0664						gxYPos:
>0664								.fill 	1
.0665						gxHandler:
>0665								.fill 	2
.0667						gxDrawScale:
>0667								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a582						BitmapCtrl:
.a582		b1 30		lda ($30),y			lda 	(codePtr),y
.a584		c8		iny				iny
.a585		a2 01		ldx #$01			ldx 	#1
.a587		c9 c8		cmp #$c8			cmp 	#KWD_ON
.a589		f0 11		beq $a59c			beq 	BitmapSwitch
.a58b		ca		dex				dex
.a58c		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a58e		f0 0c		beq $a59c			beq 	BitmapSwitch
.a590		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; get the colour
.a593		5a		phy				phy
.a594		aa		tax				tax
.a595		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a597		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a59a		7a		ply				ply
.a59b		60		rts				rts
.a59c						BitmapSwitch:
.a59c		5a		phy				phy
.a59d		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a59f		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a5a1		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a5a4		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a5a6		a0 00		ldy #$00			ldy 	#0
.a5a8		a2 ff		ldx #$ff			ldx 	#$FF
.a5aa		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a5ad		9c 61 06	stz $0661			stz 	gxFillSolid
.a5b0		9c 62 06	stz $0662			stz 	gxXPos
.a5b3		9c 63 06	stz $0663			stz 	gxXPos+1
.a5b6		9c 64 06	stz $0664			stz 	gxYPos
.a5b9		9c 67 06	stz $0667			stz 	gxDrawScale
.a5bc		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a5be		a2 00		ldx #$00			ldx 	#0
.a5c0		a0 00		ldy #$00			ldy 	#0
.a5c2		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a5c5		7a		ply				ply
.a5c6		60		rts				rts
.a5c7						SpritesCtrl:
.a5c7		b1 30		lda ($30),y			lda 	(codePtr),y
.a5c9		c8		iny				iny
.a5ca		a2 01		ldx #$01			ldx 	#1
.a5cc		c9 c8		cmp #$c8			cmp 	#KWD_ON
.a5ce		f0 08		beq $a5d8			beq 	SpriteSwitch
.a5d0		ca		dex				dex
.a5d1		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a5d3		f0 03		beq $a5d8			beq 	SpriteSwitch
.a5d5		4c 02 a2	jmp $a202			jmp 	SyntaxError
.a5d8						SpriteSwitch:
.a5d8		5a		phy				phy
.a5d9		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a5db		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a5dd		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a5e0		7a		ply				ply
.a5e1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a5e2						GfxCommand:
.a5e2		a2 00		ldx #$00			ldx 	#0
.a5e4		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; command
.a5e7		20 28 91	jsr $9128			jsr 	CheckComma
.a5ea		e8		inx				inx
.a5eb		20 04 a0	jsr $a004			jsr 	Evaluate16BitInteger 		; X
.a5ee		20 28 91	jsr $9128			jsr 	CheckComma
.a5f1		e8		inx				inx
.a5f2		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; Y
.a5f5		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a5f7		4a		lsr a				lsr 	a
.a5f8		d0 12		bne $a60c			bne 	_GfxError
.a5fa		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a5fc		b0 0e		bcs $a60c			bcs 	_GfxError 					; bit 7 should have been zero
.a5fe		5a		phy				phy 								; save pos
.a5ff		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a601		a6 59		ldx $59				ldx 	NSMantissa0+1
.a603		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a605		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a608		b0 02		bcs $a60c			bcs 	_GfxError
.a60a		7a		ply				ply 								; restore pos and exit.
.a60b		60		rts				rts
.a60c						_GfxError:
.a60c		4c 07 a2	jmp $a207			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a60f						UnaryHit:
.a60f		fa		plx				plx
.a610		a9 36		lda #$36			lda 	#zTemp0
.a612		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a615		20 28 91	jsr $9128			jsr 	CheckComma
.a618		e8		inx				inx
.a619		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a61c		20 20 91	jsr $9120			jsr		CheckRightBracket
.a61f		ca		dex				dex 								; fix back up again.
.a620		da		phx				phx 								; save X/Y
.a621		5a		phy				phy
.a622		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a624		b5 58		lda $58,x			lda 	NSMantissa0,x
.a626		aa		tax				tax
.a627		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a629		20 85 80	jsr $8085			jsr 	GXGraphicDraw 				; calculate result
.a62c		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a62d		7a		ply				ply 								; restore XY
.a62e		fa		plx				plx
.a62f		20 86 a0	jsr $a086			jsr 	NSMSetByte 					; return the hit result
.a632		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a633						PaletteCommand:
.a633		a2 00		ldx #$00			ldx 	#0
.a635		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; colour
.a638		20 28 91	jsr $9128			jsr 	CheckComma
.a63b		e8		inx				inx
.a63c		20 04 a0	jsr $a004			jsr 	Evaluate16BitInteger 		; r
.a63f		20 28 91	jsr $9128			jsr 	CheckComma
.a642		e8		inx				inx
.a643		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; g
.a646		20 28 91	jsr $9128			jsr 	CheckComma
.a649		e8		inx				inx
.a64a		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; b
.a64d		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a64f		85 36		sta $36				sta 	zTemp0
.a651		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a653		85 37		sta $37				sta 	zTemp0+1
.a655		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a657		26 37		rol $37				rol	 	zTemp0+1
.a659		06 36		asl $36				asl 	zTemp0
.a65b		26 37		rol $37				rol	 	zTemp0+1
.a65d		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a65f		85 01		sta $01				sta 	1
.a661		5a		phy				phy
.a662		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a664		92 36		sta ($36)			sta 	(zTemp0)
.a666		a0 01		ldy #$01			ldy 	#1
.a668		a5 5a		lda $5a				lda 	NSMantissa0+2
.a66a		91 36		sta ($36),y			sta 	(zTemp0),y
.a66c		a5 59		lda $59				lda 	NSMantissa0+1
.a66e		c8		iny				iny
.a66f		91 36		sta ($36),y			sta 	(zTemp0),y
.a671		7a		ply				ply
.a672		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.a673						XLoadCommand:
.a673		20 8d 8b	jsr $8b8d			jsr 	NewProgram
.a676		20 69 83	jsr $8369			jsr 	BackloadProgram
.a679		4c 28 84	jmp $8428			jmp 	WarmStart
.a67c						XGoCommand:
.a67c		20 8d 8b	jsr $8b8d			jsr 	NewProgram
.a67f		20 69 83	jsr $8369			jsr 	BackloadProgram
.a682		4c 0b 8d	jmp $8d0b			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a685						UnaryEvent:
.a685		fa		plx				plx
.a686		20 1f a7	jsr $a71f			jsr 	TimerToStackX 				; timer in +0
.a689		e8		inx				inx  								; put reference into +1
.a68a		20 87 9a	jsr $9a87			jsr 	EvaluateTerm
.a68d		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a68f		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a691		d0 4c		bne $a6df			bne 	_UEType
.a693		e8		inx				inx 								; put the step in +2
.a694		20 28 91	jsr $9128			jsr 	CheckComma
.a697		20 04 a0	jsr $a004			jsr 	Evaluate16BitInteger
.a69a		20 20 91	jsr $9120			jsr 	CheckRightBracket
.a69d		ca		dex				dex
.a69e		ca		dex				dex
.a69f		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a6a1		85 36		sta $36				sta 	zTemp0
.a6a3		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a6a5		85 37		sta $37				sta 	zTemp0+1
.a6a7		5a		phy				phy
.a6a8		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a6aa		b1 36		lda ($36),y			lda 	(zTemp0),y
.a6ac		30 2d		bmi $a6db			bmi 	_UEFalse 					; exit if signed.
.a6ae		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a6b0		b5 58		lda $58,x			lda 	NSMantissa0,x
.a6b2		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a6b4		c8		iny				iny
.a6b5		b5 60		lda $60,x			lda 	NSMantissa1,x
.a6b7		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a6b9		c8		iny				iny
.a6ba		b5 68		lda $68,x			lda 	NSMantissa2,x
.a6bc		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a6be		90 1b		bcc $a6db			bcc 	_UEFalse 					; no, return FALSE.
.a6c0		18		clc				clc
.a6c1		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a6c3		b5 58		lda $58,x			lda 	NSMantissa0,x
.a6c5		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.a6c7		91 36		sta ($36),y			sta 	(zTemp0),y
.a6c9		c8		iny				iny
.a6ca		b5 60		lda $60,x			lda 	NSMantissa1,x
.a6cc		75 62		adc $62,x			adc 	NSMantissa1+2,x
.a6ce		91 36		sta ($36),y			sta 	(zTemp0),y
.a6d0		c8		iny				iny
.a6d1		b5 68		lda $68,x			lda 	NSMantissa2,x
.a6d3		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.a6d5		91 36		sta ($36),y			sta 	(zTemp0),y
.a6d7		7a		ply				ply
.a6d8		4c a6 91	jmp $91a6			jmp 	ReturnTrue
.a6db						_UEFalse:
.a6db		7a		ply				ply 								; restore Y
.a6dc		4c b1 91	jmp $91b1			jmp 	ReturnFalse 				; and return False
.a6df						_UEType:
.a6df		4c 0c a2	jmp $a20c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.a6e2						UnaryJoyX:
.a6e2		18		clc				clc
.a6e3		80 01		bra $a6e6			bra 	JoyMain
.a6e5						UnaryJoyY:
.a6e5		38		sec				sec
.a6e6						JoyMain:
.a6e6		fa		plx				plx 								; get pos
.a6e7		08		php				php 								; save carry (set for Y)
.a6e8		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a6eb		20 20 91	jsr $9120			jsr 	CheckRightBracket
.a6ee		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a6f1		28		plp				plp
.a6f2		b0 02		bcs $a6f6			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.a6f4		4a		lsr a				lsr 	a
.a6f5		4a		lsr a				lsr 	a
.a6f6						_JMNoShift:
.a6f6		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.a6f7		b0 07		bcs $a700			bcs 	JMIsLeft
.a6f9		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.a6fa		b0 07		bcs $a703			bcs 	JMIsRight
.a6fc		20 84 a0	jsr $a084			jsr 	NSMSetZero 					; zero result
.a6ff		60		rts				rts
.a700						JMIsLeft:
.a700		4c a6 91	jmp $91a6			jmp 	ReturnTrue
.a703						JMIsRight:
.a703		a9 01		lda #$01			lda 	#1
.a705		20 86 a0	jsr $a086			jsr 	NSMSetByte
.a708		60		rts				rts
.a709						UnaryJoyB:
.a709		fa		plx				plx 								; get pos
.a70a		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a70d		20 20 91	jsr $9120			jsr 	CheckRightBracket
.a710		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a713		29 10		and #$10			and 	#$10
.a715		d0 e9		bne $a700			bne 	JMIsLeft
.a717		20 84 a0	jsr $a084			jsr 	NSMSetZero
.a71a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.a71b						UnaryTimer:
.a71b		fa		plx				plx
.a71c		20 20 91	jsr $9120			jsr 	CheckRightBracket
.a71f						TimerToStackX:
.a71f		20 84 a0	jsr $a084			jsr 	NSMSetZero 					; zero result
.a722		64 01		stz $01				stz 	1 							; access I/O
.a724		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a727		95 58		sta $58,x			sta 	NSMantissa0,x
.a729		ad 5a d6	lda $d65a			lda 	$D65A
.a72c		95 60		sta $60,x			sta 	NSMantissa1,x
.a72e		ad 5b d6	lda $d65b			lda 	$D65B
.a731		95 68		sta $68,x			sta 	NSMantissa2,x
.a733		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/kernel/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						GAME        .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a734						MemoryDeleteLine:
.a734		20 53 a7	jsr $a753			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a737		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a739		a8		tay				tay
.a73a						_MDDLLoop:
.a73a		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a73c		92 30		sta ($30)			sta 	(codePtr)
.a73e		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a740		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a742		d0 07		bne $a74b			bne 	_MDLDLNext
.a744		a5 31		lda $31				lda 	codePtr+1
.a746		c5 3b		cmp $3b				cmp 	zTemp2+1
.a748		d0 01		bne $a74b			bne 	_MDLDLNext
.a74a						_MDDLExit:
.a74a		60		rts				rts
.a74b						_MDLDLNext:
.a74b		e6 30		inc $30				inc 	codePtr						; next byte
.a74d		d0 eb		bne $a73a			bne 	_MDDLLoop
.a74f		e6 31		inc $31				inc 	codePtr+1
.a751		80 e7		bra $a73a			bra 	_MDDLLoop
.a753						IMemoryFindEnd:
.a753		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a755		85 3a		sta $3a				sta 	0+zTemp2
.a757		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a759		85 3b		sta $3b				sta 	1+zTemp2
.a75b						_MDLFELoop:
.a75b		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a75d		f0 0b		beq $a76a			beq 	_MDLFEExit
.a75f		18		clc				clc
.a760		65 3a		adc $3a				adc 	zTemp2
.a762		85 3a		sta $3a				sta 	zTemp2
.a764		90 f5		bcc $a75b			bcc 	_MDLFELoop
.a766		e6 3b		inc $3b				inc 	zTemp2+1
.a768		80 f1		bra $a75b			bra 	_MDLFELoop
.a76a						_MDLFEExit:
.a76a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a76b						MemoryInsertLine:
.a76b		08		php				php
.a76c		20 53 a7	jsr $a753			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a76f		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a771		1a		inc a				inc 	a
.a772		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a774		b0 36		bcs $a7ac			bcs 	_MDLIError 					; no, fail.
.a776		28		plp				plp 								; do at a specific point or the end ?
.a777		90 08		bcc $a781			bcc 	_MDLIFound 					; if specific point already set.
.a779		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a77b		85 30		sta $30				sta 	codePtr 					; end.
.a77d		a5 3b		lda $3b				lda 	zTemp2+1
.a77f		85 31		sta $31				sta 	codePtr+1
.a781						_MDLIFound:
.a781		ad 2a 04	lda $042a			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a784		a8		tay				tay
.a785						_MDLIInsert:
.a785		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a787		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a789		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a78b		c5 3a		cmp $3a				cmp 	zTemp2
.a78d		d0 06		bne $a795			bne 	_MDLINext
.a78f		a5 31		lda $31				lda 	codePtr+1
.a791		c5 3b		cmp $3b				cmp 	zTemp2+1
.a793		f0 0a		beq $a79f			beq 	_MDLIHaveSpace
.a795						_MDLINext:
.a795		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a797		d0 02		bne $a79b			bne 	_MDLINoBorrow
.a799		c6 3b		dec $3b				dec 	zTemp2+1
.a79b						_MDLINoBorrow:
.a79b		c6 3a		dec $3a				dec 	zTemp2
.a79d		80 e6		bra $a785			bra 	_MDLIInsert
.a79f						_MDLIHaveSpace:
.a79f		ac 2a 04	ldy $042a			ldy 	tokenOffset 				; bytes to copy
.a7a2		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a7a3						_MDLICopy:
.a7a3		b9 2a 04	lda $042a,y			lda 	tokenOffset,y
.a7a6		91 30		sta ($30),y			sta 	(codePtr),y
.a7a8		88		dey				dey
.a7a9		10 f8		bpl $a7a3			bpl 	_MDLICopy
.a7ab		60		rts				rts
.a7ac						_MDLIError:
.a7ac		a9 06		lda #$06		lda	#6
.a7ae		4c 39 91	jmp $9139		jmp	ErrorHandler
.a7b1						MDLAppendLine:
.a7b1		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a7b3		85 36		sta $36				sta 	zTemp0
.a7b5		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a7b7		85 38		sta $38				sta 	0+zTemp1
.a7b9		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a7bb		85 39		sta $39				sta 	1+zTemp1
.a7bd		b2 38		lda ($38)			lda 	(zTemp1)
.a7bf		d0 0a		bne $a7cb			bne 	_MDLANoInitialise
.a7c1		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a7c3		8d 68 06	sta $0668			sta 	0+AppendPointer
.a7c6		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a7c8		8d 69 06	sta $0669			sta 	1+AppendPointer
.a7cb						_MDLANoInitialise:
.a7cb		18		clc				clc
.a7cc		ad 68 06	lda $0668			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a7cf		85 38		sta $38				sta 	zTemp1
.a7d1		72 36		adc ($36)			adc 	(zTemp0)
.a7d3		8d 68 06	sta $0668			sta 	AppendPointer
.a7d6		ad 69 06	lda $0669			lda 	AppendPointer+1
.a7d9		85 39		sta $39				sta 	zTemp1+1
.a7db		69 00		adc #$00			adc 	#0
.a7dd		8d 69 06	sta $0669			sta 	AppendPointer+1
.a7e0		a0 00		ldy #$00			ldy 	#0
.a7e2						_MDLACopy:
.a7e2		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a7e4		91 38		sta ($38),y			sta 	(zTemp1),y
.a7e6		c8		iny				iny
.a7e7		98		tya				tya
.a7e8		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a7ea		d0 f6		bne $a7e2			bne 	_MDLACopy
.a7ec		a9 00		lda #$00			lda 	#0 							; end of program.
.a7ee		91 38		sta ($38),y			sta 	(zTemp1),y
.a7f0		60		rts				rts
.0668						AppendPointer:
>0668								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a7f1						MemoryNew:
.a7f1		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a7f3		85 30		sta $30				sta 	codePtr
.a7f5		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a7f7		85 31		sta $31				sta 	codePtr+1
.a7f9		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a7fb		92 30		sta ($30)			sta 	(codePtr)
.a7fd		60		rts				rts
.a7fe						MemoryInline:
.a7fe		98		tya				tya 								; put address into stack,x
.a7ff		18		clc				clc  								; get the offset, add codePtr
.a800		65 30		adc $30				adc 	codePtr
.a802		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a804		a5 31		lda $31				lda 	codePtr+1
.a806		69 00		adc #$00			adc 	#0
.a808		95 60		sta $60,x			sta 	NSMantissa1,x
.a80a		74 68		stz $68,x			stz 	NSMantissa2,x
.a80c		74 70		stz $70,x			stz 	NSMantissa3,x
.a80e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a80f						MemorySearch:
.a80f		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a811		86 37		stx $37				stx 	zTemp0+1
.a813		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a815		85 30		sta $30				sta 	codePtr
.a817		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a819		85 31		sta $31				sta 	codePtr+1
.a81b						_MTAXLoop:
.a81b		b2 30		lda ($30)			lda 	(codePtr)
.a81d		18		clc				clc
.a81e		f0 21		beq $a841			beq 	_MTAXExit 					; reached end, exit with CC.
.a820		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a822		b1 30		lda ($30),y			lda 	(codePtr),y
.a824		38		sec				sec
.a825		e5 36		sbc $36				sbc 	zTemp0
.a827		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a829		c8		iny				iny 								; do the MSB
.a82a		b1 30		lda ($30),y			lda 	(codePtr),y
.a82c		e5 37		sbc $37				sbc 	zTemp0+1
.a82e		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a830		f0 0f		beq $a841			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a832		b0 0d		bcs $a841			bcs 	_MTAXExit 					; current < required exit
.a834		18		clc				clc
.a835		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a837		65 30		adc $30				adc 	codePtr
.a839		85 30		sta $30				sta 	codePtr
.a83b		90 02		bcc $a83f			bcc 	_CREExit
.a83d		e6 31		inc $31				inc 	codePtr+1 					; carry
.a83f						_CREExit:
.a83f		80 da		bra $a81b			bra 	_MTAXLoop
.a841						_MTAXExit:
.a841		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.a842						UpdateFont:
.a842		a5 01		lda $01				lda 	1 							; save position
.a844		48		pha				pha
.a845		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a847		85 01		sta $01				sta 	1
.a849		a9 70		lda #$70			lda 	#((FontBinary) & $FF)
.a84b		85 36		sta $36				sta 	0+zTemp0
.a84d		a9 a8		lda #$a8			lda 	#((FontBinary) >> 8)
.a84f		85 37		sta $37				sta 	1+zTemp0
.a851		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a853		85 38		sta $38				sta 	0+zTemp1
.a855		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a857		85 39		sta $39				sta 	1+zTemp1
.a859						_UFCopy1:
.a859		a0 00		ldy #$00			ldy 	#0
.a85b						_UFCopy2:
.a85b		b1 36		lda ($36),y			lda 	(zTemp0),y
.a85d		91 38		sta ($38),y			sta 	(zTemp1),y
.a85f		c8		iny				iny
.a860		d0 f9		bne $a85b			bne 	_UFCopy2
.a862		e6 37		inc $37				inc 	zTemp0+1
.a864		e6 39		inc $39				inc 	zTemp1+1
.a866		a5 39		lda $39				lda 	zTemp1+1
.a868		c9 c8		cmp #$c8			cmp 	#$C8
.a86a		d0 ed		bne $a859			bne 	_UFCopy1
.a86c		68		pla				pla 								; restore.
.a86d		85 01		sta $01				sta 	1
.a86f		60		rts				rts

;******  Processing file: ./font_update/../common/generated/font.dat

.a870						FontBinary:
>a870		06 09 10 3c 10 21 7e 00			.byte	$06,$09,$10,$3c,$10,$21,$7e,$00,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$00,$08,$00,$22,$00,$08,$00,$02,$00,$88,$00,$22,$00,$88,$00,$22,$00,$8a,$00,$2a,$00,$8a,$00,$2a,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$05,$aa,$11,$aa,$05,$aa,$11,$aa,$5f,$aa,$77,$aa,$5f,$aa,$77,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$af,$ff,$bb,$ff,$af,$ff,$bb,$ff,$77,$ff,$dd,$ff,$77,$ff,$dd,$ff,$7f,$ff,$df,$ff,$77,$ff,$df,$ff,$ff,$ff,$df,$ff,$77,$ff,$dd,$ff,$bb,$ff,$ee,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$77,$aa,$dd,$aa,$55,$aa,$55,$22,$55,$88,$55,$00,$55,$aa,$00,$aa,$00,$88,$00,$22,$00,$33,$99,$cc,$66,$33,$99,$cc,$66,$cc,$99,$33,$66,$cc,$99,$33,$66,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$00,$08,$00,$24,$24,$24,$00,$00,$00,$00,$00,$24,$24,$7e,$24,$7e,$24,$24,$00,$08,$1e,$28,$1c,$0a,$3c,$08,$00,$00,$62,$64,$08,$10,$26,$46,$00,$30,$48,$48,$30,$4a,$44,$3a,$00,$08,$08,$08,$00,$00,$00,$00,$00,$04,$08,$10,$10,$10,$08,$04,$00,$20,$10,$08,$08,$08,$10,$20,$00,$00,$2a,$1c,$3e,$1c,$2a,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00,$00,$00,$00,$00,$00,$08,$08,$10,$00,$00,$00,$7e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$02,$04,$08,$10,$20,$40,$00,$3c,$42,$46,$5a,$62,$42,$3c,$00,$08,$18,$08,$08,$08,$08,$1c,$00,$3c,$42,$02,$3c,$40,$40,$7e,$00,$3c,$42,$02,$1c,$02,$42,$3c,$00,$04,$44,$44,$44,$7e,$04,$04,$00,$7e,$40,$40,$7c,$02,$02,$7c,$00,$3c,$40,$40,$7c,$42,$42,$3c,$00,$7e,$42,$04,$08,$10,$10,$10,$00,$3c,$42,$42,$3c,$42,$42,$3c,$00,$3c,$42,$42,$3e,$02,$02,$3c,$00,$00,$00,$08,$00,$00,$08,$00,$00,$00,$00,$08,$00,$00,$08,$08,$10,$08,$10,$20,$40,$20,$10,$08,$00,$00,$00,$7e,$00,$7e,$00,$00,$00,$10,$08,$04,$02,$04,$08,$10,$00,$3c,$42,$02,$0c,$10,$00,$10,$00,$3c,$42,$4e,$52,$4e,$40,$3c,$00,$3c,$42,$42,$7e,$42,$42,$42,$00,$7c,$42,$42,$7c,$42,$42,$7c,$00,$3c,$42,$40,$40,$40,$42,$3c,$00,$78,$44,$42,$42,$42,$44,$78,$00,$7e,$40,$40,$78,$40,$40,$7e,$00,$7e,$40,$40,$78,$40,$40,$40,$00,$3c,$42,$40,$4e,$42,$42,$3c,$00,$42,$42,$42,$7e,$42,$42,$42,$00,$1c,$08,$08,$08,$08,$08,$1c,$00,$0e,$04,$04,$04,$04,$44,$38,$00,$42,$44,$48,$70,$48,$44,$42,$00,$40,$40,$40,$40,$40,$40,$7e,$00,$41,$63,$55,$49,$41,$41,$41,$00,$42,$62,$52,$4a,$46,$42,$42,$00,$3c,$42,$42,$42,$42,$42,$3c,$00,$7c,$42,$42,$7c,$40,$40,$40,$00,$3c,$42,$42,$42,$4a,$44,$3a,$00,$7c,$42,$42,$7c,$48,$44,$42,$00,$3c,$42,$40,$3c,$02,$42,$3c,$00,$3e,$08,$08,$08,$08,$08,$08,$00,$42,$42,$42,$42,$42,$42,$3c,$00,$41,$41,$41,$22,$22,$14,$08,$00,$41,$41,$41,$49,$55,$63,$41,$00,$42,$42,$24,$18,$24,$42,$42,$00,$41,$22,$14,$08,$08,$08,$08,$00,$7f,$02,$04,$08,$10,$20,$7f,$00,$3c,$20,$20,$20,$20,$20,$3c,$00,$00,$40,$20,$10,$08,$04,$02,$00,$3c,$04,$04,$04,$04,$04,$3c,$00,$00,$08,$14,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$3c,$02,$3e,$42,$3e,$00,$40,$40,$7c,$42,$42,$42,$7c,$00,$00,$00,$3c,$42,$40,$42,$3c,$00,$02,$02,$3e,$42,$42,$42,$3e,$00,$00,$00,$3c,$42,$7e,$40,$3c,$00,$0c,$10,$10,$7c,$10,$10,$10,$00,$00,$00,$3e,$42,$42,$3e,$02,$3c,$40,$40,$7c,$42,$42,$42,$42,$00,$08,$00,$18,$08,$08,$08,$08,$00,$04,$00,$0c,$04,$04,$04,$04,$38,$40,$40,$44,$48,$50,$68,$44,$00,$18,$08,$08,$08,$08,$08,$1c,$00,$00,$00,$76,$49,$49,$49,$49,$00,$00,$00,$7c,$42,$42,$42,$42,$00,$00,$00,$3c,$42,$42,$42,$3c,$00,$00,$00,$7c,$42,$42,$7c,$40,$40,$00,$00,$3e,$42,$42,$3e,$02,$02,$00,$00,$5c,$60,$40,$40,$40,$00,$00,$00,$3e,$40,$3c,$02,$7c,$00,$10,$10,$7c,$10,$10,$10,$0c,$00,$00,$00,$42,$42,$42,$46,$3a,$00,$00,$00,$42,$42,$42,$24,$18,$00,$00,$00,$41,$49,$49,$49,$36,$00,$00,$00,$42,$24,$18,$24,$42,$00,$00,$00,$42,$42,$42,$3e,$02,$3c,$00,$00,$7e,$04,$18,$20,$7e,$00,$0c,$10,$10,$20,$10,$10,$0c,$00,$10,$10,$10,$10,$10,$10,$10,$00,$60,$10,$10,$08,$10,$10,$60,$00,$00,$00,$30,$49,$06,$00,$00,$00,$08,$04,$04,$08,$10,$10,$08,$00,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$08,$08,$08,$08,$08,$08,$08,$08,$10,$10,$10,$10,$10,$10,$10,$10,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$40,$40,$40,$40,$40,$80,$80,$80,$80,$80,$80,$80,$80,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$0f,$08,$08,$08,$00,$00,$00,$00,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$00,$00,$00,$08,$08,$08,$08,$f8,$08,$08,$08,$81,$42,$24,$18,$18,$24,$42,$81,$00,$00,$00,$00,$0f,$08,$08,$08,$00,$00,$00,$00,$f8,$08,$08,$08,$08,$08,$08,$08,$0f,$00,$00,$00,$08,$08,$08,$08,$f8,$00,$00,$00,$18,$18,$18,$1f,$1f,$18,$18,$18,$00,$00,$00,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$00,$00,$00,$18,$18,$18,$f8,$f8,$18,$18,$18,$00,$00,$00,$1f,$1f,$18,$18,$18,$00,$00,$00,$f8,$f8,$18,$18,$18,$18,$18,$18,$1f,$1f,$00,$00,$00,$18,$18,$18,$f8,$f8,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$18,$18,$18,$18,$18,$18,$18,$18,$00,$00,$00,$00,$03,$07,$0f,$0f,$00,$00,$00,$00,$c0,$e0,$f0,$f0,$0f,$0f,$07,$03,$00,$00,$00,$00,$f0,$f0,$e0,$c0,$00,$00,$00,$00,$00,$7e,$7e,$7e,$7e,$7e,$7e,$00,$00,$00,$3c,$3c,$3c,$3c,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$3c,$7e,$7e,$7e,$7e,$3c,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$3c,$42,$42,$42,$42,$3c,$00,$00,$3c,$42,$5a,$5a,$42,$3c,$00,$ff,$81,$81,$81,$81,$81,$81,$ff,$00,$00,$03,$06,$6c,$38,$10,$00,$00,$00,$7e,$00,$7e,$00,$7e,$00,$00,$00,$00,$00,$03,$04,$08,$08,$00,$00,$00,$00,$e0,$10,$08,$08,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$55,$00,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$00,$aa,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$00,$aa,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$80,$00,$80,$00,$80,$40,$80,$40,$80,$40,$80,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$50,$a0,$50,$a0,$50,$a0,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$54,$a8,$54,$a8,$54,$a8,$54,$aa,$54,$aa,$54,$aa,$54,$aa,$54,$2a,$55,$2a,$55,$2a,$55,$2a,$55,$2a,$15,$2a,$15,$2a,$15,$2a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$05,$0a,$05,$0a,$05,$0a,$05,$02,$05,$02,$05,$02,$05,$02,$05,$02,$01,$02,$01,$02,$01,$02,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7e,$81,$9d,$a1,$a1,$9d,$81,$7e,$08,$08,$08,$04,$03,$00,$00,$00,$08,$08,$08,$10,$e0,$00,$00,$00,$80,$40,$20,$10,$08,$04,$02,$01,$01,$02,$04,$08,$10,$20,$40,$80,$ff,$7f,$3f,$1f,$0f,$07,$03,$01,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$01,$03,$07,$0f,$1f,$3f,$7f,$ff,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$3f,$1f,$0f,$07,$03,$01,$00,$00,$fc,$f8,$f0,$e0,$c0,$80,$00,$00,$00,$00,$01,$03,$07,$0f,$1f,$3f,$00,$00,$80,$c0,$e0,$f0,$f8,$fc,$0f,$07,$03,$01,$00,$00,$00,$00,$f0,$e0,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$07,$0f,$00,$00,$00,$00,$80,$c0,$e0,$f0,$03,$01,$00,$00,$00,$00,$00,$00,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$00,$00,$00,$80,$c0,$00,$00,$00,$00,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0,$00,$00,$00,$3e,$1c,$08,$00,$00,$00,$00,$08,$18,$38,$18,$08,$00,$00,$00,$10,$18,$1c,$18,$10,$00,$00,$00,$08,$1c,$3e,$00,$00,$00,$36,$7f,$7f,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$7f,$1c,$3e,$00,$08,$1c,$2a,$77,$2a,$08,$1c,$00
>a878		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>a888		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>a898		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>a8a8		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a8b8		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>a8c8		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>a8d8		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>a8e8		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>a8f8		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>a908		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>a918		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>a928		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>a938		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>a948		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>a958		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>a968		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>a978		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a988		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a998		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a9a8		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>a9b8		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>a9c8		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a9d8		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a9e8		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>a9f8		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>aa08		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>aa18		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>aa28		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>aa38		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>aa48		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>aa58		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>aa68		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>aa78		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>aa88		3c 42 40 40 40 42 3c 00 78 44 42 42 42 44 78 00
>aa98		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>aaa8		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>aab8		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>aac8		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>aad8		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>aae8		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>aaf8		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>ab08		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>ab18		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>ab28		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>ab38		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>ab48		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>ab58		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>ab68		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>ab78		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>ab88		00 00 3c 42 40 42 3c 00 02 02 3e 42 42 42 3e 00
>ab98		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>aba8		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>abb8		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>abc8		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>abd8		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>abe8		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>abf8		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>ac08		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>ac18		00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>ac28		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>ac38		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>ac48		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>ac58		60 10 10 08 10 10 60 00 00 00 30 49 06 00 00 00
>ac68		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>ac78		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>ac88		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>ac98		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>aca8		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>acb8		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>acc8		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>acd8		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>ace8		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>acf8		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>ad08		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>ad18		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>ad28		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>ad38		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>ad48		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>ad58		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>ad68		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>ad78		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>ad88		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>ad98		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>ada8		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>adb8		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>adc8		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>add8		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>ade8		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>adf8		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>ae08		00 7e 7e 7e 7e 7e 7e 00 00 00 3c 3c 3c 3c 00 00
>ae18		00 00 00 18 18 00 00 00 00 00 00 00 08 00 00 00
>ae28		00 3c 7e 7e 7e 7e 3c 00 00 00 18 3c 3c 18 00 00
>ae38		00 3c 42 42 42 42 3c 00 00 3c 42 5a 5a 42 3c 00
>ae48		ff 81 81 81 81 81 81 ff 00 00 03 06 6c 38 10 00
>ae58		00 00 7e 00 7e 00 7e 00 00 00 00 00 03 04 08 08
>ae68		00 00 00 00 e0 10 08 08 00 00 00 00 00 00 00 55
>ae78		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>ae88		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>ae98		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>aea8		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>aeb8		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>aec8		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>aed8		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>aee8		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>aef8		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>af08		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>af18		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>af28		2a 15 2a 15 2a 15 2a 15 0a 15 0a 15 0a 15 0a 15
>af38		0a 05 0a 05 0a 05 0a 05 02 05 02 05 02 05 02 05
>af48		02 01 02 01 02 01 02 01 00 01 00 01 00 01 00 01
>af58		7e 81 9d a1 a1 9d 81 7e 08 08 08 04 03 00 00 00
>af68		08 08 08 10 e0 00 00 00 80 40 20 10 08 04 02 01
>af78		01 02 04 08 10 20 40 80 ff 7f 3f 1f 0f 07 03 01
>af88		ff fe fc f8 f0 e0 c0 80 01 03 07 0f 1f 3f 7f ff
>af98		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>afa8		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>afb8		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>afc8		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>afd8		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>afe8		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>aff8		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>b008		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>b018		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>b028		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>b038		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>b048		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>b058		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>b068		08 1c 2a 77 2a 08 1c 00

;******  Return to file: ./font_update/newfont.asm


;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.b070						PingCommand:
.b070		5a		phy				phy 								; save pos
.b071		a9 01		lda #$01			lda 	#1 						; push channel.
.b073		48		pha				pha
.b074		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b076		a2 06		ldx #$06			ldx 	#6 						; length
.b078		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b07a		80 24		bra $b0a0			bra 	SoundEffectCommand
.b07c						ZapCommand:
.b07c		5a		phy				phy 								; save pos
.b07d		a9 01		lda #$01			lda 	#1 						; push channel.
.b07f		48		pha				pha
.b080		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b082		a2 0a		ldx #$0a			ldx 	#10 						; length
.b084		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b086		80 18		bra $b0a0			bra 	SoundEffectCommand
.b088						ShootCommand:
.b088		5a		phy				phy 								; save pos
.b089		a9 03		lda #$03			lda 	#3 						; push channel.
.b08b		48		pha				pha
.b08c		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b08e		a2 04		ldx #$04			ldx 	#4 						; length
.b090		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b092		80 0c		bra $b0a0			bra 	SoundEffectCommand
.b094						Explode:
.b094		5a		phy				phy 								; save pos
.b095		a9 03		lda #$03			lda 	#3 						; push channel.
.b097		48		pha				pha
.b098		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b09a		a2 0a		ldx #$0a			ldx 	#10 						; length
.b09c		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b09e		80 00		bra $b0a0			bra 	SoundEffectCommand
.b0a0						SoundEffectCommand:
.b0a0		8d 6a 06	sta $066a			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b0a3		9c 6b 06	stz $066b			stz 	SoundCommandBlock+1
.b0a6		a9 0f		lda #$0f			lda 	#15
.b0a8		8d 6c 06	sta $066c			sta 	SoundCommandBlock+2
.b0ab		8e 6d 06	stx $066d			stx 	SoundCommandBlock+3
.b0ae		8c 6e 06	sty $066e			sty 	SoundCommandBlock+4
.b0b1		9c 6f 06	stz $066f			stz 	SoundCommandBlock+5
.b0b4		68		pla				pla
.b0b5		09 10		ora #$10			ora 	#$10  						; execute command $11
.b0b7		a2 6a		ldx #$6a			ldx 	#(SoundCommandBlock & $FF)
.b0b9		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.b0bb		20 8f 80	jsr $808f			jsr 	SNDCommand
.b0be		7a		ply				ply
.b0bf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.b0c0						UnaryPlaying:
.b0c0		fa		plx				plx
.b0c1		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; get channel #
.b0c4		48		pha				pha
.b0c5		20 20 91	jsr $9120			jsr		CheckRightBracket
.b0c8		68		pla				pla
.b0c9		c9 04		cmp #$04			cmp 	#4
.b0cb		b0 0c		bcs $b0d9			bcs 	_UPNotPlaying
.b0cd		09 20		ora #$20			ora 	#$20 						; query playing ?
.b0cf		20 8f 80	jsr $808f			jsr 	SNDCommand
.b0d2		c9 00		cmp #$00			cmp 	#0
.b0d4		f0 03		beq $b0d9			beq 	_UPNotPlaying
.b0d6		4c a6 91	jmp $91a6			jmp 	ReturnTrue
.b0d9						_UPNotPlaying:
.b0d9		4c b1 91	jmp $91b1			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.b0dc						SoundCommand:
.b0dc		b1 30		lda ($30),y			lda 	(codePtr),y
.b0de		c9 c7		cmp #$c7			cmp 	#KWD_OFF 					; SOUND OFF ?
.b0e0		d0 09		bne $b0eb			bne 	_SNDMain
.b0e2		c8		iny				iny 								; skip OFF
.b0e3		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b0e5		5a		phy				phy
.b0e6		20 8f 80	jsr $808f			jsr 	SNDCommand
.b0e9		7a		ply				ply
.b0ea		60		rts				rts
.b0eb						_SNDMain:
.b0eb		a2 00		ldx #$00			ldx 	#0
.b0ed		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; channel
.b0f0		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b0f2		b0 4b		bcs $b13f			bcs 	_SndError
.b0f4		e8		inx				inx 								; do the rest in slot 1.
.b0f5		20 28 91	jsr $9128			jsr 	CheckComma
.b0f8		20 04 a0	jsr $a004			jsr 	Evaluate16BitInteger 		; Pitch
.b0fb		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b0fd		c9 10		cmp #$10			cmp 	#16
.b0ff		b0 3e		bcs $b13f			bcs 	_SndError
.b101		8d 6b 06	sta $066b			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b104		b5 58		lda $58,x			lda 	NSMantissa0,x
.b106		8d 6a 06	sta $066a			sta 	SoundCommandBlock
.b109		20 28 91	jsr $9128			jsr 	CheckComma
.b10c		20 1f a0	jsr $a01f			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b10f		8d 6d 06	sta $066d			sta 	SoundCommandBlock+3
.b112		a9 0f		lda #$0f			lda 	#15
.b114		8d 6c 06	sta $066c			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b117		9c 6e 06	stz $066e			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b11a		9c 6f 06	stz $066f			stz 	SoundCommandBlock+5
.b11d		b1 30		lda ($30),y			lda 	(codePtr),y
.b11f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b121		d0 0e		bne $b131			bne 	_SNDPlay
.b123		c8		iny				iny
.b124		20 0e a0	jsr $a00e			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b127		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b129		8d 6e 06	sta $066e			sta 	SoundCommandBlock+4
.b12c		b5 60		lda $60,x			lda 	NSMantissa1,x
.b12e		8d 6f 06	sta $066f			sta 	SoundCommandBlock+5
.b131						_SNDPlay:
.b131		5a		phy				phy
.b132		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b134		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b136		a2 6a		ldx #$6a			ldx 	#(SoundCommandBlock & $FF)
.b138		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.b13a		20 8f 80	jsr $808f			jsr 	SNDCommand
.b13d		7a		ply				ply
.b13e		60		rts				rts
.b13f						_SndError:
.b13f		4c 07 a2	jmp $a207			jmp 	RangeError
.066a						SoundCommandBlock:
>066a								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b142						StackPushByte:
.b142		48		pha				pha 								; save byte on stack
.b143		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b145		d0 08		bne $b14f			bne 	_SPBNoBorrow
.b147		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b149		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b14b		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b14d		90 06		bcc $b155			bcc 	_SPBMemory
.b14f						_SPBNoBorrow:
.b14f		c6 34		dec $34				dec 	basicStack
.b151		68		pla				pla 								; get back and write
.b152		92 34		sta ($34)			sta 	(basicStack)
.b154		60		rts				rts
.b155						_SPBMemory:
.b155		a9 12		lda #$12		lda	#18
.b157		4c 39 91	jmp $9139		jmp	ErrorHandler
.b15a						StackPopByte:
.b15a		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b15c		e6 34		inc $34				inc 	basicStack
.b15e		d0 02		bne $b162			bne 	_SPBNoCarry
.b160		e6 35		inc $35				inc 	basicStack+1
.b162						_SPBNoCarry:
.b162		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b163						StackOpen:
.b163		48		pha				pha 								; save frame byte
.b164		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b166		0a		asl a				asl 	a 							; claim twice this for storage
.b167		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b169		38		sec				sec 								; so basically subtracting from
.b16a		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b16c		85 34		sta $34				sta 	basicStack
.b16e		b0 09		bcs $b179			bcs 	_SONoBorrow
>b170		db						.byte 	$DB 						; causes a break in the emulator
.b171		c6 35		dec $35				dec 	basicStack+1
.b173		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b175		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b177		90 04		bcc $b17d			bcc 	_SOMemory
.b179						_SONoBorrow:
.b179		68		pla				pla 								; get marker back and write at TOS
.b17a		92 34		sta ($34)			sta 	(basicStack)
.b17c		60		rts				rts
.b17d						_SOMemory:
.b17d		a9 12		lda #$12		lda	#18
.b17f		4c 39 91	jmp $9139		jmp	ErrorHandler
.b182						StackClose:
.b182		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b184		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b186		0a		asl a				asl 	a 							; claim twice this.
.b187		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b189		85 34		sta $34				sta 	basicStack
.b18b		90 02		bcc $b18f			bcc 	_SCExit
.b18d		e6 35		inc $35				inc 	basicStack+1
.b18f						_SCExit:
.b18f		60		rts				rts
.b190						StackCheckFrame:
.b190		48		pha				pha
.b191						_StackRemoveLocals:
.b191		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b193		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b195		b0 05		bcs $b19c			bcs 	_SCNoLocal
.b197		20 3c 8b	jsr $8b3c			jsr 	LocalPopValue 				; restore the local value
.b19a		80 f5		bra $b191			bra 	_StackRemoveLocals 			; gr round again
.b19c						_SCNoLocal:
.b19c		68		pla				pla 								; get the frame check.
.b19d		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b19f		29 f0		and #$f0			and 	#$F0 						; check type bits
.b1a1		d0 01		bne $b1a4			bne 	_SCFError 					; different, we have structures mixed up
.b1a3		60		rts				rts
.b1a4						_SCFError:
.b1a4		8a		txa				txa 								; report error X
.b1a5		4c 39 91	jmp $9139			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b1a8						STKSaveCodePosition:
.b1a8		5a		phy				phy
.b1a9		98		tya				tya 								; save Y
.b1aa		a0 05		ldy #$05			ldy 	#5
.b1ac		91 34		sta ($34),y			sta 	(basicStack),y
.b1ae		88		dey				dey 								; save Code Pointer
.b1af						_STKSaveLoop:
.b1af		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b1b2		91 34		sta ($34),y			sta 	(basicStack),y
.b1b4		88		dey				dey
.b1b5		d0 f8		bne $b1af			bne 	_STKSaveLoop
.b1b7		7a		ply				ply
.b1b8		60		rts				rts
.b1b9						STKLoadCodePosition:
.b1b9		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b1bb						_STKLoadLoop:
.b1bb		b1 34		lda ($34),y			lda 	(basicStack),y
.b1bd		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b1c0		c8		iny				iny
.b1c1		c0 05		cpy #$05			cpy 	#5
.b1c3		d0 f6		bne $b1bb			bne 	_STKLoadLoop
.b1c5		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b1c7		a8		tay				tay
.b1c8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b1c9						StackReset:
.b1c9		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b1cb		85 34		sta $34				sta 	0+basicStack
.b1cd		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b1cf		85 35		sta $35				sta 	1+basicStack
.b1d1		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b1d3		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b1d5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b1d6						StringConcrete:
.b1d6		5a		phy				phy 								; save position on stack
.b1d7		20 73 9c	jsr $9c73			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b1da		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b1dc		85 38		sta $38				sta 	zTemp1
.b1de		b5 60		lda $60,x			lda 	NSMantissa1,x
.b1e0		85 39		sta $39				sta 	zTemp1+1
.b1e2		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b1e4						_SALength:
.b1e4		c8		iny				iny
.b1e5		b1 38		lda ($38),y			lda 	(zTemp1),y
.b1e7		d0 fb		bne $b1e4			bne 	_SALength
.b1e9		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b1eb		b0 3d		bcs $b22a			bcs 	_SALengthError
.b1ed		98		tya				tya 				 				; length of the new string
.b1ee		18		clc				clc
.b1ef		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b1f1		90 02		bcc $b1f5			bcc 	_SAHaveLength
.b1f3		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b1f5						_SAHaveLength:
.b1f5		48		pha				pha 								; save length.
.b1f6		38		sec				sec
.b1f7		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b1f9		6d 0e 04	adc $040e			adc 	stringMemory
.b1fc		8d 0e 04	sta $040e			sta 	stringMemory
.b1ff		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b201		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b203		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b205		6d 0f 04	adc $040f			adc 	stringMemory+1
.b208		8d 0f 04	sta $040f			sta 	stringMemory+1
.b20b		85 3b		sta $3b				sta 	zTemp2+1
.b20d		95 60		sta $60,x			sta 	NSMantissa1,x
.b20f		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b210		38		sec				sec
.b211		e9 03		sbc #$03			sbc 	#3
.b213		92 3a		sta ($3a)			sta 	(zTemp2)
.b215		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b217		a0 01		ldy #$01			ldy 	#1
.b219		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b21b						_SACopyNewString:
.b21b		a0 00		ldy #$00			ldy 	#0
.b21d						_SACopyNSLoop:
.b21d		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b21f		c8		iny				iny 								; write two on in string storage
.b220		c8		iny				iny
.b221		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b223		88		dey				dey 								; this makes it one one.
.b224		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b226		d0 f5		bne $b21d			bne 	_SACopyNSLoop
.b228		7a		ply				ply
.b229		60		rts				rts
.b22a						_SALengthError:
.b22a		a9 09		lda #$09		lda	#9
.b22c		4c 39 91	jmp $9139		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b22f						StringSystemInitialise:
.b22f		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b231		8d 0e 04	sta $040e			sta 	0+stringMemory
.b234		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b236		8d 0f 04	sta $040f			sta 	1+stringMemory
.b239		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b23c		60		rts				rts
.b23d						StringSpaceInitialise:
.b23d		20 73 9c	jsr $9c73			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b240		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b242		8d 10 04	sta $0410			sta 	stringInitialised
.b245		ad 0e 04	lda $040e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b248		8d 11 04	sta $0411			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b24b		ad 0f 04	lda $040f			lda 	stringMemory+1
.b24e		3a		dec a				dec 	a
.b24f		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b252		60		rts				rts
.b253						StringTempAllocate:
.b253		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b255		b0 30		bcs $b287			bcs 	_STALength
.b257		2c 10 04	bit $0410			bit 	stringInitialised 			; already initialised
.b25a		30 05		bmi $b261			bmi 	_STAAllocate
.b25c		48		pha				pha 								; save value to subtract.
.b25d		20 3d b2	jsr $b23d			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b260		68		pla				pla 								; restore it
.b261						_STAAllocate:
.b261		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b263		18		clc				clc  								; deliberate allows one more
.b264		6d 11 04	adc $0411			adc 	stringTempPointer 			; subtract from temp pointer
.b267		8d 11 04	sta $0411			sta 	stringTempPointer
.b26a		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b26c		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b26e		ad 12 04	lda $0412			lda 	stringTempPointer+1
.b271		69 ff		adc #$ff			adc 	#$FF
.b273		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b276		85 3d		sta $3d				sta 	zsTemp+1
.b278		95 60		sta $60,x			sta 	NSMantissa1,x
.b27a		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b27c		74 70		stz $70,x			stz 	NSMantissa3,x
.b27e		a9 10		lda #$10			lda 	#NSTString
.b280		95 50		sta $50,x			sta 	NSStatus,x
.b282		a9 00		lda #$00			lda 	#0 							; clear the target string
.b284		92 3c		sta ($3c)			sta 	(zsTemp)
.b286		60		rts				rts
.b287						_STALength:
.b287		a9 09		lda #$09		lda	#9
.b289		4c 39 91	jmp $9139		jmp	ErrorHandler
.b28c						StringTempWrite:
.b28c		48		pha				pha
.b28d		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b28f		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b291		d0 02		bne $b295			bne 	_STWNoCarry
.b293		e6 3d		inc $3d				inc 	zsTemp+1
.b295						_STWNoCarry:
.b295		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b297		92 3c		sta ($3c)			sta 	(zsTemp)
.b299		68		pla				pla
.b29a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./storage/verify.asm

.b29b						Command_VERIFY:
.b29b		20 dc 9f	jsr $9fdc			jsr 	EvaluateString 				; file name to verify
.b29e		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.b2a0		a5 36		lda $36				lda 	zTemp0
.b2a2		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.b2a5		b0 4b		bcs $b2f2			bcs 	_CVErrorHandler 			; error, so fail.
.b2a7		8d 5e 06	sta $065e			sta 	CurrentFileStream 			; save the reading stream.
.b2aa		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.b2ad		9c 5d 06	stz $065d			stz 	LoadEOFFlag 				; clear EOF Flag.
.b2b0		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b2b2		85 30		sta $30				sta 	codePtr
.b2b4		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b2b6		85 31		sta $31				sta 	codePtr+1
.b2b8						_CVLoop:
.b2b8		20 84 8a	jsr $8a84			jsr 	LoadReadLine 				; get next line.
.b2bb		f0 27		beq $b2e4			beq 	_CVExit 					; end, exit.
.b2bd		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.b2c0		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.b2c3		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.b2c6		f0 f0		beq $b2b8			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.b2c8		a0 00		ldy #$00			ldy 	#0 							; start compare
.b2ca						_CVCompareLoop:
.b2ca		b1 30		lda ($30),y			lda 	(codePtr),y
.b2cc		d9 2a 04	cmp $042a,y			cmp 	tokenOffset,y 				; compare against actual code.
.b2cf		d0 1c		bne $b2ed			bne 	_CVCompareError
.b2d1		c8		iny				iny
.b2d2		cc 2a 04	cpy $042a			cpy 	tokenOffset 				; until done whole line of code
.b2d5		d0 f3		bne $b2ca			bne 	_CVCompareLoop
.b2d7		18		clc				clc
.b2d8		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.b2da		65 30		adc $30				adc 	codePtr
.b2dc		85 30		sta $30				sta 	codePtr
.b2de		90 02		bcc $b2e2			bcc 	_CREExit
.b2e0		e6 31		inc $31				inc 	codePtr+1 					; carry
.b2e2						_CREExit:
.b2e2		80 d4		bra $b2b8			bra 	_CVLoop
.b2e4						_CVExit:
.b2e4		ad 5e 06	lda $065e			lda 	CurrentFileStream
.b2e7		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.b2ea		4c 59 8a	jmp $8a59			jmp 	CLComplete
.b2ed						_CVCompareError:
.b2ed		a9 1b		lda #$1b		lda	#27
.b2ef		4c 39 91	jmp $9139		jmp	ErrorHandler
.b2f2						_CVErrorHandler:
.b2f2		4c 76 8a	jmp $8a76			jmp 	CLErrorHandler

;******  Return to file: _basic.asm

.b2f5						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 71 06	ldy $0671			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac 71 06	ldy $0671			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad 72 06	lda $0672			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c 71 06	sty $0671			sty 	EXTColumn
.c02d	a02d	cc 73 06	cpy $0673			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee 70 06	inc $0670			inc 	EXTRow  					; bump row
.c035	a035	9c 71 06	stz $0671			stz 	EXTColumn 					; back to column 0
.c038	a038	ad 70 06	lda $0670			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd 74 06	cmp $0674			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d 73 06	adc $0673			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce 71 06	dec $0671			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c 71 06	stz $0671			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce 70 06	dec $0670			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad 70 06	lda $0670			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce 70 06	dec $0670			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed 73 06	sbc $0673			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c 71 06	sty $0671			sty 	EXTColumn
.c08c	a08c	cc 73 06	cpy $0673			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c 71 06	sty $0671			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad 74 06	lda $0674			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd 70 06	cmp $0670			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee 70 06	inc $0670			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d 73 06	adc $0673			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad 71 06	lda $0671			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d 71 06	sta $0671			sta 	EXTColumn
.c0c9	a0c9	cd 73 06	cmp $0673			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce 71 06	dec $0671			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac 73 06	ldy $0673			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc 73 06	cpy $0673			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d 72 06	and $0672			and 	EXTTextColour 				; mask out old.
.c135	a135	8d 72 06	sta $0672			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d 72 06	ora $0672			ora 	EXTTextColour
.c13c	a13c	8d 72 06	sta $0672			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad 72 06	lda $0672			lda 	EXTTextColour
.c154	a154	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad 72 06	lda $0672			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c 70 06	stz $0670			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c 71 06	stz $0671			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 b3		lda #$b3			lda 	#179
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad 71 06	lda $0671			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad 70 06	lda $0670			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputLine:
.c1da	a1da	48		pha				pha
.c1db	a1db	da		phx				phx
.c1dc	a1dc	5a		phy				phy
.c1dd	a1dd	a5 01		lda $01				lda 	1 							; save I/O page
.c1df	a1df	48		pha				pha
.c1e0	a1e0					_EILLoop:
.c1e0	a1e0	20 0d bc	jsr $bc0d			jsr 	PagedInputSingleCharacter
.c1e3	a1e3	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1e5	a1e5	f0 44		beq $a22b			beq 	_EILExit
.c1e7	a1e7	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1e9	a1e9	f0 2a		beq $a215			beq 	_EILDelete
.c1eb	a1eb	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1ed	a1ed	f0 1c		beq $a20b			beq 	_EILBackspace
.c1ef	a1ef	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1f1	a1f1	90 12		bcc $a205			bcc 	_EILPrintLoop
.c1f3	a1f3	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1f5	a1f5	b0 0e		bcs $a205			bcs 	_EILPrintLoop
.c1f7	a1f7	48		pha				pha 								; save character
.c1f8	a1f8	a9 02		lda #$02			lda 	#2  						; insert a space
.c1fa	a1fa	85 01		sta $01				sta 	1
.c1fc	a1fc	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in text screen
.c1ff	a1ff	e6 01		inc $01				inc 	1
.c201	a201	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in colour screen
.c204	a204	68		pla				pla 								; get character back.
.c205	a205					_EILPrintLoop:
.c205	a205	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c208	a208	80 d6		bra $a1e0			bra 	_EILLoop
.c20a	a20a	60		rts				rts
.c20b	a20b					_EILBackspace:
.c20b	a20b	ad 71 06	lda $0671			lda 	EXTColumn					; can we backspace ?
.c20e	a20e	f0 d0		beq $a1e0			beq 	_EILLoop
.c210	a210	a9 02		lda #$02			lda 	#2 							; move cursor left
.c212	a212	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c215	a215					_EILDelete
.c215	a215	a9 02		lda #$02			lda 	#2 							; text block
.c217	a217	85 01		sta $01				sta 	1
.c219	a219	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c21b	a21b	20 5a a2	jsr $a25a			jsr 	EXTILDelete
.c21e	a21e	e6 01		inc $01				inc 	1 							; colour block
.c220	a220	ac 71 06	ldy $0671			ldy 	EXTColumn 					; get attribute of last character
.c223	a223	88		dey				dey
.c224	a224	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c226	a226	20 5a a2	jsr $a25a			jsr 	EXTILDelete 				; backspace attribute
.c229	a229	80 b5		bra $a1e0			bra 	_EILLoop 					; and go round.
.c22b	a22b					_EILExit:
.c22b	a22b	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c22d	a22d	85 01		sta $01				sta 	1
.c22f	a22f	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c231	a231					_EILScrapeLine:
.c231	a231	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c233	a233	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c236	a236	c8		iny				iny
.c237	a237	cc 73 06	cpy $0673			cpy 	EXTScreenWidth
.c23a	a23a	d0 f5		bne $a231			bne 	_EILScrapeLine
.c23c	a23c					_EILTrimSpaces:
.c23c	a23c	88		dey				dey
.c23d	a23d	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c23f	a23f	f0 07		beq $a248			beq 	_EILEndTrim		 			; zero the input line.
.c241	a241	b9 2a 05	lda $052a,y			lda 	lineBuffer,y
.c244	a244	c9 20		cmp #$20			cmp 	#' '
.c246	a246	f0 f4		beq $a23c			beq 	_EILTrimSpaces 				; if fail this found non space character
.c248	a248					_EILEndTrim:
.c248	a248	c8		iny				iny 								; trim after non space character.
.c249	a249	a9 00		lda #$00			lda 	#0 							; trim here.
.c24b	a24b	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c24e	a24e	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c250	a250	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c253	a253	68		pla				pla 								; reset I/O page
.c254	a254	85 01		sta $01				sta 	1
.c256	a256	7a		ply				ply
.c257	a257	fa		plx				plx
.c258	a258	68		pla				pla
.c259	a259	60		rts				rts
.c25a	a25a					EXTILDelete:
.c25a	a25a	48		pha				pha 								; save the new character
.c25b	a25b	ac 71 06	ldy $0671			ldy 	EXTColumn 					; start copying from here.
.c25e	a25e					_EXTDLoop:
.c25e	a25e	c8		iny				iny 								; copy one byte down.
.c25f	a25f	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c261	a261	88		dey				dey
.c262	a262	91 40		sta ($40),y			sta 	(EXTAddress),y
.c264	a264	c8		iny				iny 								; do till end of line.
.c265	a265	cc 73 06	cpy $0673			cpy 	EXTScreenWidth
.c268	a268	90 f4		bcc $a25e			bcc 	_EXTDLoop
.c26a	a26a	88		dey				dey 	 							; write in last slot.
.c26b	a26b	68		pla				pla
.c26c	a26c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c26e	a26e	60		rts				rts
.c26f	a26f					EXTILInsert:
.c26f	a26f	ac 73 06	ldy $0673			ldy 	EXTScreenWidth 				; end position
.c272	a272					_EXTILoop:
.c272	a272	88		dey				dey 								; back one
.c273	a273	cc 71 06	cpy $0671			cpy 	EXTColumn 					; exit if reached insert point.
.c276	a276	f0 08		beq $a280			beq 	_EXTIExit
.c278	a278	88		dey				dey 								; copy one byte up.
.c279	a279	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c27b	a27b	c8		iny				iny
.c27c	a27c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c27e	a27e	80 f2		bra $a272			bra 	_EXTILoop
.c280	a280					_EXTIExit:
.c280	a280	60		rts				rts
.c281	a281					EXTScrollFill:
.c281	a281	aa		tax				tax									; save value to fill with
.c282	a282	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c284	a284	48		pha				pha
.c285	a285	a5 37		lda $37				lda 	zTemp0+1
.c287	a287	48		pha				pha
.c288	a288	a5 38		lda $38				lda 	zTemp1
.c28a	a28a	48		pha				pha
.c28b	a28b	a5 39		lda $39				lda 	zTemp1+1
.c28d	a28d	48		pha				pha
.c28e	a28e	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c290	a290	85 37		sta $37				sta 	zTemp0+1
.c292	a292	85 39		sta $39				sta 	zTemp1+1
.c294	a294	64 36		stz $36				stz 	zTemp0
.c296	a296	ad 73 06	lda $0673			lda 	EXTScreenWidth
.c299	a299	85 38		sta $38				sta 	zTemp1
.c29b	a29b	a0 00		ldy #$00			ldy 	#0
.c29d	a29d					_EXSFCopy1:
.c29d	a29d	b1 38		lda ($38),y			lda 	(zTemp1),y
.c29f	a29f	91 36		sta ($36),y			sta 	(zTemp0),y
.c2a1	a2a1	c8		iny				iny
.c2a2	a2a2	d0 f9		bne $a29d			bne 	_EXSFCopy1
.c2a4	a2a4	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2a6	a2a6	e6 39		inc $39				inc 	zTemp1+1
.c2a8	a2a8	a5 39		lda $39				lda 	zTemp1+1
.c2aa	a2aa	c9 d3		cmp #$d3			cmp 	#$D3
.c2ac	a2ac	d0 ef		bne $a29d			bne 	_EXSFCopy1
.c2ae	a2ae	ac 73 06	ldy $0673			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2b1	a2b1	8a		txa				txa
.c2b2	a2b2					_EXSFFill1:
.c2b2	a2b2	88		dey				dey
.c2b3	a2b3	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2b5	a2b5	c0 00		cpy #$00			cpy 	#0
.c2b7	a2b7	10 f9		bpl $a2b2			bpl 	_EXSFFill1
.c2b9	a2b9	68		pla				pla
.c2ba	a2ba	85 39		sta $39				sta 	zTemp1+1
.c2bc	a2bc	68		pla				pla
.c2bd	a2bd	85 38		sta $38				sta 	zTemp1
.c2bf	a2bf	68		pla				pla
.c2c0	a2c0	85 37		sta $37				sta 	zTemp0+1
.c2c2	a2c2	68		pla				pla
.c2c3	a2c3	85 36		sta $36				sta 	zTemp0
.c2c5	a2c5	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.0670						EXTRow:
>0670								.fill 	1
.0671						EXTColumn:
>0671								.fill 	1
.0672						EXTTextColour:
>0672								.fill 	1
.0673						EXTScreenWidth:
>0673								.fill 	1
.0674						EXTScreenHeight:
>0674								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2c6	a2c6					Export_EXTInitialise:
.c2c6	a2c6	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2c8	a2c8	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2cb	a2cb	9c 08 d0	stz $d008			stz 	$D008
.c2ce	a2ce	9c 09 d0	stz $d009			stz 	$D009
.c2d1	a2d1	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2d3	a2d3	8d 58 d6	sta $d658			sta 	$D658
.c2d6	a2d6	a9 52		lda #$52			lda 	#$52
.c2d8	a2d8	8d 72 06	sta $0672			sta 	EXTTextColour
.c2db	a2db	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2dd	a2dd	8d 73 06	sta $0673			sta 	EXTScreenWidth
.c2e0	a2e0	a9 3c		lda #$3c			lda 	#60
.c2e2	a2e2	8d 74 06	sta $0674			sta 	EXTScreenHeight
.c2e5	a2e5	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c2e8	a2e8					_EXMoveDown:
.c2e8	a2e8	a9 0d		lda #$0d			lda 	#13
.c2ea	a2ea	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c2ed	a2ed	ad 70 06	lda $0670			lda 	EXTRow
.c2f0	a2f0	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c2f2	a2f2	d0 f4		bne $a2e8			bne 	_EXMoveDown
.c2f4	a2f4	20 fa a2	jsr $a2fa			jsr 	EXTShowHeader
.c2f7	a2f7	64 01		stz $01				stz 	1
.c2f9	a2f9	60		rts				rts
.c2fa	a2fa					EXTShowHeader:
.c2fa	a2fa	a5 01		lda $01				lda 	1
.c2fc	a2fc	48		pha				pha
.c2fd	a2fd	a9 02		lda #$02			lda 	#2
.c2ff	a2ff	a2 ff		ldx #$ff			ldx 	#(Header_chars & $FF)
.c301	a301	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c303	a303	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c306	a306	a9 03		lda #$03			lda 	#3
.c308	a308	a2 67		ldx #$67			ldx 	#(Header_attrs & $FF)
.c30a	a30a	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c30c	a30c	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c30f	a30f	64 01		stz $01				stz 	1
.c311	a311	a2 3f		ldx #$3f			ldx 	#16*4-1
.c313	a313					_EXTCopyLUT:
.c313	a313	bd 2f a7	lda $a72f,x			lda 	Header_Palette,x
.c316	a316	9d 00 d8	sta $d800,x			sta 	$D800,x
.c319	a319	9d 40 d8	sta $d840,x			sta 	$D840,x
.c31c	a31c	ca		dex				dex
.c31d	a31d	10 f4		bpl $a313			bpl 	_EXTCopyLUT
.c31f	a31f	68		pla				pla
.c320	a320	60		rts				rts
.c321	a321					_ESHCopyBlock:
.c321	a321	85 01		sta $01				sta 	1
.c323	a323	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c325	a325	84 37		sty $37				sty 	zTemp0+1
.c327	a327	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c329	a329	85 38		sta $38				sta 	0+zTemp1
.c32b	a32b	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c32d	a32d	85 39		sta $39				sta 	1+zTemp1
.c32f	a32f					_ESHCopyLoop:
.c32f	a32f	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c331	a331	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c333	a333	f0 1b		beq $a350			beq 	_ESHUnpack
.c335	a335	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c337	a337	a9 01		lda #$01			lda 	#1 							; source add 1
.c339	a339	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c33b	a33b					_ESHNext:
.c33b	a33b	18		clc				clc 								; zTemp0 + A
.c33c	a33c	65 36		adc $36				adc 	zTemp0
.c33e	a33e	85 36		sta $36				sta 	zTemp0
.c340	a340	90 02		bcc $a344			bcc 	_ESHNoCarry
.c342	a342	e6 37		inc $37				inc 	zTemp0+1
.c344	a344					_ESHNoCarry:
.c344	a344	98		tya				tya 								; zTemp1 + Y
.c345	a345	18		clc				clc
.c346	a346	65 38		adc $38				adc 	zTemp1
.c348	a348	85 38		sta $38				sta 	zTemp1
.c34a	a34a	90 e3		bcc $a32f			bcc 	_ESHCopyLoop
.c34c	a34c	e6 39		inc $39				inc 	zTemp1+1
.c34e	a34e	80 df		bra $a32f			bra 	_ESHCopyLoop
.c350	a350					_ESHUnpack:
.c350	a350	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c352	a352	b1 36		lda ($36),y			lda 	(zTemp0),y
.c354	a354	aa		tax				tax
.c355	a355	88		dey				dey 								; byte into A
.c356	a356	b1 36		lda ($36),y			lda 	(zTemp0),y
.c358	a358	f0 0c		beq $a366			beq 	_ESHExit 					; exit if zero.
.c35a	a35a	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c35c	a35c					_ESHCopyOut:
.c35c	a35c	91 38		sta ($38),y			sta 	(zTemp1),y
.c35e	a35e	c8		iny				iny
.c35f	a35f	ca		dex				dex
.c360	a360	d0 fa		bne $a35c			bne 	_ESHCopyOut
.c362	a362	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c364	a364	80 d5		bra $a33b			bra 	_ESHNext
.c366	a366					_ESHExit:
.c366	a366	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c367	a367					Header_attrs:
>c367	a367	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c36f	a36f	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c37f	a37f	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c38f	a38f	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c39f	a39f	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3af	a3af	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3bf	a3bf	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3cf	a3cf	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3df	a3df	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3ef	a3ef	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3ff	a3ff	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c40f	a40f	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c41f	a41f	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c42f	a42f	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c43f	a43f	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c44f	a44f	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c45f	a45f	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c46f	a46f	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c47f	a47f	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c48f	a48f	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c49f	a49f	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4af	a4af	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4bf	a4bf	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4cf	a4cf	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4df	a4df	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4ef	a4ef	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4ff	a4ff					Header_chars:
>c4ff	a4ff	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c507	a507	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c517	a517	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c527	a527	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c537	a537	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c547	a547	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c557	a557	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c567	a567	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c577	a577	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c587	a587	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c597	a597	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5a7	a5a7	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5b7	a5b7	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5c7	a5c7	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5d7	a5d7	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5e7	a5e7	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5f7	a5f7	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c607	a607	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c617	a617	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c627	a627	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c637	a637	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c647	a647	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c657	a657	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c667	a667	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c677	a677	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c687	a687	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c697	a697	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6a7	a6a7	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6b7	a6b7	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6c7	a6c7	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6d7	a6d7	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6e7	a6e7	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6f7	a6f7	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c707	a707	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c717	a717	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c727	a727	9d ff 96 18 96 a3 ff 00
.c72f	a72f					Header_Palette:
>c72f	a72f	00 00 00 00				.dword $000000
>c733	a733	66 66 66 00				.dword $666666
>c737	a737	aa 00 00 00				.dword $0000aa
>c73b	a73b	00 aa 00 00				.dword $00aa00
>c73f	a73f	ea 41 c0 00				.dword $c041ea
>c743	a743	00 48 87 00				.dword $874800
>c747	a747	00 9c ff 00				.dword $ff9c00
>c74b	a74b	ff db 57 00				.dword $57dbff
>c74f	a74f	28 3f 3f 00				.dword $3f3f28
>c753	a753	8a aa aa 00				.dword $aaaa8a
>c757	a757	ff 55 55 00				.dword $5555ff
>c75b	a75b	55 ff 55 00				.dword $55ff55
>c75f	a75f	ed 8d ff 00				.dword $ff8ded
>c763	a763	00 00 ff 00				.dword $ff0000
>c767	a767	55 ff ff 00				.dword $ffff55
>c76b	a76b	ff ff ff 00				.dword $ffffff
>c76f	a76f	ff ff ff 00				.dword $ffffff
>c773	a773	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c777	a777					GRVectorTable:
>c777	a777	c6 a9					.word	GXInitialise             ; $00 Initialise
>c779	a779	e0 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c77b	a77b	28 aa					.word	GXControlSprite          ; $02 SpriteCtl
>c77d	a77d	78 a9					.word	GXClearBitmap            ; $03 Clear
>c77f	a77f	b7 ab					.word	GXSetColourMode          ; $04 Colour
>c781	a781	7f ad					.word	GXFontHandler            ; $05 DrawFont
>c783	a783	c7 ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c785	a785	38 ae					.word	GXSelect                 ; $07 SpriteUse
>c787	a787	61 ae					.word	GXSelectImage            ; $08 SpriteImage
>c789	a789	e8 af					.word	GXCollide                ; $09 SpriteCollide
>c78b	a78b	2a a8					.word	GRUndefined              ; $0a
>c78d	a78d	2a a8					.word	GRUndefined              ; $0b
>c78f	a78f	2a a8					.word	GRUndefined              ; $0c
>c791	a791	2a a8					.word	GRUndefined              ; $0d
>c793	a793	2a a8					.word	GRUndefined              ; $0e
>c795	a795	2a a8					.word	GRUndefined              ; $0f
>c797	a797	2a a8					.word	GRUndefined              ; $10
>c799	a799	2a a8					.word	GRUndefined              ; $11
>c79b	a79b	2a a8					.word	GRUndefined              ; $12
>c79d	a79d	2a a8					.word	GRUndefined              ; $13
>c79f	a79f	2a a8					.word	GRUndefined              ; $14
>c7a1	a7a1	2a a8					.word	GRUndefined              ; $15
>c7a3	a7a3	2a a8					.word	GRUndefined              ; $16
>c7a5	a7a5	2a a8					.word	GRUndefined              ; $17
>c7a7	a7a7	2a a8					.word	GRUndefined              ; $18
>c7a9	a7a9	2a a8					.word	GRUndefined              ; $19
>c7ab	a7ab	2a a8					.word	GRUndefined              ; $1a
>c7ad	a7ad	2a a8					.word	GRUndefined              ; $1b
>c7af	a7af	2a a8					.word	GRUndefined              ; $1c
>c7b1	a7b1	2a a8					.word	GRUndefined              ; $1d
>c7b3	a7b3	2a a8					.word	GRUndefined              ; $1e
>c7b5	a7b5	2a a8					.word	GRUndefined              ; $1f
>c7b7	a7b7	28 a8					.word	GXMove                   ; $20 Move
>c7b9	a7b9	85 aa					.word	GXLine                   ; $21 Line
>c7bb	a7bb	00 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7bd	a7bd	fd ab					.word	GXFillRectangle          ; $23 FillRect
>c7bf	a7bf	2f a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7c1	a7c1	2b a8					.word	GXFillCircle             ; $25 FillCircle
>c7c3	a7c3	2a a8					.word	GRUndefined              ; $26
>c7c5	a7c5	2a a8					.word	GRUndefined              ; $27
>c7c7	a7c7	e5 ab					.word	GXPlotPoint              ; $28 Plot
>c7c9	a7c9	f7 ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$627						gxPixelBuffer = numberBuffer
.0675						gxCurrentX:
>0675								.fill 	2
.0677						gxCurrentY:
>0677								.fill 	2
.0679						gxLastX:
>0679								.fill 	2
.067b						gxLastY:
>067b								.fill 	2
.067d						gxX0:
>067d								.fill 	2
.067f						gxY0:
>067f								.fill 	2
.0681						gxX1:
>0681								.fill 	2
.0683						gxY1:
>0683								.fill 	2
.0685						gxSpritesOn:
>0685								.fill 	1
.0686						gxBitmapsOn:
>0686								.fill 	1
.0687						gxBasePage:
>0687								.fill 	1
.0688						gxSpritePage:
>0688								.fill 	1
.0689						gxHeight:
>0689								.fill 	1
.068a						gxMode:
>068a								.fill 	1
.068b						gxColour:
>068b								.fill 	1
.068c						gxEORValue:
>068c								.fill 	1
.068d						gxANDValue:
>068d								.fill 	1
.068e						gxOriginalLUTValue:
>068e								.fill 	1
.068f						gxOffset:
>068f								.fill 	1
.0690						GSCurrentSpriteID:
>0690								.fill 	1
.0691						GSCurrentSpriteAddr:
>0691								.fill 	2
.0693						gxSpriteOffsetBase:
>0693								.fill 	2
.0695						gxSpriteLow:
>0695								.fill 	64
.06d5						gxSpriteHigh:
>06d5								.fill 	64
.c7cb	a7cb					Export_GXGraphicDraw:
.c7cb	a7cb	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7cd	a7cd	b0 06		bcs $a7d5			bcs 	_GDCoordinate
.c7cf	a7cf	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7d1	a7d1	84 37		sty $37				sty 	gxzTemp0+1
.c7d3	a7d3	80 4b		bra $a820			bra 	_GDExecuteA 				; and execute
.c7d5	a7d5					_GDCoordinate:
.c7d5	a7d5	48		pha				pha 								; save AXY
.c7d6	a7d6	da		phx				phx
.c7d7	a7d7	5a		phy				phy
.c7d8	a7d8	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7da	a7da					_GDCopy1:
.c7da	a7da	bd 75 06	lda $0675,x			lda 	gxCurrentX,x
.c7dd	a7dd	9d 79 06	sta $0679,x			sta 	gxLastX,x
.c7e0	a7e0	ca		dex				dex
.c7e1	a7e1	10 f7		bpl $a7da			bpl 	_GDCopy1
.c7e3	a7e3	68		pla				pla 								; update Y
.c7e4	a7e4	8d 77 06	sta $0677			sta 	gxCurrentY
.c7e7	a7e7	9c 78 06	stz $0678			stz 	gxCurrentY+1
.c7ea	a7ea	68		pla				pla
.c7eb	a7eb	8d 75 06	sta $0675			sta 	gxCurrentX
.c7ee	a7ee	68		pla				pla 								; get A (command+X.1) back
.c7ef	a7ef	48		pha				pha
.c7f0	a7f0	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7f2	a7f2	8d 76 06	sta $0676			sta 	gxCurrentX+1
.c7f5	a7f5	68		pla				pla 								; get command back
.c7f6	a7f6	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7f8	a7f8	48		pha				pha 								; push back.
.c7f9	a7f9	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7fb	a7fb	f0 17		beq $a814			beq 	_GDCopyToWorkArea
.c7fd	a7fd	ad 76 06	lda $0676			lda 	gxCurrentX+1 				; X < 256 X okay
.c800	a800	f0 07		beq $a809			beq 	_GDCheckY
.c802	a802	ad 75 06	lda $0675			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c805	a805	c9 40		cmp #$40			cmp 	#64
.c807	a807	b0 08		bcs $a811			bcs 	_GDError1
.c809	a809					_GDCheckY:
.c809	a809	ad 77 06	lda $0677			lda 	gxCurrentY 					; check Y < Height.
.c80c	a80c	cd 89 06	cmp $0689			cmp 	gxHeight
.c80f	a80f	90 03		bcc $a814			bcc 	_GDCopyToWorkArea
.c811	a811					_GDError1:
.c811	a811	68		pla				pla
.c812	a812					_GDError2:
.c812	a812	38		sec				sec
.c813	a813	60		rts				rts
.c814	a814					_GDCopyToWorkArea:
.c814	a814	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c816	a816					_GDCopy2:
.c816	a816	bd 75 06	lda $0675,x			lda 	gxCurrentX,x
.c819	a819	9d 7d 06	sta $067d,x			sta 	gxX0,x
.c81c	a81c	ca		dex				dex
.c81d	a81d	10 f7		bpl $a816			bpl 	_GDCopy2
.c81f	a81f	68		pla				pla 								; get command
.c820	a820					_GDExecuteA:
.c820	a820	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c822	a822	b0 ee		bcs $a812			bcs 	_GDError2
.c824	a824	aa		tax				tax
.c825	a825	7c 77 a7	jmp ($a777,x)			jmp 	(GRVectorTable,x)
.c828	a828					GXMove:
.c828	a828	18		clc				clc
.c829	a829	60		rts				rts
.c82a	a82a					GRUndefined:
>c82a	a82a	db						.byte 	$DB 						; causes a break in the emulator
.c82b	a82b					GXFillCircle:
.c82b	a82b	a9 ff		lda #$ff			lda 	#255
.c82d	a82d	80 02		bra $a831			bra 	GXCircle
.c82f	a82f					GXFrameCircle:
.c82f	a82f	a9 00		lda #$00			lda 	#0
.c831	a831					GXCircle:
.c831	a831	8d 18 07	sta $0718			sta 	gxIsFillMode					; save Fill flag
.c834	a834	ad 86 06	lda $0686			lda 	gxBitmapsOn
.c837	a837	f0 26		beq $a85f			beq 	_GXCFail
.c839	a839	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; topleft/bottomright
.c83c	a83c	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.c83f	a83f	20 31 a9	jsr $a931			jsr 	GXCircleSetup 				; set up for drawing
.c842	a842	9c 19 07	stz $0719			stz 	gxYChanged
.c845	a845					_GXCircleDraw:
.c845	a845	ad 16 07	lda $0716			lda 	gxxCentre					; while x <= y
.c848	a848	cd 17 07	cmp $0717			cmp 	gxYCentre
.c84b	a84b	90 0a		bcc $a857			bcc 	_GXCircleContinue
.c84d	a84d	d0 03		bne $a852			bne 	_GXNoLast
.c84f	a84f	20 64 a8	jsr $a864			jsr 	GXPlot1
.c852	a852					_GXNoLast:
.c852	a852	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; close the bitmap
.c855	a855	18		clc				clc
.c856	a856	60		rts				rts
.c857	a857					_GXCircleContinue:
.c857	a857	20 61 a8	jsr $a861			jsr 	GXPlot2 					; draw it
.c85a	a85a	20 de a8	jsr $a8de			jsr 	GXCircleMove 				; adjust the coordinates
.c85d	a85d	80 e6		bra $a845			bra 	_GXCircleDraw
.c85f	a85f					_GXCFail:
.c85f	a85f	38		sec				sec
.c860	a860	60		rts				rts
.c861	a861					GXPlot2:
.c861	a861	20 64 a8	jsr $a864			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c864	a864					GXPlot1:
.c864	a864	ad 17 07	lda $0717			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c867	a867	f0 03		beq $a86c			beq 	_GXPlot1Only
.c869	a869	20 88 a8	jsr $a888			jsr 	GXPlot0 						; plot and negate
.c86c	a86c					_GXPlot1Only:
.c86c	a86c	20 88 a8	jsr $a888			jsr 	GXPlot0 						; twice, undoing negation
.c86f	a86f	ad 16 07	lda $0716			lda 	gxxCentre 						; swap X and Y
.c872	a872	ae 17 07	ldx $0717			ldx	 	gxYCentre
.c875	a875	8d 17 07	sta $0717			sta 	gxYCentre
.c878	a878	8e 16 07	stx $0716			stx 	gxxCentre
.c87b	a87b	ad 19 07	lda $0719			lda 	gxYChanged 						; toggle Y Changed flag
.c87e	a87e	a9 ff		lda #$ff			lda 	#$FF
.c880	a880	8d 19 07	sta $0719			sta 	gxYChanged
.c883	a883	60		rts				rts
.c884	a884	20 88 a8	jsr $a888			jsr 	GXPlot0 						; do once
.c887	a887	60		rts				rts
.c888	a888	ad 18 07	lda $0718	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c88b	a88b	f0 05		beq $a892			beq 	_GXPlot0Always
.c88d	a88d	ad 19 07	lda $0719			lda 	gxYChanged						; fill mode, only draw if changed.
.c890	a890	f0 2d		beq $a8bf			beq 	GXPlot0Exit
.c892	a892					_GXPlot0Always:
.c892	a892	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c894	a894	ad 17 07	lda $0717			lda 	gxYCentre
.c897	a897	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c89a	a89a	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c89c	a89c	ad 16 07	lda $0716			lda 	gxxCentre
.c89f	a89f	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c8a2	a8a2	48		pha				pha 									; save last offset X
.c8a3	a8a3	20 77 af	jsr $af77			jsr 	gxPositionCalc 					; calculate position/offset.
.c8a6	a8a6	68		pla				pla
.c8a7	a8a7	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8a8	a8a8	85 36		sta $36				sta 	gxzTemp0
.c8aa	a8aa	64 37		stz $37				stz 	gxzTemp0+1
.c8ac	a8ac	26 37		rol $37				rol 	gxzTemp0+1
.c8ae	a8ae	ad 18 07	lda $0718			lda 	gxIsFillMode
.c8b1	a8b1	69 80		adc #$80			adc 	#128
.c8b3	a8b3	20 50 ac	jsr $ac50			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8b6	a8b6	38		sec				sec 									; GY = -GY
.c8b7	a8b7	a9 00		lda #$00			lda 	#0
.c8b9	a8b9	ed 17 07	sbc $0717			sbc 	gxYCentre
.c8bc	a8bc	8d 17 07	sta $0717			sta 	gxYCentre
.c8bf	a8bf					GXPlot0Exit:
.c8bf	a8bf	60		rts				rts
.c8c0	a8c0					GXSubCopy:
.c8c0	a8c0	85 36		sta $36				sta 	gxzTemp0
.c8c2	a8c2	64 37		stz $37				stz 	gxzTemp0+1
.c8c4	a8c4	29 80		and #$80			and 	#$80
.c8c6	a8c6	f0 02		beq $a8ca			beq 	_GXNoSx
.c8c8	a8c8	c6 37		dec $37				dec 	gxzTemp0+1
.c8ca	a8ca					_GXNoSx:
.c8ca	a8ca	38		sec				sec
.c8cb	a8cb	bd 81 06	lda $0681,x			lda 	gxX1,x
.c8ce	a8ce	e5 36		sbc $36				sbc 	gxzTemp0
.c8d0	a8d0	9d 7d 06	sta $067d,x			sta 	gxX0,x
.c8d3	a8d3	bd 82 06	lda $0682,x			lda 	gxX1+1,x
.c8d6	a8d6	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8d8	a8d8	9d 7e 06	sta $067e,x			sta 	gxX0+1,x
.c8db	a8db	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8dd	a8dd	60		rts				rts
.c8de	a8de					GXCircleMove:
.c8de	a8de	9c 19 07	stz $0719			stz 	gxYChanged 					; clear Y changed flag
.c8e1	a8e1	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8e3	a8e3	10 0d		bpl $a8f2			bpl 	_GXEMPositive
.c8e5	a8e5	ee 16 07	inc $0716			inc 	gxxCentre 					; X++
.c8e8	a8e8	ad 16 07	lda $0716			lda 	gxxCentre
.c8eb	a8eb	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8ee	a8ee	a9 06		lda #$06			lda 	#6  						; and add 6
.c8f0	a8f0	80 15		bra $a907			bra 	_GXEMAddD
.c8f2	a8f2					_GXEMPositive:
.c8f2	a8f2	ee 16 07	inc $0716			inc 	gxxCentre					; X++
.c8f5	a8f5	ce 17 07	dec $0717			dec 	gxYCentre 					; Y--
.c8f8	a8f8	38		sec				sec 								; calculate X-Y
.c8f9	a8f9	ad 16 07	lda $0716			lda 	gxxCentre
.c8fc	a8fc	ed 17 07	sbc $0717			sbc 	gxYCentre
.c8ff	a8ff	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c902	a902	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c904	a904	ce 19 07	dec $0719			dec 	gxYChanged
.c907	a907					_GXEMAddD:
.c907	a907	18		clc				clc
.c908	a908	65 38		adc $38				adc 	gxzTemp1
.c90a	a90a	85 38		sta $38				sta 	gxzTemp1
.c90c	a90c	90 02		bcc $a910			bcc 	_GXEMNoCarry
.c90e	a90e	e6 39		inc $39				inc 	gxzTemp1+1
.c910	a910					_GXEMNoCarry:
.c910	a910	60		rts				rts
.c911	a911					_GXAdd4TimesToD:
.c911	a911	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c913	a913	29 80		and #$80			and 	#$80
.c915	a915	f0 02		beq $a919			beq 	_GXA4Unsigned
.c917	a917	a9 ff		lda #$ff			lda 	#$FF
.c919	a919					_GXA4Unsigned:
.c919	a919	85 37		sta $37				sta 	gxzTemp0+1
.c91b	a91b	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c91d	a91d	26 37		rol $37				rol 	gxzTemp0+1
.c91f	a91f	06 36		asl $36				asl 	gxzTemp0
.c921	a921	26 37		rol $37				rol 	gxzTemp0+1
.c923	a923	18		clc				clc 								; add
.c924	a924	a5 36		lda $36				lda		gxzTemp0
.c926	a926	65 38		adc $38				adc 	gxzTemp1
.c928	a928	85 38		sta $38				sta 	gxzTemp1
.c92a	a92a	a5 37		lda $37				lda		gxzTemp0+1
.c92c	a92c	65 39		adc $39				adc 	gxzTemp1+1
.c92e	a92e	85 39		sta $39				sta 	gxzTemp1+1
.c930	a930	60		rts				rts
.c931	a931					GXCircleSetup:
.c931	a931	38		sec				sec
.c932	a932	ad 83 06	lda $0683			lda 	gxY1
.c935	a935	ed 7f 06	sbc $067f			sbc 	gxY0
.c938	a938	4a		lsr a				lsr 	a
.c939	a939	8d 15 07	sta $0715			sta 	gxRadius
.c93c	a93c	a2 00		ldx #$00			ldx 	#0
.c93e	a93e	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c941	a941	a2 02		ldx #$02			ldx 	#2
.c943	a943	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c946	a946	9c 16 07	stz $0716			stz 	gxxCentre
.c949	a949	ad 15 07	lda $0715			lda 	gxRadius
.c94c	a94c	8d 17 07	sta $0717			sta 	gxYCentre
.c94f	a94f	0a		asl a				asl 	a 							; R x 2
.c950	a950	85 36		sta $36				sta 	gxzTemp0
.c952	a952	38		sec				sec
.c953	a953	a9 03		lda #$03			lda 	#3
.c955	a955	e5 36		sbc $36				sbc 	gxzTemp0
.c957	a957	85 38		sta $38				sta 	gxzTemp1
.c959	a959	a9 00		lda #$00			lda 	#0
.c95b	a95b	e9 00		sbc #$00			sbc 	#0
.c95d	a95d	85 39		sta $39				sta 	gxzTemp1+1
.c95f	a95f	60		rts				rts
.c960	a960					_GXCalculateCentre:
.c960	a960	38		sec				sec
.c961	a961	bd 81 06	lda $0681,x			lda 	gxX1,x
.c964	a964	7d 7d 06	adc $067d,x			adc 	gxX0,x
.c967	a967	9d 81 06	sta $0681,x			sta 	gxX1,x
.c96a	a96a	bd 82 06	lda $0682,x			lda 	gxX1+1,x
.c96d	a96d	7d 7e 06	adc $067e,x			adc 	gxX0+1,x
.c970	a970	4a		lsr a				lsr 	a
.c971	a971	9d 82 06	sta $0682,x			sta 	gxX1+1,x
.c974	a974	7e 81 06	ror $0681,x			ror 	gxX1,x
.c977	a977	60		rts				rts
.0715						gxRadius:
>0715								.fill 	1
.0716						gxxCentre:
>0716								.fill 	1
.0717						gxYCentre:
>0717								.fill 	1
.0718						gxIsFillMode:
>0718								.fill 	1
.0719						gxYChanged:
>0719								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c978	a978					GXClearBitmap:
.c978	a978	ad 86 06	lda $0686			lda 	gxBitmapsOn 				; check BMP running.
.c97b	a97b	f0 24		beq $a9a1			beq 	_GXCBFail
.c97d	a97d	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start access
.c980	a980	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c982	a982	ad 89 06	lda $0689			lda 	gxHeight
.c985	a985	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c987	a987	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c989	a989					_GXCalcLastPage:
.c989	a989	98		tya				tya 								; add to base page
.c98a	a98a	18		clc				clc
.c98b	a98b	6d 87 06	adc $0687			adc 	gxBasePage
.c98e	a98e	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c990	a990					_GXClearAll:
.c990	a990	20 a3 a9	jsr $a9a3			jsr 	_GXClearBlock 				; clear 8k block
.c993	a993	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c995	a995	a5 0b		lda $0b				lda 	GXEditSlot
.c997	a997	cd 87 06	cmp $0687			cmp 	gxBasePage 					; until before base page
.c99a	a99a	b0 f4		bcs $a990			bcs 	_GXClearAll
.c99c	a99c	20 6f af	jsr $af6f			jsr 	GXCloseBitmap	 			; stop access
.c99f	a99f	18		clc				clc
.c9a0	a9a0	60		rts				rts
.c9a1	a9a1					_GXCBFail:
.c9a1	a9a1	38		sec				sec
.c9a2	a9a2	60		rts				rts
.c9a3	a9a3					_GXClearBlock:
.c9a3	a9a3	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9a5	a9a5	85 38		sta $38				sta 	0+gxzTemp1
.c9a7	a9a7	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9a9	a9a9	85 39		sta $39				sta 	1+gxzTemp1
.c9ab	a9ab					_GXCB0:
.c9ab	a9ab	a5 36		lda $36				lda 	gxzTemp0
.c9ad	a9ad	a0 00		ldy #$00			ldy 	#0
.c9af	a9af					_GXCB1:
.c9af	a9af	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b1	a9b1	c8		iny				iny
.c9b2	a9b2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b4	a9b4	c8		iny				iny
.c9b5	a9b5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b7	a9b7	c8		iny				iny
.c9b8	a9b8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ba	a9ba	c8		iny				iny
.c9bb	a9bb	d0 f2		bne $a9af			bne 	_GXCB1
.c9bd	a9bd	e6 39		inc $39				inc 	gxzTemp1+1
.c9bf	a9bf	a5 39		lda $39				lda 	gxzTemp1+1
.c9c1	a9c1	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9c3	a9c3	d0 e6		bne $a9ab			bne 	_GXCB0
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					GXInitialise:
.c9c6	a9c6	64 01		stz $01				stz 	1
.c9c8	a9c8	a9 01		lda #$01			lda 	#1
.c9ca	a9ca	8d 00 d0	sta $d000			sta 	$D000
.c9cd	a9cd	18		clc				clc
.c9ce	a9ce	9c 85 06	stz $0685			stz 	gxSpritesOn
.c9d1	a9d1	9c 86 06	stz $0686			stz 	gxBitmapsOn
.c9d4	a9d4	a2 0f		ldx #$0f			ldx 	#15
.c9d6	a9d6					_GXIClear:
.c9d6	a9d6	9e 75 06	stz $0675,x			stz 	gxCurrentX,x
.c9d9	a9d9	ca		dex				dex
.c9da	a9da	10 fa		bpl $a9d6			bpl 	_GXIClear
.c9dc	a9dc	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.c9df	a9df	60		rts				rts
.c9e0	a9e0					GXControlBitmap:
.c9e0	a9e0	64 01		stz $01				stz 	1
.c9e2	a9e2	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9e4	a9e4	29 01		and #$01			and 	#1 							; set bitmap flag
.c9e6	a9e6	8d 86 06	sta $0686			sta 	gxBitmapsOn
.c9e9	a9e9	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9ea	a9ea	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9ed	a9ed	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9ef	a9ef	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9f1	a9f1	90 02		bcc $a9f5			bcc 	_CBNotOn
.c9f3	a9f3	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9f5	a9f5					_CBNotOn:
.c9f5	a9f5	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9f8	a9f8	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9fa	a9fa	29 07		and #$07			and 	#7
.c9fc	a9fc	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9ff	a9ff	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca01	aa01	d0 02		bne $aa05			bne 	_CBNotDefault
.ca03	aa03	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca05	aa05					_CBNotDefault:
.ca05	aa05	8d 87 06	sta $0687			sta 	gxBasePage
.ca08	aa08	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca0b	aa0b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca0d	aa0d	8d 03 d1	sta $d103			sta 	$D103
.ca10	aa10	a5 36		lda $36				lda 	gxzTemp0
.ca12	aa12	8d 02 d1	sta $d102			sta 	$D102
.ca15	aa15	9c 01 d1	stz $d101			stz 	$D101
.ca18	aa18	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca1a	aa1a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca1d	aa1d	29 01		and #$01			and 	#1
.ca1f	aa1f	f0 02		beq $aa23			beq 	_CBHaveHeight
.ca21	aa21	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca23	aa23					_CBHaveHeight
.ca23	aa23	8e 89 06	stx $0689			stx 	gxHeight
.ca26	aa26	18		clc				clc
.ca27	aa27	60		rts				rts
.ca28	aa28					GXControlSprite:
.ca28	aa28	64 01		stz $01				stz 	1
.ca2a	aa2a	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca2c	aa2c	29 01		and #$01			and 	#1 							; set sprites flag
.ca2e	aa2e	8d 85 06	sta $0685			sta 	gxSpritesOn
.ca31	aa31	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca32	aa32	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca35	aa35	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca37	aa37	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca39	aa39	90 02		bcc $aa3d			bcc 	_CSNotOn
.ca3b	aa3b	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca3d	aa3d					_CSNotOn:
.ca3d	aa3d	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca40	aa40	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca42	aa42	d0 02		bne $aa46			bne 	_CSNotDefault
.ca44	aa44	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca46	aa46					_CSNotDefault:
.ca46	aa46	8d 88 06	sta $0688			sta 	gxSpritePage
.ca49	aa49	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca4c	aa4c	a5 36		lda $36				lda 	gxzTemp0
.ca4e	aa4e	8d 93 06	sta $0693			sta 	gxSpriteOffsetBase
.ca51	aa51	a5 37		lda $37				lda 	gxzTemp0+1
.ca53	aa53	8d 94 06	sta $0694			sta 	gxSpriteOffsetBase+1
.ca56	aa56	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca58	aa58					_CSClear:
.ca58	aa58	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca5b	aa5b	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca5e	aa5e	ca		dex				dex
.ca5f	aa5f	d0 f7		bne $aa58			bne 	_CSClear
.ca61	aa61	9c 92 06	stz $0692			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca64	aa64	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.ca67	aa67	18		clc				clc
.ca68	aa68	60		rts				rts
.ca69	aa69					GXCalculateBaseAddress:
.ca69	aa69	85 36		sta $36				sta 	gxzTemp0
.ca6b	aa6b	64 37		stz $37				stz 	gxzTemp0+1
.ca6d	aa6d	a9 05		lda #$05			lda 	#5
.ca6f	aa6f					_GXShift:
.ca6f	aa6f	06 36		asl $36				asl 	gxzTemp0
.ca71	aa71	26 37		rol $37				rol 	gxzTemp0+1
.ca73	aa73	3a		dec a				dec		a
.ca74	aa74	d0 f9		bne $aa6f			bne 	_GXShift
.ca76	aa76	60		rts				rts
.ca77	aa77					GXClearSpriteStore:
.ca77	aa77	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca79	aa79					_GXCSSLoop:
.ca79	aa79	9e d5 06	stz $06d5,x			stz 	gxSpriteHigh,x
.ca7c	aa7c	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca7e	aa7e	9d 95 06	sta $0695,x			sta 	gxSpriteLow,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	10 f5		bpl $aa79			bpl 	_GXCSSLoop
.ca84	aa84	60		rts				rts
.ca85	aa85					GXLine:
.ca85	aa85	ad 86 06	lda $0686			lda 	gxBitmapsOn
.ca88	aa88	f0 28		beq $aab2			beq 	_GXLFail
.ca8a	aa8a	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ca8d	aa8d	20 ad b0	jsr $b0ad			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca90	aa90	20 58 ab	jsr $ab58			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca93	aa93	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.ca96	aa96					_GXDrawLoop:
.ca96	aa96	ac 8f 06	ldy $068f			ldy 	gxOffset 					; draw the pixel
.ca99	aa99	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca9b	aa9b	2d 8d 06	and $068d			and 	gxANDValue
.ca9e	aa9e	4d 8c 06	eor $068c			eor 	gxEORValue
.caa1	aaa1	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.caa3	aaa3	20 b4 aa	jsr $aab4			jsr 	GXLineIsComplete 			; is the line complete ?
.caa6	aaa6	f0 05		beq $aaad			beq 	_GXLExit
.caa8	aaa8	20 cf aa	jsr $aacf			jsr 	GXLineAdvance 				; code as per advance method
.caab	aaab	80 e9		bra $aa96			bra 	_GXDrawLoop
.caad	aaad					_GXLExit:
.caad	aaad	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cab0	aab0	18		clc				clc
.cab1	aab1	60		rts				rts
.cab2	aab2					_GXLFail:
.cab2	aab2	38		sec				sec
.cab3	aab3	60		rts				rts
.cab4	aab4					GXLineIsComplete:
.cab4	aab4	ad 1c 07	lda $071c			lda 	gxIsDiffYLarger 			; is dy larger
.cab7	aab7	d0 0f		bne $aac8			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cab9	aab9	ad 7d 06	lda $067d			lda 	gxX0 						; compare X, LSB and MSB
.cabc	aabc	4d 81 06	eor $0681			eor 	gxX1
.cabf	aabf	d0 06		bne $aac7			bne 	_GXLICExit
.cac1	aac1	ad 7e 06	lda $067e			lda 	gxX0+1
.cac4	aac4	4d 82 06	eor $0682			eor 	gxX1+1
.cac7	aac7					_GXLICExit:
.cac7	aac7	60		rts				rts
.cac8	aac8					_GXLICCompareY:
.cac8	aac8	ad 83 06	lda $0683			lda 	gxY1
.cacb	aacb	4d 7f 06	eor $067f			eor 	gxY0
.cace	aace	60		rts				rts
.cacf	aacf					GXLineAdvance:
.cacf	aacf	18		clc				clc 								; add adjust to position
.cad0	aad0	ad 1e 07	lda $071e			lda 	gxPosition
.cad3	aad3	6d 1f 07	adc $071f			adc 	gxAdjust
.cad6	aad6	8d 1e 07	sta $071e			sta 	gxPosition
.cad9	aad9	9c 21 07	stz $0721			stz 	gxAddSelect 				; clear add select flag
.cadc	aadc	b0 05		bcs $aae3			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cade	aade	cd 20 07	cmp $0720			cmp 	gxTotal 					; if exceeded total
.cae1	aae1	90 0a		bcc $aaed			bcc 	_GXLANoExtra
.cae3	aae3					_GXLAOverflow:
.cae3	aae3	ce 21 07	dec $0721			dec 	gxAddSelect 				; set addselect to $FF
.cae6	aae6	38		sec				sec 								; subtract total and write back
.cae7	aae7	ed 20 07	sbc $0720			sbc 	gxTotal
.caea	aaea	8d 1e 07	sta $071e			sta 	gxPosition
.caed	aaed					_GXLANoExtra:
.caed	aaed	ad 1c 07	lda $071c			lda 	gxIsDiffYLarger
.caf0	aaf0	f0 0d		beq $aaff			beq 	_GXDXLarger
.caf2	aaf2	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.caf5	aaf5	ad 21 07	lda $0721			lda 	gxAddSelect
.caf8	aaf8	f0 10		beq $ab0a			beq 	_GXLAExit
.cafa	aafa	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cafd	aafd	80 0b		bra $ab0a			bra 	_GXLAExit
.caff	aaff					_GXDXLarger:
.caff	aaff	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cb02	ab02	ad 21 07	lda $0721			lda 	gxAddSelect
.cb05	ab05	f0 03		beq $ab0a			beq 	_GXLAExit
.cb07	ab07	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.cb0a	ab0a					_GXLAExit:
.cb0a	ab0a	60		rts				rts
.cb0b	ab0b					gxAdjustX:
.cb0b	ab0b	ad 1d 07	lda $071d			lda 	gxDXNegative
.cb0e	ab0e	10 25		bpl $ab35			bpl 	_GXAXRight
.cb10	ab10	ad 7d 06	lda $067d			lda 	gxX0
.cb13	ab13	d0 03		bne $ab18			bne 	_GXAXNoBorrow
.cb15	ab15	ce 7e 06	dec $067e			dec 	gxX0+1
.cb18	ab18					_GXAXNoBorrow:
.cb18	ab18	ce 7d 06	dec $067d			dec 	gxX0
.cb1b	ab1b	ce 8f 06	dec $068f			dec 	gxOffset 					; pixel left
.cb1e	ab1e	ad 8f 06	lda $068f			lda 	gxOffset
.cb21	ab21	c9 ff		cmp #$ff			cmp 	#$FF
.cb23	ab23	d0 0f		bne $ab34			bne 	_GXAYExit 					; underflow
.cb25	ab25	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb27	ab27	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb29	ab29	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb2b	ab2b	b0 07		bcs $ab34			bcs 	_GXAYExit
.cb2d	ab2d	18		clc				clc
.cb2e	ab2e	69 20		adc #$20			adc 	#$20 						; fix up
.cb30	ab30	85 3d		sta $3d				sta 	gxzScreen+1
.cb32	ab32	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb34	ab34					_GXAYExit:
.cb34	ab34	60		rts				rts
.cb35	ab35					_GXAXRight:
.cb35	ab35	ee 7d 06	inc $067d			inc 	gxX0
.cb38	ab38	d0 03		bne $ab3d			bne 	_GXAXNoCarry
.cb3a	ab3a	ee 7e 06	inc $067e			inc 	gxX0+1
.cb3d	ab3d					_GXAXNoCarry:
.cb3d	ab3d	ee 8f 06	inc $068f			inc 	gxOffset 					; pixel right
.cb40	ab40	d0 0e		bne $ab50			bne 	_GXAXExit 					; if not overflowed, exit.
.cb42	ab42	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb44	ab44	a5 3d		lda $3d				lda 	gxzScreen+1
.cb46	ab46	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb48	ab48	90 06		bcc $ab50			bcc 	_GXAXExit
.cb4a	ab4a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb4c	ab4c	85 3d		sta $3d				sta 	gxzScreen+1
.cb4e	ab4e	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb50	ab50					_GXAXExit:
.cb50	ab50	60		rts				rts
.cb51	ab51					GXIncrementY:
.cb51	ab51	ee 7f 06	inc $067f			inc 	gxY0
.cb54	ab54	20 cd af	jsr $afcd			jsr 	GXMovePositionDown
.cb57	ab57	60		rts				rts
.cb58	ab58					GXLineSetup:
.cb58	ab58	ad 83 06	lda $0683			lda 	gxY1
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ed 7f 06	sbc $067f			sbc 	gxY0
.cb5f	ab5f	4a		lsr a				lsr 	a
.cb60	ab60	8d 1b 07	sta $071b			sta 	gxDiffY
.cb63	ab63	9c 1d 07	stz $071d			stz 	gxDXNegative 				; clear -ve flag
.cb66	ab66	38		sec				sec
.cb67	ab67	ad 81 06	lda $0681			lda 	gxX1
.cb6a	ab6a	ed 7d 06	sbc $067d			sbc 	gxX0
.cb6d	ab6d	8d 1a 07	sta $071a			sta 	gxDiffX
.cb70	ab70	ad 82 06	lda $0682			lda 	gxX1+1 						; calculate MSB
.cb73	ab73	ed 7e 06	sbc $067e			sbc 	gxX0+1
.cb76	ab76	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb77	ab77	6e 1a 07	ror $071a			ror 	gxDiffX
.cb7a	ab7a	0a		asl a				asl 	a
.cb7b	ab7b	10 0c		bpl $ab89			bpl 	_GDXNotNegative
.cb7d	ab7d	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb7f	ab7f	38		sec				sec
.cb80	ab80	ed 1a 07	sbc $071a			sbc 	gxDiffX
.cb83	ab83	8d 1a 07	sta $071a			sta 	gxDiffX
.cb86	ab86	ce 1d 07	dec $071d			dec 	gxDXNegative 				; -ve flag = $FF.
.cb89	ab89					_GDXNotNegative:
.cb89	ab89	9c 1c 07	stz $071c			stz 	gxIsDiffYLarger 			; clear larger flag
.cb8c	ab8c	ad 1b 07	lda $071b			lda 	gxDiffY 					; set adjust and total.
.cb8f	ab8f	8d 1f 07	sta $071f			sta 	gxAdjust
.cb92	ab92	ad 1a 07	lda $071a			lda 	gxDiffX
.cb95	ab95	8d 20 07	sta $0720			sta 	gxTotal
.cb98	ab98	ad 1b 07	lda $071b			lda 	gxDiffY 					; if dy > dx
.cb9b	ab9b	cd 1a 07	cmp $071a			cmp 	gxDiffX
.cb9e	ab9e	90 0f		bcc $abaf			bcc 	_GDXNotLarger
.cba0	aba0	ce 1c 07	dec $071c			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cba3	aba3	ad 1a 07	lda $071a			lda 	gxDiffX 					; set adjust and total other way round
.cba6	aba6	8d 1f 07	sta $071f			sta 	gxAdjust
.cba9	aba9	ad 1b 07	lda $071b			lda 	gxDiffY
.cbac	abac	8d 20 07	sta $0720			sta 	gxTotal
.cbaf	abaf					_GDXNotLarger:
.cbaf	abaf	ad 20 07	lda $0720			lda 	gxTotal
.cbb2	abb2	4a		lsr a				lsr 	a
.cbb3	abb3	8d 1e 07	sta $071e			sta 	gxPosition
.cbb6	abb6	60		rts				rts
.071a						gxDiffX:
>071a								.fill 	1
.071b						gxDiffY:
>071b								.fill 	1
.071c						gxIsDiffYLarger:
>071c								.fill 	1
.071d						gxDXNegative:
>071d								.fill 	1
.071e						gxPosition:
>071e								.fill 	1
.071f						gxAdjust:
>071f								.fill 	1
.0720						gxTotal:
>0720								.fill 	1
.0721						gxAddSelect:
>0721								.fill 	1
.cbb7	abb7					GXSetColourMode:
.cbb7	abb7	a6 36		ldx $36				ldx 	gxzTemp0
.cbb9	abb9	8e 8b 06	stx $068b			stx 	gxColour 								; set colour
.cbbc	abbc	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbbe	abbe	8d 8a 06	sta $068a			sta 	gxMode 									; set mode
.cbc1	abc1	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbc3	abc3	9c 8d 06	stz $068d			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbc6	abc6	ae 8b 06	ldx $068b			ldx 	gxColour
.cbc9	abc9	8e 8c 06	stx $068c			stx 	gxEORValue
.cbcc	abcc	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbce	abce	90 03		bcc $abd3			bcc 	_GXSDCNotAndColour
.cbd0	abd0	8e 8d 06	stx $068d			stx 	gxANDValue
.cbd3	abd3					_GXSDCNotAndColour:
.cbd3	abd3	d0 03		bne $abd8			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbd5	abd5	9c 8c 06	stz $068c			stz 	gxEORValue
.cbd8	abd8					_GXSDCNotAnd:
.cbd8	abd8	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbd9	abd9	90 08		bcc $abe3			bcc 	_GXSDCNoFlip
.cbdb	abdb	ad 8d 06	lda $068d			lda	 	gxANDValue
.cbde	abde	49 ff		eor #$ff			eor 	#$FF
.cbe0	abe0	8d 8d 06	sta $068d			sta 	gxANDValue
.cbe3	abe3					_GXSDCNoFlip:
.cbe3	abe3	18		clc				clc
.cbe4	abe4	60		rts				rts
.cbe5	abe5					GXPlotPoint:
.cbe5	abe5	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cbe8	abe8	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbeb	abeb	ac 8f 06	ldy $068f			ldy 	gxOffset
.cbee	abee	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbf0	abf0	2d 8d 06	and $068d			and 	gxANDValue
.cbf3	abf3	4d 8c 06	eor $068c			eor 	gxEORValue
.cbf6	abf6	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbf8	abf8	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbfb	abfb	18		clc				clc
.cbfc	abfc	60		rts				rts
.cbfd	abfd					GXFillRectangle:
.cbfd	abfd	38		sec				sec
.cbfe	abfe	80 01		bra $ac01			bra 	GXRectangle
.cc00	ac00					GXFrameRectangle:
.cc00	ac00	18		clc				clc
.cc01	ac01					GXRectangle:
.cc01	ac01	ad 86 06	lda $0686			lda 	gxBitmapsOn
.cc04	ac04	f0 35		beq $ac3b			beq 	_GXRFail
.cc06	ac06	08		php				php 								; save Fill flag (CS)
.cc07	ac07	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cc0a	ac0a	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc0d	ac0d	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc10	ac10	38		sec				sec 								; sec = Draw line
.cc11	ac11	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc14	ac14	ad 7f 06	lda $067f			lda 	gxY0 						; reached end of rectangle ?
.cc17	ac17	cd 83 06	cmp $0683			cmp 	gxY1
.cc1a	ac1a	f0 19		beq $ac35			beq 	_GXRectangleExit
.cc1c	ac1c					_GXRectLoop:
.cc1c	ac1c	20 cd af	jsr $afcd			jsr 	GXMovePositionDown 			; down one.
.cc1f	ac1f	ee 7f 06	inc $067f			inc 	gxY0 						; change Y pos
.cc22	ac22	ad 7f 06	lda $067f			lda 	gxY0 						; reached last line
.cc25	ac25	cd 83 06	cmp $0683			cmp 	gxY1
.cc28	ac28	f0 07		beq $ac31			beq 	_GXLastLine
.cc2a	ac2a	28		plp				plp 								; get flag back
.cc2b	ac2b	08		php				php
.cc2c	ac2c	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc2f	ac2f	80 eb		bra $ac1c			bra 	_GXRectLoop
.cc31	ac31					_GXLastLine:
.cc31	ac31	38		sec				sec
.cc32	ac32	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0
.cc35	ac35					_GXRectangleExit:
.cc35	ac35	68		pla				pla 								; throw fill flag.
.cc36	ac36	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc39	ac39	18		clc				clc
.cc3a	ac3a	60		rts				rts
.cc3b	ac3b					_GXRFail:
.cc3b	ac3b	38		sec				sec
.cc3c	ac3c	60		rts				rts
.cc3d	ac3d					GXDrawLineX1X0:
.cc3d	ac3d	08		php				php 								; save solid/either-end
.cc3e	ac3e	38		sec				sec
.cc3f	ac3f	ad 81 06	lda $0681			lda		gxX1
.cc42	ac42	ed 7d 06	sbc $067d			sbc 	gxX0
.cc45	ac45	85 36		sta $36				sta 	gxzTemp0
.cc47	ac47	ad 82 06	lda $0682			lda 	gxX1+1
.cc4a	ac4a	ed 7e 06	sbc $067e			sbc 	gxX0+1
.cc4d	ac4d	85 37		sta $37				sta 	gxzTemp0+1
.cc4f	ac4f	28		plp				plp
.cc50	ac50					GXDrawLineTemp0:
.cc50	ac50	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc52	ac52	48		pha				pha
.cc53	ac53	a5 3d		lda $3d				lda 	gxzScreen+1
.cc55	ac55	48		pha				pha
.cc56	ac56	ad 8f 06	lda $068f			lda 	gxOffset
.cc59	ac59	48		pha				pha
.cc5a	ac5a	a5 0b		lda $0b				lda 	GXEditSlot
.cc5c	ac5c	48		pha				pha
.cc5d	ac5d	ac 8f 06	ldy $068f			ldy 	gxOffset 					; Y offset
.cc60	ac60	90 1e		bcc $ac80			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc62	ac62					_GXDLTLine:
.cc62	ac62	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc64	ac64	2d 8d 06	and $068d			and 	gxANDValue
.cc67	ac67	4d 8c 06	eor $068c			eor 	gxEORValue
.cc6a	ac6a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc6c	ac6c	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc6e	ac6e	d0 04		bne $ac74			bne 	_GXDLTNoBorrow
.cc70	ac70	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc72	ac72	30 2e		bmi $aca2			bmi 	_GXDLTExit
.cc74	ac74					_GXDLTNoBorrow:
.cc74	ac74	c6 36		dec $36				dec 	gxzTemp0
.cc76	ac76	c8		iny				iny 								; next slot.
.cc77	ac77	d0 e9		bne $ac62			bne 	_GXDLTLine
.cc79	ac79	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc7b	ac7b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cc7e	ac7e	80 e2		bra $ac62			bra 	_GXDLTLine
.cc80	ac80					_GXDLTEndPoints:
.cc80	ac80	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc82	ac82	2d 8d 06	and $068d			and 	gxANDValue
.cc85	ac85	4d 8c 06	eor $068c			eor 	gxEORValue
.cc88	ac88	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8a	ac8a	98		tya				tya 								; advance to right side
.cc8b	ac8b	18		clc				clc
.cc8c	ac8c	65 36		adc $36				adc 	gxzTemp0
.cc8e	ac8e	a8		tay				tay
.cc8f	ac8f	a5 3d		lda $3d				lda 	gxzScreen+1
.cc91	ac91	65 37		adc $37				adc 	gxzTemp0+1
.cc93	ac93	85 3d		sta $3d				sta 	gxzScreen+1
.cc95	ac95	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap 			; fix up.
.cc98	ac98	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc9a	ac9a	2d 8d 06	and $068d			and 	gxANDValue
.cc9d	ac9d	4d 8c 06	eor $068c			eor 	gxEORValue
.cca0	aca0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cca2	aca2					_GXDLTExit:
.cca2	aca2	68		pla				pla
.cca3	aca3	85 0b		sta $0b				sta 	GXEditSlot
.cca5	aca5	68		pla				pla
.cca6	aca6	8d 8f 06	sta $068f			sta 	gxOffset
.cca9	aca9	68		pla				pla
.ccaa	acaa	85 3d		sta $3d				sta 	gxzScreen+1
.ccac	acac	68		pla				pla
.ccad	acad	85 3c		sta $3c				sta 	gxzScreen
.ccaf	acaf	60		rts				rts
.ccb0	acb0					GXDLTCheckWrap:
.ccb0	acb0	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccb2	acb2	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccb4	acb4	90 06		bcc $acbc			bcc 	_GXDLTCWExit
.ccb6	acb6	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccb8	acb8	85 3d		sta $3d				sta 	gxzScreen+1
.ccba	acba	e6 0b		inc $0b				inc 	GXEditSlot
.ccbc	acbc					_GXDLTCWExit:
.ccbc	acbc	60		rts				rts
.ccbd	acbd					GXDrawGraphicElement:
.ccbd	acbd	8d 22 07	sta $0722			sta 	gxSize 						; save size
.ccc0	acc0	3a		dec a				dec 	a
.ccc1	acc1	8d 23 07	sta $0723			sta 	gxMask 						; and mask
.ccc4	acc4	ad 86 06	lda $0686			lda 	gxBitmapsOn 				; check BMP on
.ccc7	acc7	f0 67		beq $ad30			beq 	_GXSLFail
.ccc9	acc9	ad 7f 06	lda $067f			lda 	gxY0 						; push Y on stack
.cccc	accc	48		pha				pha
.cccd	accd	8c 25 07	sty $0725			sty 	gxAcquireVector+1 			; and acquisition vector
.ccd0	acd0	8e 24 07	stx $0724			stx 	gxAcquireVector
.ccd3	acd3	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; open the bitmap.
.ccd6	acd6	ad 27 07	lda $0727			lda 	gxUseMode 					; scale bits
.ccd9	acd9	4a		lsr a				lsr 	a
.ccda	acda	4a		lsr a				lsr 	a
.ccdb	acdb	4a		lsr a				lsr 	a
.ccdc	acdc	29 07		and #$07			and		#7
.ccde	acde	1a		inc a				inc 	a
.ccdf	acdf	8d 26 07	sta $0726			sta 	gxScale
.cce2	ace2	64 38		stz $38				stz 	gxzTemp1					; start first line
.cce4	ace4					_GXGELoop:
.cce4	ace4	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cce6	ace6	2c 27 07	bit $0727			bit 	gxUseMode 					; check for flip.
.cce9	ace9	10 06		bpl $acf1			bpl		_GXNoVFlip
.cceb	aceb	ad 23 07	lda $0723			lda 	gxMask
.ccee	acee	38		sec				sec
.ccef	acef	e5 38		sbc $38				sbc 	gxzTemp1
.ccf1	acf1					_GXNoVFlip:
.ccf1	acf1	aa		tax				tax 								; get the Xth line.
.ccf2	acf2	20 32 ad	jsr $ad32			jsr 	_GXCallAcquire 				; get that data.
.ccf5	acf5	ad 26 07	lda $0726			lda 	gxScale 					; do scale identical copies of that line.
.ccf8	acf8	85 39		sta $39				sta 	gxzTemp1+1
.ccfa	acfa					_GXGELoop2:
.ccfa	acfa	ad 7f 06	lda $067f			lda 	gxY0 						; off screen
.ccfd	acfd	cd 89 06	cmp $0689			cmp 	gxHeight
.cd00	ad00	b0 10		bcs $ad12			bcs 	_GXDGEExit
.cd02	ad02	20 35 ad	jsr $ad35			jsr 	GXRenderOneLine 			; render line
.cd05	ad05	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd07	ad07	d0 f1		bne $acfa			bne 	_GXGELoop2
.cd09	ad09	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd0b	ad0b	a5 38		lda $38				lda 	gxzTemp1
.cd0d	ad0d	cd 22 07	cmp $0722			cmp 	gxSize
.cd10	ad10	d0 d2		bne $ace4			bne 	_GXGELoop
.cd12	ad12					_GXDGEExit:
.cd12	ad12	68		pla				pla 								; restore Y for next time
.cd13	ad13	8d 7f 06	sta $067f			sta 	gxY0
.cd16	ad16	ae 26 07	ldx $0726			ldx 	gxScale 					; get scale (1-8)
.cd19	ad19					_GXShiftLeft:
.cd19	ad19	18		clc				clc
.cd1a	ad1a	ad 22 07	lda $0722			lda 	gxSize
.cd1d	ad1d	6d 7d 06	adc $067d			adc 	gxX0
.cd20	ad20	8d 7d 06	sta $067d			sta 	gxX0
.cd23	ad23	90 03		bcc $ad28			bcc 	_GXSLNoCarry
.cd25	ad25	ee 7e 06	inc $067e			inc 	gxX0+1
.cd28	ad28					_GXSLNoCarry:
.cd28	ad28	ca		dex				dex
.cd29	ad29	d0 ee		bne $ad19			bne 	_GXShiftLeft
.cd2b	ad2b	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cd2e	ad2e	18		clc				clc
.cd2f	ad2f	60		rts				rts
.cd30	ad30					_GXSLFail:
.cd30	ad30	38		sec				sec
.cd31	ad31	60		rts				rts
.cd32	ad32					_GXCallAcquire:
.cd32	ad32	6c 24 07	jmp ($0724)			jmp 	(gxAcquireVector)
.cd35	ad35					GXRenderOneLine:
.cd35	ad35	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.cd38	ad38	ac 8f 06	ldy $068f			ldy 	gxOffset 					; Y contains position.
.cd3b	ad3b	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd3d	ad3d					_GXROLLoop1:
.cd3d	ad3d	ad 26 07	lda $0726			lda 	gxScale 					; set to do 'scale' times
.cd40	ad40	85 3b		sta $3b				sta 	gxzTemp2+1
.cd42	ad42					_GXROLLoop2:
.cd42	ad42	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd44	ad44	2c 8a 06	bit $068a			bit 	gxMode 						; check H Flip
.cd47	ad47	50 06		bvc $ad4f			bvc 	_GXNoHFlip
.cd49	ad49	ad 23 07	lda $0723			lda 	gxMask
.cd4c	ad4c	38		sec				sec
.cd4d	ad4d	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd4f	ad4f					_GXNoHFlip:
.cd4f	ad4f	aa		tax				tax 								; read from the pixel buffer
.cd50	ad50	bd 27 06	lda $0627,x			lda 	gxPixelBuffer,x
.cd53	ad53	d0 07		bne $ad5c			bne 	_GXDraw 					; draw if non zero
.cd55	ad55	ad 27 07	lda $0727			lda 	gxUseMode 					; check to see if solid background
.cd58	ad58	29 04		and #$04			and 	#4
.cd5a	ad5a	f0 0a		beq $ad66			beq 	_GXZeroPixel
.cd5c	ad5c					_GXDraw:
.cd5c	ad5c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd5e	ad5e	2d 8d 06	and $068d			and 	gxANDValue
.cd61	ad61	5d 27 06	eor $0627,x			eor 	gxPixelBuffer,x
.cd64	ad64	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd66	ad66					_GXZeroPixel:
.cd66	ad66	c8		iny				iny 								; advance pointer
.cd67	ad67	d0 05		bne $ad6e			bne 	_GXNoShift
.cd69	ad69	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd6b	ad6b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cd6e	ad6e					_GXNoShift:
.cd6e	ad6e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd70	ad70	d0 d0		bne $ad42			bne 	_GXROLLoop2
.cd72	ad72	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd74	ad74	a5 3a		lda $3a				lda 	gxzTemp2
.cd76	ad76	cd 22 07	cmp $0722			cmp 	gxSize
.cd79	ad79	d0 c2		bne $ad3d			bne 	_GXROLLoop1
.cd7b	ad7b	ee 7f 06	inc $067f			inc 	gxY0
.cd7e	ad7e	60		rts				rts
.0722						gxSize:
>0722								.fill 	1
.0723						gxMask:
>0723								.fill 	1
.0724						gxAcquireVector:
>0724								.fill 	2
.0726						gxScale:
>0726								.fill 	1
.0727						gxUseMode:
>0727								.fill 	1
.cd7f	ad7f					GXFontHandler:
.cd7f	ad7f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd81	ad81	4d 8a 06	eor $068a			eor 	gxMode
.cd84	ad84	8d 27 07	sta $0727			sta 	gxUseMode
.cd87	ad87	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd89	ad89	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd8b	ad8b	26 37		rol $37				rol	 	gxzTemp0+1
.cd8d	ad8d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd8f	ad8f	26 37		rol $37				rol	 	gxzTemp0+1
.cd91	ad91	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd93	ad93	26 37		rol $37				rol	 	gxzTemp0+1
.cd95	ad95	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd97	ad97	09 c0		ora #$c0			ora 	#$C0
.cd99	ad99	85 37		sta $37				sta 	gxzTemp0+1
.cd9b	ad9b	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd9d	ad9d	a2 a5		ldx #$a5			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd9f	ad9f	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cda1	ada1	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cda4	ada4	60		rts				rts
.cda5	ada5					GXGetGraphicDataFont:
.cda5	ada5	8a		txa				txa 								; X->Y
.cda6	ada6	a8		tay				tay
.cda7	ada7	a6 01		ldx $01				ldx 	1 							; preserve old value
.cda9	ada9	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdab	adab	85 01		sta $01				sta 	1
.cdad	adad	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdaf	adaf	86 01		stx $01				stx 	1 							; put old value back.
.cdb1	adb1	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdb3	adb3					_GXExpand:
.cdb3	adb3	9e 27 06	stz $0627,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdb6	adb6	0a		asl a				asl 	a 							; shift bit 7 into C
.cdb7	adb7	90 08		bcc $adc1			bcc 	_GXNoPixel
.cdb9	adb9	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdba	adba	ad 8b 06	lda $068b			lda 	gxColour
.cdbd	adbd	9d 27 06	sta $0627,x			sta 	gxPixelBuffer,x
.cdc0	adc0	68		pla				pla
.cdc1	adc1					_GXNoPixel:
.cdc1	adc1	e8		inx				inx 								; do the whole byte.
.cdc2	adc2	e0 08		cpx #$08			cpx 	#8
.cdc4	adc4	d0 ed		bne $adb3			bne 	_GXExpand
.cdc6	adc6	60		rts				rts
.cdc7	adc7					GXSpriteHandler:
.cdc7	adc7	ad 85 06	lda $0685			lda 	gxSpritesOn 				; sprites on ?
.cdca	adca	f0 23		beq $adef			beq 	_GXSHExit
.cdcc	adcc	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdce	adce	4d 8a 06	eor $068a			eor 	gxMode
.cdd1	add1	8d 27 07	sta $0727			sta 	gxUseMode
.cdd4	add4	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdd6	add6	da		phx				phx
.cdd7	add7	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; can access sprite information
.cdda	adda	68		pla				pla
.cddb	addb	20 48 b0	jsr $b048			jsr 	GXFindSprite 				; get the sprite address
.cdde	adde	08		php				php
.cddf	addf	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cde2	ade2	28		plp				plp
.cde3	ade3	b0 0a		bcs $adef			bcs		_GXSHExit 					; exit if find failed.
.cde5	ade5	ad 28 07	lda $0728			lda 	gxSizePixels 				; return size
.cde8	ade8	a2 f0		ldx #$f0			ldx 	#GXSpriteAcquire & $FF
.cdea	adea	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cdec	adec	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cdef	adef					_GXSHExit:
.cdef	adef	60		rts				rts
.cdf0	adf0					GXSpriteAcquire:
.cdf0	adf0	ad 88 06	lda $0688			lda 	gxSpritePage				; point to base page
.cdf3	adf3	85 0b		sta $0b				sta 	GXEditSlot
.cdf5	adf5	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.cdf7	adf7	a9 00		lda #$00			lda 	#0
.cdf9	adf9	ae 29 07	ldx $0729			ldx 	gxSizeBits
.cdfc	adfc					_GXTimesRowNumber:
.cdfc	adfc	18		clc				clc
.cdfd	adfd	65 36		adc $36				adc 	gxzTemp0
.cdff	adff	ca		dex				dex
.ce00	ae00	10 fa		bpl $adfc			bpl 	_GXTimesRowNumber
.ce02	ae02	64 37		stz $37				stz 	gxzTemp0+1
.ce04	ae04	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce05	ae05	26 37		rol $37				rol 	gxzTemp0+1
.ce07	ae07	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce08	ae08	26 37		rol $37				rol 	gxzTemp0+1
.ce0a	ae0a	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce0b	ae0b	26 37		rol $37				rol 	gxzTemp0+1
.ce0d	ae0d	85 36		sta $36				sta 	gxzTemp0
.ce0f	ae0f	18		clc				clc 								; add base address.
.ce10	ae10	a5 36		lda $36				lda 	gxzTemp0
.ce12	ae12	6d 2b 07	adc $072b			adc 	gxSpriteOffset
.ce15	ae15	85 36		sta $36				sta 	gxzTemp0
.ce17	ae17	a5 37		lda $37				lda 	gxzTemp0+1
.ce19	ae19	6d 2c 07	adc $072c			adc 	gxSpriteOffset+1
.ce1c	ae1c					_GXSAFindPage:
.ce1c	ae1c	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce1e	ae1e	90 06		bcc $ae26			bcc 	_GXSAFoundPage
.ce20	ae20	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce22	ae22	e6 0b		inc $0b				inc 	GXEditSlot
.ce24	ae24	80 f6		bra $ae1c			bra 	_GXSAFindPage
.ce26	ae26					_GXSAFoundPage:
.ce26	ae26	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce28	ae28	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce2a	ae2a	a0 00		ldy #$00			ldy 	#0
.ce2c	ae2c					_GXSACopyLoop:
.ce2c	ae2c	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce2e	ae2e	99 27 06	sta $0627,y			sta 	gxPixelBuffer,y
.ce31	ae31	c8		iny				iny
.ce32	ae32	cc 28 07	cpy $0728			cpy 	gxSizePixels
.ce35	ae35	d0 f5		bne $ae2c			bne 	_GXSACopyLoop
.ce37	ae37	60		rts				rts
.ce38	ae38					GXSelect:
.ce38	ae38	ad 85 06	lda $0685			lda 	gxSpritesOn
.ce3b	ae3b	f0 22		beq $ae5f			beq 	_GXSFail
.ce3d	ae3d	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce3f	ae3f	c9 40		cmp #$40			cmp 	#64
.ce41	ae41	b0 1c		bcs $ae5f			bcs 	_GXSFail
.ce43	ae43	8d 90 06	sta $0690			sta 	GSCurrentSpriteID
.ce46	ae46	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce48	ae48	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce4a	ae4a	06 36		asl $36				asl 	gxzTemp0
.ce4c	ae4c	06 36		asl $36				asl 	gxzTemp0
.ce4e	ae4e	06 36		asl $36				asl 	gxzTemp0
.ce50	ae50	2a		rol a				rol 	a
.ce51	ae51	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce53	ae53	8d 92 06	sta $0692			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce56	ae56	85 37		sta $37				sta 	gxzTemp0+1
.ce58	ae58	a5 36		lda $36				lda 	gxzTemp0
.ce5a	ae5a	8d 91 06	sta $0691			sta 	GSCurrentSpriteAddr
.ce5d	ae5d	18		clc				clc
.ce5e	ae5e	60		rts				rts
.ce5f	ae5f					_GXSFail:
.ce5f	ae5f	38		sec				sec
.ce60	ae60	60		rts				rts
.ce61	ae61					GXSelectImage:
.ce61	ae61	ad 85 06	lda $0685			lda 	gxSpritesOn
.ce64	ae64	f0 74		beq $aeda			beq 	_GXSIFail
.ce66	ae66	ad 92 06	lda $0692			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce69	ae69	f0 6f		beq $aeda			beq 	_GXSIFail 					; (checking the MSB)
.ce6b	ae6b	64 01		stz $01				stz 	1
.ce6d	ae6d	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce6f	ae6f	d0 6b		bne $aedc			bne 	_GXSIHide
.ce71	ae71	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce73	ae73	48		pha				pha
.ce74	ae74	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ce77	ae77	68		pla				pla
.ce78	ae78	20 48 b0	jsr $b048			jsr 	GXFindSprite
.ce7b	ae7b	b0 5a		bcs $aed7			bcs 	_GXSICloseFail 				; no image
.ce7d	ae7d	a0 01		ldy #$01			ldy 	#1
.ce7f	ae7f	ad 91 06	lda $0691			lda 	GSCurrentSpriteAddr
.ce82	ae82	85 36		sta $36				sta 	gxzTemp0
.ce84	ae84	ad 92 06	lda $0692			lda 	GSCurrentSpriteAddr+1
.ce87	ae87	85 37		sta $37				sta 	gxzTemp0+1
.ce89	ae89	ad 2b 07	lda $072b			lda 	gxSpriteOffset
.ce8c	ae8c	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8e	ae8e	18		clc				clc
.ce8f	ae8f	ad 2c 07	lda $072c			lda 	gxSpriteOffset+1
.ce92	ae92	6d 93 06	adc $0693			adc 	gxSpriteOffsetBase
.ce95	ae95	c8		iny				iny
.ce96	ae96	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce98	ae98	ad 94 06	lda $0694			lda 	gxSpriteOffsetBase+1
.ce9b	ae9b	69 00		adc #$00			adc 	#0
.ce9d	ae9d	c8		iny				iny
.ce9e	ae9e	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cea0	aea0	ad 29 07	lda $0729			lda 	gxSizeBits 					; get raw size
.cea3	aea3	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cea5	aea5	2a		rol a				rol 	a 							; x 2
.cea6	aea6	0a		asl a				asl 	a 							; x 4
.cea7	aea7	0a		asl a				asl 	a 							; x 8
.cea8	aea8	0a		asl a				asl 	a 							; x 16
.cea9	aea9	0d 2a 07	ora $072a			ora 	gxSpriteLUT 				; Or with LUT
.ceac	aeac	0a		asl a				asl 	a 							; 1 shift
.cead	aead	09 01		ora #$01			ora 	#1 							; enable sprite.
.ceaf	aeaf	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ceb1	aeb1	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceb4	aeb4	ae 90 06	ldx $0690			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceb7	aeb7	bd d5 06	lda $06d5,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceba	aeba	29 3f		and #$3f			and 	#$3F
.cebc	aebc	9d d5 06	sta $06d5,x			sta 	gxSpriteHigh,x
.cebf	aebf	ad 29 07	lda $0729			lda 	gxSizeBits 					; get bit size
.cec2	aec2	6a		ror a				ror 	a 							; shift into bits 6/7
.cec3	aec3	6a		ror a				ror 	a
.cec4	aec4	6a		ror a				ror 	a
.cec5	aec5	29 c0		and #$c0			and 	#$C0
.cec7	aec7	1d d5 06	ora $06d5,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceca	aeca	9d d5 06	sta $06d5,x			sta 	gxSpriteHigh,x
.cecd	aecd	bd 95 06	lda $0695,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.ced0	aed0	29 7f		and #$7f			and 	#$7F
.ced2	aed2	9d 95 06	sta $0695,x			sta 	gxSpriteLow,x
.ced5	aed5	18		clc				clc
.ced6	aed6	60		rts				rts
.ced7	aed7					_GXSICloseFail:
.ced7	aed7	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceda	aeda					_GXSIFail:
.ceda	aeda	38		sec				sec
.cedb	aedb	60		rts				rts
.cedc	aedc					_GXSIHide:
.cedc	aedc	ad 91 06	lda $0691			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cedf	aedf	85 36		sta $36				sta 	gxzTemp0
.cee1	aee1	ad 92 06	lda $0692			lda 	GSCurrentSpriteAddr+1
.cee4	aee4	85 37		sta $37				sta 	gxzTemp0+1
.cee6	aee6	a9 00		lda #$00			lda 	#0
.cee8	aee8	92 36		sta ($36)			sta 	(gxzTemp0)
.ceea	aeea	ae 90 06	ldx $0690			ldx 	GSCurrentSpriteID 			; get sprite ID
.ceed	aeed	bd 95 06	lda $0695,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cef0	aef0	09 80		ora #$80			ora 	#$80
.cef2	aef2	9d 95 06	sta $0695,x			sta 	gxSpriteLow,x
.cef5	aef5	18		clc				clc
.cef6	aef6	60		rts				rts
.cef7	aef7					GXMoveSprite:
.cef7	aef7	ad 85 06	lda $0685			lda 	gxSpritesOn
.cefa	aefa	f0 65		beq $af61			beq 	_GXSIFail
.cefc	aefc	ad 92 06	lda $0692			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ceff	aeff	f0 60		beq $af61			beq 	_GXSIFail
.cf01	af01	85 37		sta $37				sta 	gxzTemp0+1
.cf03	af03	a0 04		ldy #$04			ldy 	#4
.cf05	af05	ad 91 06	lda $0691			lda 	GSCurrentSpriteAddr
.cf08	af08	85 36		sta $36				sta 	gxzTemp0
.cf0a	af0a	ae 90 06	ldx $0690			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf0d	af0d	bd d5 06	lda $06d5,x			lda 	gxSpriteHigh,x
.cf10	af10	2a		rol a				rol 	a	 						; into bits 0,1.
.cf11	af11	2a		rol a				rol 	a
.cf12	af12	2a		rol a				rol 	a
.cf13	af13	29 03		and #$03			and 	#3
.cf15	af15	aa		tax				tax
.cf16	af16	bd 63 af	lda $af63,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf19	af19	48		pha				pha
.cf1a	af1a	18		clc				clc
.cf1b	af1b	6d 7d 06	adc $067d			adc 	gxX0						; copy position.
.cf1e	af1e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf20	af20	c8		iny				iny
.cf21	af21	ad 7e 06	lda $067e			lda 	gxX0+1
.cf24	af24	69 00		adc #$00			adc 	#0
.cf26	af26	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf28	af28	c8		iny				iny
.cf29	af29	68		pla				pla
.cf2a	af2a	18		clc				clc
.cf2b	af2b	6d 7f 06	adc $067f			adc 	gxY0
.cf2e	af2e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf30	af30	a9 00		lda #$00			lda 	#0
.cf32	af32	69 00		adc #$00			adc 	#0
.cf34	af34	c8		iny				iny
.cf35	af35	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf37	af37	4e 7e 06	lsr $067e			lsr 	gxX0+1 						; divide X by 4
.cf3a	af3a	6e 7d 06	ror $067d			ror 	gxX0
.cf3d	af3d	4e 7d 06	lsr $067d			lsr 	gxX0
.cf40	af40	4e 7f 06	lsr $067f			lsr 	gxY0 						; divide Y by 4
.cf43	af43	4e 7f 06	lsr $067f			lsr 	gxY0
.cf46	af46	ae 90 06	ldx $0690			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf49	af49	bd 95 06	lda $0695,x			lda 	gxSpriteLow,x
.cf4c	af4c	29 80		and #$80			and 	#$80
.cf4e	af4e	0d 7d 06	ora $067d			ora 	gxX0
.cf51	af51	9d 95 06	sta $0695,x			sta 	gxSpriteLow,x
.cf54	af54	bd d5 06	lda $06d5,x			lda 	gxSpriteHigh,x
.cf57	af57	29 c0		and #$c0			and 	#$C0
.cf59	af59	0d 7f 06	ora $067f			ora 	gxY0
.cf5c	af5c	9d d5 06	sta $06d5,x			sta 	gxSpriteHigh,x
.cf5f	af5f	18		clc				clc
.cf60	af60	60		rts				rts
.cf61	af61					_GXSIFail:
.cf61	af61	38		sec				sec
.cf62	af62	60		rts				rts
.cf63	af63					_GXMSOffset:
>cf63	af63	1c						.byte 	32-8/2
>cf64	af64	18						.byte 	32-16/2
>cf65	af65	14						.byte 	32-24/2
>cf66	af66	10						.byte 	32-32/2
.cf67	af67					GXOpenBitmap:
.cf67	af67	78		sei				sei 								; no interrupts here
.cf68	af68	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf6a	af6a	8d 8e 06	sta $068e			sta 	gxOriginalLUTValue
.cf6d	af6d	58		cli				cli
.cf6e	af6e	60		rts				rts
.cf6f	af6f					GXCloseBitmap:
.cf6f	af6f	78		sei				sei
.cf70	af70	ad 8e 06	lda $068e			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf73	af73	85 0b		sta $0b				sta 	GXEditSlot
.cf75	af75	58		cli				cli
.cf76	af76	60		rts				rts
.cf77	af77					gxPositionCalc:
.cf77	af77	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf79	af79	48		pha				pha
.cf7a	af7a	ad 7f 06	lda $067f			lda 	gxY0 						; gxzScreen = Y0
.cf7d	af7d	85 3c		sta $3c				sta 	gxzScreen
.cf7f	af7f	64 3d		stz $3d				stz 	gxzScreen+1
.cf81	af81	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf83	af83	26 3d		rol $3d				rol 	gxzScreen+1
.cf85	af85	06 3c		asl $3c				asl 	gxzScreen
.cf87	af87	26 3d		rol $3d				rol 	gxzScreen+1
.cf89	af89	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf8a	af8a	65 3c		adc $3c				adc 	gxzScreen
.cf8c	af8c	85 3c		sta $3c				sta 	gxzScreen
.cf8e	af8e	90 02		bcc $af92			bcc 	_GXPCNoCarry
.cf90	af90	e6 3d		inc $3d				inc 	gxzScreen+1
.cf92	af92					_GXPCNoCarry:
.cf92	af92	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf94	af94	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf96	af96	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf98	af98	85 36		sta $36				sta 	gxzTemp0
.cf9a	af9a	64 3d		stz $3d				stz 	gxzScreen+1
.cf9c	af9c	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf9e	af9e					_GXPCMultiply32:
.cf9e	af9e	06 3c		asl $3c				asl 	gxzScreen
.cfa0	afa0	26 3d		rol $3d				rol 	gxzScreen+1
.cfa2	afa2	3a		dec a				dec 	a
.cfa3	afa3	d0 f9		bne $af9e			bne 	_GXPCMultiply32
.cfa5	afa5	18		clc				clc
.cfa6	afa6	ad 7d 06	lda $067d			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfa9	afa9	65 3c		adc $3c				adc 	gxzScreen
.cfab	afab	8d 8f 06	sta $068f			sta 	gxOffset
.cfae	afae	ad 7e 06	lda $067e			lda 	gxX0+1
.cfb1	afb1	65 3d		adc $3d				adc 	gxzScreen+1
.cfb3	afb3	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfb5	afb5	90 04		bcc $afbb			bcc 	_GXPCNoOverflow
.cfb7	afb7	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfb9	afb9	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfbb	afbb					_GXPCNoOverflow:
.cfbb	afbb	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfbd	afbd	85 3d		sta $3d				sta 	gxzScreen+1
.cfbf	afbf	64 3c		stz $3c				stz 	gxzScreen
.cfc1	afc1	18		clc				clc
.cfc2	afc2	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfc4	afc4	6d 87 06	adc $0687			adc 	gxBasePage 					; by adding the base page
.cfc7	afc7	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfc9	afc9	68		pla				pla
.cfca	afca	85 36		sta $36				sta 	gxzTemp0
.cfcc	afcc	60		rts				rts
.cfcd	afcd					GXMovePositionDown:
.cfcd	afcd	18		clc				clc 								; add 320 to offset/temp+1
.cfce	afce	ad 8f 06	lda $068f			lda 	gxOffset
.cfd1	afd1	69 40		adc #$40			adc 	#64
.cfd3	afd3	8d 8f 06	sta $068f			sta 	gxOffset
.cfd6	afd6	a5 3d		lda $3d				lda 	gxzScreen+1
.cfd8	afd8	69 01		adc #$01			adc 	#1
.cfda	afda	85 3d		sta $3d				sta 	gxzScreen+1
.cfdc	afdc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfde	afde	90 07		bcc $afe7			bcc 	_GXMPDExit
.cfe0	afe0	38		sec				sec  								; next page
.cfe1	afe1	e9 20		sbc #$20			sbc 	#$20
.cfe3	afe3	85 3d		sta $3d				sta 	gxzScreen+1
.cfe5	afe5	e6 0b		inc $0b				inc 	GXEditSlot
.cfe7	afe7					_GXMPDExit:
.cfe7	afe7	60		rts				rts
.cfe8	afe8					GXCollide:
.cfe8	afe8	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfea	afea	aa		tax				tax
.cfeb	afeb	05 37		ora $37				ora 	gxzTemp0+1
.cfed	afed	29 c0		and #$c0			and 	#$C0
.cfef	afef	38		sec				sec
.cff0	aff0	d0 53		bne $b045			bne 	_GXCollideFail 				; if either >= 64, fail.
.cff2	aff2	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cff4	aff4	b9 95 06	lda $0695,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cff7	aff7	1d 95 06	ora $0695,x			ora 	gxSpriteLow,x
.cffa	affa	30 48		bmi $b044			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cffc	affc	18		clc				clc 								; need to calculate sum of sizes.
.cffd	affd	b9 d5 06	lda $06d5,y			lda 	gxSpriteHigh,y
.d000	b000	7d d5 06	adc $06d5,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d003	b003	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d005	b005	6a		ror a				ror 	a 							; 5/6/7
.d006	b006	4a		lsr a				lsr 	a 							; 4/5/6
.d007	b007	4a		lsr a				lsr 	a 							; 3/4/5
.d008	b008	4a		lsr a				lsr 	a 							; 2/3/4
.d009	b009	18		clc				clc
.d00a	b00a	69 08		adc #$08			adc 	#$08
.d00c	b00c	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d00d	b00d	4a		lsr a				lsr 	a
.d00e	b00e	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d010	b010	b9 d5 06	lda $06d5,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d013	b013	29 3f		and #$3f			and 	#$3F
.d015	b015	85 39		sta $39				sta 	gxzTemp1+1
.d017	b017	38		sec				sec
.d018	b018	bd d5 06	lda $06d5,x			lda 	gxSpriteHigh,x
.d01b	b01b	29 3f		and #$3f			and 	#$3F
.d01d	b01d	e5 39		sbc $39				sbc 	gxzTemp1+1
.d01f	b01f	b0 03		bcs $b024			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d021	b021	49 ff		eor #$ff			eor 	#$FF
.d023	b023	1a		inc a				inc 	a
.d024	b024					_GXCAbs1:
.d024	b024	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d026	b026	b0 1c		bcs $b044			bcs 	_GXOkayFail
.d028	b028	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d02a	b02a	38		sec				sec 								; calculate |x1-x0|
.d02b	b02b	b9 95 06	lda $0695,y			lda 	gxSpriteLow,y
.d02e	b02e	fd 95 06	sbc $0695,x			sbc 	gxSpriteLow,x
.d031	b031	b0 03		bcs $b036			bcs 	_GXCAbs2
.d033	b033	49 ff		eor #$ff			eor 	#$FF
.d035	b035	1a		inc a				inc 	a
.d036	b036					_GXCAbs2:
.d036	b036	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d038	b038	b0 0a		bcs $b044			bcs 	_GXOkayFail
.d03a	b03a	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d03c	b03c	90 02		bcc $b040			bcc 	_GXCHaveLowest
.d03e	b03e	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d040	b040					_GXCHaveLowest:
.d040	b040	0a		asl a				asl 	a 							; scale to allow for >> 2
.d041	b041	0a		asl a				asl 	a
.d042	b042	18		clc				clc
.d043	b043	60		rts				rts
.d044	b044					_GXOkayFail:
.d044	b044	18		clc				clc
.d045	b045					_GXCollideFail:
.d045	b045	a9 ff		lda #$ff			lda 	#$FF
.d047	b047	60		rts				rts
.d048	b048					GXFindSprite:
.d048	b048	aa		tax				tax
.d049	b049	ad 88 06	lda $0688			lda 	gxSpritePage 				; access the base page of the sprite
.d04c	b04c	85 0b		sta $0b				sta 	GXEditSlot
.d04e	b04e	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d051	b051	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d054	b054	f0 33		beq $b089			beq 	_GXFSFail
.d056	b056	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d059	b059	8d 2c 07	sta $072c			sta 	gxSpriteOffset+1
.d05c	b05c	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d05f	b05f	48		pha				pha 								; save twice
.d060	b060	48		pha				pha
.d061	b061	29 03		and #$03			and 	#3 							; get sprite size
.d063	b063	8d 29 07	sta $0729			sta 	gxSizeBits 					; save raw (0-3)
.d066	b066	aa		tax				tax
.d067	b067	bd 8b b0	lda $b08b,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d06a	b06a	8d 28 07	sta $0728			sta 	gxSizePixels 					; save (8/16/24/32)
.d06d	b06d	68		pla				pla 								; get LUT
.d06e	b06e	4a		lsr a				lsr		a
.d06f	b06f	4a		lsr a				lsr		a
.d070	b070	29 03		and #$03			and 	#3
.d072	b072	8d 2a 07	sta $072a			sta 	gxSpriteLUT
.d075	b075	68		pla				pla 								; address, neeeds to be x 4
.d076	b076	29 f0		and #$f0			and 	#$F0
.d078	b078	8d 2b 07	sta $072b			sta 	gxSpriteOffset
.d07b	b07b	0e 2b 07	asl $072b			asl 	gxSpriteOffset
.d07e	b07e	2e 2c 07	rol $072c			rol 	gxSpriteOffset+1
.d081	b081	0e 2b 07	asl $072b			asl 	gxSpriteOffset
.d084	b084	2e 2c 07	rol $072c			rol 	gxSpriteOffset+1
.d087	b087	18		clc				clc
.d088	b088	60		rts				rts
.d089	b089					_GXFSFail:
.d089	b089	38		sec				sec
.d08a	b08a	60		rts				rts
.d08b	b08b					_GXFXSSTTable:
>d08b	b08b	08 10 18 20					.byte 	8,16,24,32
.0728						gxSizePixels:
>0728								.fill 	1
.0729						gxSizeBits:
>0729								.fill 	1
.072a						gxSpriteLUT:
>072a								.fill 	1
.072b						gxSpriteOffset:
>072b								.fill 	2
.d08f	b08f					GXSortXY:
.d08f	b08f	20 ad b0	jsr $b0ad			jsr 	GXSortY 					; will be sorted on Y now
.d092	b092	ad 7d 06	lda $067d			lda 	gxX0 						; compare X0 v X1
.d095	b095	cd 81 06	cmp $0681			cmp 	gxX1
.d098	b098	ad 7e 06	lda $067e			lda 	gxX0+1
.d09b	b09b	ed 82 06	sbc $0682			sbc 	gxX1+1
.d09e	b09e	90 0c		bcc $b0ac			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0a0	b0a0	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0a2	b0a2	a0 04		ldy #$04			ldy 	#4
.d0a4	b0a4	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0a7	b0a7	e8		inx				inx
.d0a8	b0a8	c8		iny				iny
.d0a9	b0a9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0ac	b0ac					_GXSXYExit:
.d0ac	b0ac	60		rts				rts
.d0ad	b0ad					GXSortY:
.d0ad	b0ad	ad 7f 06	lda $067f			lda 	gxY0 						; if Y0 >= Y1
.d0b0	b0b0	cd 83 06	cmp $0683			cmp 	gxY1
.d0b3	b0b3	90 0b		bcc $b0c0			bcc 	_GXSYSorted
.d0b5	b0b5	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0b7	b0b7	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0b9	b0b9					_GXSwap1:
.d0b9	b0b9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0bc	b0bc	88		dey				dey
.d0bd	b0bd	ca		dex				dex
.d0be	b0be	10 f9		bpl $b0b9			bpl 	_GXSwap1
.d0c0	b0c0					_GXSYSorted:
.d0c0	b0c0	60		rts				rts
.d0c1	b0c1					GXSwapXY:
.d0c1	b0c1	bd 7d 06	lda $067d,x			lda 	gxX0,x
.d0c4	b0c4	48		pha				pha
.d0c5	b0c5	b9 7d 06	lda $067d,y			lda 	gxX0,y
.d0c8	b0c8	9d 7d 06	sta $067d,x			sta 	gxX0,x
.d0cb	b0cb	68		pla				pla
.d0cc	b0cc	99 7d 06	sta $067d,y			sta 	gxX0,y
.d0cf	b0cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0d0	b0d0					KeywordSet0:
>d0d0	b0d0	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0d2	b0d2	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0d4	b0d4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0d6	b0d6	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0dc	b0dc	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0e4	b0e4	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0ea	b0ea	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0f1	b0f1	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0f9	b0f9	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d100	b100	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d107	b107	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8a GETDATE$(
>d10f	b10f	45 24 28
>d112	b112	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8b GETTIME$(
>d11a	b11a	45 24 28
>d11d	b11d	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8c HIT(
>d123	b123	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8d INT(
>d129	b129	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8e ISVAL(
>d131	b131	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8f JOYB(
>d138	b138	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $90 JOYX(
>d13f	b13f	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $91 JOYY(
>d146	b146	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $92 LEFT$(
>d14e	b14e	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $93 LEN(
>d154	b154	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $94 MAX(
>d15a	b15a	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $95 MID$(
>d161	b161	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $96 MIN(
>d167	b167	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $97 NOT(
>d16d	b16d	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $98 PEEK(
>d174	b174	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $99 PEEKD(
>d17c	b17c	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9a PEEKL(
>d184	b184	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9b PEEKW(
>d18c	b18c	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $9c PLAYING(
>d194	b194	47 28
>d196	b196	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $9d RANDOM(
>d19e	b19e	28
>d19f	b19f	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $9e RIGHT$(
>d1a7	b1a7	28
>d1a8	b1a8	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $9f RND(
>d1ae	b1ae	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a0 SGN(
>d1b4	b1b4	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a1 SPC(
>d1ba	b1ba	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a2 STR$(
>d1c1	b1c1	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a3 TIMER(
>d1c9	b1c9	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a4 TRUE
>d1cf	b1cf	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a5 VAL(
>d1d5	b1d5	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a6 FOR
>d1da	b1da	02 8f 49 46				.text	2,$8f,"IF"             ; $a7 IF
>d1de	b1de	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a8 PROC
>d1e4	b1e4	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a9 REPEAT
>d1ec	b1ec	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $aa WHILE
>d1f3	b1f3	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $ab ENDIF
>d1fa	b1fa	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $ac ENDPROC
>d202	b202	43
>d203	b203	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $ad NEXT
>d209	b209	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ae THEN
>d20f	b20f	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $af UNTIL
>d216	b216	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b0 WEND
>d21c	b21c	02 9b 42 59				.text	2,$9b,"BY"             ; $b1 BY
>d220	b220	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b2 CALL
>d226	b226	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b3 CIRCLE
>d22e	b22e	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b4 CLEAR
>d235	b235	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $b5 CLS
>d23a	b23a	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b6 COLOR
>d241	b241	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b7 COLOUR
>d249	b249	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $b8 CPRINT
>d251	b251	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b9 DATA
>d257	b257	03 da 44 49 4d				.text	3,$da,"DIM"            ; $ba DIM
>d25c	b25c	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $bb DOWNTO
>d264	b264	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $bc ELSE
>d26a	b26a	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $bd FROM
>d270	b270	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $be GFX
>d275	b275	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $bf GOSUB
>d27c	b27c	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $c0 GOTO
>d282	b282	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c1 HERE
>d288	b288	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c2 IMAGE
>d28f	b28f	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $c3 INPUT
>d296	b296	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c4 LET
>d29b	b29b	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c5 LINE
>d2a1	b2a1	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c6 LOCAL
>d2a8	b2a8	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c7 OFF
>d2ad	b2ad	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c8 ON
>d2b1	b2b1	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c9 OUTLINE
>d2b9	b2b9	45
>d2ba	b2ba	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $ca PALETTE
>d2c2	b2c2	45
>d2c3	b2c3	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cb PLOT
>d2c9	b2c9	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cc POKE
>d2cf	b2cf	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $cd POKED
>d2d6	b2d6	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $ce POKEL
>d2dd	b2dd	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $cf POKEW
>d2e4	b2e4	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $d0 PRINT
>d2eb	b2eb	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d1 READ
>d2f1	b2f1	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d2 RECT
>d2f7	b2f7	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d3 REM
>d2fc	b2fc	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $d4 RETURN
>d304	b304	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d5 SOLID
>d30b	b30b	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d6 SOUND
>d312	b312	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d7 SPRITE
>d31a	b31a	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d8 TEXT
>d320	b320	02 a3 54 4f				.text	2,$a3,"TO"             ; $d9 TO
>d324	b324	ff					.text	$FF
.d325	b325					KeywordSet1:
>d325	b325	00 65					.text	0,$65,""               ; $80 !0:EOF
>d327	b327	00 58					.text	0,$58,""               ; $81 !1:SH1
>d329	b329	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d32b	b32b	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d333	b333	4c 45
>d335	b335	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d33d	b33d	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d345	b345	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d34c	b34c	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d353	b353	03 df 44 49 52				.text	3,$df,"DIR"            ; $88 DIR
>d358	b358	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $89 DRIVE
>d35f	b35f	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8a END
>d364	b364	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8b EXPLODE
>d36c	b36c	45
>d36d	b36d	02 96 47 4f				.text	2,$96,"GO"             ; $8c GO
>d371	b371	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $8d HIMEM
>d378	b378	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $8e LIST
>d37e	b37e	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $8f LOAD
>d384	b384	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $90 NEW
>d389	b389	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $91 PING
>d38f	b38f	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $92 RESTORE
>d397	b397	45
>d398	b398	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $93 RUN
>d39d	b39d	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $94 SAVE
>d3a3	b3a3	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $95 SETDATE
>d3ab	b3ab	45
>d3ac	b3ac	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $96 SETTIME
>d3b4	b3b4	45
>d3b5	b3b5	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $97 SHOOT
>d3bc	b3bc	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $98 SPRITES
>d3c4	b3c4	53
>d3c5	b3c5	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $99 STOP
>d3cb	b3cb	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $9a VERIFY
>d3d3	b3d3	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $9b XGO
>d3d8	b3d8	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $9c XLOAD
>d3df	b3df	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $9d ZAP
>d3e4	b3e4	ff					.text	$FF
.d3e5	b3e5					KeywordSet2:
>d3e5	b3e5	00 65					.text	0,$65,""               ; $80 !0:EOF
>d3e7	b3e7	00 58					.text	0,$58,""               ; $81 !1:SH1
>d3e9	b3e9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d3eb	b3eb	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d3f0	b3f0	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d3f5	b3f5	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d3fa	b3fa	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d3ff	b3ff	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d404	b404	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d409	b409	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d40e	b40e	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d413	b413	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d418	b418	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d41d	b41d	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d422	b422	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d427	b427	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d42c	b42c	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d431	b431	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d436	b436	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d43b	b43b	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d440	b440	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d445	b445	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d44a	b44a	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d44f	b44f	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d454	b454	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d459	b459	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d45e	b45e	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d463	b463	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d468	b468	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d46d	b46d	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d472	b472	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d477	b477	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d47c	b47c	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d481	b481	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d486	b486	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d48b	b48b	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d490	b490	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d495	b495	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d49a	b49a	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d49f	b49f	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d4a4	b4a4	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d4a9	b4a9	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d4ae	b4ae	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d4b3	b4b3	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d4b8	b4b8	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d4bd	b4bd	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d4c2	b4c2	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d4c7	b4c7	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d4cc	b4cc	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d4d1	b4d1	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d4d6	b4d6	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d4db	b4db	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d4e0	b4e0	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d4e5	b4e5	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d4ea	b4ea	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d4ef	b4ef	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d4f4	b4f4	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d4f9	b4f9	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d4fe	b4fe	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d503	b503	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d508	b508	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d50d	b50d	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d512	b512	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d517	b517	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d51c	b51c	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d521	b521	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d526	b526	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d52b	b52b	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d530	b530	ff					.text	$FF
.d531	b531					Export_TKListConvertLine:
.d531	b531	48		pha				pha 								; save indent on the stack
.d532	b532	9c 1d 04	stz $041d			stz 	tbOffset
.d535	b535	9c 2d 04	stz $042d			stz 	tokenBuffer
.d538	b538	9c 29 04	stz $0429			stz 	currentListColour
.d53b	b53b	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d53d	b53d	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d540	b540	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d542	b542	b1 30		lda ($30),y			lda 	(codePtr),y
.d544	b544	aa		tax				tax
.d545	b545	88		dey				dey
.d546	b546	b1 30		lda ($30),y			lda 	(codePtr),y
.d548	b548	20 2b b7	jsr $b72b			jsr 	LCLWriteNumberXA
.d54b	b54b	68		pla				pla 								; adjustment to indent
.d54c	b54c	48		pha				pha 								; save on stack
.d54d	b54d	10 0c		bpl $b55b			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d54f	b54f	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d550	b550	6d 26 04	adc $0426			adc 	listIndent
.d553	b553	8d 26 04	sta $0426			sta 	listIndent
.d556	b556	10 03		bpl $b55b			bpl 	_LCNoAdjust
.d558	b558	9c 26 04	stz $0426			stz 	listIndent
.d55b	b55b					_LCNoAdjust:
.d55b	b55b	18		clc				clc		 							; work out actual indent.
.d55c	b55c	ad 26 04	lda $0426			lda 	listIndent
.d55f	b55f	0a		asl a				asl 	a
.d560	b560	69 07		adc #$07			adc 	#7
.d562	b562	85 36		sta $36				sta 	zTemp0
.d564	b564					_LCPadOut:
.d564	b564	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d566	b566	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d569	b569	ad 1d 04	lda $041d			lda 	tbOffset
.d56c	b56c	c5 36		cmp $36				cmp 	zTemp0
.d56e	b56e	d0 f4		bne $b564			bne 	_LCPadOut
.d570	b570	a0 03		ldy #$03			ldy 	#3 							; start position.
.d572	b572					_LCMainLoop:
.d572	b572	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d574	b574	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d577	b577	b1 30		lda ($30),y			lda 	(codePtr),y
.d579	b579	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d57b	b57b	f0 17		beq $b594			beq 	_LCExit
.d57d	b57d	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d57f	b57f	90 1e		bcc $b59f			bcc 	_LCDoubles
.d581	b581	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d583	b583	90 2a		bcc $b5af			bcc 	_LCShiftPunc
.d585	b585	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d587	b587	90 35		bcc $b5be			bcc 	_LCPunctuation
.d589	b589	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d58b	b58b	90 51		bcc $b5de			bcc 	_LCIdentifiers
.d58d	b58d	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d58f	b58f	90 73		bcc $b604			bcc 	_LCTokens
.d591	b591	4c 64 b6	jmp $b664			jmp 	_LCData 					; 254-5 are data objects
.d594	b594					_LCExit:
.d594	b594	68		pla				pla 								; get old indent adjust
.d595	b595	30 07		bmi $b59e			bmi 	_LCExit2
.d597	b597	18		clc				clc 								; add to indent if +ve
.d598	b598	6d 26 04	adc $0426			adc 	listIndent
.d59b	b59b	8d 26 04	sta $0426			sta 	listIndent
.d59e	b59e					_LCExit2:
.d59e	b59e	60		rts				rts
.d59f	b59f					_LCDoubles:
.d59f	b59f	48		pha				pha
.d5a0	b5a0	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d5a1	b5a1	29 02		and #$02			and 	#2
.d5a3	b5a3	09 3c		ora #$3c			ora 	#60 						; make < >
.d5a5	b5a5	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d5a8	b5a8	68		pla				pla 								; restore, do lower bit
.d5a9	b5a9	29 03		and #$03			and 	#3
.d5ab	b5ab	09 3c		ora #$3c			ora 	#60
.d5ad	b5ad	80 0f		bra $b5be			bra		_LCPunctuation 				; print, increment, loop
.d5af	b5af					_LCShiftPunc:
.d5af	b5af	aa		tax				tax 								; save in X
.d5b0	b5b0	29 07		and #$07			and 	#7 							; lower 3 bits
.d5b2	b5b2	f0 02		beq $b5b6			beq 	_LCNoAdd
.d5b4	b5b4	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d5b6	b5b6					_LCNoAdd:
.d5b6	b5b6	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d5b8	b5b8	90 02		bcc $b5bc			bcc 	_LCNoAdd2
.d5ba	b5ba	09 20		ora #$20			ora 	#32 						; adds $20
.d5bc	b5bc					_LCNoAdd2:
.d5bc	b5bc	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d5be	b5be					_LCPunctuation:
.d5be	b5be	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d5c0	b5c0	d0 03		bne $b5c5			bne 	_LCPContinue
.d5c2	b5c2	20 d9 b6	jsr $b6d9			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d5c5	b5c5					_LCPContinue:
.d5c5	b5c5	c9 2e		cmp #$2e			cmp 	#'.'
.d5c7	b5c7	f0 08		beq $b5d1			beq 	_LCPIsConstant
.d5c9	b5c9	c9 30		cmp #$30			cmp 	#'0'
.d5cb	b5cb	90 0b		bcc $b5d8			bcc 	_LCPNotConstant
.d5cd	b5cd	c9 3a		cmp #$3a			cmp 	#'9'+1
.d5cf	b5cf	b0 07		bcs $b5d8			bcs 	_LCPNotConstant
.d5d1	b5d1					_LCPIsConstant:
.d5d1	b5d1	48		pha				pha
.d5d2	b5d2	a9 87		lda #$87			lda 	#CLIConstant+$80
.d5d4	b5d4	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d5d7	b5d7	68		pla				pla
.d5d8	b5d8					_LCPNotConstant:
.d5d8	b5d8	c8		iny				iny 								; consume character
.d5d9	b5d9	20 c3 b6	jsr $b6c3			jsr 	LCLWrite 					; write it out.
.d5dc	b5dc	80 94		bra $b572			bra 	_LCMainLoop 				; go round again.
.d5de	b5de					_LCIdentifiers:
.d5de	b5de	18		clc				clc 								; convert to physical address
.d5df	b5df	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d5e1	b5e1	85 37		sta $37				sta 	zTemp0+1
.d5e3	b5e3	c8		iny				iny
.d5e4	b5e4	b1 30		lda ($30),y			lda 	(codePtr),y
.d5e6	b5e6	85 36		sta $36				sta 	zTemp0
.d5e8	b5e8	c8		iny				iny
.d5e9	b5e9	5a		phy				phy 								; save position
.d5ea	b5ea	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d5ec	b5ec	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d5ef	b5ef	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d5f1	b5f1					_LCOutIdentifier:
.d5f1	b5f1	c8		iny				iny
.d5f2	b5f2	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d5f4	b5f4	29 7f		and #$7f			and 	#$7F
.d5f6	b5f6	20 15 b7	jsr $b715			jsr 	LCLLowerCase
.d5f9	b5f9	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d5fc	b5fc	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d5fe	b5fe	10 f1		bpl $b5f1			bpl 	_LCOutIdentifier
.d600	b600	7a		ply				ply 								; restore position
.d601	b601	4c 72 b5	jmp $b572			jmp 	_LCMainLoop
.d604	b604					_LCTokens:
.d604	b604	aa		tax				tax 								; token in X
.d605	b605	a9 e5		lda #$e5			lda 	#((KeywordSet2) & $FF)
.d607	b607	85 36		sta $36				sta 	0+zTemp0
.d609	b609	a9 b3		lda #$b3			lda 	#((KeywordSet2) >> 8)
.d60b	b60b	85 37		sta $37				sta 	1+zTemp0
.d60d	b60d	e0 82		cpx #$82			cpx 	#$82
.d60f	b60f	f0 16		beq $b627			beq 	_LCUseShift
.d611	b611	a9 25		lda #$25			lda 	#((KeywordSet1) & $FF)
.d613	b613	85 36		sta $36				sta 	0+zTemp0
.d615	b615	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d617	b617	85 37		sta $37				sta 	1+zTemp0
.d619	b619	e0 81		cpx #$81			cpx 	#$81
.d61b	b61b	f0 0a		beq $b627			beq 	_LCUseShift
.d61d	b61d	a9 d0		lda #$d0			lda 	#((KeywordSet0) & $FF)
.d61f	b61f	85 36		sta $36				sta 	0+zTemp0
.d621	b621	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d623	b623	85 37		sta $37				sta 	1+zTemp0
.d625	b625	80 01		bra $b628			bra 	_LCNoShift
.d627	b627					_LCUseShift:
.d627	b627	c8		iny				iny
.d628	b628					_LCNoShift:
.d628	b628	20 ed b6	jsr $b6ed			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d62b	b62b	b1 30		lda ($30),y			lda 	(codePtr),y
.d62d	b62d	aa		tax				tax 								; into X
.d62e	b62e					_LCFindText:
.d62e	b62e	ca		dex				dex
.d62f	b62f	10 0e		bpl $b63f			bpl 	_LCFoundText 				; found text.
.d631	b631	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d633	b633	1a		inc a				inc 	a 							; one extra for size
.d634	b634	38		sec				sec 								; one extra for checksum
.d635	b635	65 36		adc $36				adc 	zTemp0 						; go to next token
.d637	b637	85 36		sta $36				sta 	zTemp0
.d639	b639	90 f3		bcc $b62e			bcc 	_LCFindText
.d63b	b63b	e6 37		inc $37				inc 	zTemp0+1
.d63d	b63d	80 ef		bra $b62e			bra 	_LCFindText
.d63f	b63f					_LCFoundText:
.d63f	b63f	5a		phy				phy 								; save List position
.d640	b640	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d642	b642	aa		tax				tax
.d643	b643	a9 86		lda #$86			lda 	#CLIToken+$80
.d645	b645	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d648	b648	a0 02		ldy #$02			ldy 	#2
.d64a	b64a					_LCCopyToken:
.d64a	b64a	b1 36		lda ($36),y			lda 	(zTemp0),y
.d64c	b64c	20 15 b7	jsr $b715			jsr 	LCLLowerCase
.d64f	b64f	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d652	b652	c8		iny				iny
.d653	b653	ca		dex				dex
.d654	b654	d0 f4		bne $b64a			bne 	_LCCopyToken
.d656	b656	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d658	b658	f0 05		beq $b65f			beq 	_LCNoSpace
.d65a	b65a	a9 20		lda #$20			lda 	#' '
.d65c	b65c	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d65f	b65f					_LCNoSpace:
.d65f	b65f	7a		ply				ply 								; restore position.
.d660	b660	c8		iny				iny 								; consume token
.d661	b661	4c 72 b5	jmp $b572			jmp 	_LCMainLoop 				; and go around again.
.d664	b664					_LCData:
.d664	b664	48		pha				pha 								; save type $FE/$FF
.d665	b665	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d667	b667	c9 fe		cmp #$fe			cmp 	#$FE
.d669	b669	f0 22		beq $b68d			beq 	_LCHaveOpener
.d66b	b66b	a2 22		ldx #$22			ldx 	#'"'
.d66d	b66d	a9 8f		lda #$8f			lda 	#CLIData+$80
.d66f	b66f	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d672	b672	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d674	b674	d0 17		bne $b68d			bne 	_LCHaveOpener
.d676	b676	88		dey				dey 								; what precedes it ?
.d677	b677	b1 30		lda ($30),y			lda 	(codePtr),y
.d679	b679	c8		iny				iny
.d67a	b67a	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d67c	b67c	d0 0f		bne $b68d			bne 	_LCHaveOpener
.d67e	b67e	a9 09		lda #$09			lda 	#9 							; tab
.d680	b680	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d683	b683	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d685	b685	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d688	b688	a9 85		lda #$85			lda 	#CLIFComment+$80
.d68a	b68a	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d68d	b68d					_LCHaveOpener:
.d68d	b68d	8a		txa				txa 								; output prefix (# or ")
.d68e	b68e	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d691	b691	c8		iny				iny 								; get count
.d692	b692	b1 30		lda ($30),y			lda 	(codePtr),y
.d694	b694	aa		tax				tax
.d695	b695	c8		iny				iny 								; point at first character
.d696	b696					_LCOutData:
.d696	b696	b1 30		lda ($30),y			lda 	(codePtr),y
.d698	b698	c9 00		cmp #$00			cmp 	#0
.d69a	b69a	f0 03		beq $b69f			beq 	_LCNoPrint
.d69c	b69c	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d69f	b69f					_LCNoPrint:
.d69f	b69f	c8		iny				iny
.d6a0	b6a0	ca		dex				dex
.d6a1	b6a1	d0 f3		bne $b696			bne 	_LCOutData
.d6a3	b6a3	68		pla				pla 								; closing " required ?
.d6a4	b6a4	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d6a6	b6a6	d0 0f		bne $b6b7			bne 	_LCNoQuote
.d6a8	b6a8	a9 22		lda #$22			lda 	#'"'
.d6aa	b6aa	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d6ad	b6ad	ad 72 06	lda $0672			lda 	EXTTextColour
.d6b0	b6b0	29 0f		and #$0f			and 	#$0F
.d6b2	b6b2	09 90		ora #$90			ora 	#$90
.d6b4	b6b4	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d6b7	b6b7					_LCNoQuote:
.d6b7	b6b7	4c 72 b5	jmp $b572			jmp 	_LCMainLoop
.d6ba	b6ba					LCLWriteColour:
.d6ba	b6ba	cd 29 04	cmp $0429			cmp 	currentListColour 			; has the colour changed
.d6bd	b6bd	8d 29 04	sta $0429			sta 	currentListColour 			; (update it anyway)
.d6c0	b6c0	d0 01		bne $b6c3			bne 	LCLWrite 					; if different, output it
.d6c2	b6c2	60		rts				rts
.d6c3	b6c3					LCLWrite:
.d6c3	b6c3	da		phx				phx
.d6c4	b6c4	ae 1d 04	ldx $041d			ldx 	tbOffset 					; write out make ASCIIZ
.d6c7	b6c7	9d 2d 04	sta $042d,x			sta 	tokenBuffer,x
.d6ca	b6ca	9e 2e 04	stz $042e,x			stz 	tokenBuffer+1,x
.d6cd	b6cd	ee 1d 04	inc $041d			inc 	tbOffset 					; bump the position
.d6d0	b6d0	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d6d2	b6d2	30 03		bmi $b6d7			bmi 	_LCLNoColour
.d6d4	b6d4	8d 27 04	sta $0427			sta 	lcLastCharacter
.d6d7	b6d7					_LCLNoColour:
.d6d7	b6d7	fa		plx				plx
.d6d8	b6d8	60		rts				rts
.d6d9	b6d9					LCLDeleteLastSpace:
.d6d9	b6d9	48		pha				pha
.d6da	b6da	da		phx				phx
.d6db	b6db	ae 1d 04	ldx $041d			ldx 	tbOffset
.d6de	b6de	f0 0a		beq $b6ea			beq 	_LCDLSExit
.d6e0	b6e0	bd 2c 04	lda $042c,x			lda 	tokenBuffer-1,x
.d6e3	b6e3	c9 20		cmp #$20			cmp 	#' '
.d6e5	b6e5	d0 03		bne $b6ea			bne 	_LCDLSExit
.d6e7	b6e7	ce 1d 04	dec $041d			dec 	tbOffset
.d6ea	b6ea					_LCDLSExit:
.d6ea	b6ea	fa		plx				plx
.d6eb	b6eb	68		pla				pla
.d6ec	b6ec	60		rts				rts
.d6ed	b6ed					LCLCheckSpaceRequired:
.d6ed	b6ed	ad 27 04	lda $0427			lda 	lcLastCharacter 			; check last character
.d6f0	b6f0	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d6f2	b6f2	f0 1b		beq $b70f			beq 	_LCCSRSpace
.d6f4	b6f4	c9 29		cmp #$29			cmp 	#')'
.d6f6	b6f6	f0 17		beq $b70f			beq 	_LCCSRSpace
.d6f8	b6f8	c9 23		cmp #$23			cmp 	#'#'
.d6fa	b6fa	f0 13		beq $b70f			beq 	_LCCSRSpace
.d6fc	b6fc	20 15 b7	jsr $b715			jsr 	LCLLowerCase 				; saves a little effort
.d6ff	b6ff	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d701	b701	90 11		bcc $b714			bcc 	_LCCSRExit
.d703	b703	c9 3a		cmp #$3a			cmp 	#"9"+1
.d705	b705	90 08		bcc $b70f			bcc 	_LCCSRSpace
.d707	b707	c9 61		cmp #$61			cmp 	#"a"
.d709	b709	90 09		bcc $b714			bcc 	_LCCSRExit
.d70b	b70b	c9 7b		cmp #$7b			cmp 	#"z"+1
.d70d	b70d	b0 05		bcs $b714			bcs 	_LCCSRExit
.d70f	b70f					_LCCSRSpace:
.d70f	b70f	a9 20		lda #$20			lda 	#' '
.d711	b711	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d714	b714					_LCCSRExit:
.d714	b714	60		rts				rts
.d715	b715					LCLLowerCase:
.d715	b715	c9 41		cmp #$41			cmp 	#"A"
.d717	b717	90 06		bcc $b71f			bcc 	_LCLLCOut
.d719	b719	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d71b	b71b	b0 02		bcs $b71f			bcs 	_LCLLCOut
.d71d	b71d	69 20		adc #$20			adc 	#$20
.d71f	b71f					_LCLLCOut:
.d71f	b71f	60		rts				rts
.d720	b720					LCLUpperCase:
.d720	b720	c9 61		cmp #$61			cmp 	#"a"
.d722	b722	90 06		bcc $b72a			bcc 	_LCLUCOut
.d724	b724	c9 7b		cmp #$7b			cmp 	#"z"+1
.d726	b726	b0 02		bcs $b72a			bcs 	_LCLUCOut
.d728	b728	e9 1f		sbc #$1f			sbc 	#$1F
.d72a	b72a					_LCLUCOut:
.d72a	b72a	60		rts				rts
.d72b	b72b					LCLWriteNumberXA:
.d72b	b72b	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d72d	b72d					_LCLWNLoop1:
.d72d	b72d	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d72f	b72f					_LCLWNLoop2:
.d72f	b72f	48		pha				pha 								; save initial LSB
.d730	b730	38		sec				sec
.d731	b731	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d733	b733	f9 64 b7	sbc $b764,y			sbc 	_LCLWNTable,y
.d736	b736	48		pha				pha
.d737	b737	8a		txa				txa
.d738	b738	f9 65 b7	sbc $b765,y			sbc 	_LCLWNTable+1,y
.d73b	b73b	90 07		bcc $b744			bcc 	_LCLWNUnderflow
.d73d	b73d	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d73f	b73f	aa		tax				tax 								; update X
.d740	b740	68		pla				pla 								; restore A
.d741	b741	7a		ply				ply 								; throw original
.d742	b742	80 eb		bra $b72f			bra 	_LCLWNLoop2 				; try again.
.d744	b744					_LCLWNUnderflow:
.d744	b744	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d746	b746	d0 06		bne $b74e			bne 	_LCLWNOut
.d748	b748	ad 1d 04	lda $041d			lda 	tbOffset 					; suppress leading zeroes
.d74b	b74b	3a		dec a				dec 	a
.d74c	b74c	f0 04		beq $b752			beq 	_LCLWNNext
.d74e	b74e					_LCLWNOut:
.d74e	b74e	98		tya				tya
.d74f	b74f	20 5e b7	jsr $b75e			jsr 	_LCLWNOutDigit
.d752	b752					_LCLWNNext:
.d752	b752	7a		ply				ply 							 	; restore original value.
.d753	b753	68		pla				pla
.d754	b754	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d756	b756	c8		iny				iny
.d757	b757	c8		iny				iny
.d758	b758	84 37		sty $37				sty 	zTemp0+1
.d75a	b75a	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d75c	b75c	d0 cf		bne $b72d			bne 	_LCLWNLoop1
.d75e	b75e					_LCLWNOutDigit:
.d75e	b75e	09 30		ora #$30			ora 	#'0'
.d760	b760	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d763	b763	60		rts				rts
.d764	b764					_LCLWNTable:
>d764	b764	10 27						.word 	10000
>d766	b766	e8 03						.word 	1000
>d768	b768	64 00						.word 	100
>d76a	b76a	0a 00						.word 	10
.d76c	b76c					TOKSearchTable:
.d76c	b76c	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d76e	b76e	85 36		sta $36				sta 	zTemp0
.d770	b770	a0 00		ldy #$00			ldy 	#0
.d772	b772	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d774	b774	85 38		sta $38				sta 	zTemp1
.d776	b776					_TSTLoop:
.d776	b776	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d778	b778	30 49		bmi $b7c3			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d77a	b77a	f0 2e		beq $b7aa			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d77c	b77c	c8		iny				iny 								; get the hash
.d77d	b77d	b1 36		lda ($36),y			lda 	(zTemp0),y
.d77f	b77f	88		dey				dey
.d780	b780	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d783	b783	d0 25		bne $b7aa			bne 	_TSTNext
.d785	b785	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d788	b788	38		sec				sec
.d789	b789	ed 00 04	sbc $0400			sbc 	identStart
.d78c	b78c	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d78e	b78e	d0 1a		bne $b7aa			bne 	_TSTNext
.d790	b790	5a		phy				phy 								; save Y , we might fail to match.
.d791	b791	c8		iny				iny 								; point to text
.d792	b792	c8		iny				iny
.d793	b793	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d796	b796					_TSTCompareName:
.d796	b796	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; compare text.
.d799	b799	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d79b	b79b	d0 0c		bne $b7a9			bne 	_TSTNextPullY 				; fail, pullY and do next
.d79d	b79d	e8		inx				inx
.d79e	b79e	c8		iny				iny
.d79f	b79f	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d7a2	b7a2	d0 f2		bne $b796			bne 	_TSTCompareName
.d7a4	b7a4	7a		ply				ply 								; throw Y
.d7a5	b7a5	a5 38		lda $38				lda 	zTemp1 						; get token #
.d7a7	b7a7	38		sec				sec 								; return with CS = passed.
.d7a8	b7a8	60		rts				rts
.d7a9	b7a9					_TSTNextPullY:
.d7a9	b7a9	7a		ply				ply 								; restore current, fall through.
.d7aa	b7aa					_TSTNext:
.d7aa	b7aa	e6 38		inc $38				inc 	zTemp1 						; token counter
.d7ac	b7ac	98		tya				tya
.d7ad	b7ad	18		clc				clc
.d7ae	b7ae	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d7b0	b7b0	1a		inc a				inc 	a 							; +1
.d7b1	b7b1	1a		inc a				inc 	a 							; +2
.d7b2	b7b2	a8		tay				tay
.d7b3	b7b3	10 c1		bpl $b776			bpl 	_TSTLoop 					; if Y < $80 loop back
.d7b5	b7b5	98		tya				tya 								; add Y to zTemp0 and reset Y
.d7b6	b7b6	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d7b8	b7b8	18		clc				clc  								; but have tables > 255 bytes
.d7b9	b7b9	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d7bb	b7bb	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d7bd	b7bd	90 b7		bcc $b776			bcc 	_TSTLoop
.d7bf	b7bf	e6 37		inc $37				inc 	zTemp0+1
.d7c1	b7c1	80 b3		bra $b776			bra 	_TSTLoop
.d7c3	b7c3					_TSTFail:
.d7c3	b7c3	18		clc				clc
.d7c4	b7c4	60		rts				rts
.d7c5	b7c5					Export_TKTokeniseLine:
.d7c5	b7c5	20 92 b9	jsr $b992			jsr 	LCLFixLineBufferCase 		; fix line case
.d7c8	b7c8	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d7ca	b7ca	8d 2a 04	sta $042a			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d7cd	b7cd	9c 2b 04	stz $042b			stz 	tokenLineNumber
.d7d0	b7d0	9c 2c 04	stz $042c			stz 	tokenLineNumber+1
.d7d3	b7d3	a2 ff		ldx #$ff			ldx 	#$FF
.d7d5	b7d5					_TKFindFirst:
.d7d5	b7d5	e8		inx				inx
.d7d6	b7d6	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d7d9	b7d9	f0 62		beq $b83d			beq 	_TKExit
.d7db	b7db	c9 20		cmp #$20			cmp 	#' '
.d7dd	b7dd	90 f6		bcc $b7d5			bcc 	_TKFindFirst
.d7df	b7df	c9 30		cmp #$30			cmp 	#'0'
.d7e1	b7e1	90 07		bcc $b7ea			bcc 	_TKNoLineNumber
.d7e3	b7e3	c9 3a		cmp #$3a			cmp 	#'9'+1
.d7e5	b7e5	b0 03		bcs $b7ea			bcs 	_TKNoLineNumber
.d7e7	b7e7	20 bc b9	jsr $b9bc			jsr 	TOKExtractLineNumber
.d7ea	b7ea					_TKNoLineNumber:
.d7ea	b7ea					_TKTokeniseLoop:
.d7ea	b7ea	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d7ed	b7ed	f0 4e		beq $b83d			beq 	_TKExit
.d7ef	b7ef	e8		inx				inx
.d7f0	b7f0	c9 20		cmp #$20			cmp 	#' '
.d7f2	b7f2	f0 f6		beq $b7ea			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d7f4	b7f4	ca		dex				dex 								; undo last get, A contains character, X is position.
.d7f5	b7f5	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d7f7	b7f7	f0 68		beq $b861			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d7f9	b7f9	c9 41		cmp #$41			cmp 	#'A'
.d7fb	b7fb	90 04		bcc $b801			bcc 	_TKTokenisePunctuation
.d7fd	b7fd	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d7ff	b7ff	90 60		bcc $b861			bcc 	_TKTokeniseIdentifier
.d801	b801					_TKTokenisePunctuation:
.d801	b801	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d803	b803	f0 2e		beq $b833			beq 	_TKString
.d805	b805	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d807	b807	f0 2f		beq $b838			beq 	_TKHexConstant
.d809	b809	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d80b	b80b	f0 36		beq $b843			beq 	_TKCheckDouble
.d80d	b80d	c9 3e		cmp #$3e			cmp 	#'>'
.d80f	b80f	f0 32		beq $b843			beq 	_TKCheckDouble
.d811	b811					_TKStandardPunctuation:
.d811	b811	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d814	b814	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d816	b816	90 0e		bcc $b826			bcc 	_TKNoShift
.d818	b818	48		pha				pha 								; save. we are about to convert this punctuation token from
.d819	b819	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d81b	b81b	85 36		sta $36				sta 	zTemp0
.d81d	b81d	68		pla				pla
.d81e	b81e	29 20		and #$20			and 	#32 						; bit 5
.d820	b820	4a		lsr a				lsr 	a 							; shift into bit 3
.d821	b821	4a		lsr a				lsr 	a
.d822	b822	05 36		ora $36				ora 	zTemp0
.d824	b824	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d826	b826					_TKNoShift:
.d826	b826	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; write the punctuation character
.d829	b829	e8		inx				inx 								; consume the character
.d82a	b82a	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d82c	b82c	d0 bc		bne $b7ea			bne 	_TKTokeniseLoop 			; and loop round again.
.d82e	b82e	20 f4 b8	jsr $b8f4			jsr 	TOKCheckComment 			; comment checl
.d831	b831	80 b7		bra $b7ea			bra 	_TKTokeniseLoop
.d833	b833					_TKString:
.d833	b833	20 21 b9	jsr $b921			jsr 	TOKTokenString
.d836	b836	80 b2		bra $b7ea			bra 	_TKTokeniseLoop
.d838	b838					_TKHexConstant:
.d838	b838	20 5c b9	jsr $b95c			jsr 	TOKHexConstant
.d83b	b83b	80 ad		bra $b7ea			bra 	_TKTokeniseLoop
.d83d	b83d	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d83f	b83f	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d842	b842	60		rts				rts
.d843	b843					_TKCheckDouble:
.d843	b843	bd 2b 05	lda $052b,x			lda 	lineBuffer+1,x 				; get next character
.d846	b846	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d848	b848	90 c7		bcc $b811			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d84a	b84a	c9 3f		cmp #$3f			cmp 	#'>'+1
.d84c	b84c	b0 c3		bcs $b811			bcs 	_TKStandardPunctuation
.d84e	b84e	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d851	b851	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d853	b853	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d854	b854	7d 2b 05	adc $052b,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d857	b857	38		sec				sec
.d858	b858	e9 3c		sbc #$3c			sbc 	#'<'
.d85a	b85a	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; this is in the range 0-7
.d85d	b85d	e8		inx				inx 								; consume both
.d85e	b85e	e8		inx				inx
.d85f	b85f	80 89		bra $b7ea			bra 	_TKTokeniseLoop
.d861	b861					_TKTokeniseIdentifier:
.d861	b861	8e 00 04	stx $0400			stx 	identStart 					; save start
.d864	b864	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d867	b867					_TKCheckLoop:
.d867	b867	e8		inx				inx 								; look at next, we know first is identifier already.
.d868	b868	bd 2a 05	lda $052a,x			lda  	lineBuffer,x
.d86b	b86b	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d86d	b86d	f0 f8		beq $b867			beq 	_TKCheckLoop
.d86f	b86f	c9 30		cmp #$30			cmp	 	#"0"
.d871	b871	90 0c		bcc $b87f			bcc 	_TKEndIdentifier
.d873	b873	c9 3a		cmp #$3a			cmp 	#"9"+1
.d875	b875	90 f0		bcc $b867			bcc 	_TKCheckLoop
.d877	b877	c9 41		cmp #$41			cmp	 	#"A"
.d879	b879	90 04		bcc $b87f			bcc 	_TKEndIdentifier
.d87b	b87b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d87d	b87d	90 e8		bcc $b867			bcc 	_TKCheckLoop
.d87f	b87f					_TKEndIdentifier:
.d87f	b87f	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d882	b882	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d884	b884	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d886	b886	f0 06		beq $b88e			beq 	_TKHasTypeCharacter
.d888	b888	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d88a	b88a	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d88c	b88c	d0 07		bne $b895			bne 	_TKNoTypeCharacter
.d88e	b88e					_TKHasTypeCharacter:
.d88e	b88e	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d891	b891	e8		inx				inx 								; consume the type character
.d892	b892	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d895	b895					_TKNoTypeCharacter:
.d895	b895	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d897	b897	d0 09		bne $b8a2			bne 	_TKNoArray
.d899	b899	e8		inx				inx 								; skip the (
.d89a	b89a	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d89d	b89d	09 04		ora #$04			ora 	#$04
.d89f	b89f	8d 04 04	sta $0404			sta 	identTypeByte
.d8a2	b8a2					_TKNoArray:
.d8a2	b8a2	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d8a5	b8a5	20 7d b9	jsr $b97d			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d8a8	b8a8	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d8aa	b8aa	a9 d0		lda #$d0			lda 	#(KeywordSet0) & $FF
.d8ac	b8ac	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8af	b8af	a2 00		ldx #$00			ldx 	#0
.d8b1	b8b1	b0 1f		bcs $b8d2			bcs 	_TKFoundToken
.d8b3	b8b3	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d8b5	b8b5	a9 25		lda #$25			lda 	#(KeywordSet1) & $FF
.d8b7	b8b7	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8ba	b8ba	a2 81		ldx #$81			ldx 	#$81
.d8bc	b8bc	b0 14		bcs $b8d2			bcs 	_TKFoundToken
.d8be	b8be	a0 b3		ldy #$b3			ldy 	#(KeywordSet2) >> 8
.d8c0	b8c0	a9 e5		lda #$e5			lda 	#(KeywordSet2) & $FF
.d8c2	b8c2	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8c5	b8c5	a2 82		ldx #$82			ldx 	#$82
.d8c7	b8c7	b0 09		bcs $b8d2			bcs 	_TKFoundToken
.d8c9	b8c9	20 0d ba	jsr $ba0d			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d8cc	b8cc	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8cf	b8cf	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop 			; and go round again.
.d8d2	b8d2					_TKFoundToken:
.d8d2	b8d2	48		pha				pha 								; save token
.d8d3	b8d3	8a		txa				txa 								; shift in X, is there one ?
.d8d4	b8d4	f0 03		beq $b8d9			beq 	_TKNoTShift
.d8d6	b8d6	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; if so, write it out
.d8d9	b8d9					_TKNoTShift:
.d8d9	b8d9	68		pla				pla 								; restore and write token
.d8da	b8da	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d8dd	b8dd	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d8df	b8df	d0 0d		bne $b8ee			bne 	_TKNotRem 			 		; not shifted ?
.d8e1	b8e1	c9 d3		cmp #$d3			cmp 	#KWD_REM
.d8e3	b8e3	d0 09		bne $b8ee			bne 	_TKNotRem
.d8e5	b8e5	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d8e8	b8e8	20 f4 b8	jsr $b8f4			jsr 	TOKCheckComment
.d8eb	b8eb	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop
.d8ee	b8ee					_TKNotRem:
.d8ee	b8ee	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8f1	b8f1	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop 			; and go round again.
.d8f4	b8f4					TOKCheckComment:
.d8f4	b8f4	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; skip over space
.d8f7	b8f7	e8		inx				inx
.d8f8	b8f8	c9 20		cmp #$20			cmp 	#' '
.d8fa	b8fa	f0 f8		beq $b8f4			beq 	TOKCheckComment
.d8fc	b8fc	ca		dex				dex 								; first non space character
.d8fd	b8fd	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d8ff	b8ff	f0 1f		beq $b920			beq 	_TOKCCExit 					; then we are okay
.d901	b901	c9 00		cmp #$00			cmp 	#0 							; EOL
.d903	b903	f0 1b		beq $b920			beq 	_TOKCCExit 					; then we are okay
.d905	b905	da		phx				phx
.d906	b906					_TOKCCLowerCase:
.d906	b906	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d909	b909	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d90b	b90b	90 09		bcc $b916			bcc 	_TOKKCNotUC
.d90d	b90d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d90f	b90f	b0 05		bcs $b916			bcs 	_TOKKCNotUC
.d911	b911	49 20		eor #$20			eor 	#$20
.d913	b913	9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.d916	b916					_TOKKCNotUC:
.d916	b916	e8		inx				inx
.d917	b917	c9 00		cmp #$00			cmp 	#0
.d919	b919	d0 eb		bne $b906			bne 	_TOKCCLowerCase
.d91b	b91b	fa		plx				plx
.d91c	b91c	ca		dex				dex 								; tokenise string expects initial skip.
.d91d	b91d	20 21 b9	jsr $b921			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d920	b920					_TOKCCExit:
.d920	b920	60		rts				rts
.d921	b921					TOKTokenString:
.d921	b921	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d923	b923	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d926	b926	e8		inx				inx									; start of quoted string.
.d927	b927	da		phx				phx 								; push start of string on top
.d928	b928	ca		dex				dex 								; because we pre-increment
.d929	b929					_TSFindEnd:
.d929	b929	e8		inx				inx
.d92a	b92a	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character
.d92d	b92d	f0 04		beq $b933			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d92f	b92f	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d931	b931	d0 f6		bne $b929			bne 	_TSFindEnd
.d933	b933					_TSEndOfString:
.d933	b933	7a		ply				ply  								; so now Y is first character, X is character after end.
.d934	b934	48		pha				pha 								; save terminating character
.d935	b935	20 3d b9	jsr $b93d			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d938	b938	68		pla				pla 								; terminating character
.d939	b939	f0 01		beq $b93c			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d93b	b93b	e8		inx				inx
.d93c	b93c					_TSNotQuote:
.d93c	b93c	60		rts				rts
.d93d	b93d					TOKWriteBlockXY:
.d93d	b93d	86 36		stx $36				stx 	zTemp0 						; save end character
.d93f	b93f	98		tya				tya 								; use 2's complement to work out the byte size
.d940	b940	49 ff		eor #$ff			eor 	#$FF
.d942	b942	38		sec				sec
.d943	b943	65 36		adc $36				adc 	zTemp0
.d945	b945	1a		inc a				inc 	a 							; one extra for NULL
.d946	b946	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d949	b949					_TOBlockLoop:
.d949	b949	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d94b	b94b	f0 09		beq $b956			beq 	_TOBlockExit
.d94d	b94d	b9 2a 05	lda $052a,y			lda 	lineBuffer,y 				; write byte out.
.d950	b950	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d953	b953	c8		iny				iny
.d954	b954	80 f3		bra $b949			bra 	_TOBlockLoop
.d956	b956					_TOBlockExit:
.d956	b956	a9 00		lda #$00			lda 	#0 							; add NULL.
.d958	b958	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d95b	b95b	60		rts				rts
.d95c	b95c					TOKHexConstant:
.d95c	b95c	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d95e	b95e	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d961	b961	e8		inx				inx									; start of quoted string.
.d962	b962	da		phx				phx 								; push start of constant on top
.d963	b963	ca		dex				dex
.d964	b964					_THFindLoop:
.d964	b964	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d965	b965	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; the hex constant is.
.d968	b968	c9 30		cmp #$30			cmp 	#"0"
.d96a	b96a	90 0c		bcc $b978			bcc 	_THFoundEnd
.d96c	b96c	c9 3a		cmp #$3a			cmp 	#"9"+1
.d96e	b96e	90 f4		bcc $b964			bcc 	_THFindLoop
.d970	b970	c9 41		cmp #$41			cmp 	#"A"
.d972	b972	90 04		bcc $b978			bcc 	_THFoundEnd
.d974	b974	c9 47		cmp #$47			cmp 	#"F"+1
.d976	b976	90 ec		bcc $b964			bcc 	_THFindLoop
.d978	b978					_THFoundEnd:
.d978	b978	7a		ply				ply 								; restore start
.d979	b979	20 3d b9	jsr $b93d			jsr 	TOKWriteBlockXY 			; output the block
.d97c	b97c	60		rts				rts
.d97d	b97d					TOKCalculateHash:
.d97d	b97d	da		phx				phx
.d97e	b97e	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d981	b981	a9 00		lda #$00			lda 	#0
.d983	b983					_TCHLoop:
.d983	b983	18		clc				clc
.d984	b984	7d 2a 05	adc $052a,x			adc 	lineBuffer,x
.d987	b987	e8		inx				inx
.d988	b988	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d98b	b98b	d0 f6		bne $b983			bne 	_TCHLoop
.d98d	b98d	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d990	b990	fa		plx				plx
.d991	b991	60		rts				rts
.d992	b992					LCLFixLineBufferCase:
.d992	b992	a2 00		ldx #$00			ldx 	#0
.d994	b994					_FLBCLoop:
.d994	b994	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next character
.d997	b997	f0 22		beq $b9bb			beq 	_FLBCExit 					; end of string.
.d999	b999	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d99b	b99b	f0 11		beq $b9ae			beq 	_FLBCInQuotes
.d99d	b99d	e8		inx				inx
.d99e	b99e	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d9a0	b9a0	90 f2		bcc $b994			bcc 	_FLBCLoop
.d9a2	b9a2	c9 7b		cmp #$7b			cmp 	#'z'+1
.d9a4	b9a4	b0 ee		bcs $b994			bcs 	_FLBCLoop
.d9a6	b9a6	38		sec				sec 								; make U/C
.d9a7	b9a7	e9 20		sbc #$20			sbc 	#32
.d9a9	b9a9	9d 29 05	sta $0529,x			sta	 	lineBuffer-1,x 				; write back
.d9ac	b9ac	80 e6		bra $b994			bra 	_FLBCLoop
.d9ae	b9ae					_FLBCInQuotes:
.d9ae	b9ae	e8		inx				inx 								; advance
.d9af	b9af	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next
.d9b2	b9b2	f0 07		beq $b9bb			beq 	_FLBCExit 					; exit on EOS
.d9b4	b9b4	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d9b6	b9b6	d0 f6		bne $b9ae			bne 	_FLBCInQuotes
.d9b8	b9b8	e8		inx				inx 								; skip over it
.d9b9	b9b9	80 d9		bra $b994			bra 	_FLBCLoop
.d9bb	b9bb					_FLBCExit:
.d9bb	b9bb	60		rts				rts
.d9bc	b9bc					TOKExtractLineNumber:
.d9bc	b9bc	ad 2c 04	lda $042c			lda 	tokenLineNumber+1 			; push current value on stack
.d9bf	b9bf	48		pha				pha
.d9c0	b9c0	ad 2b 04	lda $042b			lda 	tokenLineNumber
.d9c3	b9c3	48		pha				pha
.d9c4	b9c4	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 2
.d9c7	b9c7	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 4
.d9ca	b9ca	18		clc				clc 								; add stacked value
.d9cb	b9cb	68		pla				pla
.d9cc	b9cc	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d9cf	b9cf	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d9d2	b9d2	68		pla				pla
.d9d3	b9d3	6d 2c 04	adc $042c			adc 	tokenLineNumber+1
.d9d6	b9d6	8d 2c 04	sta $042c			sta 	tokenLineNumber+1 			; line # x 5
.d9d9	b9d9	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 10
.d9dc	b9dc	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get and consume character
.d9df	b9df	e8		inx				inx
.d9e0	b9e0	29 0f		and #$0f			and 	#15 						; add to line #
.d9e2	b9e2	18		clc				clc
.d9e3	b9e3	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d9e6	b9e6	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d9e9	b9e9	90 03		bcc $b9ee			bcc 	_TLENNoCarry
.d9eb	b9eb	ee 2c 04	inc $042c			inc 	tokenLineNumber+1
.d9ee	b9ee					_TLENNoCarry:
.d9ee	b9ee	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; more digits ?
.d9f1	b9f1	c9 30		cmp #$30			cmp 	#'0'
.d9f3	b9f3	90 04		bcc $b9f9			bcc 	_TLENExit
.d9f5	b9f5	c9 3a		cmp #$3a			cmp 	#'9'+1
.d9f7	b9f7	90 c3		bcc $b9bc			bcc 	TOKExtractLineNumber
.d9f9	b9f9					_TLENExit:
.d9f9	b9f9	60		rts				rts
.d9fa	b9fa					_LCLNTimes2:
.d9fa	b9fa	0e 2b 04	asl $042b			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d9fd	b9fd	2e 2c 04	rol $042c			rol 	tokenLineNumber+1
.da00	ba00	60		rts				rts
.da01	ba01					TOKWriteByte:
.da01	ba01	da		phx				phx
.da02	ba02	ae 2a 04	ldx $042a			ldx 	tokenOffset 				; next slot to write to
.da05	ba05	9d 2a 04	sta $042a,x			sta 	tokenOffset,x 				; write byte out
.da08	ba08	ee 2a 04	inc $042a			inc 	tokenOffset 				; advance slot.
.da0b	ba0b	fa		plx				plx
.da0c	ba0c	60		rts				rts
.da0d	ba0d					TOKCheckCreateVariableRecord:
.da0d	ba0d	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da0f	ba0f	85 36		sta $36				sta 	0+zTemp0
.da11	ba11	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da13	ba13	85 37		sta $37				sta 	1+zTemp0
.da15	ba15					_CCVSearch:
.da15	ba15	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da17	ba17	f0 2c		beq $ba45			beq 	_CCVFail
.da19	ba19	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da1b	ba1b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da1d	ba1d	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da20	ba20	d0 16		bne $ba38			bne 	_CCVNext
.da22	ba22	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da24	ba24	ae 00 04	ldx $0400			ldx 	identStart
.da27	ba27					_CCVCompare:
.da27	ba27	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da2a	ba2a	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da2c	ba2c	e8		inx				inx 								; advance pointers
.da2d	ba2d	c8		iny				iny
.da2e	ba2e	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da2f	ba2f	d0 07		bne $ba38			bne 	_CCVNext  					; didn't match go to next.
.da31	ba31	90 f4		bcc $ba27			bcc 	_CCVCompare 				; not finished yet.
.da33	ba33	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da36	ba36	f0 41		beq $ba79			beq 	_CCVFound 					; yes, we were successful
.da38	ba38					_CCVNext:
.da38	ba38	18		clc				clc 								; go to next record.
.da39	ba39	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da3b	ba3b	65 36		adc $36				adc 	zTemp0
.da3d	ba3d	85 36		sta $36				sta 	zTemp0
.da3f	ba3f	90 d4		bcc $ba15			bcc 	_CCVSearch
.da41	ba41	e6 37		inc $37				inc 	zTemp0+1
.da43	ba43	80 d0		bra $ba15			bra 	_CCVSearch
.da45	ba45					_CCVFail:
.da45	ba45	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da47	ba47	ad 03 04	lda $0403			lda 	identHash
.da4a	ba4a	91 36		sta ($36),y			sta 	(zTemp0),y
.da4c	ba4c	c8		iny				iny 								; offset 2 is the type byte
.da4d	ba4d	ad 04 04	lda $0404			lda 	identTypeByte
.da50	ba50	91 36		sta ($36),y			sta 	(zTemp0),y
.da52	ba52	c8		iny				iny
.da53	ba53					_CCVData:
.da53	ba53	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.da55	ba55	91 36		sta ($36),y			sta 	(zTemp0),y
.da57	ba57	c8		iny				iny
.da58	ba58	c0 08		cpy #$08			cpy 	#8
.da5a	ba5a	90 f7		bcc $ba53			bcc 	_CCVData
.da5c	ba5c	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.da5f	ba5f					_CCVCopyName:
.da5f	ba5f	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.da62	ba62	91 36		sta ($36),y			sta 	(zTemp0),y
.da64	ba64	e8		inx				inx
.da65	ba65	c8		iny				iny
.da66	ba66	ec 02 04	cpx $0402			cpx 	identTypeEnd
.da69	ba69	d0 f4		bne $ba5f			bne 	_CCVCopyName
.da6b	ba6b	98		tya				tya 								; patch offset
.da6c	ba6c	92 36		sta ($36)			sta 	(zTemp0)
.da6e	ba6e	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.da70	ba70	91 36		sta ($36),y			sta 	(zTemp0),y
.da72	ba72	88		dey				dey
.da73	ba73	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.da75	ba75	09 80		ora #$80			ora 	#$80
.da77	ba77	91 36		sta ($36),y			sta 	(zTemp0),y
.da79	ba79					_CCVFound:
.da79	ba79	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.da7b	ba7b	38		sec				sec
.da7c	ba7c	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.da7e	ba7e	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.da80	ba80	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.da83	ba83	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.da85	ba85	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.da88	ba88	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.da89	ba89					SNDCheckChannel:
.da89	ba89	aa		tax				tax
.da8a	ba8a	bd 3b 08	lda $083b,x			lda 	SNDTimeLeft,x 				; currently playing a note
.da8d	ba8d	d0 38		bne $bac7			bne 	_SNDCCExit
.da8f	ba8f	da		phx				phx 								; save current channel
.da90	ba90	8a		txa				txa 								; put in A
.da91	ba91	20 0d bb	jsr $bb0d			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.da94	ba94	68		pla				pla 								; channel # in A
.da95	ba95	90 30		bcc $bac7			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.da97	ba97	a8		tay				tay 								; Y is the channel #
.da98	ba98	bd 30 07	lda $0730,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.da9b	ba9b	99 2f 08	sta $082f,y			sta 	SNDPitchLow,y
.da9e	ba9e	bd 31 07	lda $0731,x			lda 	SNDQueue+2,x
.daa1	baa1	99 33 08	sta $0833,y			sta 	SNDPitchHigh,y
.daa4	baa4	bd 32 07	lda $0732,x			lda 	SNDQueue+3,x
.daa7	baa7	99 37 08	sta $0837,y			sta 	SNDVolume,y
.daaa	baaa	bd 33 07	lda $0733,x			lda 	SNDQueue+4,x
.daad	baad	99 3b 08	sta $083b,y			sta 	SNDTimeLeft,y
.dab0	bab0	bd 34 07	lda $0734,x			lda 	SNDQueue+5,x
.dab3	bab3	99 3f 08	sta $083f,y			sta 	SNDAdjustLow,y
.dab6	bab6	bd 35 07	lda $0735,x			lda 	SNDQueue+6,x
.dab9	bab9	99 43 08	sta $0843,y			sta 	SNDAdjustHigh,y
.dabc	babc	5a		phy				phy 								; save channel #
.dabd	babd	20 27 bb	jsr $bb27			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.dac0	bac0	ce 2e 07	dec $072e			dec 	SNDLength 					; reduce the queue length.
.dac3	bac3	68		pla				pla
.dac4	bac4	20 c8 ba	jsr $bac8			jsr 	SNDUpdateNote 				; update channel A
.dac7	bac7					_SNDCCExit:
.dac7	bac7	60		rts				rts
.dac8	bac8					SNDUpdateNote:
.dac8	bac8	aa		tax				tax 								; so we can access records
.dac9	bac9	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.daca	baca	0a		asl a				asl 	a
.dacb	bacb	0a		asl a				asl 	a
.dacc	bacc	0a		asl a				asl 	a
.dacd	bacd	0a		asl a				asl 	a
.dace	bace	8d 2d 07	sta $072d			sta 	SNDChannelBits
.dad1	bad1	bd 3b 08	lda $083b,x			lda 	SNDTimeLeft,x 				; are we silent
.dad4	bad4	f0 2e		beq $bb04			beq 	_SNDUNIsSilent
.dad6	bad6	ad 2d 07	lda $072d			lda 	SNDChannelBits 				; push channel bits on stack
.dad9	bad9	48		pha				pha
.dada	bada	bd 2f 08	lda $082f,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.dadd	badd	29 0f		and #$0f			and 	#$0F
.dadf	badf	0d 2d 07	ora $072d			ora 	SNDChannelBits 				; set channel bits
.dae2	bae2	09 80		ora #$80			ora 	#$80 						; write to pitch register
.dae4	bae4	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.dae7	bae7	bd 33 08	lda $0833,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.daea	baea	8d 2d 07	sta $072d			sta 	SNDChannelBits
.daed	baed	bd 2f 08	lda $082f,x			lda 	SNDPitchLow,x
.daf0	baf0	4e 2d 07	lsr $072d			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.daf3	baf3	6a		ror a				ror 	a
.daf4	baf4	4e 2d 07	lsr $072d			lsr 	SNDChannelBits
.daf7	baf7	6a		ror a				ror 	a
.daf8	baf8	4a		lsr a				lsr 	a 							; put in bits 0-5
.daf9	baf9	4a		lsr a				lsr 	a
.dafa	bafa	20 71 bb	jsr $bb71			jsr 	SNDWritePorts 				; write as rest of pitch register
.dafd	bafd	68		pla				pla
.dafe	bafe	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db00	bb00	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.db03	bb03	60		rts				rts
.db04	bb04					_SNDUNIsSilent:
.db04	bb04	ad 2d 07	lda $072d			lda 	SNDChannelBits 				; channel bits
.db07	bb07	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db09	bb09	20 71 bb	jsr $bb71			jsr 	SNDWritePorts 				; write to the ports
.db0c	bb0c	60		rts				rts
.db0d	bb0d					SNDFindNextNoteForA:
.db0d	bb0d	ac 2e 07	ldy $072e			ldy 	SNDLength 					; queue size into Y
.db10	bb10	f0 13		beq $bb25			beq 	_SNDFNNFail 				; queue empty.
.db12	bb12	a2 00		ldx #$00			ldx 	#0
.db14	bb14					_SNDFNNSearch:
.db14	bb14	dd 2f 07	cmp $072f,x			cmp 	SNDQueue,x 					; does it match the channel
.db17	bb17	38		sec				sec
.db18	bb18	f0 0c		beq $bb26			beq 	_SNDFNNExit 				; if so exit with CS.
.db1a	bb1a	e8		inx				inx 								; next queue slot.
.db1b	bb1b	e8		inx				inx
.db1c	bb1c	e8		inx				inx
.db1d	bb1d	e8		inx				inx
.db1e	bb1e	e8		inx				inx
.db1f	bb1f	e8		inx				inx
.db20	bb20	e8		inx				inx
.db21	bb21	e8		inx				inx
.db22	bb22	88		dey				dey 								; done the whole queue
.db23	bb23	d0 ef		bne $bb14			bne 	_SNDFNNSearch 				; no, go back.
.db25	bb25					_SNDFNNFail:
.db25	bb25	18		clc				clc
.db26	bb26					_SNDFNNExit:
.db26	bb26	60		rts				rts
.db27	bb27					SNDDeleteXFromQueue:
.db27	bb27	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db29	bb29	f0 09		beq $bb34			beq 	_SNDDXExit
.db2b	bb2b	bd 37 07	lda $0737,x			lda 	SNDQueue+8,x
.db2e	bb2e	9d 2f 07	sta $072f,x			sta 	SNDQueue,x
.db31	bb31	e8		inx				inx
.db32	bb32	80 f3		bra $bb27			bra 	SNDDeleteXFromQueue
.db34	bb34					_SNDDXExit:
.db34	bb34	60		rts				rts
.072d						SNDChannelBits:
>072d								.fill 	1
.db35	bb35					SNDQueueRequest:
.db35	bb35	86 36		stx $36				stx 	zTemp0						; save queue address
.db37	bb37	84 37		sty $37				sty 	zTemp0+1
.db39	bb39	ae 2e 07	ldx $072e			ldx 	SNDLength 					; queue is full, can't take any more.
.db3c	bb3c	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db3e	bb3e	f0 21		beq $bb61			beq 	_SNDQRExit
.db40	bb40	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db42	bb42	48		pha				pha
.db43	bb43	8a		txa				txa  								; get offset in queue buffer/
.db44	bb44	0a		asl a				asl 	a
.db45	bb45	0a		asl a				asl 	a
.db46	bb46	0a		asl a				asl 	a
.db47	bb47	aa		tax				tax
.db48	bb48	68		pla				pla 								; get back and push again
.db49	bb49	48		pha				pha
.db4a	bb4a	9d 2f 07	sta $072f,x			sta 	SNDQueue+0,x 				; save the channel #
.db4d	bb4d	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db4f	bb4f					_SNDQCopy:
.db4f	bb4f	b1 36		lda ($36),y			lda 	(zTemp0),y
.db51	bb51	e8		inx				inx
.db52	bb52	c8		iny				iny
.db53	bb53	9d 2f 07	sta $072f,x			sta 	SNDQueue,x
.db56	bb56	c0 06		cpy #$06			cpy 	#6
.db58	bb58	d0 f5		bne $bb4f			bne 	_SNDQCopy
.db5a	bb5a	ee 2e 07	inc $072e			inc 	SNDLength 					; bump queue length.
.db5d	bb5d	68		pla				pla 								; get channel # back
.db5e	bb5e	20 89 ba	jsr $ba89			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.db61	bb61					_SNDQRExit:
.db61	bb61	60		rts				rts
.db62	bb62					SNDSilenceChannel:
.db62	bb62	aa		tax				tax 								; zero time left.
.db63	bb63	9e 3b 08	stz $083b,x			stz 	SNDTimeLeft,x
.db66	bb66	0a		asl a				asl 	a 							; shift into position
.db67	bb67	0a		asl a				asl 	a
.db68	bb68	0a		asl a				asl 	a
.db69	bb69	0a		asl a				asl 	a
.db6a	bb6a	0a		asl a				asl 	a
.db6b	bb6b	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.db6d	bb6d	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.db70	bb70	60		rts				rts
.db71	bb71					SNDWritePorts:
.db71	bb71	da		phx				phx 								; save X
.db72	bb72	a6 01		ldx $01				ldx 	1 							; save I/O status
.db74	bb74	64 01		stz $01				stz 	1 							; access I/O page 0
.db76	bb76	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.db79	bb79	8d 10 d6	sta $d610			sta 	$D610
.db7c	bb7c	86 01		stx $01				stx 	1 							; restore I/O
.db7e	bb7e	fa		plx				plx 								; restore X
.db7f	bb7f	60		rts				rts
.db80	bb80					Export_SNDCommand:
.db80	bb80	da		phx				phx 								; save XY
.db81	bb81	5a		phy				phy
.db82	bb82	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.db84	bb84	f0 1d		beq $bba3			beq 	_SNDInitialise
.db86	bb86	90 28		bcc $bbb0			bcc 	_SNDExit
.db88	bb88	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.db8a	bb8a	f0 17		beq $bba3			beq 	_SNDSilence
.db8c	bb8c	b0 22		bcs $bbb0			bcs 	_SNDExit
.db8e	bb8e	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.db90	bb90	b0 09		bcs $bb9b			bcs 	_SNDQueryPlay
.db92	bb92	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.db94	bb94	b0 1a		bcs $bbb0			bcs 	_SNDExit
.db96	bb96	20 35 bb	jsr $bb35			jsr 	SNDQueueRequest
.db99	bb99	80 15		bra $bbb0			bra 	_SNDExit
.db9b	bb9b					_SNDQueryPlay:
.db9b	bb9b	29 03		and #$03			and 	#3 							; get channel #
.db9d	bb9d	aa		tax				tax
.db9e	bb9e	bd 3b 08	lda $083b,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dba1	bba1	80 0d		bra $bbb0			bra 	_SNDExit
.dba3	bba3					_SNDInitialise:
.dba3	bba3					_SNDSilence:
.dba3	bba3	9c 2e 07	stz $072e			stz 	SNDLength 					; empty the queue.
.dba6	bba6	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dba8	bba8					_SNDSilenceLoop:
.dba8	bba8	48		pha				pha
.dba9	bba9	20 62 bb	jsr $bb62			jsr 	SNDSilenceChannel
.dbac	bbac	68		pla				pla
.dbad	bbad	3a		dec a				dec 	a
.dbae	bbae	10 f8		bpl $bba8			bpl 	_SNDSilenceLoop
.dbb0	bbb0					_SNDExit:
.dbb0	bbb0	7a		ply				ply
.dbb1	bbb1	fa		plx				plx
.dbb2	bbb2	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.072e						SNDLength:
>072e								.fill 	1
.072f						SNDQueue:
>072f								.fill 	SNDQueueSize * 8
.082f						SNDPitchLow:
>082f								.fill 	4
.0833						SNDPitchHigh:
>0833								.fill 	4
.0837						SNDVolume:
>0837								.fill 	4
.083b						SNDTimeLeft:
>083b								.fill 	4
.083f						SNDAdjustLow:
>083f								.fill 	4
.0843						SNDAdjustHigh:
>0843								.fill 	4
.dbb3	bbb3					Export_SNDUpdate:
.dbb3	bbb3					PagedSNDUpdate:
.dbb3	bbb3	ad 3b 08	lda $083b			lda 	SNDTimeLeft+0 				; look at time remaining
.dbb6	bbb6	f0 05		beq $bbbd			beq 	_SNDUNot0 					; not playing
.dbb8	bbb8	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dbba	bbba	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel 			; update it.
.dbbd	bbbd					_SNDUNot0:
.dbbd	bbbd	ad 3c 08	lda $083c			lda 	SNDTimeLeft+1
.dbc0	bbc0	f0 05		beq $bbc7			beq 	_SNDUNot1
.dbc2	bbc2	a2 01		ldx #$01			ldx 	#1
.dbc4	bbc4	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbc7	bbc7					_SNDUNot1:
.dbc7	bbc7	ad 3d 08	lda $083d			lda 	SNDTimeLeft+2
.dbca	bbca	f0 05		beq $bbd1			beq 	_SNDUNot2
.dbcc	bbcc	a2 02		ldx #$02			ldx 	#2
.dbce	bbce	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbd1	bbd1					_SNDUNot2:
.dbd1	bbd1	ad 3e 08	lda $083e			lda 	SNDTimeLeft+3
.dbd4	bbd4	f0 05		beq $bbdb			beq 	_SNDUNot3
.dbd6	bbd6	a2 03		ldx #$03			ldx 	#3
.dbd8	bbd8	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbdb	bbdb					_SNDUNot3:
.dbdb	bbdb	60		rts				rts
.dbdc	bbdc					SNDUpdateChannel:
.dbdc	bbdc	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dbde	bbde	f0 2c		beq $bc0c			beq 	_SNDUCExit
.dbe0	bbe0	3a		dec a				dec 	a 							; decrement and update timer
.dbe1	bbe1	9d 3b 08	sta $083b,x			sta 	SNDTimeLeft,x
.dbe4	bbe4	f0 1d		beq $bc03			beq 	_SNDUCUpdate 				; if zero, silence channel
.dbe6	bbe6	bd 3f 08	lda $083f,x			lda 	SNDAdjustLow,x 				; adjust ?
.dbe9	bbe9	1d 43 08	ora $0843,x			ora 	SNDAdjustHigh,x
.dbec	bbec	f0 1e		beq $bc0c			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dbee	bbee	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dbef	bbef	bd 2f 08	lda $082f,x			lda 	SNDPitchLow,x
.dbf2	bbf2	7d 3f 08	adc $083f,x			adc 	SNDAdjustLow,x
.dbf5	bbf5	9d 2f 08	sta $082f,x			sta 	SNDPitchLow,x
.dbf8	bbf8	bd 33 08	lda $0833,x			lda 	SNDPitchHigh,x
.dbfb	bbfb	7d 43 08	adc $0843,x			adc 	SNDAdjustHigh,x
.dbfe	bbfe	29 03		and #$03			and 	#3
.dc00	bc00	9d 33 08	sta $0833,x			sta 	SNDPitchHigh,x
.dc03	bc03					_SNDUCUpdate:
.dc03	bc03	8a		txa				txa 								; which channel.
.dc04	bc04	48		pha				pha
.dc05	bc05	20 c8 ba	jsr $bac8			jsr 	SNDUpdateNote 				; update the current note
.dc08	bc08	68		pla				pla
.dc09	bc09	20 89 ba	jsr $ba89			jsr 	SNDCheckChannel 			; more to do ?
.dc0c	bc0c					_SNDUCExit:
.dc0c	bc0c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1
.dc0d	bc0d					Export_KNLInputSingleCharacter:
.dc0d	bc0d					PagedInputSingleCharacter:
.dc0d	bc0d	da		phx				phx
.dc0e	bc0e	5a		phy				phy
.dc0f	bc0f					_EISCWait:
.dc0f	bc0f	a5 01		lda $01				lda 	1 							; save I/O 0
.dc11	bc11	48		pha				pha
.dc12	bc12	64 01		stz $01				stz 	1 							; access I/O Page 0
.dc14	bc14	38		sec				sec 								; calculate timer - LastTick
.dc15	bc15	ad 59 d6	lda $d659			lda 	$D659
.dc18	bc18	cd 5f 06	cmp $065f			cmp 	LastTick
.dc1b	bc1b	f0 06		beq $bc23			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.dc1d	bc1d	8d 5f 06	sta $065f			sta 	LastTick 					; update last timer
.dc20	bc20	20 b3 bb	jsr $bbb3			jsr 	PagedSNDUpdate 							; go do the code.
.dc23	bc23					_NoFireTick:
.dc23	bc23	68		pla				pla 								; restore I/O 0
.dc24	bc24	85 01		sta $01				sta 	1
.dc26	bc26	20 30 bc	jsr $bc30			jsr 	CheckKeyPressed
.dc29	bc29	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.dc2b	bc2b	f0 e2		beq $bc0f			beq 	_EISCWait
.dc2d	bc2d	7a		ply				ply
.dc2e	bc2e	fa		plx				plx
.dc2f	bc2f	60		rts				rts
.dc30	bc30					Export_KNLInkey:
.dc30	bc30					CheckKeyPressed:
.dc30	bc30	a9 47		lda #$47			lda     #<event 					; tell kernel where events go.
.dc32	bc32	85 f0		sta $f0				sta     kernel.args.events+0
.dc34	bc34	a9 08		lda #$08			lda     #>event
.dc36	bc36	85 f1		sta $f1				sta     kernel.args.events+1
.dc38	bc38	20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.dc3b	bc3b	b0 0b		bcs $bc48			bcs 	_CKPNoEvent 				; no event
.dc3d	bc3d	ad 47 08	lda $0847			lda     event.type
.dc40	bc40	c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.dc42	bc42	d0 04		bne $bc48			bne 	_CKPNoEvent
.dc44	bc44	ad 4c 08	lda $084c			lda     event.key.ascii
.dc47	bc47	60		rts				rts
.dc48	bc48					_CKPNoEvent:
.dc48	bc48	a9 00		lda #$00			lda 	#0
.dc4a	bc4a	60		rts				rts
.dc4b	bc4b					Export_EXTReadController:
.dc4b	bc4b	da		phx				phx
.dc4c	bc4c	a6 01		ldx $01				ldx 	1 							; save current I/O in X
.dc4e	bc4e	64 01		stz $01				stz 	1 							; switch to I/O 0
.dc50	bc50	ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.dc53	bc53	86 01		stx $01				stx 	1 							; repair old I/O and exit
.dc55	bc55	fa		plx				plx
.dc56	bc56	60		rts				rts
.0847						event
>0847						type        .byte   ?   ; Enum above
>0848						buf         .byte   ?   ; page id or zero
>0849						ext         .byte   ?   ; page id or zero
.084a						key
>084a						keyboard    .byte   ?   ; Keyboard ID
>084b						raw         .byte   ?   ; Raw key ID
>084c						ascii       .byte   ?   ; ASCII value
>084d						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.084a						mouse
.084a						delta
>084a						x           .byte   ?
>084b						y           .byte   ?
>084c						z           .byte   ?
>084d						buttons     .byte   ?
.084a						clicks
>084a						inner       .byte   ?
>084b						middle      .byte   ?
>084c						outer       .byte   ?
.084a						udp
>084a						token       .byte   ?   ; TODO: break out into fields
.084a						file
>084a						stream      .byte   ?
>084b						cookie      .byte   ?
.084c						data
>084c						requested   .byte   ?   ; Requested number of bytes to read
>084d						read        .byte   ?   ; Number of bytes actually read
.084c						wrote
>084c						requested   .byte   ?   ; Requested number of bytes to read
>084d						wrote       .byte   ?   ; Number of bytes actually read
.084a						directory
>084a						stream      .byte   ?
>084b						cookie      .byte   ?
.084c						volume
>084c						len         .byte   ?   ; Length of volname (in buf)
>084d						flags       .byte   ?   ; block size, text encoding
.084c						file
>084c						len         .byte   ?
>084d						flags       .byte   ?   ; block scale, text encoding, approx size
.084c						free
>084c						flags       .byte   ?   ; block scale, text encoding, approx size
=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
.dc57	bc57					Export_KNLOpenFileWrite:
.dc57	bc57	48		pha				pha
.dc58	bc58	a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.dc5a	bc5a	80 03		bra $bc5f			bra 	KNLOpenStart
.dc5c	bc5c					Export_KNLOpenFileRead:
.dc5c	bc5c	48		pha				pha
.dc5d	bc5d	a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.dc5f	bc5f					KNLOpenStart:
.dc5f	bc5f	85 f5		sta $f5				sta     kernel.args.file.open.mode
.dc61	bc61	68		pla				pla
.dc62	bc62	20 9d bc	jsr $bc9d			jsr 	KNLSetupFileName
.dc65	bc65	a9 47		lda #$47			lda     #event & $FF 				; tell kernel where to store event data
.dc67	bc67	85 f0		sta $f0				sta     kernel.args.events+0
.dc69	bc69	a9 08		lda #$08			lda     #event >> 8
.dc6b	bc6b	85 f1		sta $f1				sta     kernel.args.events+1
.dc6d	bc6d	ad 5c 06	lda $065c			lda 	DefaultDrive 				; currently drive zero only.
.dc70	bc70	85 f3		sta $f3				sta 	kernel.args.file.open.drive
.dc72	bc72	20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.dc75	bc75	a9 38		lda #$38			lda     #kernel.event.file.ERROR
.dc77	bc77	b0 1d		bcs $bc96			bcs     _out
.dc79	bc79					_loop
.dc79	bc79	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dc7c	bc7c	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dc7f	bc7f	b0 f8		bcs $bc79			bcs     _loop
.dc81	bc81	ad 47 08	lda $0847			lda 	event.type
.dc84	bc84	c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.dc86	bc86	f0 0a		beq $bc92			beq 	_success
.dc88	bc88	c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.dc8a	bc8a	f0 0a		beq $bc96			beq 	_out
.dc8c	bc8c	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dc8e	bc8e	f0 06		beq $bc96			beq 	_out
.dc90	bc90	80 e7		bra $bc79			bra     _loop
.dc92	bc92					_success
.dc92	bc92	ad 4a 08	lda $084a			lda     event.file.stream
.dc95	bc95	18		clc				clc
.dc96	bc96					_out
.dc96	bc96	60		rts				rts
.dc97	bc97					Export_KNLCloseFile:
.dc97	bc97	85 f3		sta $f3				sta     kernel.args.file.close.stream
.dc99	bc99	20 68 ff	jsr $ff68			jsr     kernel.File.Close
.dc9c	bc9c	60		rts				rts
.dc9d	bc9d					KNLSetupFileName:
.dc9d	bc9d	5a		phy				phy 								; save Y on stack
.dc9e	bc9e	85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.dca0	bca0	86 37		stx $37				stx 	zTemp0+1
.dca2	bca2	85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.dca4	bca4	86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.dca6	bca6	a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.dca8	bca8					_KNLGetLength:
.dca8	bca8	c8		iny				iny
.dca9	bca9	b1 36		lda ($36),y			lda 	(zTemp0),y
.dcab	bcab	d0 fb		bne $bca8			bne 	_KNLGetLength
.dcad	bcad	84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.dcaf	bcaf	7a		ply				ply
.dcb0	bcb0	60		rts				rts
=64						KNLReadBufferLen = 64 								; read buffer size.
.084e						KNLStream:
>084e								.byte   ?
.084f						KNLReadBuffer:
>084f								.fill   KNLReadBufferLen
.088f						KNLNext:
>088f								.byte   ?
.0890						KNLEnd:
>0890								.byte   ?
.dcb1	bcb1					Export_KNLReadByteInit:
.dcb1	bcb1	8d 4e 08	sta $084e			sta     KNLStream 					; save stream
.dcb4	bcb4	9c 8f 08	stz $088f			stz     KNLNext 					; reset buffer
.dcb7	bcb7	9c 90 08	stz $0890			stz     KNLEnd
.dcba	bcba	60		rts				rts
.dcbb	bcbb					Export_KNLReadByte:
.dcbb	bcbb	da		phx				phx
.dcbc	bcbc	ae 8f 08	ldx $088f			ldx     KNLNext 					; all data consumed ?
.dcbf	bcbf	ec 90 08	cpx $0890			cpx     KNLEnd
.dcc2	bcc2	d0 0d		bne $bcd1			bne     _KNLRBGetNextByte
.dcc4	bcc4	20 da bc	jsr $bcda			jsr     KNLRBGetNextBlock 			; read next chunk from the stream
.dcc7	bcc7	b0 0f		bcs $bcd8			bcs     _KNLRBError 				; error has occurred on read.
.dcc9	bcc9	8d 90 08	sta $0890			sta     KNLEnd 						; # read is the number available
.dccc	bccc	a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.dcce	bcce	8e 8f 08	stx $088f			stx     KNLNext
.dcd1	bcd1					_KNLRBGetNextByte:
.dcd1	bcd1	bd 4f 08	lda $084f,x			lda     KNLReadBuffer,x 			; get the next data item
.dcd4	bcd4	ee 8f 08	inc $088f			inc     KNLNext 					; and advance the index
.dcd7	bcd7	18		clc				clc 								; succeeded
.dcd8	bcd8					_KNLRBError:
.dcd8	bcd8	fa		plx				plx
.dcd9	bcd9	60		rts				rts
.dcda	bcda					Export_KNLReadBlock:
.dcda	bcda					KNLRBGetNextBlock:
.dcda	bcda	ad 4e 08	lda $084e			lda     KNLStream 					; set stream to read from
.dcdd	bcdd	85 f3		sta $f3				sta     kernel.args.file.read.stream
.dcdf	bcdf	a9 40		lda #$40			lda     #KNLReadBufferLen 					; set bytes to read.
.dce1	bce1	85 f4		sta $f4				sta     kernel.args.file.read.buflen
.dce3	bce3	20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.dce6	bce6	a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.dce8	bce8	b0 2e		bcs $bd18			bcs     _KGNBExitFail               ; report as general error
.dcea	bcea					_KGRBEventLoop:
.dcea	bcea	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dced	bced	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dcf0	bcf0	b0 f8		bcs $bcea			bcs     _KGRBEventLoop
.dcf2	bcf2	ad 47 08	lda $0847			lda 	event.type 					; get event
.dcf5	bcf5	c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.dcf7	bcf7	f0 0a		beq $bd03			beq     _KNLRBGetNextByte
.dcf9	bcf9	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.dcfb	bcfb	f0 1b		beq $bd18			beq 	_KGNBExitFail
.dcfd	bcfd	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dcff	bcff	f0 17		beq $bd18			beq 	_KGNBExitFail
.dd01	bd01	80 e7		bra $bcea			bra 	_KGRBEventLoop
.dd03	bd03					_KNLRBGetNextByte:
.dd03	bd03	a9 4f		lda #$4f			lda     #<KNLReadBuffer 					; Set the target buffer
.dd05	bd05	85 fb		sta $fb				sta     kernel.args.recv.buf+0
.dd07	bd07	a9 08		lda #$08			lda     #>KNLReadBuffer
.dd09	bd09	85 fc		sta $fc				sta     kernel.args.recv.buf+1
.dd0b	bd0b	ad 4d 08	lda $084d			lda     event.file.data.read 		; Set the target length
.dd0e	bd0e	85 fd		sta $fd				sta     kernel.args.recv.buflen
.dd10	bd10	20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.dd13	bd13	ad 4d 08	lda $084d			lda     event.file.data.read 		; Return # of bytes read (in A)
.dd16	bd16	18		clc				clc
.dd17	bd17	60		rts				rts
.dd18	bd18					_KGNBExitFail:
.dd18	bd18	38		sec				sec
.dd19	bd19	60		rts				rts
.dd1a	bd1a					Export_KNLWriteBlock:
.dd1a	bd1a	da		phx				phx
.dd1b	bd1b	5a		phy				phy
.dd1c	bd1c	85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.dd1e	bd1e	a5 36		lda $36				lda     zTemp0 						; save the data location.
.dd20	bd20	85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.dd22	bd22	a5 37		lda $37				lda     zTemp0+1
.dd24	bd24	85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.dd26	bd26	86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.dd28	bd28	20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.dd2b	bd2b	a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.dd2d	bd2d	b0 21		bcs $bd50			bcs 	_KWBFailed
.dd2f	bd2f					_KNLWLoop:
.dd2f	bd2f	20 0c ff	jsr $ff0c			jsr     kernel.Yield
.dd32	bd32	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dd35	bd35	b0 f8		bcs $bd2f			bcs     _KNLWLoop
.dd37	bd37	ad 47 08	lda $0847			lda     event.type 					; various errors.
.dd3a	bd3a	c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.dd3c	bd3c	f0 12		beq $bd50			beq 	_KWBFailed
.dd3e	bd3e	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dd40	bd40	f0 0e		beq $bd50			beq 	_KWBFailed
.dd42	bd42	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dd44	bd44	f0 0a		beq $bd50			beq 	_KWBFailed
.dd46	bd46	c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.dd48	bd48	d0 e5		bne $bd2f			bne 	_KNLWLoop
.dd4a	bd4a	18		clc				clc
.dd4b	bd4b	ad 4d 08	lda $084d			lda    event.file.wrote.wrote 		; get bytes written.
.dd4e	bd4e	80 01		bra $bd51			bra 	_KWBExit
.dd50	bd50					_KWBFailed:
.dd50	bd50	38		sec				sec
.dd51	bd51					_KWBExit:
.dd51	bd51	7a		ply				ply
.dd52	bd52	fa		plx				plx
.dd53	bd53	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
