
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Oct  5 09:57:45 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					dataPointer:
>0715							.fill 	5
.071a					inDataStatement:
>071a							.fill 	1
.071b					tbOffset:
>071b							.fill 	1
.071c					AssemblerAddress:
>071c							.fill 	2
.071e					AssemblerControl:
>071e							.fill 	1
.071f					ParamStart:
>071f							.fill 	2
.0721					IsGroup1:
>0721							.fill 	1
.0722					BaseOpcode:
>0722							.fill 	1
.0723					ModeMask:
>0723							.fill 	1
.0724					tokenOffset:
>0724							.fill 	1
.0725					tokenLineNumber:
>0725							.fill 	2
.0727					tokenBuffer:
>0727							.fill 	253
.0824					lineBuffer:
>0824							.fill 	MaxLineSize+1
.0875					numberBuffer:
>0875							.fill 	34
.0897					decimalBuffer:
>0897							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 78 87	jsr $8778			jsr 	NewCommand 					; erase current program
.8006	20 65 97	jsr $9765			jsr 	BackloadProgram
.8009	4c c4 88	jmp $88c4			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 18 a6	jsr $a618			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	1f 8d					.word	ShiftLeft                        ; $00 <<
>8016	19 8c					.word	BinaryCompareLessEqual           ; $01 <=
>8018	0f 8c					.word	BinaryCompareNotEqual            ; $02 <>
>801a	cb a3					.word	SyntaxError                      ; $03 !!3
>801c	cb a3					.word	SyntaxError                      ; $04 ><
>801e	23 8c					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	22 8d					.word	ShiftRight                       ; $06 >>
>8022	cb a3					.word	SyntaxError                      ; $07 !!7
>8024	cb a3					.word	SyntaxError                      ; $08 !!8
>8026	cb a3					.word	SyntaxError                      ; $09 !!9
>8028	cb a3					.word	SyntaxError                      ; $0a !!10
>802a	cb a3					.word	SyntaxError                      ; $0b !!11
>802c	cb a3					.word	SyntaxError                      ; $0c !!12
>802e	cb a3					.word	SyntaxError                      ; $0d !!13
>8030	cb a3					.word	SyntaxError                      ; $0e !!14
>8032	cb a3					.word	SyntaxError                      ; $0f !!15
>8034	cb a3					.word	SyntaxError                      ; $10 @
>8036	cb a3					.word	SyntaxError                      ; $11 !!17
>8038	cb a3					.word	SyntaxError                      ; $12 !!18
>803a	cb a3					.word	SyntaxError                      ; $13 [
>803c	02 9e					.word	IntegerDivide                    ; $14 \
>803e	cb a3					.word	SyntaxError                      ; $15 ]
>8040	a8 8e					.word	EorInteger                       ; $16 ^
>8042	cb a3					.word	SyntaxError                      ; $17 _
>8044	cb a3					.word	SyntaxError                      ; $18 `
>8046	cb a3					.word	SyntaxError                      ; $19 !!25
>8048	cb a3					.word	SyntaxError                      ; $1a !!26
>804a	cb a3					.word	SyntaxError                      ; $1b {
>804c	62 8e					.word	OraInteger                       ; $1c |
>804e	cb a3					.word	SyntaxError                      ; $1d }
>8050	cb a3					.word	SyntaxError                      ; $1e ~
>8052	cb a3					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	cb a3					.word	SyntaxError                      ; $20
>8056	ee 8e					.word	WordIndirect                     ; $21 !
>8058	cb a3					.word	SyntaxError                      ; $22 "
>805a	cb a3					.word	SyntaxError                      ; $23 #
>805c	cb a3					.word	SyntaxError                      ; $24 $
>805e	4f 9e					.word	IntegerModulus                   ; $25 %
>8060	1c 8e					.word	AndInteger                       ; $26 &
>8062	cb a3					.word	SyntaxError                      ; $27 '
>8064	cb a3					.word	SyntaxError                      ; $28 (
>8066	cb a3					.word	SyntaxError                      ; $29 )
>8068	c4 9e					.word	MulInteger                       ; $2a *
>806a	b6 8d					.word	AddInteger                       ; $2b +
>806c	cb a3					.word	SyntaxError                      ; $2c ,
>806e	f1 8d					.word	SubInteger                       ; $2d -
>8070	cb a3					.word	SyntaxError                      ; $2e .
>8072	5b a0					.word	FDivideCommand                   ; $2f /
>8074	cb a3					.word	SyntaxError                      ; $30 0
>8076	cb a3					.word	SyntaxError                      ; $31 1
>8078	cb a3					.word	SyntaxError                      ; $32 2
>807a	cb a3					.word	SyntaxError                      ; $33 3
>807c	cb a3					.word	SyntaxError                      ; $34 4
>807e	cb a3					.word	SyntaxError                      ; $35 5
>8080	cb a3					.word	SyntaxError                      ; $36 6
>8082	cb a3					.word	SyntaxError                      ; $37 7
>8084	cb a3					.word	SyntaxError                      ; $38 8
>8086	cb a3					.word	SyntaxError                      ; $39 9
>8088	cb a3					.word	SyntaxError                      ; $3a :
>808a	cb a3					.word	SyntaxError                      ; $3b ;
>808c	fb 8b					.word	BinaryCompareLess                ; $3c <
>808e	f1 8b					.word	BinaryCompareEqual               ; $3d =
>8090	05 8c					.word	BinaryCompareGreater             ; $3e >
>8092	15 8f					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	21 89					.word	EOLCommand                       ; $80 !0:EOF
>8096	2e 89					.word	Shift1Command                    ; $81 !1:SH1
>8098	36 89					.word	Shift2Command                    ; $82 !2:SH2
>809a	a1 a1					.word	AbsUnary                         ; $83 ABS(
>809c	df 93					.word	AllocUnary                       ; $84 ALLOC(
>809e	b1 a1					.word	AscUnary                         ; $85 ASC(
>80a0	9a 94					.word	ChrUnary                         ; $86 CHR$(
>80a2	ed 8b					.word	UnaryFalse                       ; $87 FALSE
>80a4	be a1					.word	FracUnary                        ; $88 FRAC(
>80a6	d4 a1					.word	IntUnary                         ; $89 INT(
>80a8	2a a2					.word	IsValUnary                       ; $8a ISVAL(
>80aa	74 95					.word	Unary_Left                       ; $8b LEFT$(
>80ac	e6 a1					.word	LenUnary                         ; $8c LEN(
>80ae	9e 95					.word	Unary_Mid                        ; $8d MID$(
>80b0	37 94					.word	Unary_Not                        ; $8e NOT(
>80b2	84 95					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	4d 94					.word	Unary_Rnd                        ; $90 RND(
>80b6	00 a2					.word	SgnUnary                         ; $91 SGN(
>80b8	ac 94					.word	SpcUnary                         ; $92 SPC(
>80ba	c7 94					.word	Unary_Str                        ; $93 STR$(
>80bc	e1 8b					.word	UnaryTrue                        ; $94 TRUE
>80be	20 a2					.word	ValUnary                         ; $95 VAL(
>80c0	32 85					.word	ForCommand                       ; $96 FOR
>80c2	7f 86					.word	IfCommand                        ; $97 IF
>80c4	3e 89					.word	Unused1                          ; $98 PROC
>80c6	70 88					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	46 8b					.word	Command_WHILE                    ; $9a WHILE
>80ca	a8 86					.word	EndIf                            ; $9b ENDIF
>80cc	db 9d					.word	Command_ENDPROC                  ; $9c ENDPROC
>80ce	ec 85					.word	NextCommand                      ; $9d NEXT
>80d0	3e 89					.word	Unused4                          ; $9e THEN
>80d2	79 88					.word	Command_UNTIL                    ; $9f UNTIL
>80d4	67 8b					.word	Command_WEND                     ; $a0 WEND
>80d6	07 84					.word	CallCommand                      ; $a1 CALL
>80d8	cb a3					.word	SyntaxError                      ; $a2 CLS
>80da	6a 84					.word	Command_Data                     ; $a3 DATA
>80dc	72 84					.word	DimCommand                       ; $a4 DIM
>80de	3e 89					.word	Unused3                          ; $a5 DOWNTO
>80e0	a1 86					.word	ElseCode                         ; $a6 ELSE
>80e2	45 86					.word	Command_GOSUB                    ; $a7 GOSUB
>80e4	63 86					.word	GotoCommand                      ; $a8 GOTO
>80e6	a9 86					.word	LetCommand                       ; $a9 LET
>80e8	82 87					.word	Command_Print                    ; $aa PRINT
>80ea	0a 88					.word	Command_Read                     ; $ab READ
>80ec	63 88					.word	RemCommand                       ; $ac REM
>80ee	55 86					.word	Command_RETURN                   ; $ad RETURN
>80f0	3e 89					.word	Unused2                          ; $ae TO
.80f2					VectorSet1:
>80f2	cb a3					.word	SyntaxError                      ; $80 !0:EOF
>80f4	cb a3					.word	SyntaxError                      ; $81 !1:SH1
>80f6	cb a3					.word	SyntaxError                      ; $82 !2:SH2
>80f8	d8 83					.word	AssembleCommand                  ; $83 ASSEMBLE
>80fa	f7 83					.word	AssertCommand                    ; $84 ASSERT
>80fc	15 84					.word	ClearCommand                     ; $85 CLEAR
>80fe	2f 85					.word	EndCommand                       ; $86 END
>8100	e2 86					.word	Command_List                     ; $87 LIST
>8102	78 87					.word	NewCommand                       ; $88 NEW
>8104	92 88					.word	Command_Restore                  ; $89 RESTORE
>8106	c4 88					.word	CommandRUN                       ; $8a RUN
>8108	41 89					.word	StopCommand                      ; $8b STOP
.810a					VectorSet2:
>810a	cb a3					.word	SyntaxError                      ; $80 !0:EOF
>810c	cb a3					.word	SyntaxError                      ; $81 !1:SH1
>810e	cb a3					.word	SyntaxError                      ; $82 !2:SH2
>8110	8e a2					.word	Assemble_adc                     ; $83 ADC
>8112	86 a2					.word	Assemble_and                     ; $84 AND
>8114	a2 a2					.word	Assemble_asl                     ; $85 ASL
>8116	0c a3					.word	Assemble_bcc                     ; $86 BCC
>8118	10 a3					.word	Assemble_bcs                     ; $87 BCS
>811a	18 a3					.word	Assemble_beq                     ; $88 BEQ
>811c	cf a2					.word	Assemble_bit                     ; $89 BIT
>811e	00 a3					.word	Assemble_bmi                     ; $8a BMI
>8120	14 a3					.word	Assemble_bne                     ; $8b BNE
>8122	fc a2					.word	Assemble_bpl                     ; $8c BPL
>8124	1c a3					.word	Assemble_bra                     ; $8d BRA
>8126	20 a3					.word	Assemble_brk                     ; $8e BRK
>8128	04 a3					.word	Assemble_bvc                     ; $8f BVC
>812a	08 a3					.word	Assemble_bvs                     ; $90 BVS
>812c	28 a3					.word	Assemble_clc                     ; $91 CLC
>812e	7c a3					.word	Assemble_cld                     ; $92 CLD
>8130	3c a3					.word	Assemble_cli                     ; $93 CLI
>8132	6c a3					.word	Assemble_clv                     ; $94 CLV
>8134	9a a2					.word	Assemble_cmp                     ; $95 CMP
>8136	e3 a2					.word	Assemble_cpx                     ; $96 CPX
>8138	de a2					.word	Assemble_cpy                     ; $97 CPY
>813a	c0 a2					.word	Assemble_dec                     ; $98 DEC
>813c	78 a3					.word	Assemble_dex                     ; $99 DEX
>813e	54 a3					.word	Assemble_dey                     ; $9a DEY
>8140	8a a2					.word	Assemble_eor                     ; $9b EOR
>8142	c5 a2					.word	Assemble_inc                     ; $9c INC
>8144	84 a3					.word	Assemble_inx                     ; $9d INX
>8146	74 a3					.word	Assemble_iny                     ; $9e INY
>8148	f7 a2					.word	Assemble_jmp                     ; $9f JMP
>814a	f2 a2					.word	Assemble_jsr                     ; $a0 JSR
>814c	96 a2					.word	Assemble_lda                     ; $a1 LDA
>814e	bb a2					.word	Assemble_ldx                     ; $a2 LDX
>8150	d9 a2					.word	Assemble_ldy                     ; $a3 LDY
>8152	ac a2					.word	Assemble_lsr                     ; $a4 LSR
>8154	88 a3					.word	Assemble_nop                     ; $a5 NOP
>8156	82 a2					.word	Assemble_ora                     ; $a6 ORA
>8158	38 a3					.word	Assemble_pha                     ; $a7 PHA
>815a	24 a3					.word	Assemble_php                     ; $a8 PHP
>815c	80 a3					.word	Assemble_phx                     ; $a9 PHX
>815e	40 a3					.word	Assemble_phy                     ; $aa PHY
>8160	48 a3					.word	Assemble_pla                     ; $ab PLA
>8162	2c a3					.word	Assemble_plp                     ; $ac PLP
>8164	90 a3					.word	Assemble_plx                     ; $ad PLX
>8166	50 a3					.word	Assemble_ply                     ; $ae PLY
>8168	a7 a2					.word	Assemble_rol                     ; $af ROL
>816a	b1 a2					.word	Assemble_ror                     ; $b0 ROR
>816c	34 a3					.word	Assemble_rti                     ; $b1 RTI
>816e	44 a3					.word	Assemble_rts                     ; $b2 RTS
>8170	9e a2					.word	Assemble_sbc                     ; $b3 SBC
>8172	30 a3					.word	Assemble_sec                     ; $b4 SEC
>8174	8c a3					.word	Assemble_sed                     ; $b5 SED
>8176	4c a3					.word	Assemble_sei                     ; $b6 SEI
>8178	92 a2					.word	Assemble_sta                     ; $b7 STA
>817a	b6 a2					.word	Assemble_stx                     ; $b8 STX
>817c	d4 a2					.word	Assemble_sty                     ; $b9 STY
>817e	ca a2					.word	Assemble_stz                     ; $ba STZ
>8180	68 a3					.word	Assemble_tax                     ; $bb TAX
>8182	64 a3					.word	Assemble_tay                     ; $bc TAY
>8184	ed a2					.word	Assemble_trb                     ; $bd TRB
>8186	e8 a2					.word	Assemble_tsb                     ; $be TSB
>8188	70 a3					.word	Assemble_tsx                     ; $bf TSX
>818a	58 a3					.word	Assemble_txa                     ; $c0 TXA
>818c	60 a3					.word	Assemble_txs                     ; $c1 TXS
>818e	5c a3					.word	Assemble_tya                     ; $c2 TYA

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8190					AssembleGroup1:
.8190	a9 ff		lda #$ff			lda 	#$FF
.8192	8d 23 07	sta $0723			sta 	ModeMask 					; initialise the mode mask - all for all
.8195	80 02		bra $8199			bra 	AsmGroup12
.8197					AssembleGroup2:
.8197	a5 00		lda $00				lda 	$00
.8199					AsmGroup12:
.8199	8d 21 07	sta $0721			sta 	IsGroup1 					; save the 'group 1' flag
.819c	68		pla				pla 								; pop the return address to access the information following.
.819d	fa		plx				plx
.819e	20 27 82	jsr $8227			jsr 	AccessParameters 			; get opcode and save as base
.81a1	8d 22 07	sta $0722			sta 	BaseOpcode
.81a4	ad 21 07	lda $0721			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.81a7	d0 08		bne $81b1			bne 	_AG12HaveMask
.81a9	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.81ab	20 2f 82	jsr $822f			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.81ae	8d 23 07	sta $0723			sta 	ModeMask
.81b1					_AG12HaveMask:
.81b1	20 6a 83	jsr $836a			jsr 	TypeAndCalculateOperand 	; get zero page type
.81b4	da		phx				phx 								; save found address mode
.81b5	20 93 82	jsr $8293			jsr 	AssembleModeX
.81b8	fa		plx				plx  								; restore address mode
.81b9	b0 0b		bcs $81c6			bcs 	_AG12Exit
.81bb	20 c7 81	jsr $81c7			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.81be	20 93 82	jsr $8293			jsr 	AssembleModeX
.81c1	b0 03		bcs $81c6			bcs 	_AG12Exit
.81c3	4c cb a3	jmp $a3cb			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.81c6					_AG12Exit:
.81c6	60		rts				rts
.81c7					PromoteToAbsolute:
.81c7	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.81c9	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.81cb	f0 19		beq $81e6			beq 	_PTADo
.81cd	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.81cf	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.81d1	f0 13		beq $81e6			beq 	_PTADo
.81d3	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.81d5	e0 80		cpx #$80			cpx 	#AM_ZEROY
.81d7	f0 0d		beq $81e6			beq 	_PTADo
.81d9	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.81db	e0 d1		cpx #$d1			cpx 	#AM_IND
.81dd	f0 07		beq $81e6			beq 	_PTADo
.81df	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.81e1	e0 c0		cpx #$c0			cpx 	#AM_INDX
.81e3	f0 01		beq $81e6			beq 	_PTADo
.81e5	60		rts				rts
.81e6					_PTADo:
.81e6	aa		tax				tax
.81e7	60		rts				rts
.81e8					AssembleGroup3:
.81e8	68		pla				pla 								; get parameters, which is just the opcode.
.81e9	fa		plx				plx
.81ea	20 27 82	jsr $8227			jsr 	AccessParameters 			; get and output opcode
.81ed	20 3f 82	jsr $823f			jsr 	AssemblerWriteByte
.81f0	20 ce 83	jsr $83ce			jsr 	CalculateOperand 			; get a 16 bit operand
.81f3	ad 08 06	lda $0608			lda 	NSMantissa0 				; calculate the offset
.81f6	38		sec				sec
.81f7	ed 1c 07	sbc $071c			sbc 	AssemblerAddress
.81fa	48		pha				pha 								; LSB in A
.81fb	ad 10 06	lda $0610			lda 	NSMantissa1
.81fe	ed 1d 07	sbc $071d			sbc 	AssemblerAddress+1
.8201	aa		tax				tax 								; MSB in X
.8202	68		pla				pla
.8203	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8204	69 7f		adc #$7f			adc 	#$7F
.8206	90 01		bcc $8209			bcc 	_AG3NoCarry
.8208	e8		inx				inx
.8209					_AG3NoCarry:
.8209	38		sec				sec 								; fix back and write out anyways.
.820a	e9 80		sbc #$80			sbc 	#$80
.820c	20 3f 82	jsr $823f			jsr 	AssemblerWriteByte
.820f	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8211	f0 0a		beq $821d			beq 	_AG3Exit
.8213	ad 1e 07	lda $071e			lda 	AssemblerControl 			; are we allowing bad values ?
.8216	29 01		and #$01			and 	#1
.8218	f0 03		beq $821d			beq 	_AG3Exit
.821a	4c d0 a3	jmp $a3d0			jmp 	RangeError 					; no, branch is out of range
.821d					_AG3Exit:
.821d	60		rts				rts
.821e					AssembleGroup4:
.821e	68		pla				pla 								; pop address
.821f	fa		plx				plx
.8220	20 27 82	jsr $8227			jsr 	AccessParameters 			; access and get first
.8223	20 3f 82	jsr $823f			jsr 	AssemblerWriteByte 			; output it.
.8226	60		rts				rts
.8227					AccessParameters:
.8227	8d 1f 07	sta $071f			sta 	ParamStart
.822a	8e 20 07	stx $0720			stx 	ParamStart+1
.822d	a9 01		lda #$01			lda 	#1
.822f					GetParameter:
.822f	5a		phy				phy
.8230	a8		tay				tay
.8231	ad 1f 07	lda $071f			lda 	ParamStart
.8234	85 36		sta $36				sta 	zTemp0
.8236	ad 20 07	lda $0720			lda 	ParamStart+1
.8239	85 37		sta $37				sta 	zTemp0+1
.823b	b1 36		lda ($36),y			lda 	(zTemp0),y
.823d	7a		ply				ply
.823e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.823f					AssemblerWriteByte:
.823f	48		pha			pha
.8240	ad 1e 07	lda $071e		lda 	AssemblerControl 				; check printing bytes ?
.8243	29 02		and #$02		and 	#2
.8245	f0 1b		beq $8262		beq 	_AWBNoPrint
.8247	ad 1d 07	lda $071d		lda		AssemblerAddress+1 				; print address
.824a	20 7d 82	jsr $827d		jsr 	PrintHex
.824d	ad 1c 07	lda $071c		lda		AssemblerAddress
.8250	20 7d 82	jsr $827d		jsr 	PrintHex
.8253	a9 20		lda #$20		lda 	#' '
.8255	20 18 a6	jsr $a618		jsr 	EXTPrintCharacter
.8258	68		pla			pla 									; print byte
.8259	48		pha			pha
.825a	20 7d 82	jsr $827d		jsr 	PrintHex
.825d	a9 0d		lda #$0d		lda 	#13
.825f	20 18 a6	jsr $a618		jsr 	EXTPrintCharacter
.8262					_AWBNoPrint:
.8262	ad 1c 07	lda $071c		lda		AssemblerAddress				; copy address to zTemp0
.8265	85 36		sta $36			sta 	zTemp0
.8267	ad 1d 07	lda $071d		lda		AssemblerAddress+1
.826a	f0 0e		beq $827a		beq 	_AWBRange
.826c	85 37		sta $37			sta 	zTemp0+1
.826e	68		pla			pla 									; write byte out
.826f	92 36		sta ($36)		sta 	(zTemp0)
.8271	ee 1c 07	inc $071c		inc 	AssemblerAddress 				; bump address
.8274	d0 03		bne $8279		bne 	_AWBNoCarry
.8276	ee 1d 07	inc $071d		inc 	AssemblerAddress+1
.8279					_AWBNoCarry:
.8279	60		rts			rts
.827a					_AWBRange:
.827a	4c d0 a3	jmp $a3d0		jmp 	RangeError
.827d					PrintHex:
.827d	48		pha				pha
.827e	4a		lsr a				lsr 	a
.827f	4a		lsr a				lsr 	a
.8280	4a		lsr a				lsr 	a
.8281	4a		lsr a				lsr 	a
.8282	20 86 82	jsr $8286			jsr 	_PrintNibble
.8285	68		pla				pla
.8286					_PrintNibble:
.8286	29 0f		and #$0f			and 	#15
.8288	c9 0a		cmp #$0a			cmp 	#10
.828a	90 02		bcc $828e			bcc 	_NoShift
.828c	69 06		adc #$06			adc 	#6
.828e					_NoShift:
.828e	69 30		adc #$30			adc 	#48
.8290	4c 18 a6	jmp $a618			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8293					AssembleModeX:
.8293	5a		phy				phy
.8294	ad 21 07	lda $0721			lda 	IsGroup1
.8297	f0 17		beq $82b0			beq 	_AMXGroup2
.8299	8a		txa				txa 							; is it in group # 1
.829a	29 40		and #$40			and 	#AM_ISG1
.829c	f0 50		beq $82ee			beq 	_AMXFail 				; no, give up.
.829e	8a		txa				txa 							; get back.
.829f	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.82a1	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.82a3	d0 22		bne $82c7			bne 	_AMXHaveInfo
.82a5	ad 22 07	lda $0722			lda 	BaseOpcode 				; cannot store immediate.
.82a8	c9 81		cmp #$81			cmp 	#$81
.82aa	f0 42		beq $82ee			beq 	_AMXFail
.82ac	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.82ae	80 17		bra $82c7			bra 	_AMXHaveInfo 			; odd design decision there.
.82b0					_AMXGroup2:
.82b0	8a		txa				txa 							; is it in group 2 ?
.82b1	29 20		and #$20			and 	#AM_ISG2
.82b3	f0 39		beq $82ee			beq 	_AMXFail 				; no, give up.
.82b5	8a		txa				txa 							; get the offset into Y
.82b6	29 1f		and #$1f			and 	#$1F
.82b8	4a		lsr a				lsr 	a 						; make it 0-7.
.82b9	4a		lsr a				lsr  	a
.82ba	a8		tay				tay
.82bb	ad 23 07	lda $0723			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.82be					_AMXCheckOkay:
.82be	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.82bf	88		dey				dey
.82c0	10 fc		bpl $82be			bpl 	_AMXCheckOkay
.82c2	90 2a		bcc $82ee			bcc 	_AMXFail 				; not allowed.
.82c4	8a		txa				txa  							; get mask back
.82c5	29 1f		and #$1f			and 	#$1F
.82c7					_AMXHaveInfo:
.82c7	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.82c9	10 05		bpl $82d0			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.82cb	ac 10 06	ldy $0610			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.82ce	d0 1e		bne $82ee			bne 	_AMXFail
.82d0					_AMXAnySize:
.82d0	18		clc				clc 							; add offset to the base opcode
.82d1	6d 22 07	adc $0722			adc 	BaseOpcode
.82d4					_AMXOutputCode:
.82d4	20 3f 82	jsr $823f			jsr 	AssemblerWriteByte 		; write the opcode out.
.82d7	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.82d9	f0 10		beq $82eb			beq 	_AMXExit
.82db	ad 08 06	lda $0608			lda 	NSMantissa0 				; write LSB operand
.82de	20 3f 82	jsr $823f			jsr 	AssemblerWriteByte
.82e1	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.82e3	30 06		bmi $82eb			bmi 	_AMXExit
.82e5	ad 10 06	lda $0610			lda 	NSMantissa1 			; write MSB operand
.82e8	20 3f 82	jsr $823f			jsr 	AssemblerWriteByte
.82eb					_AMXExit:
.82eb	7a		ply				ply
.82ec	38		sec				sec
.82ed	60		rts				rts
.82ee					_AMXFail:
.82ee	a0 00		ldy #$00			ldy 	#0
.82f0					_AMXCheckOddities:
.82f0	8a		txa				txa
.82f1	d9 19 83	cmp $8319,y			cmp 	ExtraOpcode+2,y 		; match address mode
.82f4	d0 16		bne $830c			bne 	_AMXCONext
.82f6	b9 17 83	lda $8317,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.82f9	cd 22 07	cmp $0722			cmp 	BaseOpcode
.82fc	d0 0e		bne $830c			bne 	_AMXCONext
.82fe	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8300	10 05		bpl $8307			bpl 	_AMXCONotZero
.8302	ad 10 06	lda $0610			lda 	NSMantissa1
.8305	d0 05		bne $830c			bne 	_AMXCONext
.8307					_AMXCONotZero:
.8307	b9 18 83	lda $8318,y			lda 	ExtraOpcode+1,y 		; get new opcode
.830a	80 c8		bra $82d4			bra 	_AMXOutputCode 			; and assemble it
.830c					_AMXCONext:
.830c	c8		iny				iny
.830d	c8		iny				iny
.830e	c8		iny				iny
.830f	b9 17 83	lda $8317,y			lda 	ExtraOpcode+0,y 		; end of table
.8312	d0 dc		bne $82f0			bne 	_AMXCheckOddities
.8314					_AMXCOFail:
.8314	7a		ply				ply
.8315	18		clc				clc
.8316	60		rts				rts
.8317					ExtraOpcode:
>8317	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>831a	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>831d	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8320	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8323	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8326	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8329	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>832c	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>832f	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8332	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8335	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8336					LabelHere:
.8336	c8		iny				iny 								; skip .
.8337	a2 00		ldx #$00			ldx 	#0 							; get a term
.8339	20 4f 92	jsr $924f			jsr 	EvaluateTerm 				; get a term
.833c	ad 00 06	lda $0600			lda 	NSStatus 					; needs to be an integer reference.
.833f	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8341	d0 24		bne $8367			bne 	_ALType
.8343	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8346	85 36		sta $36				sta 	zTemp0
.8348	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.834b	85 37		sta $37				sta 	zTemp0+1
.834d	5a		phy				phy 								; copy address in.
.834e	a0 01		ldy #$01			ldy 	#1
.8350	ad 1c 07	lda $071c			lda	 	AssemblerAddress
.8353	92 36		sta ($36)			sta 	(zTemp0)
.8355	ad 1d 07	lda $071d			lda	 	AssemblerAddress+1
.8358	91 36		sta ($36),y			sta 	(zTemp0),y
.835a	c8		iny				iny
.835b	a9 00		lda #$00			lda 	#0
.835d	91 36		sta ($36),y			sta 	(zTemp0),y
.835f	c8		iny				iny
.8360	91 36		sta ($36),y			sta 	(zTemp0),y
.8362	c8		iny				iny
.8363	91 36		sta ($36),y			sta 	(zTemp0),y
.8365	7a		ply				ply
.8366	60		rts				rts
.8367					_ALType:
.8367	4c d5 a3	jmp $a3d5			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.836a					TypeAndCalculateOperand:
.836a	b1 30		lda ($30),y			lda 	(codePtr),y
.836c	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.836e	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8370	f0 5b		beq $83cd			beq 	_TACOExit
.8372	c9 80		cmp #$80			cmp 	#KWC_EOL
.8374	f0 57		beq $83cd			beq 	_TACOExit
.8376	c8		iny				iny
.8377	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8379	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.837b	f0 51		beq $83ce			beq 	CalculateOperand
.837d	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.837f	f0 1f		beq $83a0			beq 	_TACOIndirect
.8381	88		dey				dey 								; undo get of first character
.8382	20 ce 83	jsr $83ce			jsr 	CalculateOperand 			; get operand
.8385	b1 30		lda ($30),y			lda 	(codePtr),y
.8387	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8389	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.838b	d0 40		bne $83cd			bne 	_TACOExit
.838d	c8		iny				iny
.838e	20 ab 9d	jsr $9dab			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8391	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8393	c9 58		cmp #$58			cmp 	#'X'
.8395	f0 36		beq $83cd			beq 	_TACOExit
.8397	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8399	c9 59		cmp #$59			cmp 	#'Y'
.839b	f0 30		beq $83cd			beq 	_TACOExit
.839d					_TACOSyntax:
.839d	4c cb a3	jmp $a3cb			jmp 	SyntaxError
.83a0					_TACOIndirect:
.83a0	20 ce 83	jsr $83ce			jsr 	CalculateOperand 			; get the operand
.83a3	b1 30		lda ($30),y			lda 	(codePtr),y
.83a5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.83a7	f0 17		beq $83c0			beq 	_TACOIndX
.83a9	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.83ac	b1 30		lda ($30),y			lda 	(codePtr),y
.83ae	a2 d1		ldx #$d1			ldx 	#AM_IND
.83b0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.83b2	d0 19		bne $83cd			bne 	_TACOExit
.83b4	c8		iny				iny
.83b5	20 ab 9d	jsr $9dab			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.83b8	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.83ba	d0 e1		bne $839d			bne 	_TACOSyntax
.83bc	a2 d0		ldx #$d0			ldx 	#AM_INDY
.83be	80 0d		bra $83cd			bra 	_TACOExit
.83c0					_TACOIndX:
.83c0	c8		iny				iny
.83c1	20 ab 9d	jsr $9dab			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.83c4	c9 58		cmp #$58			cmp 	#'X' 						; check X
.83c6	d0 d5		bne $839d			bne 	_TACOSyntax
.83c8	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket			; check )
.83cb	a2 c0		ldx #$c0			ldx 	#AM_INDX
.83cd					_TACOExit:
.83cd	60		rts				rts
.83ce					CalculateOperand:
.83ce	48		pha				pha
.83cf	da		phx				phx
.83d0	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.83d2	20 54 96	jsr $9654			jsr 	Evaluate16BitInteger
.83d5	fa		plx				plx
.83d6	68		pla				pla
.83d7	60		rts				rts
.9dab					TACOCheckXY:
.9dab	b1 30		lda ($30),y			lda 	(codePtr),y
.9dad	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.9daf	c9 40		cmp #$40			cmp 	#$40
.9db1	d0 21		bne $9dd4			bne 	_TCXYFail
.9db3	b1 30		lda ($30),y			lda 	(codePtr),y
.9db5	18		clc				clc
.9db6	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9db8	85 37		sta $37				sta 	zTemp0+1
.9dba	c8		iny				iny
.9dbb	b1 30		lda ($30),y			lda 	(codePtr),y
.9dbd	c8		iny				iny
.9dbe	85 36		sta $36				sta 	zTemp0
.9dc0	5a		phy				phy 								; save position
.9dc1	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.9dc3	b1 36		lda ($36),y			lda 	(zTemp0),y
.9dc5	d0 0c		bne $9dd3			bne 	_TCXYPopFail
.9dc7	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.9dc9	b1 36		lda ($36),y			lda 	(zTemp0),y
.9dcb	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.9dcd	f0 08		beq $9dd7			beq 	_TCXYFound
.9dcf	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.9dd1	f0 04		beq $9dd7			beq 	_TCXYFound
.9dd3					_TCXYPopFail:
.9dd3	7a		ply				ply
.9dd4					_TCXYFail:
.9dd4	a9 00		lda #$00			lda 	#0
.9dd6	60		rts				rts
.9dd7					_TCXYFound:
.9dd7	7a		ply				ply 								; restore position
.9dd8	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.9dda	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.83d8					AssembleCommand:
.83d8	a2 00		ldx #$00			ldx 	#0
.83da	20 54 96	jsr $9654			jsr 	Evaluate16BitInteger 		; start address
.83dd	ad 08 06	lda $0608			lda 	NSMantissa0
.83e0	8d 1c 07	sta $071c			sta 	AssemblerAddress
.83e3	ad 10 06	lda $0610			lda 	NSMantissa1
.83e6	8d 1d 07	sta $071d			sta 	AssemblerAddress+1
.83e9	20 f1 9d	jsr $9df1			jsr 	CheckComma
.83ec	20 60 96	jsr $9660			jsr 	Evaluate8BitInteger 		; options
.83ef	ad 08 06	lda $0608			lda 	NSMantissa0
.83f2	8d 1e 07	sta $071e			sta 	AssemblerControl
.83f5	60		rts				rts
.83f6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.83f7					AssertCommand:
.83f7	a2 00		ldx #$00			ldx 	#0
.83f9	20 3f 96	jsr $963f			jsr 	EvaluateInteger 			; the assert test
.83fc	20 f8 96	jsr $96f8			jsr 	NSMIsZero 					; exit if result is non zero.
.83ff	d0 05		bne $8406			bne 	_ACExit
.8401	a9 0a		lda #$0a		lda	#10
.8403	4c 75 8b	jmp $8b75		jmp	ErrorHandler
.8406					_ACExit:
.8406	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8407					CallCommand:
.8407	a2 00		ldx #$00			ldx 	#0
.8409	20 54 96	jsr $9654			jsr 	Evaluate16BitInteger
.840c	ad 10 06	lda $0610			lda 	NSMantissa1
.840f	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8412	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8415					ClearCommand:
.8415	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8417	85 36		sta $36				sta 	0+zTemp0
.8419	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.841b	85 37		sta $37				sta 	1+zTemp0
.841d					_ClearZeroLoop:
.841d	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.841f	f0 24		beq $8445			beq 	_ClearZeroEnd
.8421	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8423	a9 00		lda #$00			lda 	#0
.8425					_ClearOneVariable:
.8425	91 36		sta ($36),y			sta 	(zTemp0),y
.8427	c8		iny				iny
.8428	c0 08		cpy #$08			cpy 	#8
.842a	d0 f9		bne $8425			bne 	_ClearOneVariable
.842c	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.842e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8430	c9 18		cmp #$18			cmp 	#NSTProcedure
.8432	d0 04		bne $8438			bne 	_ClearNotProcedure
.8434	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8436	91 36		sta ($36),y			sta 	(zTemp0),y
.8438					_ClearNotProcedure:
.8438	18		clc				clc 								; go to the next variable
.8439	b2 36		lda ($36)			lda 	(zTemp0)
.843b	65 36		adc $36				adc 	zTemp0
.843d	85 36		sta $36				sta 	zTemp0
.843f	90 dc		bcc $841d			bcc 	_ClearZeroLoop
.8441	e6 37		inc $37				inc 	zTemp0+1
.8443	80 d8		bra $841d			bra 	_ClearZeroLoop
.8445					_ClearZeroEnd:
.8445	18		clc				clc
.8446	a5 36		lda $36				lda 	zTemp0
.8448	69 01		adc #$01			adc 	#1
.844a	8d 0c 07	sta $070c			sta 	lowMemPtr
.844d	a5 37		lda $37				lda 	zTemp0+1
.844f	69 00		adc #$00			adc 	#0
.8451	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8454	20 58 97	jsr $9758			jsr 	StackReset
.8457	20 a4 a5	jsr $a5a4			jsr 	StringSystemInitialise
.845a	20 95 8a	jsr $8a95			jsr 	ProcedureScan
.845d	20 92 88	jsr $8892			jsr 	Command_Restore
.8460	9c 1c 07	stz $071c			stz 	AssemblerAddress
.8463	9c 1d 07	stz $071d			stz 	AssemblerAddress+1
.8466	9c 1e 07	stz $071e			stz 	AssemblerControl
.8469	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.846a					Command_Data:
.846a	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.846c	a2 80		ldx #$80			ldx 	#KWC_EOL
.846e	20 e7 8a	jsr $8ae7			jsr 	ScanForward
.8471	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8472					DimCommand:
.8472	b1 30		lda ($30),y			lda 	(codePtr),y
.8474	29 c0		and #$c0			and 	#$C0
.8476	c9 40		cmp #$40			cmp 	#$40
.8478	d0 7a		bne $84f4			bne 	_DCSyntax
.847a	b1 30		lda ($30),y			lda 	(codePtr),y
.847c	18		clc				clc
.847d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.847f	85 3f		sta $3f				sta 	zaTemp+1
.8481	c8		iny				iny
.8482	b1 30		lda ($30),y			lda 	(codePtr),y
.8484	c8		iny				iny
.8485	85 3e		sta $3e				sta 	zaTemp
.8487	5a		phy				phy
.8488	a0 02		ldy #$02			ldy 	#2 						; read type byte
.848a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.848c	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.848e	c9 18		cmp #$18			cmp 	#NSTProcedure
.8490	f0 62		beq $84f4			beq 	_DCSyntax
.8492	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8494	29 04		and #$04			and 	#NSBIsArray
.8496	f0 64		beq $84fc			beq 	_DCType
.8498	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.849a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.849c	d0 59		bne $84f7			bne 	_DCRedefine
.849e	7a		ply				ply
.849f	20 ff 84	jsr $84ff			jsr 	_DCGetSize 				; get array size, check it.
.84a2	5a		phy				phy
.84a3	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.84a5	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.84a7	7a		ply				ply 							; is there a second (e.g. ,x)
.84a8	b1 30		lda ($30),y			lda 	(codePtr),y
.84aa	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.84ac	d0 0a		bne $84b8			bne 	_DCOneDimension
.84ae	c8		iny				iny 							; skip comma
.84af	20 ff 84	jsr $84ff			jsr 	_DCGetSize 				; get 2nd array size
.84b2	5a		phy				phy
.84b3	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.84b5	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84b7	7a		ply				ply
.84b8					_DCOneDimension:
.84b8	5a		phy				phy 							; save position
.84b9	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.84bb	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84bd	aa		tax				tax
.84be	c8		iny				iny
.84bf	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84c1	e8		inx				inx 							; bump them.
.84c2	1a		inc a				inc 	a
.84c3	20 6b a2	jsr $a26b			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.84c6	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.84c8	29 e0		and #$e0			and 	#$E0
.84ca	d0 23		bne $84ef			bne 	_DCSize
.84cc	a0 02		ldy #$02			ldy 	#2 						; get base type
.84ce	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84d0	20 0d 85	jsr $850d			jsr 	ScaleByBaseType 		; scale by base type
.84d3	a5 36		lda $36				lda 	zTemp0
.84d5	a6 37		ldx $37				ldx 	zTemp0+1
.84d7	20 fe 93	jsr $93fe			jsr 	AllocateXABytes 		; allocate memory
.84da	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.84dc	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84de	c8		iny				iny
.84df	8a		txa				txa
.84e0	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84e2	7a		ply				ply 							; get position back
.84e3	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket 		; check )
.84e6	b1 30		lda ($30),y			lda 	(codePtr),y
.84e8	c8		iny				iny 							; consume in case
.84e9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.84eb	f0 85		beq $8472			beq 	DimCommand
.84ed	88		dey				dey 							; undo consume
.84ee	60		rts				rts
.84ef					_DCSize:
.84ef	a9 16		lda #$16		lda	#22
.84f1	4c 75 8b	jmp $8b75		jmp	ErrorHandler
.84f4					_DCSyntax:
.84f4	4c cb a3	jmp $a3cb			jmp 	SyntaxError
.84f7					_DCRedefine:
.84f7	a9 15		lda #$15		lda	#21
.84f9	4c 75 8b	jmp $8b75		jmp	ErrorHandler
.84fc					_DCType:
.84fc	4c d5 a3	jmp $a3d5			jmp 	TypeError
.84ff					_DCGetSize:
.84ff	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8501	20 60 96	jsr $9660			jsr 	Evaluate8BitInteger 	; get array dimension
.8504	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8506	f0 e7		beq $84ef			beq 	_DCSize
.8508	c9 fe		cmp #$fe			cmp 	#254
.850a	f0 e3		beq $84ef			beq 	_DCSize
.850c	60		rts				rts
.850d					ScaleByBaseType:
.850d	29 10		and #$10			and 	#NSBIsString 			; is it string
.850f	d0 19		bne $852a			bne 	_SBBTString
.8511	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8513	48		pha				pha
.8514	a5 36		lda $36				lda 	zTemp0
.8516	48		pha				pha
.8517	06 36		asl $36				asl 	zTemp0 					; x 2
.8519	26 37		rol $37				rol 	zTemp0+1
.851b	06 36		asl $36				asl 	zTemp0 					; x 4
.851d	26 37		rol $37				rol 	zTemp0+1
.851f	68		pla				pla 							; add stacked value = x 5
.8520	65 36		adc $36				adc 	zTemp0
.8522	85 36		sta $36				sta 	zTemp0
.8524	68		pla				pla
.8525	65 37		adc $37				adc 	zTemp0+1
.8527	85 37		sta $37				sta 	zTemp0+1
.8529	60		rts				rts
.852a					_SBBTString:
.852a	06 36		asl $36				asl 	zTemp0
.852c	26 37		rol $37				rol 	zTemp0+1
.852e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.852f					EndCommand:
.852f	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8532					ForCommand:
.8532	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8534	20 05 97	jsr $9705			jsr 	StackOpen
.8537	a2 00		ldx #$00			ldx 	#0
.8539	20 4f 92	jsr $924f			jsr 	EvaluateTerm
.853c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.853f	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8541	d0 49		bne $858c			bne		_FCError
.8543	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8545	20 f9 9d	jsr $9df9			jsr 	CheckNextA
.8548	e8		inx				inx
.8549	20 3f 96	jsr $963f			jsr 	EvaluateInteger 			; <from> in +1
.854c	b1 30		lda ($30),y			lda 	(codePtr),y
.854e	c8		iny				iny 								; consume it
.854f	48		pha				pha 								; save on stack for later
.8550	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8552	f0 04		beq $8558			beq 	_FCNoSyntax
.8554	c9 ae		cmp #$ae			cmp 	#KWD_TO
.8556	d0 37		bne $858f			bne 	_FCSyntaxError
.8558					_FCNoSyntax:
.8558	e8		inx				inx
.8559	20 3f 96	jsr $963f			jsr 	EvaluateInteger
.855c	20 37 97	jsr $9737			jsr 	STKSaveCodePosition 		; save loop back position
.855f	68		pla				pla 								; restore DOWNTO or TO
.8560	5a		phy				phy 								; save Y on the stack
.8561	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8563	f0 02		beq $8567			beq 	_FCNotDownTo
.8565	a9 02		lda #$02			lda 	#2
.8567					_FCNotDownTo:
.8567	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8568	a0 10		ldy #$10			ldy 	#16
.856a	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.856c	a0 06		ldy #$06			ldy 	#6
.856e	ad 08 06	lda $0608			lda 	NSMantissa0
.8571	91 34		sta ($34),y			sta 	(basicStack),y
.8573	ad 10 06	lda $0610			lda 	NSMantissa1
.8576	c8		iny				iny
.8577	91 34		sta ($34),y			sta 	(basicStack),y
.8579	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.857b	a2 01		ldx #$01			ldx 	#1
.857d	20 92 85	jsr $8592			jsr 	FCIntegerToStack
.8580	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8582	a2 02		ldx #$02			ldx 	#2
.8584	20 92 85	jsr $8592			jsr 	FCIntegerToStack
.8587	20 b2 85	jsr $85b2			jsr 	CopyIndexToReference
.858a	7a		ply				ply 								; restore position
.858b	60		rts				rts
.858c					_FCError:
.858c	4c d5 a3	jmp $a3d5			jmp 	TypeError
.858f					_FCSyntaxError:
.858f	4c cb a3	jmp $a3cb			jmp 	SyntaxError
.8592					FCIntegerToStack:
.8592	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.8595	10 03		bpl $859a			bpl	 	_FCNotNegative
.8597	20 7d 96	jsr $967d			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.859a					_FCNotNegative:
.859a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.859d	91 34		sta ($34),y			sta 	(basicStack),y
.859f	c8		iny				iny
.85a0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.85a3	91 34		sta ($34),y			sta 	(basicStack),y
.85a5	c8		iny				iny
.85a6	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.85a9	91 34		sta ($34),y			sta 	(basicStack),y
.85ab	c8		iny				iny
.85ac	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.85af	91 34		sta ($34),y			sta 	(basicStack),y
.85b1	60		rts				rts
.85b2					CopyIndexToReference:
.85b2	5a		phy				phy
.85b3	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.85b5	38		sec				sec 								; (because we copy from offset 8)
.85b6	b1 34		lda ($34),y			lda 	(basicStack),y
.85b8	e9 08		sbc #$08			sbc 	#8
.85ba	85 36		sta $36				sta 	zTemp0
.85bc	c8		iny				iny
.85bd	b1 34		lda ($34),y			lda 	(basicStack),y
.85bf	e9 00		sbc #$00			sbc 	#0
.85c1	85 37		sta $37				sta 	zTemp0+1
.85c3	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.85c5	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.85c7	b1 34		lda ($34),y			lda 	(basicStack),y
.85c9	0a		asl a				asl 	a 							; into carry
.85ca	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.85cc	90 14		bcc $85e2			bcc 	_CITRNormal
.85ce	38		sec				sec
.85cf					_CITRNegative:
.85cf	a9 00		lda #$00			lda 	#0
.85d1	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85d3	91 36		sta ($36),y			sta 	(zTemp0),y
.85d5	c8		iny				iny
.85d6	ca		dex				dex
.85d7	d0 f6		bne $85cf			bne 	_CITRNegative
.85d9	88		dey				dey 								; look at MSB of mantissa
.85da	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.85dc	09 80		ora #$80			ora 	#$80
.85de	91 36		sta ($36),y			sta 	(zTemp0),y
.85e0	7a		ply				ply
.85e1	60		rts				rts
.85e2					_CITRNormal:
.85e2	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.85e4	91 36		sta ($36),y			sta 	(zTemp0),y
.85e6	c8		iny				iny
.85e7	ca		dex				dex
.85e8	d0 f8		bne $85e2			bne 	_CITRNormal
.85ea	7a		ply				ply 								; and exit.
.85eb	60		rts				rts
.85ec					NextCommand:
.85ec	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.85ee	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.85f0	20 2c 97	jsr $972c			jsr 	StackCheckFrame
.85f3	5a		phy				phy
.85f4	a0 10		ldy #$10			ldy 	#16 						; get the step count
.85f6	b1 34		lda ($34),y			lda 	(basicStack),y
.85f8	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.85fa	30 02		bmi $85fe			bmi 	_NCStepNeg
.85fc	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.85fe					_NCStepNeg:
.85fe	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8600	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8602	18		clc				clc
.8603					_NCBump:
.8603	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8605	91 34		sta ($34),y			sta 	(basicStack),y
.8607	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8609	c8		iny				iny 								; next byte
.860a	ca		dex				dex 								; do four times
.860b	d0 f6		bne $8603			bne 	_NCBump
.860d	20 b2 85	jsr $85b2			jsr		CopyIndexToReference		; copy it to the reference variable.
.8610	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8612	b1 34		lda ($34),y			lda 	(basicStack),y
.8614	0a		asl a				asl 	a 							; sign bit to carry
.8615	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8617	85 38		sta $38				sta 	zTemp1
.8619	90 02		bcc $861d			bcc 	_NCCompRev 					; use if step is +ve
.861b	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.861d					_NCCompRev:
.861d	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.861f	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8621	85 39		sta $39				sta 	zTemp1+1
.8623	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8625	38		sec				sec
.8626					_NCCompare:
.8626	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8628	b1 34		lda ($34),y			lda 	(basicStack),y
.862a	a4 39		ldy $39				ldy 	zTemp1+1
.862c	f1 34		sbc ($34),y			sbc 	(basicStack),y
.862e	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8630	e6 39		inc $39				inc 	zTemp1+1
.8632	ca		dex				dex 								; do it 4 times.
.8633	d0 f1		bne $8626			bne 	_NCCompare
.8635	50 02		bvc $8639			bvc 	_NCNoOverflow 				; convert to signed comparison
.8637	49 80		eor #$80			eor 	#$80
.8639					_NCNoOverflow:
.8639	7a		ply				ply 								; restore Y position
.863a	0a		asl a				asl 	a 							; is bit 7 set.
.863b	90 04		bcc $8641			bcc 	_NCLoopback 				; if no , >= so loop back
.863d	20 1e 97	jsr $971e			jsr 	StackClose 					; exit the loop
.8640	60		rts				rts
.8641					_NCLoopBack:
.8641	20 48 97	jsr $9748			jsr 	STKLoadCodePosition 		; loop back
.8644	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8645					Command_GOSUB:
.8645	a2 00		ldx #$00			ldx 	#0
.8647	20 54 96	jsr $9654			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.864a	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.864c	20 05 97	jsr $9705			jsr 	StackOpen 					; create frame
.864f	20 37 97	jsr $9737			jsr 	STKSaveCodePosition 		; save current position
.8652	4c 68 86	jmp $8668			jmp 	GotoStackX
.8655					Command_RETURN:
.8655	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8657	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8659	20 2c 97	jsr $972c			jsr 	StackCheckFrame
.865c	20 48 97	jsr $9748			jsr 	STKLoadCodePosition 		; restore code position
.865f	20 1e 97	jsr $971e			jsr 	StackClose
.8662	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8663					GotoCommand:
.8663	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8665	20 54 96	jsr $9654			jsr 	Evaluate16BitInteger
.8668					GotoStackX:
.8668	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.866b	48		pha				pha 								; it is slightly inefficient, just in cases.
.866c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.866f	fa		plx				plx
.8670	20 78 9d	jsr $9d78			jsr 	SearchLineAX 				; transfer to line number AX.
.8673	90 05		bcc $867a			bcc 	_GotoError 					; not found, off end.
.8675	d0 03		bne $867a			bne 	_GotoError 					; not found exactly
.8677	4c cf 88	jmp $88cf			jmp 	RunNewLine 					; and go straight to new line code.
.867a					_GotoError:
.867a	a9 0d		lda #$0d		lda	#13
.867c	4c 75 8b	jmp $8b75		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.867f					IfCommand:
.867f	a2 00		ldx #$00			ldx 	#0 							; If what.
.8681	20 1c 96	jsr $961c			jsr 	EvaluateNumber
.8684	b1 30		lda ($30),y			lda 	(codePtr),y
.8686	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8688	d0 0a		bne $8694			bne 	_IFStructured
.868a	c8		iny				iny 								; consume THEN
.868b	20 f8 96	jsr $96f8			jsr 	NSMIsZero 					; is it zero
.868e	f0 01		beq $8691			beq 	_IfFail 					; if fail, go to next line
.8690	60		rts				rts 								; if THEN just continue
.8691					_IfFail:
.8691	4c 21 89	jmp $8921			jmp 	EOLCommand
.8694					_IfStructured:
.8694	20 f8 96	jsr $96f8			jsr 	NSMIsZero 					; is it zero
.8697	d0 07		bne $86a0			bne 	_IfExit 					; if not, then continue normally.
.8699	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.869b	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.869d	20 e7 8a	jsr $8ae7			jsr 	ScanForward 				; and run from there/
.86a0					_IfExit:
.86a0	60		rts				rts
.86a1					ElseCode:
.86a1	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.86a3	aa		tax				tax 								; so just go to the structure exit
.86a4	20 e7 8a	jsr $8ae7			jsr 	ScanForward
.86a7	60		rts				rts
.86a8					EndIf:
.86a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.86a9					LetCommand:
.86a9	a2 00		ldx #$00			ldx 	#0
.86ab	ad 66 8f	lda $8f66			lda 	PrecedenceLevel+"*"			; precedence > this
.86ae	20 80 8f	jsr $8f80			jsr 	EvaluateExpressionAtPrecedence
.86b1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.86b4	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.86b6	f0 0e		beq $86c6			beq 	_LetGoProc 					; it's a procedure call.
.86b8	a9 3d		lda #$3d			lda 	#"=" 						; check =
.86ba	20 f9 9d	jsr $9df9			jsr 	CheckNextA
.86bd	e8		inx				inx 								; RHS
.86be	20 13 96	jsr $9613			jsr 	EvaluateValue
.86c1	ca		dex				dex
.86c2	20 c9 86	jsr $86c9			jsr 	AssignVariable
.86c5	60		rts				rts
.86c6					_LetGoProc:
.86c6	4c d9 87	jmp $87d9			jmp 	CallProcedure
.86c9					AssignVariable:
.86c9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.86cc	48		pha				pha 								; save a copy
.86cd	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.86d0	29 10		and #$10			and 	#NSBIsString
.86d2	d0 0b		bne $86df			bne 	_ASError
.86d4	68		pla				pla 								; get back
.86d5	29 10		and #$10			and 	#NSBIsString 				; check type
.86d7	d0 03		bne $86dc			bne 	_ASString
.86d9	4c bb 8f	jmp $8fbb			jmp 	AssignNumber
.86dc					_ASString:
.86dc	4c 29 90	jmp $9029			jmp 	AssignString
.86df					_ASError:
.86df	4c d5 a3	jmp $a3d5			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.86e2					Command_List:
.86e2	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.86e5	9c 14 06	stz $0614			stz 	NSMantissa1+4
.86e8	a9 ff		lda #$ff			lda 	#$FF
.86ea	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.86ed	8d 17 06	sta $0617			sta 	NSMantissa1+7
.86f0	b1 30		lda ($30),y			lda 	(codePtr),y
.86f2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86f4	f0 1e		beq $8714			beq 	_CLSecond
.86f6	20 6d 87	jsr $876d			jsr 	CLIsDigit 					; if not digit, list all
.86f9	b0 24		bcs $871f			bcs 	_CLStart
.86fb	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.86fd	20 54 96	jsr $9654			jsr 	Evaluate16BitInteger
.8700	b1 30		lda ($30),y			lda 	(codePtr),y
.8702	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8704	f0 0e		beq $8714			beq 	_CLSecond 					; if so go get it
.8706	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.8709	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.870c	ad 14 06	lda $0614			lda 	NSMantissa1+4
.870f	8d 17 06	sta $0617			sta 	NSMantissa1+7
.8712	80 0b		bra $871f			bra 	_CLStart
.8714					_CLSecond:
.8714	c8		iny				iny 								; consume comma
.8715	20 6d 87	jsr $876d			jsr 	CLIsDigit 					; digit found
.8718	b0 05		bcs $871f			bcs 	_CLStart 					; if not, continue listing
.871a	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.871c	20 54 96	jsr $9654			jsr 	Evaluate16BitInteger
.871f					_CLStart
.871f	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8721	85 30		sta $30				sta 	codePtr
.8723	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8725	85 31		sta $31				sta 	codePtr+1
.8727					_CLLoop:
.8727	b2 30		lda ($30)			lda 	(codePtr)
.8729	f0 2c		beq $8757			beq 	_CLExit
.872b	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.872d	20 5a 87	jsr $875a			jsr 	CLCompareLineNo
.8730	90 18		bcc $874a			bcc 	_CLNext
.8732	a2 07		ldx #$07			ldx 	#7
.8734	20 5a 87	jsr $875a			jsr 	CLCompareLineNo
.8737	f0 02		beq $873b			beq 	_CLDoThisOne
.8739	b0 0f		bcs $874a			bcs 	_CLNext
.873b					_CLDoThisOne:
.873b	20 46 89	jsr $8946			jsr 	ListConvertLine 			; convert line into token Buffer
.873e	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.8740	a9 27		lda #$27			lda 	#(tokenBuffer & $FF)
.8742	20 ce 8b	jsr $8bce			jsr 	PrintStringXA
.8745	a9 0d		lda #$0d			lda 	#13 						; new line
.8747	20 18 a6	jsr $a618			jsr 	EXTPrintCharacter
.874a					_CLNext:
.874a	18		clc				clc
.874b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.874d	65 30		adc $30				adc 	codePtr
.874f	85 30		sta $30				sta 	codePtr
.8751	90 02		bcc $8755			bcc 	_CREExit
.8753	e6 31		inc $31				inc 	codePtr+1
.8755					_CREExit:
.8755	80 d0		bra $8727			bra 	_CLLoop
.8757					_CLExit:
.8757	4c 0c 80	jmp $800c			jmp 	WarmStart
.875a					CLCompareLineNo:
.875a	38		sec				sec
.875b	a0 01		ldy #$01			ldy 	#1
.875d	b1 30		lda ($30),y			lda 	(codePtr),y
.875f	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8762	85 36		sta $36				sta 	zTemp0
.8764	c8		iny				iny
.8765	b1 30		lda ($30),y			lda 	(codePtr),y
.8767	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.876a	05 36		ora $36				ora 	zTemp0
.876c	60		rts				rts
.876d					CLIsDigit:
.876d	b1 30		lda ($30),y			lda 	(codePtr),y
.876f	c9 30		cmp #$30			cmp 	#"0"
.8771	90 03		bcc $8776			bcc	 	_CLIDExitFalse
.8773	c9 3a		cmp #$3a			cmp 	#"9"+1
.8775	60		rts				rts
.8776					_CLIDExitFalse:
.8776	38		sec				sec
.8777	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8778					NewCommand:
.8778	20 27 9d	jsr $9d27			jsr 	MemoryNew
.877b	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.877e	20 15 84	jsr $8415			jsr 	ClearCommand 				; clear everything.
.8781	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8782					Command_Print:
.8782	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8783					_CPLoop:
.8783	08		php				php 								; save last action flag
.8784	b1 30		lda ($30),y			lda 	(codePtr),y
.8786	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8788	f0 46		beq $87d0			beq 	_CPExit
.878a	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.878c	f0 42		beq $87d0			beq 	_CPExit
.878e	68		pla				pla 								; throw last action flag
.878f	b1 30		lda ($30),y			lda 	(codePtr),y
.8791	c8		iny				iny
.8792	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8794	f0 37		beq $87cd			beq 	_CPContinueWithSameLine
.8796	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8798	f0 2e		beq $87c8			beq 	_CPTab
.879a	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.879c	f0 26		beq $87c4			beq 	_CPNewLine
.879e	88		dey				dey 								; undo the get.
.879f	a2 00		ldx #$00			ldx 	#0
.87a1	20 13 96	jsr $9613			jsr 	EvaluateValue 				; get a value into slot 0
.87a4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.87a7	29 10		and #$10			and 	#NSBIsString
.87a9	f0 0b		beq $87b6			beq 	_CPNumber
.87ab	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.87ae	ad 08 06	lda $0608			lda 	NSMantissa0
.87b1	20 ce 8b	jsr $8bce			jsr 	PrintStringXA
.87b4	80 cc		bra $8782			bra 	Command_Print 				; loop round clearing carry so NL if end
.87b6					_CPNumber:
.87b6	a9 05		lda #$05			lda 	#5 							; maximum decimals
.87b8	20 e9 94	jsr $94e9			jsr 	ConvertNumberToString 		; convert to string
.87bb	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.87bd	a9 97		lda #$97			lda 	#DecimalBuffer & $FF
.87bf	20 ce 8b	jsr $8bce			jsr 	PrintStringXA
.87c2	80 be		bra $8782			bra 	Command_Print 				; loop round clearing carry so NL if end
.87c4					_CPNewLine:
.87c4	a9 0d		lda #$0d			lda 	#13
.87c6	80 02		bra $87ca			bra 	_CPPrintChar
.87c8					_CPTab:
.87c8	a9 09		lda #$09			lda 	#9 							; print TAB
.87ca					_CPPrintChar:
.87ca	20 18 a6	jsr $a618			jsr 	EXTPrintCharacter
.87cd					_CPContinueWithSameLine:
.87cd	38		sec				sec 								; loop round with carry set, which
.87ce	80 b3		bra $8783			bra 	_CPLoop 					; will inhibit final CR
.87d0					_CPExit:
.87d0	28		plp				plp 								; get last action flag
.87d1	b0 05		bcs $87d8			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.87d3	a9 0d		lda #$0d			lda 	#13 						; print new line
.87d5	20 18 a6	jsr $a618			jsr 	EXTPrintCharacter
.87d8					_CPExit2:
.87d8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.87d9					CallProcedure:
.87d9	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket
.87dc	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.87de	20 05 97	jsr $9705			jsr 	StackOpen
.87e1	20 37 97	jsr $9737			jsr 	STKSaveCodePosition 		; save loop position
.87e4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.87e7	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.87e9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.87ec	85 37		sta $37				sta 	zTemp0+1
.87ee	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.87f0	b2 36		lda ($36)			lda 	(zTemp0)
.87f2	85 30		sta $30				sta 	safePtr
.87f4	b1 36		lda ($36),y			lda 	(zTemp0),y
.87f6	85 31		sta $31				sta 	safePtr+1
.87f8	c8		iny				iny
.87f9	b1 36		lda ($36),y			lda 	(zTemp0),y
.87fb	85 32		sta $32				sta 	safePtr+2
.87fd	c8		iny				iny
.87fe	b1 36		lda ($36),y			lda 	(zTemp0),y
.8800	85 33		sta $33				sta 	safePtr+3
.8802	c8		iny				iny 								; get Y offset -> Y
.8803	b1 36		lda ($36),y			lda 	(zTemp0),y
.8805	a8		tay				tay
.8806	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket 			; check )
.8809	60		rts				rts 								; and continue from here
.9ddb					Command_ENDPROC:
.9ddb	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9ddd	a2 14		ldx #$14			ldx 	#ERRID_PROC
.9ddf	20 2c 97	jsr $972c			jsr 	StackCheckFrame
.9de2	20 48 97	jsr $9748			jsr 	STKLoadCodePosition 		; restore code position
.9de5	20 1e 97	jsr $971e			jsr 	StackClose
.9de8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.880a					Command_Read:
.880a	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.880c	20 4f 92	jsr $924f			jsr 	EvaluateTerm
.880f	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8812	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8814	f0 4a		beq $8860			beq 	_CRSyntax 					; check reference (bit 0)
.8816	20 a9 88	jsr $88a9			jsr 	SwapDataCodePtrs 			; swap code and data
.8819	ad 1a 07	lda $071a			lda 	inDataStatement 			; if in a data statement, we don't need to search
.881c	d0 20		bne $883e			bne 	_CRContinueData
.881e					_CRKeepSearching:
.881e	a9 a3		lda #$a3			lda 	#KWD_DATA 					; scan for instruction
.8820	aa		tax				tax
.8821	20 e7 8a	jsr $8ae7			jsr 	ScanForward
.8824	c9 a3		cmp #$a3			cmp 	#KWD_DATA 					; found data ?
.8826	f0 16		beq $883e			beq 	_CRHaveData 				; found it
.8828	18		clc				clc
.8829	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.882b	65 30		adc $30				adc 	codePtr
.882d	85 30		sta $30				sta 	codePtr
.882f	90 02		bcc $8833			bcc 	_CREExit
.8831	e6 31		inc $31				inc 	codePtr+1
.8833					_CREExit:
.8833	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8835	b2 30		lda ($30)			lda 	(codePtr)
.8837	d0 e5		bne $881e			bne 	_CRKeepSearching
.8839	a9 0b		lda #$0b		lda	#11
.883b	4c 75 8b	jmp $8b75		jmp	ErrorHandler
.883e					_CRHaveData:
.883e					_CRContinueData:
.883e	a2 01		ldx #$01			ldx 	#1
.8840	20 13 96	jsr $9613			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8843	ca		dex				dex
.8844	20 c9 86	jsr $86c9			jsr		AssignVariable 				; do the assignment
.8847	9c 1a 07	stz $071a			stz 	inDataStatement 			; clear in data
.884a	b1 30		lda ($30),y			lda 	(codePtr),y
.884c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.884e	d0 04		bne $8854			bne 	_CRSwapBack
.8850	c8		iny				iny 								; consume comma
.8851	ee 1a 07	inc $071a			inc 	inDataStatement 			; set in data statement currently.
.8854					_CRSwapBack:
.8854	20 a9 88	jsr $88a9			jsr 	SwapDataCodePtrs			; swap them back.
.8857	b1 30		lda ($30),y			lda 	(codePtr),y
.8859	c8		iny				iny
.885a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.885c	f0 ac		beq $880a			beq 	Command_Read 				; if so go round again.
.885e	88		dey				dey 								; unpick get.
.885f	60		rts				rts
.8860					_CRSyntax:
.8860	4c cb a3	jmp $a3cb			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8863					RemCommand:
.8863	b1 30		lda ($30),y			lda 	(codePtr),y
.8865	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8867	d0 06		bne $886f			bne 	_RMExit
.8869	c8		iny				iny
.886a	98		tya				tya
.886b	38		sec				sec
.886c	71 30		adc ($30),y			adc 	(codePtr),y
.886e	a8		tay				tay
.886f					_RMExit:
.886f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8870					Command_REPEAT:
.8870	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8872	20 05 97	jsr $9705			jsr 	StackOpen
.8875	20 37 97	jsr $9737			jsr 	STKSaveCodePosition 		; save loop position
.8878	60		rts				rts
.8879					Command_UNTIL:
.8879	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.887b	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.887d	20 2c 97	jsr $972c			jsr 	StackCheckFrame
.8880	a2 00		ldx #$00			ldx 	#0
.8882	20 1c 96	jsr $961c			jsr 	EvaluateNumber 				; work out the number
.8885	20 f8 96	jsr $96f8			jsr 	NSMIsZero 					; check if zero
.8888	f0 04		beq $888e			beq 	_CULoopBack 				; if so keep looping
.888a	20 1e 97	jsr $971e			jsr 	StackClose		 			; return
.888d	60		rts				rts
.888e					_CULoopBack:
.888e	20 48 97	jsr $9748			jsr 	STKLoadCodePosition 		; loop back
.8891	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8892					Command_Restore:
.8892	20 a9 88	jsr $88a9			jsr 	SwapDataCodePtrs 			; swap code and data
.8895	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8897	85 30		sta $30				sta 	codePtr
.8899	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.889b	85 31		sta $31				sta 	codePtr+1
.889d	20 a9 88	jsr $88a9			jsr 	SwapDataCodePtrs 			; put them back
.88a0	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.88a2	8d 19 07	sta $0719			sta 	dataPointer+4
.88a5	9c 1a 07	stz $071a			stz 	inDataStatement 			; not in data statement
.88a8	60		rts				rts
.88a9					SwapDataCodePtrs:
.88a9	da		phx				phx
.88aa	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.88ac					_SDCPLoop:
.88ac	b5 30		lda $30,x			lda 	safePtr,x
.88ae	48		pha				pha
.88af	bd 15 07	lda $0715,x			lda 	dataPointer,x
.88b2	95 30		sta $30,x			sta 	safePtr,x
.88b4	68		pla				pla
.88b5	9d 15 07	sta $0715,x			sta 	dataPointer,x
.88b8	ca		dex				dex
.88b9	10 f1		bpl $88ac			bpl 	_SDCPLoop
.88bb	ad 19 07	lda $0719			lda 	dataPointer+4 				; swap Y position over.
.88be	8c 19 07	sty $0719			sty 	dataPointer+4
.88c1	a8		tay				tay
.88c2	fa		plx				plx
.88c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.88c4					CommandRUN:
.88c4	20 15 84	jsr $8415			jsr 	ClearCommand 				; clear variable/stacks/etc.
.88c7	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.88c9	85 30		sta $30				sta 	codePtr
.88cb	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.88cd	85 31		sta $31				sta 	codePtr+1
.88cf					RUNNewLine:
.88cf	b2 30		lda ($30)			lda 	(codePtr)
.88d1	f0 4b		beq $891e			beq 	CRNoProgram         		; no then END.
.88d3	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.88d5	9a		txs				txs
.88d6					RUNCodePointerLine:
.88d6	a0 02		ldy #$02			ldy 	#2 							; start of program
.88d8					_CRIncMainLoop:
.88d8	c8		iny				iny
.88d9					_CRMainLoop:
.88d9	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.88dc	b1 30		lda ($30),y			lda 	(codePtr),y
.88de	10 10		bpl $88f0			bpl 	_CRNotKeyword
.88e0	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.88e2	b0 04		bcs $88e8			bcs 	_CRIsKeyword
.88e4	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.88e6	b0 30		bcs $8918			bcs		_CRSyntaxError
.88e8					_CRIsKeyword:
.88e8	c8		iny				iny 								; consume command
.88e9	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.88ea	aa		tax				tax 								; put in X for vector jump
.88eb	20 1b 89	jsr $891b			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.88ee	80 e9		bra $88d9			bra 	_CRMainLoop 				; and loop round
.88f0					_CRNotKeyword:
.88f0	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.88f2	f0 e4		beq $88d8			beq 	_CRIncMainLoop
.88f4	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.88f6	90 05		bcc $88fd			bcc 	_CRNotVariable
.88f8					_CRGoLet:
.88f8	20 a9 86	jsr $86a9			jsr 	LetCommand
.88fb	80 dc		bra $88d9			bra 	_CRMainLoop
.88fd					_CRNotVariable:
.88fd	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.88ff	f0 f7		beq $88f8			beq 	_CRGoLet
.8901	c9 21		cmp #$21			cmp 	#KWD_PLING
.8903	f0 f3		beq $88f8			beq 	_CRGoLet
.8905	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8907	f0 09		beq $8912			beq 	_CRGoRem
.8909	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.890b	d0 0b		bne $8918			bne 	_CRSyntaxError
.890d	20 36 83	jsr $8336			jsr 	LabelHere
.8910	80 c7		bra $88d9			bra 	_CRMainLoop
.8912					_CRGoRem:
.8912	c8		iny				iny
.8913	20 63 88	jsr $8863			jsr 	RemCommand
.8916	80 c1		bra $88d9			bra 	_CRMainLoop
.8918					_CRSyntaxError:
.8918	4c cb a3	jmp $a3cb			jmp 	SyntaxError
.891b					_CRCallVector0:
.891b	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.891e					CRNoProgram:
.891e	4c 2f 85	jmp $852f			jmp 	EndCommand
.8921					EOLCommand:
.8921	18		clc				clc
.8922	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8924	65 30		adc $30				adc 	codePtr
.8926	85 30		sta $30				sta 	codePtr
.8928	90 02		bcc $892c			bcc 	_CREExit
.892a	e6 31		inc $31				inc 	codePtr+1
.892c					_CREExit:
.892c	80 a1		bra $88cf			bra 	RunNewLine
.892e					Shift1Command:
.892e	b1 30		lda ($30),y			lda 	(codePtr),y
.8930	c8		iny				iny
.8931	0a		asl a				asl 	a
.8932	aa		tax				tax
.8933	7c f2 80	jmp ($80f2,x)			jmp 	(VectorSet1,x)
.8936					Shift2Command:
.8936	b1 30		lda ($30),y			lda 	(codePtr),y
.8938	c8		iny				iny
.8939	0a		asl a				asl 	a
.893a	aa		tax				tax
.893b	7c 0a 81	jmp ($810a,x)			jmp 	(VectorSet2,x)
.893e					Unused1:
.893e					Unused2:
.893e					Unused3:
.893e					Unused4:
.893e	4c cb a3	jmp $a3cb			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8941					StopCommand:
.8941	a9 08		lda #$08		lda	#8
.8943	4c 75 8b	jmp $8b75		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8946					ListConvertLine:
.8946	9c 1b 07	stz $071b			stz 	tbOffset
.8949	9c 27 07	stz $0727			stz 	tokenBuffer
.894c	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.894e	b1 30		lda ($30),y			lda 	(codePtr),y
.8950	aa		tax				tax
.8951	88		dey				dey
.8952	b1 30		lda ($30),y			lda 	(codePtr),y
.8954	20 45 9f	jsr $9f45			jsr 	ConvertInt16
.8957	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8959	86 37		stx $37				stx 	zTemp0+1
.895b	a0 00		ldy #$00			ldy 	#0
.895d					_LCCopyNumber:
.895d	b1 36		lda ($36),y			lda 	(zTemp0),y
.895f	20 5c 8a	jsr $8a5c			jsr 	LCLWrite
.8962	c8		iny				iny
.8963	b1 36		lda ($36),y			lda 	(zTemp0),y
.8965	d0 f6		bne $895d			bne 	_LCCopyNumber
.8967					_LCPadOut:
.8967	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.8969	20 5c 8a	jsr $8a5c			jsr 	LCLWrite
.896c	ad 1b 07	lda $071b			lda 	tbOffset
.896f	c9 06		cmp #$06			cmp 	#6
.8971	d0 f4		bne $8967			bne 	_LCPadOut
.8973	a0 03		ldy #$03			ldy 	#3 							; start position.
.8975					_LCMainLoop:
.8975	b1 30		lda ($30),y			lda 	(codePtr),y
.8977	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8979	f0 17		beq $8992			beq 	_LCExit
.897b	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.897d	90 14		bcc $8993			bcc 	_LCDoubles
.897f	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8981	90 20		bcc $89a3			bcc 	_LCShiftPunc
.8983	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8985	90 2b		bcc $89b2			bcc 	_LCPunctuation
.8987	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8989	90 2d		bcc $89b8			bcc 	_LCIdentifiers
.898b	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.898d	90 49		bcc $89d8			bcc 	_LCTokens
.898f	4c 30 8a	jmp $8a30			jmp 	_LCData 					; 254-5 are data objects
.8992					_LCExit:
.8992	60		rts				rts
.8993					_LCDoubles:
.8993	48		pha				pha
.8994	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8995	29 02		and #$02			and 	#2
.8997	09 3c		ora #$3c			ora 	#60 						; make < >
.8999	20 5c 8a	jsr $8a5c			jsr 	LCLWrite
.899c	68		pla				pla 								; restore, do lower bit
.899d	29 03		and #$03			and 	#3
.899f	09 3c		ora #$3c			ora 	#60
.89a1	80 0f		bra $89b2			bra		_LCPunctuation 				; print, increment, loop
.89a3					_LCShiftPunc:
.89a3	aa		tax				tax 								; save in X
.89a4	29 07		and #$07			and 	#7 							; lower 3 bits
.89a6	f0 02		beq $89aa			beq 	_LCNoAdd
.89a8	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.89aa					_LCNoAdd:
.89aa	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.89ac	90 02		bcc $89b0			bcc 	_LCNoAdd2
.89ae	09 20		ora #$20			ora 	#32 						; adds $20
.89b0					_LCNoAdd2:
.89b0	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.89b2					_LCPunctuation:
.89b2	c8		iny				iny 								; consume character
.89b3	20 5c 8a	jsr $8a5c			jsr 	LCLWrite 					; write it out.
.89b6	80 bd		bra $8975			bra 	_LCMainLoop 				; go round again.
.89b8					_LCIdentifiers:
.89b8	18		clc				clc 								; convert to physical address
.89b9	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.89bb	85 37		sta $37				sta 	zTemp0+1
.89bd	c8		iny				iny
.89be	b1 30		lda ($30),y			lda 	(codePtr),y
.89c0	85 36		sta $36				sta 	zTemp0
.89c2	c8		iny				iny
.89c3	5a		phy				phy 								; save position
.89c4	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.89c6					_LCOutIdentifier:
.89c6	c8		iny				iny
.89c7	b1 36		lda ($36),y			lda 	(zTemp0),y
.89c9	29 7f		and #$7f			and 	#$7F
.89cb	20 8a 8a	jsr $8a8a			jsr 	LCLLowerCase
.89ce	20 5c 8a	jsr $8a5c			jsr 	LCLWrite
.89d1	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.89d3	10 f1		bpl $89c6			bpl 	_LCOutIdentifier
.89d5	7a		ply				ply 								; restore position
.89d6	80 9d		bra $8975			bra 	_LCMainLoop
.89d8					_LCTokens:
.89d8	aa		tax				tax 								; token in X
.89d9	a9 61		lda #$61			lda 	#((KeywordSet2) & $FF)
.89db	85 36		sta $36				sta 	0+zTemp0
.89dd	a9 99		lda #$99			lda 	#((KeywordSet2) >> 8)
.89df	85 37		sta $37				sta 	1+zTemp0
.89e1	e0 82		cpx #$82			cpx 	#$82
.89e3	f0 16		beq $89fb			beq 	_LCUseShift
.89e5	a9 1d		lda #$1d			lda 	#((KeywordSet1) & $FF)
.89e7	85 36		sta $36				sta 	0+zTemp0
.89e9	a9 99		lda #$99			lda 	#((KeywordSet1) >> 8)
.89eb	85 37		sta $37				sta 	1+zTemp0
.89ed	e0 81		cpx #$81			cpx 	#$81
.89ef	f0 0a		beq $89fb			beq 	_LCUseShift
.89f1	a9 fb		lda #$fb			lda 	#((KeywordSet0) & $FF)
.89f3	85 36		sta $36				sta 	0+zTemp0
.89f5	a9 97		lda #$97			lda 	#((KeywordSet0) >> 8)
.89f7	85 37		sta $37				sta 	1+zTemp0
.89f9	80 01		bra $89fc			bra 	_LCNoShift
.89fb					_LCUseShift:
.89fb	c8		iny				iny
.89fc					_LCNoShift:
.89fc	20 6b 8a	jsr $8a6b			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.89ff	b1 30		lda ($30),y			lda 	(codePtr),y
.8a01	aa		tax				tax 								; into X
.8a02					_LCFindText:
.8a02	ca		dex				dex
.8a03	10 0e		bpl $8a13			bpl 	_LCFoundText 				; found text.
.8a05	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8a07	1a		inc a				inc 	a 							; one extra for size
.8a08	38		sec				sec 								; one extra for checksum
.8a09	65 36		adc $36				adc 	zTemp0 						; go to next token
.8a0b	85 36		sta $36				sta 	zTemp0
.8a0d	90 f3		bcc $8a02			bcc 	_LCFindText
.8a0f	e6 37		inc $37				inc 	zTemp0+1
.8a11	80 ef		bra $8a02			bra 	_LCFindText
.8a13					_LCFoundText:
.8a13	5a		phy				phy 								; save List position
.8a14	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8a16	aa		tax				tax
.8a17	a0 02		ldy #$02			ldy 	#2
.8a19					_LCCopyToken:
.8a19	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a1b	20 5c 8a	jsr $8a5c			jsr 	LCLWrite
.8a1e	c8		iny				iny
.8a1f	ca		dex				dex
.8a20	d0 f7		bne $8a19			bne 	_LCCopyToken
.8a22	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8a24	f0 05		beq $8a2b			beq 	_LCNoSpace
.8a26	a9 20		lda #$20			lda 	#' '
.8a28	20 5c 8a	jsr $8a5c			jsr 	LCLWrite
.8a2b					_LCNoSpace:
.8a2b	7a		ply				ply 								; restore position.
.8a2c	c8		iny				iny 								; consume token
.8a2d	4c 75 89	jmp $8975			jmp 	_LCMainLoop 				; and go around again.
.8a30					_LCData:
.8a30	48		pha				pha 								; save type $FE/$FF
.8a31	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8a33	c9 fe		cmp #$fe			cmp 	#$FE
.8a35	f0 02		beq $8a39			beq 	_LCHaveOpener
.8a37	a2 22		ldx #$22			ldx 	#'"'
.8a39					_LCHaveOpener:
.8a39	8a		txa				txa 								; output prefix (# or ")
.8a3a	20 5c 8a	jsr $8a5c			jsr 	LCLWrite
.8a3d	c8		iny				iny 								; get count
.8a3e	b1 30		lda ($30),y			lda 	(codePtr),y
.8a40	aa		tax				tax
.8a41	c8		iny				iny 								; point at first character
.8a42					_LCOutData:
.8a42	b1 30		lda ($30),y			lda 	(codePtr),y
.8a44	c9 00		cmp #$00			cmp 	#0
.8a46	f0 03		beq $8a4b			beq 	_LCNoPrint
.8a48	20 5c 8a	jsr $8a5c			jsr 	LCLWrite
.8a4b					_LCNoPrint:
.8a4b	c8		iny				iny
.8a4c	ca		dex				dex
.8a4d	d0 f3		bne $8a42			bne 	_LCOutData
.8a4f	68		pla				pla 								; closing " required ?
.8a50	c9 ff		cmp #$ff			cmp 	#$FF
.8a52	d0 05		bne $8a59			bne 	_LCNoQuote
.8a54	a9 22		lda #$22			lda 	#'"'
.8a56	20 5c 8a	jsr $8a5c			jsr 	LCLWrite
.8a59					_LCNoQuote:
.8a59	4c 75 89	jmp $8975			jmp 	_LCMainLoop
.8a5c					LCLWrite:
.8a5c	da		phx				phx
.8a5d	ae 1b 07	ldx $071b			ldx 	tbOffset
.8a60	9d 27 07	sta $0727,x			sta 	tokenBuffer,x
.8a63	9e 28 07	stz $0728,x			stz 	tokenBuffer+1,x
.8a66	ee 1b 07	inc $071b			inc 	tbOffset
.8a69	fa		plx				plx
.8a6a	60		rts				rts
.8a6b					LCCheckSpaceRequired:
.8a6b	ae 1b 07	ldx $071b			ldx 	tbOffset
.8a6e	bd 26 07	lda $0726,x			lda 	tokenBuffer-1,x 			; previous character
.8a71	20 8a 8a	jsr $8a8a			jsr 	LCLLowerCase 				; saves a little effort
.8a74	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8a76	90 11		bcc $8a89			bcc 	_LCCSRExit
.8a78	c9 3a		cmp #$3a			cmp 	#"9"+1
.8a7a	90 08		bcc $8a84			bcc 	_LCCSRSpace
.8a7c	c9 61		cmp #$61			cmp 	#"a"
.8a7e	90 09		bcc $8a89			bcc 	_LCCSRExit
.8a80	c9 7b		cmp #$7b			cmp 	#"z"+1
.8a82	b0 05		bcs $8a89			bcs 	_LCCSRExit
.8a84					_LCCSRSpace:
.8a84	a9 20		lda #$20			lda 	#' '
.8a86	20 5c 8a	jsr $8a5c			jsr 	LCLWrite
.8a89					_LCCSRExit:
.8a89	60		rts				rts
.8a8a					LCLLowerCase:
.8a8a	c9 41		cmp #$41			cmp 	#"A"
.8a8c	90 06		bcc $8a94			bcc 	_LCLLCOut
.8a8e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8a90	b0 02		bcs $8a94			bcs 	_LCLLCOut
.8a92	69 20		adc #$20			adc 	#$20
.8a94					_LCLLCOut:
.8a94	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8a95					ProcedureScan:
.8a95	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8a97	85 30		sta $30				sta 	codePtr
.8a99	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8a9b	85 31		sta $31				sta 	codePtr+1
.8a9d					_PSLoop:
.8a9d	b2 30		lda ($30)			lda 	(codePtr)
.8a9f	f0 42		beq $8ae3			beq 	_PSExit
.8aa1	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8aa3	b1 30		lda ($30),y			lda 	(codePtr),y
.8aa5	c9 98		cmp #$98			cmp 	#KWD_PROC
.8aa7	d0 2d		bne $8ad6			bne 	_PSNext
.8aa9	c8		iny				iny 								; get the address of the record to zTemp0 and
.8aaa	b1 30		lda ($30),y			lda 	(codePtr),y
.8aac	29 c0		and #$c0			and 	#$C0
.8aae	c9 40		cmp #$40			cmp 	#$40
.8ab0	d0 32		bne $8ae4			bne 	_PSSyntax
.8ab2	b1 30		lda ($30),y			lda 	(codePtr),y
.8ab4	18		clc				clc
.8ab5	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8ab7	85 37		sta $37				sta 	zTemp0+1
.8ab9	c8		iny				iny 								; LSB
.8aba	b1 30		lda ($30),y			lda 	(codePtr),y
.8abc	85 36		sta $36				sta 	zTemp0
.8abe	c8		iny				iny 								; character after variable call.
.8abf	98		tya				tya 								; save Y offset at +7
.8ac0	a0 07		ldy #$07			ldy 	#7
.8ac2	91 36		sta ($36),y			sta 	(zTemp0),y
.8ac4	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8ac6	a0 02		ldy #$02			ldy 	#2
.8ac8	91 36		sta ($36),y			sta 	(zTemp0),y
.8aca	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8acc					_PSCopy:
.8acc	b5 30		lda $30,x			lda 	safePtr,x
.8ace	c8		iny				iny
.8acf	91 36		sta ($36),y			sta 	(zTemp0),y
.8ad1	e8		inx				inx
.8ad2	e0 04		cpx #$04			cpx 	#4
.8ad4	d0 f6		bne $8acc			bne 	_PSCopy
.8ad6					_PSNext:
.8ad6	18		clc				clc
.8ad7	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8ad9	65 30		adc $30				adc 	codePtr
.8adb	85 30		sta $30				sta 	codePtr
.8add	90 02		bcc $8ae1			bcc 	_CREExit
.8adf	e6 31		inc $31				inc 	codePtr+1
.8ae1					_CREExit:
.8ae1	80 ba		bra $8a9d			bra 	_PSLoop
.8ae3					_PSExit:
.8ae3	60		rts				rts
.8ae4					_PSSyntax:
.8ae4	4c cb a3	jmp $a3cb			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8ae7					ScanForward:
.8ae7	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8ae9	86 37		stx $37				stx 	zTemp0+1
.8aeb	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8aed					_ScanLoop:
.8aed	b1 30		lda ($30),y			lda 	(codePtr),y
.8aef	c8		iny				iny
.8af0	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8af2	d0 0e		bne $8b02			bne 	_ScanGoNext
.8af4	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8af6	f0 04		beq $8afc			beq 	_ScanMatch
.8af8	c5 37		cmp $37				cmp 	zTemp0+1
.8afa	d0 06		bne $8b02			bne 	_ScanGoNext
.8afc					_ScanMatch:
.8afc	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8afe	d0 01		bne $8b01			bne 	_ScanNotEndEOL
.8b00	88		dey				dey
.8b01					_ScanNotEndEOL:
.8b01	60		rts				rts
.8b02					_ScanGoNext:
.8b02	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8b04	90 e7		bcc $8aed			bcc 	_ScanLoop
.8b06	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8b08	90 18		bcc $8b22			bcc 	_ScanSkipOne
.8b0a	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8b0c	b0 2f		bcs $8b3d			bcs 	_ScanSkipData
.8b0e	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8b10	90 db		bcc $8aed			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8b12	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8b14	b0 d7		bcs $8aed			bcs 	_ScanLoop
.8b16	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8b18	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8b1a	b0 d1		bcs $8aed			bcs 	_ScanLoop
.8b1c	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8b1e	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8b20	80 cb		bra $8aed			bra 	_ScanLoop
.8b22					_ScanSkipOne:
.8b22	c8		iny				iny 								; consume the extra one.
.8b23	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8b25	d0 c6		bne $8aed			bne 	_ScanLoop
.8b27	18		clc				clc
.8b28	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8b2a	65 30		adc $30				adc 	codePtr
.8b2c	85 30		sta $30				sta 	codePtr
.8b2e	90 02		bcc $8b32			bcc 	_CREExit
.8b30	e6 31		inc $31				inc 	codePtr+1
.8b32					_CREExit:
.8b32	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8b34	b2 30		lda ($30)			lda 	(codePtr)
.8b36	d0 b5		bne $8aed			bne 	_ScanLoop 					; if not zero, more to scan
.8b38	a9 13		lda #$13		lda	#19
.8b3a	4c 75 8b	jmp $8b75		jmp	ErrorHandler
.8b3d					_ScanSkipData:
.8b3d	88		dey				dey 								; point at data token
.8b3e	c8		iny				iny
.8b3f	98		tya				tya
.8b40	38		sec				sec
.8b41	71 30		adc ($30),y			adc 	(codePtr),y
.8b43	a8		tay				tay
.8b44	80 a7		bra $8aed			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8b46					Command_WHILE:
.8b46	5a		phy				phy 								; save position of the test
.8b47	a2 00		ldx #$00			ldx 	#0
.8b49	20 1c 96	jsr $961c			jsr 	EvaluateNumber 				; work out the number
.8b4c	20 f8 96	jsr $96f8			jsr 	NSMIsZero 					; check if zero
.8b4f	f0 0e		beq $8b5f			beq 	_WHExitLoop 				; if so exit the loop
.8b51	98		tya				tya 								; position *after* test.
.8b52	7a		ply				ply 								; restore position before test, at WHILE
.8b53	88		dey				dey
.8b54	48		pha				pha 								; push after test on the stack
.8b55	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8b57	20 05 97	jsr $9705			jsr 	StackOpen
.8b5a	20 37 97	jsr $9737			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8b5d	7a		ply				ply 								; restore the position *after* the test
.8b5e	60		rts				rts
.8b5f					_WHExitLoop:
.8b5f	68		pla				pla 								; throw post loop position
.8b60	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8b62	aa		tax				tax
.8b63	20 e7 8a	jsr $8ae7			jsr 	ScanForward
.8b66	60		rts				rts
.8b67					Command_WEND:
.8b67	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8b69	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8b6b	20 2c 97	jsr $972c			jsr 	StackCheckFrame
.8b6e	20 48 97	jsr $9748			jsr 	STKLoadCodePosition 		; loop back
.8b71	20 1e 97	jsr $971e			jsr 	StackClose		 			; erase the frame
.8b74	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9de9					CheckRightBracket:
.9de9	b1 30		lda ($30),y			lda 	(codePtr),y
.9deb	c8		iny				iny
.9dec	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9dee	d0 0f		bne $9dff			bne 	CNAFail
.9df0	60		rts				rts
.9df1					CheckComma:
.9df1	b1 30		lda ($30),y			lda 	(codePtr),y
.9df3	c8		iny				iny
.9df4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9df6	d0 07		bne $9dff			bne 	CNAFail
.9df8	60		rts				rts
.9df9					CheckNextA:
.9df9	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9dfb	d0 02		bne $9dff			bne 	CNAFail
.9dfd	c8		iny				iny 								; skip character
.9dfe	60		rts				rts 								; and exit
.9dff					CNAFail:
.9dff	4c cb a3	jmp $a3cb			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8b75					ErrorHandler:
.8b75	a8		tay				tay 								; find the error text
.8b76	f0 49		beq $8bc1			beq 	_EHEnd
.8b78	a2 00		ldx #$00			ldx 	#0
.8b7a	a9 e4		lda #$e4			lda 	#((ErrorText) & $FF)
.8b7c	85 36		sta $36				sta 	0+zTemp0
.8b7e	a9 a3		lda #$a3			lda 	#((ErrorText) >> 8)
.8b80	85 37		sta $37				sta 	1+zTemp0
.8b82					_EHFind:
.8b82	88		dey				dey 								; found the error text ?
.8b83	f0 0e		beq $8b93			beq 	_EHFound
.8b85					_EHFindZero:
.8b85	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8b87	e6 36		inc $36				inc 	zTemp0
.8b89	d0 02		bne $8b8d			bne 	_EHFNoCarry
.8b8b	e6 37		inc $37				inc 	zTemp0+1
.8b8d					_EHFNoCarry:
.8b8d	c9 00		cmp #$00			cmp 	#0
.8b8f	d0 f4		bne $8b85			bne 	_EHFindZero
.8b91	80 ef		bra $8b82			bra 	_EHFind
.8b93					_EHFound:
.8b93	a5 36		lda $36				lda 	zTemp0 						; print message
.8b95	a6 37		ldx $37				ldx 	zTemp0+1
.8b97	20 ce 8b	jsr $8bce			jsr 	PrintStringXA
.8b9a	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8b9c	b1 30		lda ($30),y			lda 	(codePtr),y
.8b9e	d0 05		bne $8ba5			bne 	_EHAtMsg
.8ba0	c8		iny				iny
.8ba1	b1 30		lda ($30),y			lda 	(codePtr),y
.8ba3	f0 17		beq $8bbc			beq 	_EHCREnd
.8ba5					_EHAtMsg:
.8ba5	a2 8b		ldx #$8b			ldx 	#_AtMsg >> 8 				; print " at "
.8ba7	a9 c4		lda #$c4			lda 	#_AtMsg & $FF
.8ba9	20 ce 8b	jsr $8bce			jsr 	PrintStringXA
.8bac	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8bae	b1 30		lda ($30),y			lda 	(codePtr),y
.8bb0	48		pha				pha
.8bb1	c8		iny				iny
.8bb2	b1 30		lda ($30),y			lda 	(codePtr),y
.8bb4	aa		tax				tax
.8bb5	68		pla				pla
.8bb6	20 45 9f	jsr $9f45			jsr 	ConvertInt16 				; convert XA to string
.8bb9	20 ce 8b	jsr $8bce			jsr 	PrintStringXA 				; and print it.
.8bbc					_EHCREnd:
.8bbc	a9 0d		lda #$0d			lda 	#13 						; new line
.8bbe	20 18 a6	jsr $a618			jsr 	EXTPrintCharacter
.8bc1					_EHEnd:
.8bc1	4c 0c 80	jmp $800c			jmp 	WarmStart
>8bc4	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8bcc	20 00
.8bce					PrintStringXA:
.8bce	5a		phy				phy
.8bcf	86 37		stx $37				stx 	zTemp0+1
.8bd1	85 36		sta $36				sta 	zTemp0
.8bd3	a0 00		ldy #$00			ldy 	#0
.8bd5					_PSXALoop:
.8bd5	b1 36		lda ($36),y			lda 	(zTemp0),y
.8bd7	f0 06		beq $8bdf			beq 	_PSXAExit
.8bd9	20 18 a6	jsr $a618			jsr 	EXTPrintCharacter
.8bdc	c8		iny				iny
.8bdd	80 f6		bra $8bd5			bra 	_PSXALoop
.8bdf					_PSXAExit:
.8bdf	7a		ply				ply
.8be0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8be1					UnaryTrue:
.8be1	fa		plx				plx
.8be2					ReturnTrue:
.8be2	a9 01		lda #$01			lda 	#1  						; set to 1
.8be4	20 ca 96	jsr $96ca			jsr 	NSMSetByte
.8be7	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8be9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8bec	60		rts				rts
.8bed					UnaryFalse:
.8bed	fa		plx				plx
.8bee					ReturnFalse:
.8bee	4c c8 96	jmp $96c8			jmp 	NSMSetZero 					; set it all to zero
.8bf1					BinaryCompareEqual:
.8bf1	fa		plx				plx
.8bf2	20 2d 8c	jsr $8c2d			jsr 	CompareBaseCode
.8bf5	c9 00		cmp #$00			cmp 	#0
.8bf7	f0 e9		beq $8be2			beq 	ReturnTrue
.8bf9	80 f3		bra $8bee			bra 	ReturnFalse
.8bfb					BinaryCompareLess:
.8bfb	fa		plx				plx
.8bfc	20 2d 8c	jsr $8c2d			jsr 	CompareBaseCode
.8bff	c9 ff		cmp #$ff			cmp 	#$FF
.8c01	f0 df		beq $8be2			beq 	ReturnTrue
.8c03	80 e9		bra $8bee			bra 	ReturnFalse
.8c05					BinaryCompareGreater:
.8c05	fa		plx				plx
.8c06	20 2d 8c	jsr $8c2d			jsr 	CompareBaseCode
.8c09	c9 01		cmp #$01			cmp 	#1
.8c0b	f0 d5		beq $8be2			beq 	ReturnTrue
.8c0d	80 df		bra $8bee			bra 	ReturnFalse
.8c0f					BinaryCompareNotEqual:
.8c0f	fa		plx				plx
.8c10	20 2d 8c	jsr $8c2d			jsr 	CompareBaseCode
.8c13	c9 00		cmp #$00			cmp 	#0
.8c15	d0 cb		bne $8be2			bne 	ReturnTrue
.8c17	80 d5		bra $8bee			bra 	ReturnFalse
.8c19					BinaryCompareLessEqual:
.8c19	fa		plx				plx
.8c1a	20 2d 8c	jsr $8c2d			jsr 	CompareBaseCode
.8c1d	c9 01		cmp #$01			cmp 	#1
.8c1f	d0 c1		bne $8be2			bne 	ReturnTrue
.8c21	80 cb		bra $8bee			bra 	ReturnFalse
.8c23					BinaryCompareGreaterEqual:
.8c23	fa		plx				plx
.8c24	20 2d 8c	jsr $8c2d			jsr 	CompareBaseCode
.8c27	c9 ff		cmp #$ff			cmp 	#$FF
.8c29	d0 b7		bne $8be2			bne 	ReturnTrue
.8c2b	80 c1		bra $8bee			bra 	ReturnFalse
.8c2d					CompareBaseCode:
.8c2d	20 8e 90	jsr $908e			jsr 	DereferenceTopTwo 			; make both values if references.
.8c30	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8c33	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c36	29 10		and #$10			and 	#NSTString
.8c38	d0 40		bne $8c7a			bne 	_CBCString
.8c3a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8c3d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8c40	d0 3b		bne $8c7d			bne 	_CBCFloat
.8c42	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8c45	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c48	29 08		and #$08			and 	#NSTFloat
.8c4a	d0 31		bne $8c7d			bne 	_CBCFloat
.8c4c	20 80 8c	jsr $8c80			jsr 	CompareFixMinusZero
.8c4f	e8		inx				inx
.8c50	20 80 8c	jsr $8c80			jsr 	CompareFixMinusZero
.8c53	ca		dex				dex
.8c54	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8c57	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8c5a	10 0b		bpl $8c67			bpl 	_CDCSameSign
.8c5c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8c5f	30 16		bmi $8c77			bmi 	_CBCLess 					; return $FF
.8c61					_CBCGreater:
.8c61	a9 01		lda #$01			lda 	#1
.8c63	60		rts				rts
.8c64					_CBCEqual:
.8c64	a9 00		lda #$00			lda 	#0
.8c66	60		rts				rts
.8c67					_CDCSameSign:
.8c67	20 90 8d	jsr $8d90			jsr 	SubTopTwoStack 				; unsigned subtract
.8c6a	20 f8 96	jsr $96f8			jsr 	NSMIsZero 					; or the mantissa together
.8c6d	f0 f5		beq $8c64			beq 	_CBCEqual 					; -0 == 0
.8c6f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8c72	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8c75	10 ea		bpl $8c61			bpl 	_CBCGreater
.8c77					_CBCLess:
.8c77	a9 ff		lda #$ff			lda 	#$FF
.8c79	60		rts				rts
.8c7a					_CBCString:
.8c7a	4c e6 8c	jmp $8ce6			jmp 	CompareStrings
.8c7d					_CBCFloat:
.8c7d	4c 41 a0	jmp $a041			jmp 	CompareFloat
.8c80					CompareFixMinusZero:
.8c80	20 f8 96	jsr $96f8			jsr 	NSMIsZero
.8c83	d0 03		bne $8c88			bne 	_CFXMZNotZero
.8c85	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8c88					_CFXMZNotZero:
.8c88	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8c89					StringConcat:
.8c89	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8c8c	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8c8f	29 18		and #$18			and 	#NSBTypeMask
.8c91	c9 10		cmp #$10			cmp 	#NSTString
.8c93	d0 4e		bne $8ce3			bne		_SCType
.8c95	64 38		stz $38				stz 	zTemp1 						; counting total length
.8c97	e8		inx				inx
.8c98	20 b6 8c	jsr $8cb6			jsr 	_SCSetupZ0 					; setup for second
.8c9b	20 c1 8c	jsr $8cc1			jsr 	_SCLengthZ0 				; length for second
.8c9e	ca		dex				dex
.8c9f	20 b6 8c	jsr $8cb6			jsr 	_SCSetupZ0 					; setup for first
.8ca2	20 c1 8c	jsr $8cc1			jsr 	_SCLengthZ0 				; length for first
.8ca5	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8ca7	20 c5 a5	jsr $a5c5			jsr 	StringTempAllocate
.8caa	20 d4 8c	jsr $8cd4			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8cad	e8		inx				inx
.8cae	20 b6 8c	jsr $8cb6			jsr 	_SCSetupZ0 					; copy second out
.8cb1	20 d4 8c	jsr $8cd4			jsr 	_SCCopy
.8cb4	ca		dex				dex
.8cb5	60		rts				rts
.8cb6					_SCSetupZ0:
.8cb6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8cb9	85 36		sta $36				sta 	zTemp0
.8cbb	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8cbe	85 37		sta $37				sta 	zTemp0+1
.8cc0	60		rts				rts
.8cc1					_SCLengthZ0:
.8cc1	5a		phy				phy
.8cc2	a0 00		ldy #$00			ldy 	#0
.8cc4					_SCLenLoop:
.8cc4	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cc6	f0 0a		beq $8cd2			beq 	_SCLExit
.8cc8	c8		iny				iny
.8cc9	e6 38		inc $38				inc 	zTemp1
.8ccb	10 f7		bpl $8cc4			bpl		_SCLenLoop
.8ccd	a9 09		lda #$09		lda	#9
.8ccf	4c 75 8b	jmp $8b75		jmp	ErrorHandler
.8cd2					_SCLExit:
.8cd2	7a		ply				ply
.8cd3	60		rts				rts
.8cd4					_SCCopy:
.8cd4	5a		phy				phy
.8cd5	a0 00		ldy #$00			ldy 	#0
.8cd7					_SCCopyLoop:
.8cd7	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cd9	f0 06		beq $8ce1			beq 	_SCCExit
.8cdb	20 03 a6	jsr $a603			jsr 	StringTempWrite
.8cde	c8		iny				iny
.8cdf	80 f6		bra $8cd7			bra 	_SCCopyLoop
.8ce1					_SCCExit:
.8ce1	7a		ply				ply
.8ce2	60		rts				rts
.8ce3					_SCType:
.8ce3	4c d5 a3	jmp $a3d5			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9e02					IntegerDivide:
.9e02	fa		plx				plx
.9e03	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9e06	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9e09	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e0a	0a		asl a				asl 	a
.9e0b	10 05		bpl $9e12			bpl 	_NotRef
.9e0d	48		pha				pha
.9e0e	20 8e 90	jsr $908e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e11	68		pla				pla
.9e12					_NotRef:
.9e12	0a		asl a				asl 	a
.9e13	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e15	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e18	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9e1b	f0 03		beq $9e20			beq 	_IntegerCode 				; if clear, then we have two integers
.9e1d	4c d5 a3	jmp $a3d5			jmp 	TypeError 					; anything else, type mismatch.
.9e20					_IntegerCode:
.9e20	20 42 9e	jsr $9e42			jsr 	CheckDivideZero 			; do div zero check
.9e23	20 7a 9e	jsr $9e7a			jsr 	Int32Divide 				; do the division
.9e26	20 37 9f	jsr $9f37			jsr 	CalculateSign 				; calculate result sign
.9e29					NSMCopyPlusTwoToZero:
.9e29	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9e2c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9e2f	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9e32	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9e35	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9e38	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9e3b	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9e3e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9e41	60		rts				rts
.9e42					CheckDivideZero:
.9e42	e8		inx				inx
.9e43	20 f8 96	jsr $96f8			jsr 	NSMIsZero
.9e46	f0 02		beq $9e4a			beq 	_CDVError
.9e48	ca		dex				dex
.9e49	60		rts				rts
.9e4a					_CDVError:
.9e4a	a9 03		lda #$03		lda	#3
.9e4c	4c 75 8b	jmp $8b75		jmp	ErrorHandler
.9e4f					IntegerModulus:
.9e4f	fa		plx				plx
.9e50	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9e53	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9e56	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e57	0a		asl a				asl 	a
.9e58	10 05		bpl $9e5f			bpl 	_NotRef
.9e5a	48		pha				pha
.9e5b	20 8e 90	jsr $908e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e5e	68		pla				pla
.9e5f					_NotRef:
.9e5f	0a		asl a				asl 	a
.9e60	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e62	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e65	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9e68	f0 03		beq $9e6d			beq 	_IntegerCode 				; if clear, then we have two integers
.9e6a	4c d5 a3	jmp $a3d5			jmp 	TypeError 					; anything else, type mismatch.
.9e6d					_IntegerCode:
.9e6d	20 42 9e	jsr $9e42			jsr 	CheckDivideZero 			; do div zero check
.9e70	20 7a 9e	jsr $9e7a			jsr 	Int32Divide 				; do the division
.9e73	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9e76	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9e79	60		rts				rts
.9e7a					Int32Divide:
.9e7a	48		pha				pha 								; save AXY
.9e7b	5a		phy				phy
.9e7c	20 9f 96	jsr $969f			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9e7f	20 c4 96	jsr $96c4			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9e82	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9e84					_I32DivideLoop:
.9e84	e8		inx				inx
.9e85	e8		inx				inx
.9e86	20 dd 96	jsr $96dd			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9e89	ca		dex				dex
.9e8a	ca		dex				dex
.9e8b	20 de 96	jsr $96de			jsr 	NSMRotateLeft
.9e8e	20 ba 9e	jsr $9eba			jsr 	DivideCheckSubtract 		; check if subtract possible
.9e91	90 03		bcc $9e96			bcc 	_I32DivideNoCarryIn
.9e93	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9e96					_I32DivideNoCarryIn:
.9e96	88		dey				dey 								; loop round till division completed.
.9e97	d0 eb		bne $9e84			bne 	_I32DivideLoop
.9e99	7a		ply				ply 								; restore AXY and exit
.9e9a	68		pla				pla
.9e9b	60		rts				rts
.9e9c					Int32ShiftDivide:
.9e9c	48		pha				pha 								; save AY
.9e9d	5a		phy				phy
.9e9e	e8		inx				inx 								; clear S[X+2]
.9e9f	e8		inx				inx
.9ea0	20 c8 96	jsr $96c8			jsr 	NSMSetZero
.9ea3	ca		dex				dex
.9ea4	ca		dex				dex
.9ea5	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9ea7					_I32SDLoop:
.9ea7	20 ba 9e	jsr $9eba			jsr 	DivideCheckSubtract 		; check if subtract possible
.9eaa	e8		inx				inx
.9eab	e8		inx				inx
.9eac	20 de 96	jsr $96de			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9eaf	ca		dex				dex
.9eb0	ca		dex				dex
.9eb1	20 de 96	jsr $96de			jsr 	NSMRotateLeft
.9eb4	88		dey				dey 	 							; do 31 times
.9eb5	d0 f0		bne $9ea7			bne 	_I32SDLoop
.9eb7	7a		ply				ply 								; restore AY and exit
.9eb8	68		pla				pla
.9eb9	60		rts				rts
.9eba					DivideCheckSubtract:
.9eba	20 90 8d	jsr $8d90			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9ebd	b0 04		bcs $9ec3			bcs 	_DCSExit 					; if carry set, then could do, exit
.9ebf	20 6a 8d	jsr $8d6a			jsr 	AddTopTwoStack 				; add it back in
.9ec2	18		clc				clc 								; and return False
.9ec3					_DCSExit:
.9ec3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9ec4					MulInteger:
.9ec4	fa		plx				plx
.9ec5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9ec8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9ecb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ecc	0a		asl a				asl 	a
.9ecd	10 05		bpl $9ed4			bpl 	_NotRef
.9ecf	48		pha				pha
.9ed0	20 8e 90	jsr $908e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ed3	68		pla				pla
.9ed4					_NotRef:
.9ed4	0a		asl a				asl 	a 							; put MSB of type into A:7
.9ed5	30 0b		bmi $9ee2			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9ed7	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9eda	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9edd	f0 06		beq $9ee5			beq 	_IntegerCode 				; if clear, then we have two integers
.9edf	4c 18 a1	jmp $a118			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9ee2					_StringData:
.9ee2	4c df a3	jmp $a3df			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9ee5					_IntegerCode:
.9ee5	20 f2 9e	jsr $9ef2			jsr 	MultiplyShort
.9ee8	c9 00		cmp #$00			cmp 	#0
.9eea	f0 05		beq $9ef1			beq 	_MIExit
.9eec	a9 04		lda #$04		lda	#4
.9eee	4c 75 8b	jmp $8b75		jmp	ErrorHandler
.9ef1					_MIExit:
.9ef1	60		rts				rts
.9ef2					MultiplyShort:
.9ef2	5a		phy				phy 								; save Y
.9ef3	20 9f 96	jsr $969f			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9ef6	20 c4 96	jsr $96c4			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9ef9	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9efb					_I32MLoop:
.9efb	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9efe	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9f01	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9f04	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9f07	f0 28		beq $9f31			beq 	_I32MExit 					; exit if zero
.9f09	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9f0c	29 01		and #$01			and 	#1
.9f0e	f0 0e		beq $9f1e			beq 	_I32MNoAdd
.9f10	20 6a 8d	jsr $8d6a			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9f13	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9f16	10 06		bpl $9f1e			bpl 	_I32MNoAdd
.9f18					_I32ShiftRight:
.9f18	20 eb 96	jsr $96eb			jsr 	NSMShiftRight 				; shift S[X] right
.9f1b	c8		iny				iny 								; increment shift count
.9f1c	80 0a		bra $9f28			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9f1e					_I32MNoAdd:
.9f1e	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9f21	70 f5		bvs $9f18			bvs 	_I32ShiftRight 				; instead.
.9f23	e8		inx				inx
.9f24	20 dd 96	jsr $96dd			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9f27	ca		dex				dex
.9f28					_I32MShiftUpper:
.9f28	e8		inx				inx 								; shift S[X+2] right
.9f29	e8		inx				inx
.9f2a	20 eb 96	jsr $96eb			jsr 	NSMShiftRight
.9f2d	ca		dex				dex
.9f2e	ca		dex				dex
.9f2f	80 ca		bra $9efb			bra 	_I32MLoop 					; try again.
.9f31					_I32MExit:
.9f31	20 37 9f	jsr $9f37			jsr 	CalculateSign
.9f34	98		tya				tya 								; shift in A
.9f35	7a		ply				ply 								; restore Y and exit
.9f36	60		rts				rts
.9f37					CalculateSign:
.9f37	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9f3a	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9f3d	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9f40	0a		asl a				asl 	a 							; shift bit 7 into carry
.9f41	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.9f44	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8ce6					CompareStrings:
.8ce6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8ce9	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8cec	29 10		and #$10			and 	#NSBIsString
.8cee	f0 2c		beq $8d1c			beq 	_CSTypeError
.8cf0	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8cf3	85 36		sta $36				sta 	zTemp0
.8cf5	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8cf8	85 37		sta $37				sta 	zTemp0+1
.8cfa	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8cfd	85 38		sta $38				sta 	zTemp1
.8cff	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8d02	85 39		sta $39				sta 	zTemp1+1
.8d04	5a		phy				phy 								; save Y so we can access strings
.8d05	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8d07					_CSLoop:
.8d07	c8		iny				iny
.8d08	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8d0a	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8d0c	d0 06		bne $8d14			bne 	_CSDifferent
.8d0e	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8d10	d0 f5		bne $8d07			bne 	_CSLoop 					; still comparing
.8d12					_CSExit:
.8d12	7a		ply				ply 								; reached end, return zero in A from EOS
.8d13	60		rts				rts
.8d14					_CSDifferent:
.8d14	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8d16	90 fa		bcc $8d12			bcc		_CSExit
.8d18	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8d1a	80 f6		bra $8d12			bra 	_CSExit
.8d1c					_CSTypeError:
.8d1c	4c d5 a3	jmp $a3d5			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8d1f					ShiftLeft:
.8d1f	38		sec				sec
.8d20	80 01		bra $8d23			bra 	ShiftMain
.8d22					ShiftRight:
.8d22	18		clc				clc
.8d23					ShiftMain:
.8d23	fa		plx				plx 								; restore X
.8d24	08		php				php 								; save direction
.8d25	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8d28	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d2b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8d2c	0a		asl a				asl 	a
.8d2d	10 05		bpl $8d34			bpl 	_NotRef
.8d2f	48		pha				pha
.8d30	20 8e 90	jsr $908e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8d33	68		pla				pla
.8d34					_NotRef:
.8d34	0a		asl a				asl 	a
.8d35	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8d37	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8d3a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d3d	f0 03		beq $8d42			beq 	_IntegerCode 				; if clear, then we have two integers
.8d3f	4c d5 a3	jmp $a3d5			jmp 	TypeError 					; anything else, type mismatch.
.8d42					_IntegerCode:
.8d42	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8d45	29 e0		and #$e0			and 	#$E0
.8d47	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8d4a	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8d4d	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8d50	d0 13		bne $8d65			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8d52					_SMLoop:
.8d52	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8d55	30 11		bmi $8d68			bmi 	_SMExit 					; exit if done.
.8d57	28		plp				plp 								; restore direcition setting
.8d58	08		php				php
.8d59	90 05		bcc $8d60			bcc 	_SMRight
.8d5b	20 dd 96	jsr $96dd			jsr 	NSMShiftLeft 				; shift left if CS
.8d5e	80 f2		bra $8d52			bra 	_SMLoop
.8d60					_SMRight:
.8d60	20 eb 96	jsr $96eb			jsr 	NSMShiftRight 				; shift right if CC
.8d63	80 ed		bra $8d52			bra 	_SMLoop
.8d65					_SMExit0:
.8d65	20 c8 96	jsr $96c8			jsr 	NSMSetZero 					; return zero.
.8d68					_SMExit:
.8d68	28		plp				plp 								; throw direction
.8d69	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8d6a					AddTopTwoStack:
.8d6a	18		clc				clc
.8d6b	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8d6e	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8d71	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d74	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8d77	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8d7a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8d7d	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8d80	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8d83	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8d86	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8d89	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8d8c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8d8f	60		rts				rts
.8d90					SubTopTwoStack:
.8d90	38		sec				sec
.8d91	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8d94	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8d97	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d9a	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8d9d	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8da0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8da3	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8da6	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8da9	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8dac	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8daf	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8db2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8db5	60		rts				rts
.8db6					AddInteger:
.8db6	fa		plx				plx
.8db7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8dba	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8dbd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8dbe	0a		asl a				asl 	a
.8dbf	10 05		bpl $8dc6			bpl 	_NotRef
.8dc1	48		pha				pha
.8dc2	20 8e 90	jsr $908e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8dc5	68		pla				pla
.8dc6					_NotRef:
.8dc6	0a		asl a				asl 	a 							; put MSB of type into A:7
.8dc7	30 0b		bmi $8dd4			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8dc9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8dcc	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8dcf	f0 06		beq $8dd7			beq 	_IntegerCode 				; if clear, then we have two integers
.8dd1	4c a0 9f	jmp $9fa0			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8dd4					_StringData:
.8dd4	4c 89 8c	jmp $8c89			jmp 	StringConcat							; at least one string - don't know both are strings.
.8dd7					_IntegerCode:
.8dd7					AddCode:
.8dd7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8dda	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8ddd	10 8b		bpl $8d6a			bpl 	AddTopTwoStack
.8ddf	20 90 8d	jsr $8d90			jsr 	SubTopTwoStack 				; do a physical subtraction
.8de2	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8de5	10 09		bpl $8df0			bpl 	_AddExit
.8de7	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8dea	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ded	20 7d 96	jsr $967d			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8df0					_AddExit:
.8df0	60		rts				rts
.8df1					SubInteger:
.8df1	fa		plx				plx
.8df2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8df5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8df8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8df9	0a		asl a				asl 	a
.8dfa	10 05		bpl $8e01			bpl 	_NotRef
.8dfc	48		pha				pha
.8dfd	20 8e 90	jsr $908e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e00	68		pla				pla
.8e01					_NotRef:
.8e01	0a		asl a				asl 	a 							; put MSB of type into A:7
.8e02	30 0b		bmi $8e0f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8e04	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e07	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e0a	f0 06		beq $8e12			beq 	_IntegerCode 				; if clear, then we have two integers
.8e0c	4c a5 9f	jmp $9fa5			jmp 	FloatingPointSub 							; otherwise at least one float.
.8e0f					_StringData:
.8e0f	4c df a3	jmp $a3df			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8e12					_IntegerCode:
.8e12	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8e15	49 80		eor #$80			eor 	#$80
.8e17	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8e1a	80 bb		bra $8dd7			bra 	AddCode 					; and do the same code as add.
.8e1c					AndInteger:
.8e1c	fa		plx				plx
.8e1d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e20	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e23	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e24	0a		asl a				asl 	a
.8e25	10 05		bpl $8e2c			bpl 	_NotRef
.8e27	48		pha				pha
.8e28	20 8e 90	jsr $908e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e2b	68		pla				pla
.8e2c					_NotRef:
.8e2c	0a		asl a				asl 	a
.8e2d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e2f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e32	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e35	f0 03		beq $8e3a			beq 	_IntegerCode 				; if clear, then we have two integers
.8e37	4c d5 a3	jmp $a3d5			jmp 	TypeError 					; anything else, type mismatch.
.8e3a					_IntegerCode:
.8e3a	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8e3d	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8e40	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e43	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8e46	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8e49	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e4c	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8e4f	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8e52	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e55	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8e58	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8e5b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e5e	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8e61	60		rts				rts
.8e62					OraInteger:
.8e62	fa		plx				plx
.8e63	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e66	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e69	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e6a	0a		asl a				asl 	a
.8e6b	10 05		bpl $8e72			bpl 	_NotRef
.8e6d	48		pha				pha
.8e6e	20 8e 90	jsr $908e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e71	68		pla				pla
.8e72					_NotRef:
.8e72	0a		asl a				asl 	a
.8e73	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e75	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e78	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e7b	f0 03		beq $8e80			beq 	_IntegerCode 				; if clear, then we have two integers
.8e7d	4c d5 a3	jmp $a3d5			jmp 	TypeError 					; anything else, type mismatch.
.8e80					_IntegerCode:
.8e80	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8e83	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8e86	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e89	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8e8c	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8e8f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e92	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8e95	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8e98	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e9b	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8e9e	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8ea1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ea4	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8ea7	60		rts				rts
.8ea8					EorInteger:
.8ea8	fa		plx				plx
.8ea9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8eac	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8eaf	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eb0	0a		asl a				asl 	a
.8eb1	10 05		bpl $8eb8			bpl 	_NotRef
.8eb3	48		pha				pha
.8eb4	20 8e 90	jsr $908e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8eb7	68		pla				pla
.8eb8					_NotRef:
.8eb8	0a		asl a				asl 	a
.8eb9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ebb	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ebe	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ec1	f0 03		beq $8ec6			beq 	_IntegerCode 				; if clear, then we have two integers
.8ec3	4c d5 a3	jmp $a3d5			jmp 	TypeError 					; anything else, type mismatch.
.8ec6					_IntegerCode:
.8ec6	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8ec9	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8ecc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ecf	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8ed2	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8ed5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ed8	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8edb	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8ede	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ee1	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8ee4	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8ee7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8eea	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8eed	60		rts				rts
.8eee					WordIndirect:
.8eee	fa		plx				plx
.8eef	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ef2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ef5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ef6	0a		asl a				asl 	a
.8ef7	10 05		bpl $8efe			bpl 	_NotRef
.8ef9	48		pha				pha
.8efa	20 8e 90	jsr $908e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8efd	68		pla				pla
.8efe					_NotRef:
.8efe	0a		asl a				asl 	a
.8eff	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f01	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f04	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f07	f0 03		beq $8f0c			beq 	_IntegerCode 				; if clear, then we have two integers
.8f09	4c d5 a3	jmp $a3d5			jmp 	TypeError 					; anything else, type mismatch.
.8f0c					_IntegerCode:
.8f0c	20 d7 8d	jsr $8dd7			jsr 	AddCode 					; add the two values
.8f0f	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.8f11	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f14	60		rts				rts
.8f15					ByteIndirect:
.8f15	fa		plx				plx
.8f16	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f19	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f1c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f1d	0a		asl a				asl 	a
.8f1e	10 05		bpl $8f25			bpl 	_NotRef
.8f20	48		pha				pha
.8f21	20 8e 90	jsr $908e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f24	68		pla				pla
.8f25					_NotRef:
.8f25	0a		asl a				asl 	a
.8f26	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f28	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f2b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f2e	f0 03		beq $8f33			beq 	_IntegerCode 				; if clear, then we have two integers
.8f30	4c d5 a3	jmp $a3d5			jmp 	TypeError 					; anything else, type mismatch.
.8f33					_IntegerCode:
.8f33	20 d7 8d	jsr $8dd7			jsr 	AddCode 					; add the two values
.8f36	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8f38	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f3b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9f45					ConvertInt16:
.9f45	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9f48	8e 10 06	stx $0610			stx 	NSMantissa1
.9f4b	9c 18 06	stz $0618			stz 	NSMantissa2
.9f4e	9c 20 06	stz $0620			stz 	NSMantissa3
.9f51	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.9f54	a2 00		ldx #$00			ldx 	#0 							; stack level
.9f56	a9 0a		lda #$0a			lda 	#10 						; base
.9f58	80 00		bra $9f5a			bra 	ConvertInt32
.9f5a					ConvertInt32:
.9f5a	5a		phy				phy
.9f5b	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9f5d	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9f60	10 08		bpl $9f6a			bpl 	_CI32NotNeg
.9f62	48		pha				pha
.9f63	a9 2d		lda #$2d			lda 	#'-'
.9f65	99 75 08	sta $0875,y			sta 	NumberBuffer,y
.9f68	c8		iny				iny
.9f69	68		pla				pla
.9f6a					_CI32NotNeg:
.9f6a	20 78 9f	jsr $9f78			jsr 	_CI32DivideConvert 			; recursive conversion
.9f6d	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9f6f	99 75 08	sta $0875,y			sta 	NumberBuffer,y
.9f72	7a		ply				ply
.9f73	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9f75	a9 75		lda #$75			lda 	#NumberBuffer & $FF
.9f77	60		rts				rts
.9f78					_CI32DivideConvert:
.9f78	e8		inx				inx 								; write to next slot up
.9f79	20 ca 96	jsr $96ca			jsr 	NSMSetByte
.9f7c	ca		dex				dex
.9f7d	20 7a 9e	jsr $9e7a			jsr 	Int32Divide 				; divide
.9f80	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9f83	48		pha				pha
.9f84	20 29 9e	jsr $9e29			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9f87	20 f8 96	jsr $96f8			jsr 	NSMIsZero 					; is it zero ?
.9f8a	f0 06		beq $9f92			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9f8c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9f8f	20 78 9f	jsr $9f78			jsr 	_CI32DivideConvert 			; and recusrively call.
.9f92					_CI32NoRecurse:
.9f92	68		pla				pla 								; remainder
.9f93	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9f95	90 02		bcc $9f99			bcc 	_CI32NotHex
.9f97	69 26		adc #$26			adc 	#6+32
.9f99					_CI32NotHex:
.9f99	69 30		adc #$30			adc 	#48
.9f9b	99 75 08	sta $0875,y			sta 	NumberBuffer,y 				; write out and exit
.9f9e	c8		iny				iny
.9f9f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.8f3c					PrecedenceLevel:
>8f3c	04					.byte	 4	; $00 <<
>8f3d	02					.byte	 2	; $01 <=
>8f3e	02					.byte	 2	; $02 <>
>8f3f	00					.byte	 0	; $03 !!3
>8f40	00					.byte	 0	; $04 ><
>8f41	02					.byte	 2	; $05 >=
>8f42	04					.byte	 4	; $06 >>
>8f43	00					.byte	 0	; $07 !!7
>8f44	00					.byte	 0	; $08 !!8
>8f45	00					.byte	 0	; $09 !!9
>8f46	00					.byte	 0	; $0a !!10
>8f47	00					.byte	 0	; $0b !!11
>8f48	00					.byte	 0	; $0c !!12
>8f49	00					.byte	 0	; $0d !!13
>8f4a	00					.byte	 0	; $0e !!14
>8f4b	00					.byte	 0	; $0f !!15
>8f4c	00					.byte	 0	; $10 @
>8f4d	00					.byte	 0	; $11 !!17
>8f4e	00					.byte	 0	; $12 !!18
>8f4f	00					.byte	 0	; $13 [
>8f50	04					.byte	 4	; $14 \
>8f51	00					.byte	 0	; $15 ]
>8f52	01					.byte	 1	; $16 ^
>8f53	00					.byte	 0	; $17 _
>8f54	00					.byte	 0	; $18 `
>8f55	00					.byte	 0	; $19 !!25
>8f56	00					.byte	 0	; $1a !!26
>8f57	00					.byte	 0	; $1b {
>8f58	01					.byte	 1	; $1c |
>8f59	00					.byte	 0	; $1d }
>8f5a	00					.byte	 0	; $1e ~
>8f5b	00					.byte	 0	; $1f [7m<7F>[m
>8f5c	00					.byte	 0	; $20
>8f5d	05					.byte	 5	; $21 !
>8f5e	00					.byte	 0	; $22 "
>8f5f	00					.byte	 0	; $23 #
>8f60	05					.byte	 5	; $24 $
>8f61	04					.byte	 4	; $25 %
>8f62	01					.byte	 1	; $26 &
>8f63	00					.byte	 0	; $27 '
>8f64	00					.byte	 0	; $28 (
>8f65	00					.byte	 0	; $29 )
>8f66	04					.byte	 4	; $2a *
>8f67	03					.byte	 3	; $2b +
>8f68	00					.byte	 0	; $2c ,
>8f69	03					.byte	 3	; $2d -
>8f6a	00					.byte	 0	; $2e .
>8f6b	04					.byte	 4	; $2f /
>8f6c	00					.byte	 0	; $30 0
>8f6d	00					.byte	 0	; $31 1
>8f6e	00					.byte	 0	; $32 2
>8f6f	00					.byte	 0	; $33 3
>8f70	00					.byte	 0	; $34 4
>8f71	00					.byte	 0	; $35 5
>8f72	00					.byte	 0	; $36 6
>8f73	00					.byte	 0	; $37 7
>8f74	00					.byte	 0	; $38 8
>8f75	00					.byte	 0	; $39 9
>8f76	00					.byte	 0	; $3a :
>8f77	00					.byte	 0	; $3b ;
>8f78	02					.byte	 2	; $3c <
>8f79	02					.byte	 2	; $3d =
>8f7a	02					.byte	 2	; $3e >
>8f7b	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.8f7c					EvaluateExpressionAt0:
.8f7c	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8f7e					EvaluateExpression:
.8f7e	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8f80					EvaluateExpressionAtPrecedence:
.8f80	48		pha				pha 								; save precedence level
.8f81	20 4f 92	jsr $924f			jsr 	EvaluateTerm 				; evaluate term into level X.
.8f84	68		pla				pla 								; restore precedence level.
.8f85					_EXPRLoop:
.8f85	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8f87	b1 30		lda ($30),y			lda 	(codePtr),y
.8f89	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8f8b	b0 25		bcs $8fb2			bcs 	_EXPRExit
.8f8d	da		phx				phx 								; read the operator precedence
.8f8e	aa		tax				tax
.8f8f	bd 3c 8f	lda $8f3c,x			lda 	PrecedenceLevel,x
.8f92	fa		plx				plx
.8f93	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8f95	f0 1b		beq $8fb2			beq 	_EXPRExit
.8f97	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8f99	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8f9b	c5 37		cmp $37				cmp 	zTemp0+1
.8f9d	b0 13		bcs $8fb2			bcs		_EXPRExit 					; if current >= operator exit
.8f9f	48		pha				pha 								; save current precedence.
.8fa0	b1 30		lda ($30),y			lda 	(codePtr),y
.8fa2	c8		iny				iny
.8fa3	48		pha				pha
.8fa4	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8fa6	e8		inx				inx 								; work out the right hand side.
.8fa7	20 80 8f	jsr $8f80			jsr 	EvaluateExpressionAtPrecedence
.8faa	ca		dex				dex
.8fab	68		pla				pla 								; get operator, call the code.
.8fac	20 b5 8f	jsr $8fb5			jsr 	_EXPRCaller
.8faf	68		pla				pla 								; restore precedence level
.8fb0	80 d3		bra $8f85			bra 	_EXPRLoop 					; and go round.
.8fb2					_EXPRExit:
.8fb2	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8fb4	60		rts				rts
.8fb5					_EXPRCaller:
.8fb5	da		phx				phx 								; save on stack, first thing is to restore it
.8fb6	0a		asl a				asl 	a 							; double so can use vectors into X
.8fb7	aa		tax				tax
.8fb8	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9fa0					FloatingPointAdd:
.9fa0	20 41 a1	jsr $a141			jsr 	FloatPrepare 				; prepare for floats
.9fa3	80 0b		bra $9fb0			bra 	FloatAdd
.9fa5					FloatingPointSub:
.9fa5	20 41 a1	jsr $a141			jsr 	FloatPrepare 				; prepare for floats
.9fa8					FloatSubtract:
.9fa8	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9fab	49 80		eor #$80			eor 	#$80
.9fad	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9fb0					FloatAdd:
.9fb0	48		pha				pha
.9fb1	5a		phy				phy
.9fb2	20 52 a1	jsr $a152			jsr 	NSNormalise 				; normalise S[X]
.9fb5	f0 54		beq $a00b			beq 	_FAReturn1
.9fb7	e8		inx				inx 								; normalise S[X+1]
.9fb8	20 52 a1	jsr $a152			jsr 	NSNormalise
.9fbb	ca		dex				dex
.9fbc	c9 00		cmp #$00			cmp 	#0
.9fbe	f0 6f		beq $a02f			beq 	_FAExit 					; if so, just return A
.9fc0	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9fc3	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.9fc6	f0 1b		beq $9fe3			beq 	_FAExponentsEqual
.9fc8	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9fcb	a8		tay				tay
.9fcc	38		sec				sec 								; do a signed comparison of the exponents.
.9fcd	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9fd0	50 02		bvc $9fd4			bvc 	_FANoSignedChange
.9fd2	49 80		eor #$80			eor 	#$80
.9fd4					_FANoSignedChange:
.9fd4	29 80		and #$80			and 	#$80
.9fd6	10 03		bpl $9fdb			bpl 	_FAHaveMax
.9fd8	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9fdb					_FAHaveMax:
.9fdb	20 32 a0	jsr $a032			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9fde	e8		inx				inx
.9fdf	20 32 a0	jsr $a032			jsr 	_FAShiftToExponent
.9fe2	ca		dex				dex
.9fe3					_FAExponentsEqual:
.9fe3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9fe6	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9fe9	30 10		bmi $9ffb			bmi 	_FADifferentSigns
.9feb	20 6a 8d	jsr $8d6a			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9fee	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9ff1	10 3c		bpl $a02f			bpl 	_FAExit 					; if no, we are done.
.9ff3	20 eb 96	jsr $96eb			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9ff6	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9ff9	80 34		bra $a02f			bra 	_FAExit
.9ffb					_FADifferentSigns:
.9ffb	20 90 8d	jsr $8d90			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9ffe	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.a001	10 2c		bpl $a02f			bpl 	_FAExit 					; if no, we are done.
.a003	20 74 96	jsr $9674			jsr 	NSMNegate 					; netate result
.a006	20 7d 96	jsr $967d			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a009	80 24		bra $a02f			bra 	_FAExit
.a00b					_FAReturn1:
.a00b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.a00e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a011	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.a014	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a017	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.a01a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a01d	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.a020	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a023	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.a026	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a029	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.a02c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a02f					_FAExit:
.a02f	7a		ply				ply
.a030	68		pla				pla
.a031	60		rts				rts
.a032					_FAShiftToExponent:
.a032					_FAShiftToExponent2:
.a032	98		tya				tya 								; compare Y to exponent
.a033	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a036	f0 08		beq $a040			beq 	_FASEExit 					; exit if so.
.a038	20 eb 96	jsr $96eb			jsr 	NSMShiftRight	 			; shift the mantissa right
.a03b	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.a03e	80 f2		bra $a032			bra 	_FAShiftToExponent2
.a040					_FASEExit:
.a040	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a041					CompareFloat:
.a041	20 a8 9f	jsr $9fa8			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a044	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a047	29 f8		and #$f8			and 	#$F8
.a049	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.a04c	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.a04f	f0 09		beq $a05a			beq 	_FCExit 					; zero, so approximately identical
.a051	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a053	3c 00 06	bit $0600,x			bit 	NSStatus,x
.a056	10 02		bpl $a05a			bpl 	_FCExit
.a058					_FCNegative:
.a058	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a05a					_FCExit:
.a05a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a05b					FDivideCommand:
.a05b	fa		plx				plx	 								; restore stack position
.a05c	20 41 a1	jsr $a141			jsr 	FloatPrepare 				; prepare for floats
.a05f					FloatDivide:
.a05f	48		pha				pha
.a060	e8		inx				inx
.a061	20 52 a1	jsr $a152			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a064	ca		dex				dex
.a065	c9 00		cmp #$00			cmp 	#0
.a067	f0 20		beq $a089			beq 	_FDZero
.a069	20 52 a1	jsr $a152			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a06c	f0 19		beq $a087			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a06e	20 9c 9e	jsr $9e9c			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a071	20 29 9e	jsr $9e29			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a074	20 52 a1	jsr $a152			jsr		NSNormalise 				; renormalise
.a077	20 37 9f	jsr $9f37			jsr 	CalculateSign 				; calculate result sign
.a07a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.a07d	38		sec				sec
.a07e	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a081	38		sec				sec
.a082	e9 1e		sbc #$1e			sbc 	#30
.a084	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a087					_FDExit:
.a087	68		pla				pla
.a088	60		rts				rts
.a089					_FDZero:
.a089	a9 03		lda #$03		lda	#3
.a08b	4c 75 8b	jmp $8b75		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a08e					FloatFractionalPart:
.a08e	5a		phy				phy
.a08f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.a092	29 7f		and #$7f			and 	#$7F
.a094	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a097	20 52 a1	jsr $a152			jsr 	NSNormalise
.a09a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a09d	38		sec				sec
.a09e	e9 e0		sbc #$e0			sbc 	#$E0
.a0a0	90 31		bcc $a0d3			bcc 	_FFPExit 					; already fractional
.a0a2	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a0a4	b0 2a		bcs $a0d0			bcs 	_FFPZero
.a0a6	a8		tay				tay 								; put count to do in Y
.a0a7	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.a0aa	20 d5 a0	jsr $a0d5			jsr 	_FFPPartial
.a0ad	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a0b0	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.a0b3	20 d5 a0	jsr $a0d5			jsr 	_FFPPartial
.a0b6	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a0b9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a0bc	20 d5 a0	jsr $a0d5			jsr 	_FFPPartial
.a0bf	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a0c2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a0c5	20 d5 a0	jsr $a0d5			jsr 	_FFPPartial
.a0c8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a0cb	20 f8 96	jsr $96f8			jsr 	NSMIsZero 					; zeroed check.
.a0ce	d0 03		bne $a0d3			bne 	_FFPExit
.a0d0					_FFPZero:
.a0d0	20 c8 96	jsr $96c8			jsr 	NSMSetZero
.a0d3					_FFPExit:
.a0d3	7a		ply				ply
.a0d4	60		rts				rts
.a0d5					_FFPPartial:
.a0d5	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a0d7	f0 17		beq $a0f0			beq 	_FFFPPExit
.a0d9	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a0db	b0 0c		bcs $a0e9			bcs 	_FFFPPWholeByte
.a0dd	5a		phy				phy
.a0de					_FFFPPLeft:
.a0de	0a		asl a				asl 	a
.a0df	88		dey				dey
.a0e0	d0 fc		bne $a0de			bne 	_FFFPPLeft
.a0e2	7a		ply				ply
.a0e3					_FFFPPRight:
.a0e3	4a		lsr a				lsr 	a
.a0e4	88		dey				dey
.a0e5	d0 fc		bne $a0e3			bne 	_FFFPPRight
.a0e7	80 07		bra $a0f0			bra 	_FFFPPExit
.a0e9					_FFFPPWholeByte:
.a0e9	98		tya				tya 								; subtract 8 from count
.a0ea	38		sec				sec
.a0eb	e9 08		sbc #$08			sbc 	#8
.a0ed	a8		tay				tay
.a0ee	a9 00		lda #$00			lda 	#0 							; and clear all
.a0f0					_FFFPPExit:
.a0f0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a0f1					FloatIntegerPart:
.a0f1	48		pha				pha
.a0f2	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.a0f5	f0 1f		beq $a116			beq 	_FIPExit 					; if so do nothing
.a0f7	20 f8 96	jsr $96f8			jsr 	NSMIsZero 					; is it zero ?
.a0fa	f0 17		beq $a113			beq 	_FIPZero 					; if so return zero.
.a0fc	20 52 a1	jsr $a152			jsr 	NSNormalise 				; normalise
.a0ff	f0 12		beq $a113			beq 	_FIPZero 					; normalised to zero, exit zero
.a101					_FIPShift:
.a101	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a104	10 08		bpl $a10e			bpl 	_FIPCheckZero
.a106	20 eb 96	jsr $96eb			jsr 	NSMShiftRight 				; shift mantissa right
.a109	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.a10c	80 f3		bra $a101			bra 	_FIPShift
.a10e					_FIPCheckZero:
.a10e	20 f8 96	jsr $96f8			jsr 	NSMIsZero 					; avoid -0 problem
.a111	d0 03		bne $a116			bne 	_FIPExit 					; set to zero if mantissa zero.
.a113					_FIPZero:
.a113	20 c8 96	jsr $96c8			jsr 	NSMSetZero
.a116					_FIPExit:
.a116	68		pla				pla
.a117	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a118					FloatingPointMultiply:
.a118	20 41 a1	jsr $a141			jsr 	FloatPrepare 				; prepare for floats
.a11b					FloatMultiply:
.a11b	48		pha				pha
.a11c	20 52 a1	jsr $a152			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a11f	f0 1b		beq $a13c			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a121	e8		inx				inx
.a122	20 52 a1	jsr $a152			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a125	ca		dex				dex
.a126	c9 00		cmp #$00			cmp 	#0
.a128	f0 0f		beq $a139			beq 	_FDSetZero
.a12a	20 f2 9e	jsr $9ef2			jsr 	MultiplyShort 				; calculate the result.
.a12d	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a130	18		clc				clc
.a131	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.a134	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a137	80 03		bra $a13c			bra 	_FDExit
.a139					_FDSetZero:
.a139	20 c8 96	jsr $96c8			jsr 	NSMSetZero 					; return 0
.a13c					_FDExit:
.a13c	20 52 a1	jsr $a152			jsr 	NSNormalise 				; normalise the result
.a13f	68		pla				pla
.a140	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a141					FloatPrepare:
.a141	20 8e 90	jsr $908e			jsr 	DereferenceTopTwo 			; dereference the top two values
.a144	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.a147	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a14a	29 10		and #$10			and 	#NSBIsString
.a14c	d0 01		bne $a14f			bne 	_FDType
.a14e	60		rts				rts
.a14f					_FDType:
.a14f	4c d5 a3	jmp $a3d5			jmp 	TypeError
.a152					NSNormalise:
.a152	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.a155	29 80		and #$80			and 	#$80
.a157	09 08		ora #$08			ora 	#NSTFloat
.a159	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a15c	20 f8 96	jsr $96f8			jsr 	NSMIsZero 					; if zero exit
.a15f	d0 09		bne $a16a			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a161	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a164	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.a167	a9 00		lda #$00			lda 	#0 							; set Z flag
.a169	60		rts				rts
.a16a					_NSNormaliseOptimise:
.a16a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a16d	d0 22		bne $a191			bne 	_NSNormaliseLoop
.a16f	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.a172	30 1d		bmi $a191			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a174	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a177	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a17a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a17d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a180	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a183	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.a186	bd 28 06	lda $0628,x			lda 	NSExponent,x
.a189	38		sec				sec
.a18a	e9 08		sbc #$08			sbc 	#8
.a18c	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a18f	80 d9		bra $a16a			bra 	_NSNormaliseOptimise
.a191					_NSNormaliseLoop:
.a191	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a194	70 08		bvs $a19e			bvs 	_NSNExit 					; exit if so with Z flag clear
.a196	20 dd 96	jsr $96dd			jsr 	NSMShiftLeft 				; shift mantissa left
.a199	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.a19c	80 f3		bra $a191			bra 	_NSNormaliseLoop
.a19e					_NSNExit:
.a19e	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a1a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.8fbb					AssignNumber:
.8fbb	5a		phy				phy
.8fbc	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.8fbf	85 36		sta $36				sta 	zTemp0
.8fc1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8fc4	85 37		sta $37				sta 	zTemp0+1
.8fc6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8fc9	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.8fcb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8fce	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.8fd0	c9 08		cmp #$08			cmp 	#NSTFloat
.8fd2	f0 2a		beq $8ffe			beq 	_ANFloat
.8fd4	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.8fd7	f0 05		beq $8fde			beq		_ANNotFloat
.8fd9	e8		inx				inx
.8fda	20 f1 a0	jsr $a0f1			jsr 	FloatIntegerPart 			; make it an integer
.8fdd	ca		dex				dex
.8fde					_ANNotFloat:
.8fde	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.8fe1	29 03		and #$03			and 	#3
.8fe3	d0 05		bne $8fea			bne 	_ANByteWord
.8fe5	20 0a 90	jsr $900a			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8fe8	80 1e		bra $9008			bra 	_ANExit
.8fea					_ANByteWord:
.8fea	48		pha				pha 								; save count
.8feb	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.8fee	92 36		sta ($36)			sta 	(zTemp0)
.8ff0	68		pla				pla
.8ff1	c9 01		cmp #$01			cmp	 	#1
.8ff3	f0 13		beq $9008			beq 	_ANExit
.8ff5	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.8ff8	a0 01		ldy #$01			ldy 	#1
.8ffa	91 36		sta ($36),y			sta 	(zTemp0),y
.8ffc	80 0a		bra $9008			bra 	_ANExit
.8ffe					_ANFloat:
.8ffe	20 0a 90	jsr $900a			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9001	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9004	a0 04		ldy #$04			ldy 	#4
.9006	91 36		sta ($36),y			sta 	(zTemp0),y
.9008					_ANExit:
.9008	7a		ply				ply
.9009	60		rts				rts
.900a					_ANCopy4PackSign:
.900a	a0 03		ldy #$03			ldy 	#3
.900c	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.900f	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9011	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.9014	91 36		sta ($36),y			sta 	(zTemp0),y
.9016	88		dey				dey
.9017	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.901a	91 36		sta ($36),y			sta 	(zTemp0),y
.901c	88		dey				dey
.901d	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9020	91 36		sta ($36),y			sta 	(zTemp0),y
.9022	88		dey				dey
.9023	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9026	91 36		sta ($36),y			sta 	(zTemp0),y
.9028	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9029					AssignString:
.9029	5a		phy				phy
.902a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.902d	85 38		sta $38				sta 	zTemp1
.902f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9032	85 39		sta $39				sta 	zTemp1+1
.9034	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9037	85 36		sta $36				sta 	zTemp0
.9039	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.903c	85 37		sta $37				sta 	zTemp0+1
.903e	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9040	b1 36		lda ($36),y			lda 	(zTemp0),y
.9042	f0 23		beq $9067			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9044	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9045	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9047	e9 02		sbc #$02			sbc 	#2
.9049	85 3c		sta $3c				sta 	zsTemp
.904b	a0 01		ldy #$01			ldy 	#1
.904d	b1 36		lda ($36),y			lda 	(zTemp0),y
.904f	e9 00		sbc #$00			sbc 	#0
.9051	85 3d		sta $3d				sta 	zsTemp+1
.9053	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9055					_ASGetLength:
.9055	c8		iny				iny
.9056	b1 38		lda ($38),y			lda 	(zTemp1),y
.9058	d0 fb		bne $9055			bne 	_ASGetLength
.905a	98		tya				tya 								; is this length <= current length
.905b	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.905d	90 20		bcc $907f			bcc 	_ASCopyString
.905f	f0 1e		beq $907f			beq 	_ASCopyString
.9061	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9063	a0 01		ldy #$01			ldy 	#1
.9065	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9067					_ASNewStringRequired:
.9067	e8		inx				inx 								; concrete the new string.
.9068	20 4a a5	jsr $a54a			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.906b	ca		dex				dex
.906c	18		clc				clc
.906d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9070	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9072	92 36		sta ($36)			sta 	(zTemp0)
.9074	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9077	69 00		adc #$00			adc 	#0
.9079	a0 01		ldy #$01			ldy 	#1
.907b	91 36		sta ($36),y			sta 	(zTemp0),y
.907d	80 0d		bra $908c			bra 	_ASExit
.907f					_ASCopyString:
.907f	a0 00		ldy #$00			ldy 	#0
.9081					_ASCopyLoop:
.9081	b1 38		lda ($38),y			lda 	(zTemp1),y
.9083	c8		iny				iny
.9084	c8		iny				iny
.9085	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9087	88		dey				dey
.9088	c9 00		cmp #$00			cmp 	#0
.908a	d0 f5		bne $9081			bne 	_ASCopyLoop
.908c					_ASExit:
.908c	7a		ply				ply
.908d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.908e					DereferenceTopTwo:
.908e	e8		inx				inx
.908f	20 93 90	jsr $9093			jsr 	Dereference 				; deref x+1
.9092	ca		dex				dex  								; falls through to deref x
.9093					Dereference:
.9093	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.9096	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9098	f0 57		beq $90f1			beq 	_DRFExit 					; not a reference
.909a	5a		phy				phy
.909b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.909e	85 36		sta $36				sta 	zTemp0
.90a0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.90a3	85 37		sta $37				sta 	zTemp0+1
.90a5	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.90a8	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.90aa	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.90ad	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.90b0	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.90b2	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.90b4	f0 0f		beq $90c5			beq 	_DRFDereferenceTwo
.90b6	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.90b8	f0 39		beq $90f3			beq 	_DRFFull
.90ba	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.90bd	29 03		and #$03			and 	#3
.90bf	f0 32		beq $90f3			beq 	_DRFFull 					; the whole word
.90c1	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.90c3	f0 07		beq $90cc			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.90c5					_DRFDereferenceTwo:
.90c5	a0 01		ldy #$01			ldy 	#1
.90c7	b1 36		lda ($36),y			lda 	(zTemp0),y
.90c9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.90cc					_DRFClear23:
.90cc	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.90cf	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.90d2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.90d5	29 18		and #$18			and 	#NSBTypeMask
.90d7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.90da	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.90dc	d0 12		bne $90f0			bne 	_DRFNotString
.90de	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.90e1	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.90e4	d0 0a		bne $90f0			bne 	_DRFNotString
.90e6	a9 f2		lda #$f2			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.90e8	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.90eb	a9 90		lda #$90			lda 	#_DRFNullString >> 8
.90ed	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.90f0					_DRFNotString
.90f0	7a		ply				ply 								; restore Y and exit
.90f1					_DRFExit:
.90f1	60		rts				rts
.90f2					_DRFNullString:
>90f2	00						.byte 	0
.90f3					_DRFFull:
.90f3	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.90f5	b1 36		lda ($36),y			lda 	(zTemp0),y
.90f7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.90fa	c8		iny				iny
.90fb	b1 36		lda ($36),y			lda 	(zTemp0),y
.90fd	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9100	c8		iny				iny
.9101	b1 36		lda ($36),y			lda 	(zTemp0),y
.9103	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9106	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.9109	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.910c	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.910e	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.9111	f0 06		beq $9119			beq 	_DRFNoExponent
.9113	c8		iny				iny 								; if not, read the exponent as well.
.9114	b1 36		lda ($36),y			lda 	(zTemp0),y
.9116	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9119					_DRFNoExponent:
.9119	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.911c	10 0d		bpl $912b			bpl 	_DRFExit2 					; if not, then exit.
.911e	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9120	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9123	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.9126	09 80		ora #$80			ora 	#NSBIsNegative
.9128	9d 00 06	sta $0600,x			sta 	NSStatus,x
.912b					_DRFExit2:
.912b	7a		ply				ply
.912c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.912d					EncodeNumberStart:
.912d	38		sec				sec
.912e	80 01		bra $9131			bra 	EncodeNumberContinue+1
.9130					EncodeNumberContinue:
.9130	18		clc				clc
.9131					EncodeNumber:
.9131	08		php				php 								; save reset.
.9132	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9134	f0 12		beq $9148			beq 	_ENIsOkay
.9136	c9 30		cmp #$30			cmp 	#"0"
.9138	90 04		bcc $913e			bcc 	_ENBadNumber
.913a	c9 3a		cmp #$3a			cmp 	#"9"+1
.913c	90 0a		bcc $9148			bcc 	_ENIsOkay
.913e					_ENBadNumber:
.913e	28		plp				plp 								; throw saved reset
.913f	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.9142	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9144	f0 7e		beq $91c4			beq 	_ENConstructFinal
.9146					_ENFail:
.9146	18		clc				clc 								; not allowed
.9147	60		rts				rts
.9148					_ENIsOkay:
.9148	28		plp				plp 								; are we restarting
.9149	90 15		bcc $9160			bcc 	_ENNoRestart
.914b					_ENStartEncode:
.914b	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.914d	f0 0c		beq $915b			beq 	_ENFirstDP
.914f	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9151	20 ca 96	jsr $96ca			jsr 	NSMSetByte
.9154	a9 01		lda #$01			lda 	#ESTA_Low
.9156					_ENExitChange:
.9156	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.9159	38		sec				sec
.915a	60		rts				rts
.915b					_ENFirstDP:
.915b	20 c8 96	jsr $96c8			jsr 	NSMSetZero 					; clear integer part
.915e	80 3f		bra $919f			bra 	_ESTASwitchFloat			; go straight to float and exi
.9160					_ENNoRestart:
.9160	48		pha				pha 								; save on stack.
.9161	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.9164	c9 01		cmp #$01			cmp 	#ESTA_Low
.9166	f0 09		beq $9171			beq  	_ESTALowState
.9168	c9 02		cmp #$02			cmp 	#ESTA_High
.916a	f0 29		beq $9195			beq 	_ESTAHighState
.916c	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.916e	f0 3b		beq $91ab			beq 	_ESTADecimalState
>9170	db						.byte 	$DB 						; causes a break in the emulator
.9171					_ESTALowState:
.9171	68		pla				pla 								; get value back
.9172	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9174	f0 29		beq $919f			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9176	29 0f		and #$0f			and 	#15 						; make digit
.9178	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.917b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.917e	0a		asl a				asl 	a
.917f	0a		asl a				asl 	a
.9180	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9183	0a		asl a				asl 	a
.9184	6d 06 07	adc $0706			adc 	DigitTemp
.9187	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.918a	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.918c	90 05		bcc $9193			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.918e	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9190	8d 05 07	sta $0705			sta 	EncodeState
.9193					_ESTANoSwitch:
.9193	38		sec				sec
.9194	60		rts				rts
.9195					_ESTAHighState:
.9195	68		pla				pla 								; get value back
.9196	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9198	f0 05		beq $919f			beq 	_ESTASwitchFloat
.919a	20 fe 91	jsr $91fe			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.919d	38		sec				sec
.919e	60		rts				rts
.919f					_ESTASwitchFloat:
.919f	9c 07 07	stz $0707			stz 	DecimalCount
.91a2	e8		inx				inx 								; zero the decimal additive.
.91a3	20 c8 96	jsr $96c8			jsr 	NSMSetZero
.91a6	ca		dex				dex
.91a7	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.91a9	80 ab		bra $9156			bra 	_ENExitChange
.91ab					_ESTADecimalState:
.91ab	68		pla				pla 								; digit.
.91ac	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.91ae	f0 96		beq $9146			beq 	_ENFail
.91b0	e8		inx				inx 								; put digit into fractional part of X+1
.91b1	20 fe 91	jsr $91fe			jsr 	ESTAShiftDigitIntoMantissa
.91b4	ca		dex				dex
.91b5	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.91b8	ad 07 07	lda $0707			lda 	DecimalCount
.91bb	c9 0b		cmp #$0b			cmp 	#11
.91bd	f0 02		beq $91c1			beq 	_ESTADSFail
.91bf	38		sec				sec
.91c0	60		rts				rts
.91c1					_ESTADSFail:
.91c1	4c d0 a3	jmp $a3d0			jmp 	RangeError
.91c4					_ENConstructFinal:
.91c4	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.91c7	f0 33		beq $91fc			beq 	_ENCFExit 					; no decimals
.91c9	5a		phy				phy
.91ca	0a		asl a				asl 	a 							; x 4 and CLC
.91cb	0a		asl a				asl 	a
.91cc	6d 07 07	adc $0707			adc 	DecimalCount
.91cf	a8		tay				tay
.91d0	b9 8f a3	lda $a38f,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.91d3	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.91d6	b9 90 a3	lda $a390,y			lda 	DecimalScalarTable-5+1,y
.91d9	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.91dc	b9 91 a3	lda $a391,y			lda 	DecimalScalarTable-5+2,y
.91df	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.91e2	b9 92 a3	lda $a392,y			lda 	DecimalScalarTable-5+3,y
.91e5	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.91e8	b9 93 a3	lda $a393,y			lda 	DecimalScalarTable-5+4,y
.91eb	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.91ee	a9 08		lda #$08			lda 	#NSTFloat
.91f0	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.91f3	7a		ply				ply
.91f4	e8		inx				inx 								; multiply decimal const by decimal scalar
.91f5	20 1b a1	jsr $a11b			jsr 	FloatMultiply
.91f8	ca		dex				dex
.91f9	20 b0 9f	jsr $9fb0			jsr 	FloatAdd 					; add to integer part.
.91fc					_ENCFExit:
.91fc	18		clc				clc 								; reject the digit.
.91fd	60		rts				rts
.91fe					ESTAShiftDigitIntoMantissa:
.91fe	29 0f		and #$0f			and 	#15 						; save digit
.9200	48		pha				pha
.9201	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9204	48		pha				pha
.9205	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9208	48		pha				pha
.9209	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.920c	48		pha				pha
.920d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9210	48		pha				pha
.9211	20 dd 96	jsr $96dd			jsr 	NSMShiftLeft 				; x 2
.9214	20 dd 96	jsr $96dd			jsr 	NSMShiftLeft 				; x 4
.9217	18		clc				clc 								; pop mantissa and add
.9218	68		pla				pla
.9219	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.921c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.921f	68		pla				pla
.9220	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.9223	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9226	68		pla				pla
.9227	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.922a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.922d	68		pla				pla
.922e	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.9231	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.9234	20 dd 96	jsr $96dd			jsr 	NSMShiftLeft 				; x 10
.9237	68		pla				pla 								; add digit
.9238	18		clc				clc
.9239	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.923c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.923f	90 0d		bcc $924e			bcc 	_ESTASDExit
.9241	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.9244	d0 08		bne $924e			bne 	_ESTASDExit
.9246	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.9249	d0 03		bne $924e			bne 	_ESTASDExit
.924b	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.924e					_ESTASDExit:
.924e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.924f					EvaluateTerm:
.924f	b1 30		lda ($30),y			lda 	(codePtr),y
.9251	30 18		bmi $926b			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9253	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9255	b0 6f		bcs $92c6			bcs 	_ETVariable
.9257	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9259	90 6e		bcc $92c9			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.925b	c9 3a		cmp #$3a			cmp 	#'9'+1
.925d	b0 6a		bcs $92c9			bcs 	_ETPuncUnary
.925f	20 2d 91	jsr $912d			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9262					_ETNumber:
.9262	c8		iny				iny 								; keep encoding until we have the numbers
.9263	b1 30		lda ($30),y			lda 	(codePtr),y
.9265	20 30 91	jsr $9130			jsr 	EncodeNumberContinue
.9268	b0 f8		bcs $9262			bcs 	_ETNumber 					; go back if accepted.
.926a	60		rts				rts
.926b					_ETCheckUnary:
.926b	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.926d	f0 41		beq $92b0			beq 	_ETString
.926f	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9271	f0 12		beq $9285			beq 	_ETHexConstant
.9273	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9275	90 0b		bcc $9282			bcc 	_ETSyntaxError
.9277	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.9279	b0 07		bcs $9282			bcs 	_ETSyntaxError
.927b	da		phx				phx 								; push X on the stack
.927c	0a		asl a				asl 	a 							; put vector x 2 into X
.927d	aa		tax				tax
.927e	c8		iny				iny 								; consume unary function token
.927f	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.9282					_ETSyntaxError:
.9282	4c cb a3	jmp $a3cb			jmp 	SyntaxError
.9285					_ETHexConstant:
.9285	c8		iny				iny 								; skip #
.9286	c8		iny				iny 								; skip count
.9287	20 c8 96	jsr $96c8			jsr 	NSMSetZero 					; clear result
.928a					_ETHLoop:
.928a	b1 30		lda ($30),y			lda 	(codePtr),y
.928c	c8		iny				iny 								; and consume
.928d	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.928f	f0 1e		beq $92af			beq 	_ETHExit
.9291	48		pha				pha 								; save on stack.
.9292	20 dd 96	jsr $96dd			jsr 	NSMShiftLeft 				; x 2
.9295	20 dd 96	jsr $96dd			jsr 	NSMShiftLeft 				; x 4
.9298	20 dd 96	jsr $96dd			jsr 	NSMShiftLeft 				; x 8
.929b	20 dd 96	jsr $96dd			jsr 	NSMShiftLeft 				; x 16
.929e	68		pla				pla 								; ASCII
.929f	c9 41		cmp #$41			cmp 	#'A'
.92a1	90 02		bcc $92a5			bcc 	_ETHNotChar
.92a3	e9 07		sbc #$07			sbc 	#7
.92a5					_ETHNotChar:
.92a5	29 0f		and #$0f			and 	#15 						; digit now
.92a7	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.92aa	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.92ad	80 db		bra $928a			bra 	_ETHLoop 					; go round.
.92af					_ETHExit:
.92af	60		rts				rts
.92b0					_ETString:
.92b0	c8		iny				iny 								; look at length
.92b1	b1 30		lda ($30),y			lda 	(codePtr),y
.92b3	48		pha				pha
.92b4	c8		iny				iny 								; first character
.92b5	20 63 9d	jsr $9d63			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.92b8	68		pla				pla 								; restore count and save
.92b9	85 36		sta $36				sta 	zTemp0
.92bb	98		tya				tya 								; add length to Y to skip it.
.92bc	18		clc				clc
.92bd	65 36		adc $36				adc 	zTemp0
.92bf	a8		tay				tay
.92c0	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.92c2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.92c5	60		rts				rts
.92c6					_ETVariable:
.92c6	4c 20 93	jmp $9320			jmp 	VariableHandler
.92c9					_ETPuncUnary:
.92c9	c8		iny				iny 								; consume the unary character
.92ca	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.92cc	f0 2d		beq $92fb			beq 	_ETUnaryNegate
.92ce	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.92d0	f0 39		beq $930b			beq 	_ETDereference
.92d2	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.92d4	f0 43		beq $9319			beq 	_ETParenthesis
.92d6	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.92d8	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.92da	f0 06		beq $92e2			beq 	_ETIndirection
.92dc	e6 36		inc $36				inc 	zTemp0
.92de	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.92e0	d0 a0		bne $9282			bne 	_ETSyntaxError
.92e2					_ETIndirection:
.92e2	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.92e4	1a		inc a				inc 	a
.92e5	48		pha				pha
.92e6	20 4f 92	jsr $924f			jsr 	EvaluateTerm				; evaluate the term
.92e9	20 93 90	jsr $9093			jsr 	Dereference 				; dereference it.
.92ec	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.92ef	d0 07		bne $92f8			bne 	_ETTypeMismatch
.92f1	68		pla				pla 								; indirection 1-2
.92f2	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.92f4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.92f7	60		rts				rts
.92f8					_ETTypeMismatch:
.92f8	4c d5 a3	jmp $a3d5			jmp 	TypeError
.92fb					_ETUnaryNegate:
.92fb	20 4f 92	jsr $924f			jsr 	EvaluateTerm				; evaluate the term
.92fe	20 93 90	jsr $9093			jsr 	Dereference 				; dereference it.
.9301	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.9304	29 10		and #$10			and 	#NSTString
.9306	d0 f0		bne $92f8			bne 	_ETTypeMismatch
.9308	4c 74 96	jmp $9674			jmp 	NSMNegate  					; just toggles the sign bit.
.930b					_ETDereference:
.930b	20 4f 92	jsr $924f			jsr 	EvaluateTerm				; evaluate the term
.930e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.9311	29 20		and #$20			and 	#NSBIsReference
.9313	f0 e3		beq $92f8			beq 	_ETTypeMismatch
.9315	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.9318	60		rts				rts
.9319					_ETParenthesis:
.9319	20 7e 8f	jsr $8f7e			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.931c	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket 			; check for )
.931f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9320					VariableHandler:
.9320	b1 30		lda ($30),y			lda 	(codePtr),y
.9322	18		clc				clc
.9323	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9325	85 37		sta $37				sta 	zTemp0+1
.9327	c8		iny				iny
.9328	b1 30		lda ($30),y			lda 	(codePtr),y
.932a	85 36		sta $36				sta 	zTemp0
.932c	c8		iny				iny
.932d	18		clc				clc									; copy variable address+3 to mantissa
.932e	69 03		adc #$03			adc 	#3
.9330	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9333	a5 37		lda $37				lda 	zTemp0+1
.9335	69 00		adc #$00			adc 	#0
.9337	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.933a	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.933d	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9340	9e 28 06	stz $0628,x			stz 	NSExponent,x
.9343	5a		phy				phy
.9344	a0 02		ldy #$02			ldy 	#2 							; read type
.9346	b1 36		lda ($36),y			lda 	(zTemp0),y
.9348	7a		ply				ply
.9349	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.934b	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.934d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9350	29 04		and #$04			and 	#NSBIsArray
.9352	d0 01		bne $9355			bne 	_VHArray
.9354	60		rts				rts
.9355					_VHArray:
.9355	e8		inx				inx
.9356	20 60 96	jsr $9660			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9359	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.935b	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.935e	b1 30		lda ($30),y			lda 	(codePtr),y
.9360	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9362	d0 06		bne $936a			bne 	_VHNoSecondIndex
.9364	c8		iny				iny 								; skip the comma
.9365	e8		inx				inx
.9366	20 60 96	jsr $9660			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9369	ca		dex				dex
.936a					_VHNoSecondIndex:
.936a	ca		dex				dex 								; set X back.
.936b	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket 			; and check the right bracket.
.936e	5a		phy				phy 								; save position
.936f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9372	85 3e		sta $3e				sta 	zaTemp
.9374	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9377	85 3f		sta $3f				sta 	zaTemp+1
.9379	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.937b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.937d	f0 02		beq $9381			beq 	_VHHas2Mask
.937f	a9 ff		lda #$ff			lda 	#$FF
.9381					_VHHas2Mask:
.9381	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9384	f0 54		beq $93da			beq 	_VHBadIndex
.9386	0a		asl a				asl 	a 							; carry will be set if a second index
.9387	90 09		bcc $9392			bcc 	_VHCheckFirstIndex
.9389	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.938b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.938d	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.9390	90 48		bcc $93da			bcc 	_VHBadIndex
.9392					_VHCheckFirstIndex:
.9392	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9394	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9396	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.9399	90 3f		bcc $93da			bcc 	_VHBadIndex
.939b	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.939d	64 37		stz $37				stz 	zTemp0+1
.939f	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.93a2	30 0f		bmi $93b3			bmi 	_VHNoMultiply
.93a4	da		phx				phx
.93a5	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.93a8	48		pha				pha
.93a9	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.93ab	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.93ad	1a		inc a				inc 	a 							; add 1 for zero base
.93ae	fa		plx				plx
.93af	20 6b a2	jsr $a26b			jsr 	Multiply8x8 				; calculate -> Z0
.93b2	fa		plx				plx
.93b3					_VHNoMultiply:
.93b3	18		clc				clc
.93b4	a5 36		lda $36				lda 	zTemp0
.93b6	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.93b9	85 36		sta $36				sta 	zTemp0
.93bb	a5 37		lda $37				lda 	zTemp0+1
.93bd	69 00		adc #$00			adc 	#0
.93bf	85 37		sta $37				sta 	zTemp0+1
.93c1	bd 00 06	lda $0600,x			lda 	NSStatus,x
.93c4	20 0d 85	jsr $850d			jsr 	ScaleByBaseType
.93c7	18		clc				clc
.93c8	b2 3e		lda ($3e)			lda 	(zaTemp)
.93ca	65 36		adc $36				adc 	zTemp0
.93cc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.93cf	a0 01		ldy #$01			ldy 	#1
.93d1	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.93d3	65 37		adc $37				adc 	zTemp0+1
.93d5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.93d8	7a		ply				ply 								; restore position
.93d9	60		rts				rts
.93da					_VHBadIndex:
.93da	a9 17		lda #$17		lda	#23
.93dc	4c 75 8b	jmp $8b75		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a1a1					AbsUnary:
.a1a1	fa		plx				plx 								; restore stack pos
.a1a2	20 1c 96	jsr $961c			jsr 	EvaluateNumber 				; get a float or int
.a1a5	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket
.a1a8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.a1ab	29 7f		and #$7f			and 	#$7F
.a1ad	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a1b0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.93df					AllocUnary:
.93df	fa		plx				plx 								; restore stack pos
.93e0	20 54 96	jsr $9654			jsr 	Evaluate16BitInteger		; get bytes required.
.93e3	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket
.93e6	da		phx				phx 								; save X/Y
.93e7	5a		phy				phy
.93e8	8a		txa				txa 								; copy X into Y
.93e9	a8		tay				tay
.93ea	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.93ed	aa		tax				tax
.93ee	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.93f1	20 fe 93	jsr $93fe			jsr 	AllocateXABytes 			; allocate memory
.93f4	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.93f7	8a		txa				txa
.93f8	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.93fb	7a		ply				ply
.93fc	fa		plx				plx
.93fd	60		rts				rts
.93fe					AllocateXABytes:
.93fe	5a		phy				phy
.93ff	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9402	84 36		sty $36				sty 	zTemp0
.9404	5a		phy				phy
.9405	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.9408	84 37		sty $37				sty 	zTemp0+1
.940a	5a		phy				phy
.940b	18		clc				clc 								; add to low memory pointer
.940c	6d 0c 07	adc $070c			adc 	lowMemPtr
.940f	8d 0c 07	sta $070c			sta 	lowMemPtr
.9412	8a		txa				txa
.9413	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.9416	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.9419					_ClearMemory:
.9419	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.941c	c5 36		cmp $36				cmp 	zTemp0
.941e	d0 07		bne $9427			bne 	_CMClearNext
.9420	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.9423	c5 37		cmp $37				cmp 	zTemp0+1
.9425	f0 0c		beq $9433			beq 	_CMExit
.9427					_CMClearNext:
.9427	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9429	92 36		sta ($36)			sta 	(zTemp0)
.942b	e6 36		inc $36				inc 	zTemp0
.942d	d0 ea		bne $9419			bne 	_ClearMemory
.942f	e6 37		inc $37				inc		zTemp0+1
.9431	80 e6		bra $9419			bra 	_ClearMemory
.9433					_CMExit:
.9433	fa		plx				plx
.9434	68		pla				pla
.9435	7a		ply				ply
.9436	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a1b1					AscUnary:
.a1b1	fa		plx				plx 								; restore stack pos
.a1b2	20 27 96	jsr $9627			jsr 	EvaluateString 				; get a string
.a1b5	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a1b7	20 ca 96	jsr $96ca			jsr 	NSMSetByte
.a1ba	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket
.a1bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a1be					FracUnary:
.a1be	fa		plx				plx 								; restore stack pos
.a1bf	20 1c 96	jsr $961c			jsr 	EvaluateNumber 				; get a float or int
.a1c2	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket
.a1c5	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a1c8	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a1ca	f0 04		beq $a1d0			beq 	_IUZero
.a1cc	20 8e a0	jsr $a08e			jsr 	FloatFractionalPart
.a1cf	60		rts				rts
.a1d0					_IUZero:
.a1d0	20 c8 96	jsr $96c8			jsr 	NSMSetZero
.a1d3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a1d4					IntUnary:
.a1d4	fa		plx				plx 								; restore stack pos
.a1d5	20 1c 96	jsr $961c			jsr 	EvaluateNumber 				; get a float or int
.a1d8	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket
.a1db	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a1de	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a1e0	f0 03		beq $a1e5			beq 	_IUExit
.a1e2	20 f1 a0	jsr $a0f1			jsr 	FloatIntegerPart
.a1e5					_IUExit:
.a1e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a1e6					LenUnary:
.a1e6	fa		plx				plx 								; restore stack pos
.a1e7	20 27 96	jsr $9627			jsr 	EvaluateString 				; get a string
.a1ea	5a		phy				phy
.a1eb	a0 00		ldy #$00			ldy 	#0 							; find length
.a1ed					_LenFind:
.a1ed	b1 36		lda ($36),y			lda 	(zTemp0),y
.a1ef	f0 06		beq $a1f7			beq 	_LenExit
.a1f1	c8		iny				iny
.a1f2	d0 f9		bne $a1ed			bne 	_LenFind
.a1f4	4c d0 a3	jmp $a3d0			jmp 	RangeError 					; string > 255
.a1f7					_LenExit:
.a1f7	98		tya				tya
.a1f8	20 ca 96	jsr $96ca			jsr 	NSMSetByte
.a1fb	7a		ply				ply
.a1fc	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket
.a1ff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9437					Unary_Not:
.9437	fa		plx				plx
.9438	20 3f 96	jsr $963f			jsr 	EvaluateInteger 			; get integer
.943b	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket
.943e	20 f8 96	jsr $96f8			jsr 	NSMIsZero 					; zero mantissa ?
.9441	f0 04		beq $9447			beq 	_NotZero
.9443	20 c8 96	jsr $96c8			jsr 	NSMSetZero
.9446	60		rts				rts
.9447					_NotZero:
.9447	4c e2 8b	jmp $8be2			jmp 	ReturnTrue
.944a					_UNBad:
.944a	4c da a3	jmp $a3da			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.944d					Unary_Rnd:
.944d	20 1c 96	jsr $961c			jsr 	EvaluateNumber 				; number to use.
.9450	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket 			; closing bracket
.9453	20 7c 94	jsr $947c			jsr 	Random32Bit 				; generate a number.
.9456	ad 08 07	lda $0708			lda 	RandomSeed+0
.9459	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.945c	ad 09 07	lda $0709			lda 	RandomSeed+1
.945f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9462	ad 0a 07	lda $070a			lda 	RandomSeed+2
.9465	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9468	ad 0b 07	lda $070b			lda 	RandomSeed+3
.946b	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.946d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9470	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9472	8d 28 06	sta $0628			sta 	NSExponent
.9475	a9 08		lda #$08			lda 	#NSTFloat
.9477	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>947a	db						.byte 	$DB 						; causes a break in the emulator
.947b	60		rts				rts
.947c					Random32Bit:
.947c	5a		phy				phy
.947d	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.947f	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.9482	d0 03		bne $9487			bne 	_Random1
.9484	a8		tay				tay 								; if so do it 256 times
.9485	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9487					_Random1:
.9487	0a		asl a				asl 	a 							; LSFR RNG
.9488	2e 09 07	rol $0709			rol 	RandomSeed+1
.948b	2e 0a 07	rol $070a			rol 	RandomSeed+2
.948e	2e 0b 07	rol $070b			rol 	RandomSeed+3
.9491	90 02		bcc $9495			bcc 	_Random2
.9493	49 c5		eor #$c5			eor 	#$C5
.9495					_Random2:
.9495	88		dey				dey
.9496	d0 ef		bne $9487			bne 	_Random1
.9498	7a		ply				ply
.9499	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a200					SgnUnary:
.a200	fa		plx				plx 								; restore stack pos
.a201	20 1c 96	jsr $961c			jsr 	EvaluateNumber 				; get a float or int
.a204	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket
.a207	20 f8 96	jsr $96f8			jsr 	NSMIsZero 					; if zero
.a20a	f0 10		beq $a21c			beq 	_SGZero  					; return Int Zero
.a20c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.a20f	48		pha				pha
.a210	a9 01		lda #$01			lda 	#1 							; set to 1
.a212	20 ca 96	jsr $96ca			jsr 	NSMSetByte
.a215	68		pla				pla
.a216	29 80		and #$80			and		#$80 						; copy the sign byte out
.a218	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a21b	60		rts				rts
.a21c	20 c8 96	jsr $96c8	_SGZero:jsr 	NSMSetZero
.a21f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a220					ValUnary:
.a220	fa		plx				plx 								; restore stack pos
.a221	20 36 a2	jsr $a236			jsr 	ValMainCode 				; do the main val() code
.a224	b0 01		bcs $a227			bcs 	_VUError 					; couldn't convert
.a226	60		rts				rts
.a227					_VUError:
.a227	4c d5 a3	jmp $a3d5			jmp 	TypeError
.a22a					IsValUnary:
.a22a	fa		plx				plx 								; restore stack pos
.a22b	20 36 a2	jsr $a236			jsr 	ValMainCode 				; do the main val() code
.a22e	b0 03		bcs $a233			bcs 	_VUBad
.a230	4c e2 8b	jmp $8be2			jmp 	ReturnTrue
.a233					_VUBad:
.a233	4c ee 8b	jmp $8bee			jmp 	ReturnFalse
.a236					ValMainCode:
.a236	20 27 96	jsr $9627			jsr 	EvaluateString 				; get a string
.a239	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket 			; check right bracket present
.a23c	5a		phy				phy
.a23d	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a23f	f0 17		beq $a258			beq 	_VMCFail2
.a241	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a243	48		pha				pha 								; save first character
.a244	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a246	d0 01		bne $a249			bne 	_VMCStart
.a248	c8		iny				iny 								; skip over -
.a249					_VMCStart:
.a249	38		sec				sec 								; initialise first time round.
.a24a					_VMCNext:
.a24a	c8		iny				iny 								; pre-increment
.a24b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a24d	f0 0c		beq $a25b			beq 	_VMCSuccess 				; successful.
.a24f	20 31 91	jsr $9131			jsr 	EncodeNumber 				; send it to the number-builder
.a252	90 03		bcc $a257			bcc 	_VMCFail 					; if failed, give up.
.a254	18		clc				clc 								; next time round, countinue
.a255	80 f3		bra $a24a			bra 	_VMCNext
.a257					_VMCFail:
.a257	68		pla				pla
.a258					_VMCFail2:
.a258	7a		ply				ply
.a259	38		sec				sec
.a25a	60		rts				rts
.a25b					_VMCSuccess:
.a25b	a9 00		lda #$00			lda 	#0 							; construct final
.a25d	20 31 91	jsr $9131			jsr 	EncodeNumber
.a260	68		pla				pla
.a261	c9 2d		cmp #$2d			cmp 	#"-"
.a263	d0 03		bne $a268			bne 	_VMCNotNegative
.a265	20 74 96	jsr $9674			jsr		NSMNegate
.a268					_VMCNotNegative:
.a268	7a		ply				ply
.a269	18		clc				clc
.a26a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.949a					ChrUnary:
.949a	fa		plx				plx 								; restore stack pos
.949b	20 60 96	jsr $9660			jsr 	Evaluate8BitInteger			; get value
.949e	48		pha				pha
.949f	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket
.94a2	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.94a4	20 c5 a5	jsr $a5c5			jsr 	StringTempAllocate
.94a7	68		pla				pla 								; write number to it
.94a8	20 03 a6	jsr $a603			jsr 	StringTempWrite
.94ab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.94ac					SpcUnary:
.94ac	fa		plx				plx 								; restore stack pos
.94ad	20 60 96	jsr $9660			jsr 	Evaluate8BitInteger			; get value
.94b0	5a		phy				phy
.94b1	48		pha				pha 								; save count
.94b2	20 c5 a5	jsr $a5c5			jsr 	StringTempAllocate
.94b5	7a		ply				ply 								; to do count in Y
.94b6					_SpcLoop:
.94b6	c0 00		cpy #$00			cpy 	#0
.94b8	f0 08		beq $94c2			beq 	_SpcExit
.94ba	a9 20		lda #$20			lda 	#32
.94bc	20 03 a6	jsr $a603			jsr 	StringTempWrite
.94bf	88		dey				dey
.94c0	80 f4		bra $94b6			bra 	_SPCLoop
.94c2					_SpcExit:
.94c2	7a		ply				ply
.94c3	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket
.94c6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.94c7					Unary_Str:
.94c7	fa		plx				plx
.94c8	20 1c 96	jsr $961c			jsr 	EvaluateNumber  			; get number
.94cb	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket 			; closing bracket
.94ce	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.94d0	20 e9 94	jsr $94e9			jsr 	ConvertNumberToString 		; do the conversion.
.94d3	a9 21		lda #$21			lda		#33 						; create buffer
.94d5	20 c5 a5	jsr $a5c5			jsr 	StringTempAllocate 			; allocate memory
.94d8	da		phx				phx
.94d9	a2 00		ldx #$00			ldx 	#0
.94db					_USCopy:
.94db	bd 97 08	lda $0897,x			lda 	DecimalBuffer,x
.94de	20 03 a6	jsr $a603			jsr 	StringTempWrite
.94e1	e8		inx				inx
.94e2	bd 97 08	lda $0897,x			lda 	DecimalBuffer,x
.94e5	d0 f4		bne $94db			bne 	_USCopy
.94e7	fa		plx				plx
.94e8	60		rts				rts
.94e9					ConvertNumberToString:
.94e9	5a		phy				phy 								; save code position
.94ea	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.94ed	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.94f0	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.94f3	10 0a		bpl $94ff			bpl 	_CNTSNotNegative
.94f5	29 7f		and #$7f			and 	#$7F 						; make +ve
.94f7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94fa	a9 2d		lda #$2d			lda 	#"-"
.94fc	20 65 95	jsr $9565			jsr 	WriteDecimalBuffer
.94ff					_CNTSNotNegative:
.94ff	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.9502	f0 15		beq $9519			beq 	_CNTSNotFloat
.9504	e8		inx				inx 								; round up
.9505	a9 01		lda #$01			lda 	#1
.9507	20 ca 96	jsr $96ca			jsr 	NSMSetByte
.950a	ca		dex				dex
.950b	bd 28 06	lda $0628,x			lda		NSExponent,x
.950e	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.9511	a9 08		lda #$08			lda 	#NSTFloat
.9513	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.9516	20 b0 9f	jsr $9fb0			jsr 	FloatAdd
.9519					_CNTSNotFloat:
.9519	20 47 95	jsr $9547			jsr 	MakePlusTwoString
.951c	20 8e a0	jsr $a08e			jsr 	FloatFractionalPart 		; get the fractional part
.951f	20 52 a1	jsr $a152			jsr 	NSNormalise					; normalise , exit if zero
.9522	f0 21		beq $9545			beq 	_CNTSExit
.9524	a9 2e		lda #$2e			lda 	#"."
.9526	20 65 95	jsr $9565			jsr 	WriteDecimalBuffer 			; write decimal place
.9529					_CNTSDecimal:
.9529	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.952c	30 17		bmi $9545			bmi 	_CNTSExit
.952e	e8		inx				inx 								; x 10.0
.952f	a9 0a		lda #$0a			lda 	#10
.9531	20 ca 96	jsr $96ca			jsr 	NSMSetByte
.9534	a9 08		lda #$08			lda 	#NSTFloat
.9536	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9539	ca		dex				dex
.953a	20 1b a1	jsr $a11b			jsr 	FloatMultiply
.953d	20 47 95	jsr $9547			jsr 	MakePlusTwoString
.9540	20 8e a0	jsr $a08e			jsr 	FloatFractionalPart 		; get the fractional part
.9543	80 e4		bra $9529			bra 	_CNTSDecimal 				; keep going.
.9545					_CNTSExit:
.9545	7a		ply				ply
.9546	60		rts				rts
.9547					MakePlusTwoString:
.9547	da		phx				phx
.9548	20 9f 96	jsr $969f			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.954b	e8		inx				inx 								; access it
.954c	e8		inx				inx
.954d	20 f1 a0	jsr $a0f1			jsr 	FloatIntegerPart 			; make it an integer
.9550	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9552	20 5a 9f	jsr $9f5a			jsr 	ConvertInt32
.9555	a2 00		ldx #$00			ldx	 	#0
.9557					_MPTSCopy:
.9557	bd 75 08	lda $0875,x			lda 	NumberBuffer,x
.955a	20 65 95	jsr $9565			jsr 	WriteDecimalBuffer
.955d	e8		inx				inx
.955e	bd 75 08	lda $0875,x			lda 	NumberBuffer,x
.9561	d0 f4		bne $9557			bne 	_MPTSCopy
.9563	fa		plx				plx
.9564	60		rts				rts
.9565					WriteDecimalBuffer:
.9565	da		phx				phx
.9566	ae 14 07	ldx $0714			ldx 	dbOffset
.9569	9d 97 08	sta $0897,x			sta 	DecimalBuffer,x
.956c	9e 98 08	stz $0898,x			stz 	DecimalBuffer+1,x
.956f	ee 14 07	inc $0714			inc 	dbOffset
.9572	fa		plx				plx
.9573	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9574					Unary_Left:
.9574	fa		plx				plx
.9575	18		clc				clc 								; only one parameter
.9576	20 eb 95	jsr $95eb			jsr 	SubstringInitial 			; set up.
.9579	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.957c	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.957f	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9582	80 2c		bra $95b0			bra 	SubstringMain
.9584					Unary_Right:
.9584	fa		plx				plx
.9585	18		clc				clc 								; only one parameter
.9586	20 eb 95	jsr $95eb			jsr 	SubstringInitial 			; set up.
.9589	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.958c	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.958f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.9592	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.9595	b0 02		bcs $9599			bcs 	_URNotUnderflow
.9597	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9599					_URNotUnderFlow:
.9599	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.959c	80 12		bra $95b0			bra 	SubStringMain
.959e					Unary_Mid:
.959e	fa		plx				plx
.959f	38		sec				sec 								; two parameters
.95a0	20 eb 95	jsr $95eb			jsr 	SubstringInitial 			; set up.
.95a3	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.95a6	f0 05		beq $95ad			beq 	_UMError
.95a8	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.95ab	80 03		bra $95b0			bra 	SubStringMain
.95ad					_UMError:
.95ad	4c da a3	jmp $a3da			jmp 	ArgumentError
.95b0					SubStringMain:
.95b0	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.95b3	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.95b6	b0 2d		bcs $95e5			bcs 	_SSMNull 					; if so, return an empty string.
.95b8	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.95bb	f0 28		beq $95e5			beq 	_SSMNull 					; return empty string.
.95bd	18		clc				clc 								; add the offset +1 to the address and
.95be	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.95c1	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.95c4	85 36		sta $36				sta 	zTemp0
.95c6	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.95c9	69 00		adc #$00			adc 	#0
.95cb	85 37		sta $37				sta 	zTemp0+1
.95cd					_SSMNoCarry:
.95cd	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.95d0	20 c5 a5	jsr $a5c5			jsr 	StringTempAllocate 			; allocate that many characters
.95d3	5a		phy				phy 								; save Y
.95d4	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.95d6					_SSMCopy:
.95d6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.95d8	f0 09		beq $95e3			beq 	_SSMEString 				; no more to copy
.95da	20 03 a6	jsr $a603			jsr 	StringTempWrite 			; and write it out.
.95dd	c8		iny				iny
.95de	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.95e1	d0 f3		bne $95d6			bne 	_SSMCopy
.95e3					_SSMEString:
.95e3	7a		ply				ply
.95e4					_SSMExit:
.95e4	60		rts				rts
.95e5					_SSMNull:
.95e5	a9 00		lda #$00			lda 	#0
.95e7	20 c5 a5	jsr $a5c5			jsr 	StringTempAllocate
.95ea	60		rts				rts
.95eb					SubstringInitial:
.95eb	da		phx				phx 								; save initial stack position
.95ec	08		php				php 								; save carry on stack indicating 2 parameters
.95ed	20 27 96	jsr $9627			jsr 	EvaluateString 				; get a string
.95f0	5a		phy				phy 								; calculate length to exponent.
.95f1	a0 ff		ldy #$ff			ldy 	#$FF
.95f3					_SIFindLength:
.95f3	c8		iny				iny
.95f4	b1 36		lda ($36),y			lda 	(zTemp0),y
.95f6	d0 fb		bne $95f3			bne 	_SIFindLength
.95f8	98		tya				tya
.95f9	9d 28 06	sta $0628,x			sta 	NSExponent,x
.95fc	7a		ply				ply
.95fd	e8		inx				inx
.95fe	20 f1 9d	jsr $9df1			jsr 	CheckComma 					; comma next
.9601	20 60 96	jsr $9660			jsr 	Evaluate8BitInteger 		; get next parameter
.9604	28		plp				plp 								; is it the last parameter ?
.9605	90 07		bcc $960e			bcc 	_SSIExit 					; if so, exit.
.9607	e8		inx				inx
.9608	20 f1 9d	jsr $9df1			jsr 	CheckComma 					; comma next
.960b	20 60 96	jsr $9660			jsr 	Evaluate8BitInteger 		; get last parameter
.960e					_SSIExit:
.960e	fa		plx				plx
.960f	20 e9 9d	jsr $9de9			jsr 	CheckRightBracket 			; check closing bracket
.9612	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9613					EvaluateValue:
.9613	48		pha				pha
.9614	20 7e 8f	jsr $8f7e			jsr		EvaluateExpression 			; expression
.9617	20 93 90	jsr $9093			jsr 	Dereference					; derefernce it
.961a	68		pla				pla
.961b	60		rts				rts
.961c					EvaluateNumber:
.961c	20 13 96	jsr $9613			jsr 	EvaluateValue 				; get a value
.961f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9622	29 10		and #$10			and 	#NSBIsString
.9624	d0 16		bne $963c			bne 	HelperTypeError
.9626	60		rts				rts
.9627					EvaluateString:
.9627	20 13 96	jsr $9613			jsr 	EvaluateValue 				; get a value
.962a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.962d	29 10		and #$10			and 	#NSBIsString
.962f	f0 0b		beq $963c			beq 	HelperTypeError
.9631					CopyAddressToTemp0:
.9631	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9634	85 36		sta $36				sta 	zTemp0
.9636	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9639	85 37		sta $37				sta 	zTemp0+1
.963b	60		rts				rts
.963c					HelperTypeError:
.963c	4c d5 a3	jmp $a3d5			jmp 	TypeError
.963f					EvaluateInteger:
.963f	20 1c 96	jsr $961c			jsr 	EvaluateNumber
.9642	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.9645	d0 0a		bne $9651			bne 	HelperValueError 			; if not, it's a float.
.9647	60		rts				rts
.9648					EvaluateUnsignedInteger:
.9648	20 3f 96	jsr $963f			jsr 	EvaluateInteger 			; check integer is +ve
.964b	bd 00 06	lda $0600,x			lda 	NSStatus,x
.964e	30 01		bmi $9651			bmi 	HelperValueError
.9650	60		rts				rts
.9651					HelperValueError:
.9651	4c da a3	jmp $a3da			jmp 	ArgumentError
.9654					Evaluate16BitInteger:
.9654	20 48 96	jsr $9648			jsr	 	EvaluateUnsignedInteger		; get integer
.9657	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.965a	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.965d	d0 f2		bne $9651			bne 	HelperValueError
.965f	60		rts				rts
.9660					Evaluate8BitInteger:
.9660	20 48 96	jsr $9648			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9663	d0 ec		bne $9651			bne 	HelperValueError
.9665	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9668	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.966b	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.966e	d0 e1		bne $9651			bne 	HelperValueError
.9670	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9673	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a26b					Multiply8x8:
.a26b	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a26c	85 36		sta $36			  	sta 	zTemp0
.a26e	86 37		stx $37				stx 	zTemp0+1
.a270	a9 00		lda #$00			lda 	#0
.a272	a2 08		ldx #$08			ldx 	#8
.a274					_M88Loop:
.a274	90 03		bcc $a279			bcc 	_M88NoAdd
.a276	18		clc				clc
.a277	65 37		adc $37				adc 	zTemp0+1
.a279					_M88NoAdd:
.a279	6a		ror a				ror 	a
.a27a	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a27c	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a27d	d0 f5		bne $a274			bne 	_M88Loop
.a27f	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a281	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9674					NSMNegate:
.9674	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9677	49 80		eor #$80			eor 	#NSBIsNegative
.9679	9d 00 06	sta $0600,x			sta 	NSStatus,x
.967c	60		rts				rts
.967d					NSMNegateMantissa:
.967d	38		sec				sec
.967e	a9 00		lda #$00			lda 	#0
.9680	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.9683	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9686	a9 00		lda #$00			lda 	#0
.9688	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.968b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.968e	a9 00		lda #$00			lda 	#0
.9690	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.9693	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9696	a9 00		lda #$00			lda 	#0
.9698	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.969b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.969e	60		rts				rts
.969f					NSMShiftUpTwo:
.969f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.96a2	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.96a5	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.96a8	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.96ab	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.96ae	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.96b1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.96b4	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.96b7	bd 28 06	lda $0628,x			lda 	NSExponent,x
.96ba	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.96bd	bd 00 06	lda $0600,x			lda 	NSStatus,x
.96c0	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.96c3	60		rts				rts
.96c4					NSMSetZeroMantissaOnly:
.96c4	a9 00		lda #$00			lda 	#0
.96c6	80 08		bra $96d0			bra 	NSMSetMantissa
.96c8					NSMSetZero:
.96c8	a9 00		lda #$00			lda 	#0
.96ca					NSMSetByte:
.96ca	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.96cd	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.96d0					NSMSetMantissa:
.96d0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.96d3	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.96d6	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.96d9	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.96dc	60		rts				rts
.96dd					NSMShiftLeft:
.96dd	18		clc				clc
.96de					NSMRotateLeft:
.96de	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.96e1	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.96e4	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.96e7	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.96ea	60		rts				rts
.96eb					NSMShiftRight:
.96eb	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.96ee	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.96f1	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.96f4	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.96f7	60		rts				rts
.96f8					NSMIsZero:
.96f8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.96fb	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.96fe	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.9701	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.9704	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a282					Assemble_ora:
.a282	20 90 81	jsr $8190		jsr	AssembleGroup1
>a285	01					.byte $01
.a286					Assemble_and:
.a286	20 90 81	jsr $8190		jsr	AssembleGroup1
>a289	21					.byte $21
.a28a					Assemble_eor:
.a28a	20 90 81	jsr $8190		jsr	AssembleGroup1
>a28d	41					.byte $41
.a28e					Assemble_adc:
.a28e	20 90 81	jsr $8190		jsr	AssembleGroup1
>a291	61					.byte $61
.a292					Assemble_sta:
.a292	20 90 81	jsr $8190		jsr	AssembleGroup1
>a295	81					.byte $81
.a296					Assemble_lda:
.a296	20 90 81	jsr $8190		jsr	AssembleGroup1
>a299	a1					.byte $a1
.a29a					Assemble_cmp:
.a29a	20 90 81	jsr $8190		jsr	AssembleGroup1
>a29d	c1					.byte $c1
.a29e					Assemble_sbc:
.a29e	20 90 81	jsr $8190		jsr	AssembleGroup1
>a2a1	e1					.byte $e1
.a2a2					Assemble_asl:
.a2a2	20 97 81	jsr $8197		jsr	AssembleGroup2
>a2a5	02					.byte $02
>a2a6	75					.byte $75
.a2a7					Assemble_rol:
.a2a7	20 97 81	jsr $8197		jsr	AssembleGroup2
>a2aa	22					.byte $22
>a2ab	75					.byte $75
.a2ac					Assemble_lsr:
.a2ac	20 97 81	jsr $8197		jsr	AssembleGroup2
>a2af	42					.byte $42
>a2b0	75					.byte $75
.a2b1					Assemble_ror:
.a2b1	20 97 81	jsr $8197		jsr	AssembleGroup2
>a2b4	62					.byte $62
>a2b5	75					.byte $75
.a2b6					Assemble_stx:
.a2b6	20 97 81	jsr $8197		jsr	AssembleGroup2
>a2b9	82					.byte $82
>a2ba	50					.byte $50
.a2bb					Assemble_ldx:
.a2bb	20 97 81	jsr $8197		jsr	AssembleGroup2
>a2be	a2					.byte $a2
>a2bf	d0					.byte $d0
.a2c0					Assemble_dec:
.a2c0	20 97 81	jsr $8197		jsr	AssembleGroup2
>a2c3	c2					.byte $c2
>a2c4	55					.byte $55
.a2c5					Assemble_inc:
.a2c5	20 97 81	jsr $8197		jsr	AssembleGroup2
>a2c8	e2					.byte $e2
>a2c9	55					.byte $55
.a2ca					Assemble_stz:
.a2ca	20 97 81	jsr $8197		jsr	AssembleGroup2
>a2cd	60					.byte $60
>a2ce	44					.byte $44
.a2cf					Assemble_bit:
.a2cf	20 97 81	jsr $8197		jsr	AssembleGroup2
>a2d2	20					.byte $20
>a2d3	55					.byte $55
.a2d4					Assemble_sty:
.a2d4	20 97 81	jsr $8197		jsr	AssembleGroup2
>a2d7	80					.byte $80
>a2d8	54					.byte $54
.a2d9					Assemble_ldy:
.a2d9	20 97 81	jsr $8197		jsr	AssembleGroup2
>a2dc	a0					.byte $a0
>a2dd	d5					.byte $d5
.a2de					Assemble_cpy:
.a2de	20 97 81	jsr $8197		jsr	AssembleGroup2
>a2e1	c0					.byte $c0
>a2e2	d4					.byte $d4
.a2e3					Assemble_cpx:
.a2e3	20 97 81	jsr $8197		jsr	AssembleGroup2
>a2e6	e0					.byte $e0
>a2e7	d0					.byte $d0
.a2e8					Assemble_tsb:
.a2e8	20 97 81	jsr $8197		jsr	AssembleGroup2
>a2eb	00					.byte $00
>a2ec	50					.byte $50
.a2ed					Assemble_trb:
.a2ed	20 97 81	jsr $8197		jsr	AssembleGroup2
>a2f0	10					.byte $10
>a2f1	50					.byte $50
.a2f2					Assemble_jsr:
.a2f2	20 97 81	jsr $8197		jsr	AssembleGroup2
>a2f5	14					.byte $14
>a2f6	10					.byte $10
.a2f7					Assemble_jmp:
.a2f7	20 97 81	jsr $8197		jsr	AssembleGroup2
>a2fa	40					.byte $40
>a2fb	10					.byte $10
.a2fc					Assemble_bpl:
.a2fc	20 e8 81	jsr $81e8		jsr	AssembleGroup3
>a2ff	10					.byte $10
.a300					Assemble_bmi:
.a300	20 e8 81	jsr $81e8		jsr	AssembleGroup3
>a303	30					.byte $30
.a304					Assemble_bvc:
.a304	20 e8 81	jsr $81e8		jsr	AssembleGroup3
>a307	50					.byte $50
.a308					Assemble_bvs:
.a308	20 e8 81	jsr $81e8		jsr	AssembleGroup3
>a30b	70					.byte $70
.a30c					Assemble_bcc:
.a30c	20 e8 81	jsr $81e8		jsr	AssembleGroup3
>a30f	90					.byte $90
.a310					Assemble_bcs:
.a310	20 e8 81	jsr $81e8		jsr	AssembleGroup3
>a313	b0					.byte $b0
.a314					Assemble_bne:
.a314	20 e8 81	jsr $81e8		jsr	AssembleGroup3
>a317	d0					.byte $d0
.a318					Assemble_beq:
.a318	20 e8 81	jsr $81e8		jsr	AssembleGroup3
>a31b	f0					.byte $f0
.a31c					Assemble_bra:
.a31c	20 e8 81	jsr $81e8		jsr	AssembleGroup3
>a31f	80					.byte $80
.a320					Assemble_brk:
.a320	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a323	00					.byte $00
.a324					Assemble_php:
.a324	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a327	08					.byte $08
.a328					Assemble_clc:
.a328	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a32b	18					.byte $18
.a32c					Assemble_plp:
.a32c	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a32f	28					.byte $28
.a330					Assemble_sec:
.a330	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a333	38					.byte $38
.a334					Assemble_rti:
.a334	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a337	40					.byte $40
.a338					Assemble_pha:
.a338	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a33b	48					.byte $48
.a33c					Assemble_cli:
.a33c	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a33f	58					.byte $58
.a340					Assemble_phy:
.a340	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a343	5a					.byte $5a
.a344					Assemble_rts:
.a344	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a347	60					.byte $60
.a348					Assemble_pla:
.a348	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a34b	68					.byte $68
.a34c					Assemble_sei:
.a34c	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a34f	78					.byte $78
.a350					Assemble_ply:
.a350	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a353	7a					.byte $7a
.a354					Assemble_dey:
.a354	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a357	88					.byte $88
.a358					Assemble_txa:
.a358	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a35b	8a					.byte $8a
.a35c					Assemble_tya:
.a35c	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a35f	98					.byte $98
.a360					Assemble_txs:
.a360	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a363	9a					.byte $9a
.a364					Assemble_tay:
.a364	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a367	a8					.byte $a8
.a368					Assemble_tax:
.a368	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a36b	aa					.byte $aa
.a36c					Assemble_clv:
.a36c	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a36f	b8					.byte $b8
.a370					Assemble_tsx:
.a370	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a373	ba					.byte $ba
.a374					Assemble_iny:
.a374	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a377	c8					.byte $c8
.a378					Assemble_dex:
.a378	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a37b	ca					.byte $ca
.a37c					Assemble_cld:
.a37c	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a37f	d8					.byte $d8
.a380					Assemble_phx:
.a380	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a383	da					.byte $da
.a384					Assemble_inx:
.a384	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a387	e8					.byte $e8
.a388					Assemble_nop:
.a388	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a38b	ea					.byte $ea
.a38c					Assemble_sed:
.a38c	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a38f	f8					.byte $f8
.a390					Assemble_plx:
.a390	20 1e 82	jsr $821e		jsr	AssembleGroup4
>a393	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a394					DecimalScalarTable:
>a394	66 66 66 66				.dword $66666666 ; 0.1
>a398	de					.byte $de
>a399	1f 85 eb 51				.dword $51eb851f ; 0.01
>a39d	db					.byte $db
>a39e	4c 37 89 41				.dword $4189374c ; 0.001
>a3a2	d8					.byte $d8
>a3a3	ac 8b db 68				.dword $68db8bac ; 0.0001
>a3a7	d4					.byte $d4
>a3a8	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a3ac	d1					.byte $d1
>a3ad	83 de 1b 43				.dword $431bde83 ; 1e-06
>a3b1	ce					.byte $ce
>a3b2	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a3b6	ca					.byte $ca
>a3b7	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a3bb	c7					.byte $c7
>a3bc	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a3c0	c4					.byte $c4
>a3c1	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a3c5	c0					.byte $c0
>a3c6	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a3ca	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a3cb					SyntaxError:
.a3cb	a9 02		lda #$02		lda	#2
.a3cd	4c 75 8b	jmp $8b75		jmp	ErrorHandler
.a3d0					RangeError:
.a3d0	a9 04		lda #$04		lda	#4
.a3d2	4c 75 8b	jmp $8b75		jmp	ErrorHandler
.a3d5					TypeError:
.a3d5	a9 05		lda #$05		lda	#5
.a3d7	4c 75 8b	jmp $8b75		jmp	ErrorHandler
.a3da					ArgumentError:
.a3da	a9 07		lda #$07		lda	#7
.a3dc	4c 75 8b	jmp $8b75		jmp	ErrorHandler
.a3df					NotDoneError:
.a3df	a9 0c		lda #$0c		lda	#12
.a3e1	4c 75 8b	jmp $8b75		jmp	ErrorHandler
.a3e4					ErrorText:
>a3e4	42 72 65 61 6b 00			.text	"Break",0
>a3ea	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a3f2	72 72 6f 72 00
>a3f7	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a3ff	20 62 79 20 7a 65 72 6f 00
>a408	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a410	61 6e 67 65 00
>a415	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a41d	6d 61 74 63 68 00
>a423	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a42b	65 6d 6f 72 79 00
>a431	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a439	61 72 67 75 6d 65 6e 74 00
>a442	53 74 6f 70 00				.text	"Stop",0
>a447	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a44f	6f 6f 20 6c 6f 6e 67 00
>a457	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a45f	6e 20 66 61 69 6c 65 64 00
>a468	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a470	61 74 61 00
>a474	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a47c	65 6e 74 65 64 00
>a482	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a48a	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a496	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a49e	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a4ab	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a4b3	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a4c0	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a4c8	68 6f 75 74 20 57 68 69 6c 65 00
>a4d3	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a4db	68 6f 75 74 20 46 6f 72 00
>a4e4	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a4ec	61 63 6b 20 66 75 6c 6c 00
>a4f5	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a4fd	75 63 74 75 72 65 00
>a504	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a50c	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a519	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a521	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a52f	41 72 72 61 79 20 73 69			.text	"Array size",0
>a537	7a 65 00
>a53a	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a542	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9705					StackOpen:
.9705	48		pha				pha 								; save frame byte
.9706	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9708	0a		asl a				asl 	a 							; claim twice this for storage
.9709	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.970b	38		sec				sec 								; so basically subtracting from
.970c	65 34		adc $34				adc 	basicStack 	 				; basicStack
.970e	85 34		sta $34				sta 	basicStack
.9710	b0 08		bcs $971a			bcs 	_SONoBorrow
.9712	c6 35		dec $35				dec 	basicStack+1
.9714	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9716	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9718	90 04		bcc $971e			bcc 	_SOMemory
.971a					_SONoBorrow:
.971a	68		pla				pla 								; get marker back and write at TOS
.971b	92 34		sta ($34)			sta 	(basicStack)
.971d	60		rts				rts
.971e					_SOMemory:
.971e							ERR_STACK
.971e					StackClose:
.971e	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9720	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9722	0a		asl a				asl 	a 							; claim twice this.
.9723	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9725	85 34		sta $34				sta 	basicStack
.9727	90 02		bcc $972b			bcc 	_SCExit
.9729	e6 35		inc $35				inc 	basicStack+1
.972b					_SCExit:
.972b	60		rts				rts
.972c					StackCheckFrame:
.972c	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.972e	29 f0		and #$f0			and 	#$F0 						; check type bits
.9730	d0 01		bne $9733			bne 	_SCFError 					; different, we have structures mixed up
.9732	60		rts				rts
.9733					_SCFError:
.9733	8a		txa				txa 								; report error X
.9734	4c 75 8b	jmp $8b75			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9737					STKSaveCodePosition:
.9737	5a		phy				phy
.9738	98		tya				tya 								; save Y
.9739	a0 05		ldy #$05			ldy 	#5
.973b	91 34		sta ($34),y			sta 	(basicStack),y
.973d	88		dey				dey 								; save Code Pointer
.973e					_STKSaveLoop:
.973e	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9741	91 34		sta ($34),y			sta 	(basicStack),y
.9743	88		dey				dey
.9744	d0 f8		bne $973e			bne 	_STKSaveLoop
.9746	7a		ply				ply
.9747	60		rts				rts
.9748					STKLoadCodePosition:
.9748	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.974a					_STKLoadLoop:
.974a	b1 34		lda ($34),y			lda 	(basicStack),y
.974c	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.974f	c8		iny				iny
.9750	c0 05		cpy #$05			cpy 	#5
.9752	d0 f6		bne $974a			bne 	_STKLoadLoop
.9754	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9756	a8		tay				tay
.9757	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9758					StackReset:
.9758	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.975a	85 34		sta $34				sta 	0+basicStack
.975c	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.975e	85 35		sta $35				sta 	1+basicStack
.9760	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9762	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.9764	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a54a					StringConcrete:
.a54a	5a		phy				phy 								; save position on stack
.a54b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a54e	85 38		sta $38				sta 	zTemp1
.a550	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a553	85 39		sta $39				sta 	zTemp1+1
.a555	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a557					_SALength:
.a557	c8		iny				iny
.a558	b1 38		lda ($38),y			lda 	(zTemp1),y
.a55a	d0 fb		bne $a557			bne 	_SALength
.a55c	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a55e	b0 3f		bcs $a59f			bcs 	_SALengthError
.a560	98		tya				tya 				 				; length of the new string
.a561	18		clc				clc
.a562	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a564	90 02		bcc $a568			bcc 	_SAHaveLength
.a566	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a568					_SAHaveLength:
.a568	48		pha				pha 								; save length.
.a569	38		sec				sec
.a56a	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a56c	6d 0e 07	adc $070e			adc 	StringMemory
.a56f	8d 0e 07	sta $070e			sta 	StringMemory
.a572	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a574	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.a577	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a579	6d 0f 07	adc $070f			adc 	StringMemory+1
.a57c	8d 0f 07	sta $070f			sta 	StringMemory+1
.a57f	85 3b		sta $3b				sta 	zTemp2+1
.a581	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a584	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a585	38		sec				sec
.a586	e9 03		sbc #$03			sbc 	#3
.a588	92 3a		sta ($3a)			sta 	(zTemp2)
.a58a	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a58c	a0 01		ldy #$01			ldy 	#1
.a58e	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a590					_SACopyNewString:
.a590	a0 00		ldy #$00			ldy 	#0
.a592					_SACopyNSLoop:
.a592	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a594	c8		iny				iny 								; write two on in string storage
.a595	c8		iny				iny
.a596	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a598	88		dey				dey 								; this makes it one one.
.a599	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a59b	d0 f5		bne $a592			bne 	_SACopyNSLoop
.a59d	7a		ply				ply
.a59e	60		rts				rts
.a59f					_SALengthError:
.a59f	a9 09		lda #$09		lda	#9
.a5a1	4c 75 8b	jmp $8b75		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a5a4					StringSystemInitialise:
.a5a4	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a5a6	8d 0e 07	sta $070e			sta 	0+StringMemory
.a5a9	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a5ab	8d 0f 07	sta $070f			sta 	1+StringMemory
.a5ae	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a5b1	60		rts				rts
.a5b2					StringSpaceInitialise:
.a5b2	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a5b4	8d 10 07	sta $0710			sta 	StringInitialised
.a5b7	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a5ba	8d 11 07	sta $0711			sta 	StringTempPointer
.a5bd	ad 0f 07	lda $070f			lda 	StringMemory+1
.a5c0	3a		dec a				dec 	a
.a5c1	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a5c4	60		rts				rts
.a5c5					StringTempAllocate:
.a5c5	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a5c7	b0 35		bcs $a5fe			bcs 	_STALength
.a5c9	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a5cc	30 05		bmi $a5d3			bmi 	_STAAllocate
.a5ce	48		pha				pha 								; save value to subtract.
.a5cf	20 b2 a5	jsr $a5b2			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a5d2	68		pla				pla 								; restore it
.a5d3					_STAAllocate:
.a5d3	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a5d5	18		clc				clc  								; deliberate allows one more
.a5d6	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a5d9	8d 11 07	sta $0711			sta 	StringTempPointer
.a5dc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a5df	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a5e1	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a5e4	69 ff		adc #$ff			adc 	#$FF
.a5e6	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a5e9	85 3d		sta $3d				sta 	zsTemp+1
.a5eb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a5ee	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a5f1	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a5f4	a9 10		lda #$10			lda 	#NSTString
.a5f6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a5f9	a9 00		lda #$00			lda 	#0 							; clear the target string
.a5fb	92 3c		sta ($3c)			sta 	(zsTemp)
.a5fd	60		rts				rts
.a5fe					_STALength:
.a5fe	a9 09		lda #$09		lda	#9
.a600	4c 75 8b	jmp $8b75		jmp	ErrorHandler
.a603					StringTempWrite:
.a603	48		pha				pha
.a604	92 3c		sta ($3c)			sta 	(zsTemp)
.a606	e6 3c		inc $3c				inc 	zsTemp
.a608	d0 02		bne $a60c			bne 	_STWNoCarry
.a60a	e6 3d		inc $3d				inc 	zsTemp+1
.a60c					_STWNoCarry:
.a60c	a9 00		lda #$00			lda 	#0
.a60e	92 3c		sta ($3c)			sta 	(zsTemp)
.a610	68		pla				pla
.a611	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9765					BackloadProgram:
.9765	a2 ff		ldx #$ff			ldx 	#$FF
.9767	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.976a	20 94 97	jsr $9794			jsr 	BLReadByte
.976d	30 1e		bmi $978d			bmi 	_BPExit
.976f					_BPCopy:
.976f	e8		inx				inx  								; copy byte in
.9770	9d 24 08	sta $0824,x			sta 	lineBuffer,x
.9773	9e 25 08	stz $0825,x			stz 	lineBuffer+1,x
.9776	20 94 97	jsr $9794			jsr 	BLReadByte 					; read next byte
.9779	30 0a		bmi $9785			bmi 	_BPEndLine 					; -ve = EOL
.977b	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.977d	d0 02		bne $9781			bne 	_BPNotTab
.977f	a9 20		lda #$20			lda 	#' '
.9781					_BPNotTab:
.9781	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9783	b0 ea		bcs $976f			bcs 	_BPCopy
.9785					_BPEndLine:
.9785	20 a8 9a	jsr $9aa8			jsr 	TokeniseLine 				; tokenise the line.
.9788	20 34 9d	jsr $9d34			jsr 	MemoryAppend 				; append to current program
.978b	80 d8		bra $9765			bra 	BackloadProgram
.978d					_BPExit:
.978d	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.9790	20 15 84	jsr $8415			jsr 	ClearCommand 				; clear variables etc.
.9793	60		rts				rts
.9794					BLReadByte:
.9794					_BLLoad:
.9794	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9797	ee 95 97	inc $9795			inc 	_BLLoad+1
.979a	d0 03		bne $979f			bne 	_BLNoCarry
.979c	ee 96 97	inc $9796			inc 	_BLLoad+2
.979f					_BLNoCarry:
.979f	c9 00		cmp #$00			cmp 	#0
.97a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.97a2					TokeniseSearchTable:
.97a2	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.97a4	85 36		sta $36				sta 	zTemp0
.97a6	a0 00		ldy #$00			ldy 	#0
.97a8	a9 80		lda #$80			lda 	#$80 						; token #
.97aa	85 38		sta $38				sta 	zTemp1
.97ac					_TSTLoop:
.97ac	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.97ae	30 49		bmi $97f9			bmi 	_TSTFail 					; -ve = end of table
.97b0	f0 2e		beq $97e0			beq 	_TSTNext 					; zero, check next it's a dummy
.97b2	c8		iny				iny 								; get the hash
.97b3	b1 36		lda ($36),y			lda 	(zTemp0),y
.97b5	88		dey				dey
.97b6	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.97b9	d0 25		bne $97e0			bne 	_TSTNext
.97bb	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.97be	38		sec				sec
.97bf	ed 00 07	sbc $0700			sbc 	identStart
.97c2	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.97c4	d0 1a		bne $97e0			bne 	_TSTNext
.97c6	5a		phy				phy 								; save Y , we might fail
.97c7	c8		iny				iny 								; point to text
.97c8	c8		iny				iny
.97c9	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.97cc					_TSTCompareName:
.97cc	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; compare text.
.97cf	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.97d1	d0 0c		bne $97df			bne 	_TSTNextPullY 				; fail, pullY and do next
.97d3	e8		inx				inx
.97d4	c8		iny				iny
.97d5	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.97d8	d0 f2		bne $97cc			bne 	_TSTCompareName
.97da	7a		ply				ply 								; throw Y
.97db	a5 38		lda $38				lda 	zTemp1 						; get token #
.97dd	38		sec				sec 								; return with CS = passed.
.97de	60		rts				rts
.97df					_TSTNextPullY:
.97df	7a		ply				ply 								; restore current, fall through.
.97e0					_TSTNext:
.97e0	e6 38		inc $38				inc 	zTemp1 						; token counter
.97e2	98		tya				tya
.97e3	18		clc				clc
.97e4	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.97e6	1a		inc a				inc 	a 							; +1
.97e7	1a		inc a				inc 	a 							; +2
.97e8	a8		tay				tay
.97e9	10 c1		bpl $97ac			bpl 	_TSTLoop 					; if Y < $80 loop back
.97eb	98		tya				tya 								; add Y to zTemp0 and reset Y
.97ec	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.97ee	18		clc				clc  								; but have tables > 255 bytes
.97ef	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.97f1	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.97f3	90 b7		bcc $97ac			bcc 	_TSTLoop
.97f5	e6 37		inc $37				inc 	zTemp0+1
.97f7	80 b3		bra $97ac			bra 	_TSTLoop
.97f9					_TSTFail:
.97f9	18		clc				clc
.97fa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.97fb					KeywordSet0:
>97fb	00 65					.text	0,$65,""               ; $80 !0:EOF
>97fd	00 58					.text	0,$58,""               ; $81 !1:SH1
>97ff	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9801	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9807	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>980f	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9815	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>981c	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9823	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>982a	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9830	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9838	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9840	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9846	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>984d	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>9853	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>985b	28
>985c	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>9862	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>9868	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>986e	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>9875	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>987b	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>9881	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>9886	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>988a	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>9890	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>9898	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>989f	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>98a6	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>98ae	43
>98af	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>98b5	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>98bb	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>98c2	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>98c8	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>98ce	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>98d3	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>98d9	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>98de	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>98e6	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>98ec	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>98f3	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>98f9	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>98fe	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>9905	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>990b	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>9910	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>9918	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>991c	ff					.text	$FF
.991d					KeywordSet1:
>991d	00 65					.text	0,$65,""               ; $80 !0:EOF
>991f	00 58					.text	0,$58,""               ; $81 !1:SH1
>9921	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9923	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>992b	4c 45
>992d	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>9935	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>993c	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>9941	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>9947	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>994c	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>9954	45
>9955	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>995a	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>9960	ff					.text	$FF
.9961					KeywordSet2:
>9961	00 65					.text	0,$65,""               ; $80 !0:EOF
>9963	00 58					.text	0,$58,""               ; $81 !1:SH1
>9965	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9967	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>996c	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>9971	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>9976	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>997b	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>9980	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>9985	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>998a	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>998f	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>9994	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>9999	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>999e	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>99a3	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>99a8	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>99ad	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>99b2	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>99b7	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>99bc	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>99c1	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>99c6	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>99cb	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>99d0	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>99d5	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>99da	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>99df	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>99e4	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>99e9	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>99ee	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>99f3	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>99f8	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>99fd	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9a02	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9a07	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9a0c	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9a11	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9a16	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9a1b	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9a20	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9a25	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9a2a	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9a2f	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>9a34	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>9a39	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9a3e	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9a43	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9a48	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9a4d	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9a52	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>9a57	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9a5c	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9a61	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>9a66	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>9a6b	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>9a70	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b8 STX
>9a75	03 00 53 54 59				.text	3,$00,"STY"            ; $b9 STY
>9a7a	03 01 53 54 5a				.text	3,$01,"STZ"            ; $ba STZ
>9a7f	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bb TAX
>9a84	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bc TAY
>9a89	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $bd TRB
>9a8e	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $be TSB
>9a93	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $bf TSX
>9a98	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c0 TXA
>9a9d	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c1 TXS
>9aa2	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c2 TYA
>9aa7	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9aa8					TokeniseLine:
.9aa8	20 30 9c	jsr $9c30			jsr 	FixLineBufferCase 			; fix line case
.9aab	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9aad	8d 24 07	sta $0724			sta 	tokenOffset
.9ab0	9c 25 07	stz $0725			stz 	tokenLineNumber
.9ab3	9c 26 07	stz $0726			stz 	tokenLineNumber+1
.9ab6	a2 ff		ldx #$ff			ldx 	#$FF
.9ab8					_TKFindFirst:
.9ab8	e8		inx				inx
.9ab9	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9abc	f0 79		beq $9b37			beq 	_TKExit
.9abe	c9 20		cmp #$20			cmp 	#' '
.9ac0	90 f6		bcc $9ab8			bcc 	_TKFindFirst
.9ac2	c9 30		cmp #$30			cmp 	#'0'
.9ac4	90 07		bcc $9acd			bcc 	_TKNoLineNumber
.9ac6	c9 3a		cmp #$3a			cmp 	#'9'+1
.9ac8	b0 03		bcs $9acd			bcs 	_TKNoLineNumber
.9aca	20 5a 9c	jsr $9c5a			jsr 	TokeniseExtractLineNumber
.9acd					_TKNoLineNumber:
.9acd					_TKTokeniseLoop:
.9acd	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9ad0	f0 65		beq $9b37			beq 	_TKExit
.9ad2	e8		inx				inx
.9ad3	c9 20		cmp #$20			cmp 	#' '
.9ad5	f0 f6		beq $9acd			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9ad7	ca		dex				dex 								; undo last get, A contains character, X is position.
.9ad8	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9ada	f0 61		beq $9b3d			beq 	_TKTokeniseIdentifier
.9adc	c9 41		cmp #$41			cmp 	#'A'
.9ade	90 04		bcc $9ae4			bcc 	_TKTokenisePunctuation
.9ae0	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9ae2	90 59		bcc $9b3d			bcc 	_TKTokeniseIdentifier
.9ae4					_TKTokenisePunctuation:
.9ae4	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9ae6	f0 27		beq $9b0f			beq 	_TKString
.9ae8	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.9aea	f0 28		beq $9b14			beq 	_TKHexConstant
.9aec	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9aee	f0 29		beq $9b19			beq 	_TKCheckDouble
.9af0	c9 3e		cmp #$3e			cmp 	#'>'
.9af2	f0 25		beq $9b19			beq 	_TKCheckDouble
.9af4					_TKStandardPunctuation:
.9af4	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get it back.
.9af7	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9af9	90 0e		bcc $9b09			bcc 	_TKNoShift
.9afb	48		pha				pha 								; save
.9afc	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9afe	85 36		sta $36				sta 	zTemp0
.9b00	68		pla				pla
.9b01	29 20		and #$20			and 	#32 						; bit 5
.9b03	4a		lsr a				lsr 	a 							; shift into bit 3
.9b04	4a		lsr a				lsr 	a
.9b05	05 36		ora $36				ora 	zTemp0
.9b07	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9b09					_TKNoShift:
.9b09	20 9f 9c	jsr $9c9f			jsr 	TokeniseWriteByte 			; write the punctuation character
.9b0c	e8		inx				inx 								; consume the character
.9b0d	80 be		bra $9acd			bra 	_TKTokeniseLoop 			; and loop round again.
.9b0f					_TKString:
.9b0f	20 bf 9b	jsr $9bbf			jsr 	TokeniseString
.9b12	80 b9		bra $9acd			bra 	_TKTokeniseLoop
.9b14					_TKHexConstant:
.9b14	20 fa 9b	jsr $9bfa			jsr 	TokeniseHexConstant
.9b17	80 b4		bra $9acd			bra 	_TKTokeniseLoop
.9b19					_TKCheckDouble:
.9b19	bd 25 08	lda $0825,x			lda 	lineBuffer+1,x 				; get next character
.9b1c	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9b1e	90 d4		bcc $9af4			bcc 	_TKStandardPunctuation
.9b20	c9 3f		cmp #$3f			cmp 	#'>'+1
.9b22	b0 d0		bcs $9af4			bcs 	_TKStandardPunctuation
.9b24	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9b27	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9b29	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9b2a	7d 25 08	adc $0825,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9b2d	38		sec				sec
.9b2e	e9 3c		sbc #$3c			sbc 	#'<'
.9b30	20 9f 9c	jsr $9c9f			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9b33	e8		inx				inx 								; consume both
.9b34	e8		inx				inx
.9b35	80 96		bra $9acd			bra 	_TKTokeniseLoop
.9b37	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9b39	20 9f 9c	jsr $9c9f			jsr 	TokeniseWriteByte
.9b3c	60		rts				rts
.9b3d					_TKTokeniseIdentifier:
.9b3d	8e 00 07	stx $0700			stx 	identStart 					; save start
.9b40	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9b43					_TKCheckLoop:
.9b43	e8		inx				inx 								; look at next, we know first is identifier.
.9b44	bd 24 08	lda $0824,x			lda  	lineBuffer,x
.9b47	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9b49	f0 f8		beq $9b43			beq 	_TKCheckLoop
.9b4b	c9 30		cmp #$30			cmp	 	#"0"
.9b4d	90 0c		bcc $9b5b			bcc 	_TKEndIdentifier
.9b4f	c9 3a		cmp #$3a			cmp 	#"9"+1
.9b51	90 f0		bcc $9b43			bcc 	_TKCheckLoop
.9b53	c9 41		cmp #$41			cmp	 	#"A"
.9b55	90 04		bcc $9b5b			bcc 	_TKEndIdentifier
.9b57	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9b59	90 e8		bcc $9b43			bcc 	_TKCheckLoop
.9b5b					_TKEndIdentifier:
.9b5b	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9b5e	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9b60	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9b62	f0 06		beq $9b6a			beq 	_TKHasTypeCharacter
.9b64	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9b66	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9b68	d0 07		bne $9b71			bne 	_TKNoTypeCharacter
.9b6a					_TKHasTypeCharacter:
.9b6a	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9b6d	e8		inx				inx 								; read next
.9b6e	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9b71					_TKNoTypeCharacter:
.9b71	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9b73	d0 09		bne $9b7e			bne 	_TKNoArray
.9b75	e8		inx				inx 								; skip the (
.9b76	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9b79	09 04		ora #$04			ora 	#$04
.9b7b	8d 04 07	sta $0704			sta 	identTypeByte
.9b7e					_TKNoArray:
.9b7e	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9b81	20 1b 9c	jsr $9c1b			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9b84	a0 97		ldy #$97			ldy 	#(KeywordSet0) >> 8
.9b86	a9 fb		lda #$fb			lda 	#(KeywordSet0) & $FF
.9b88	20 a2 97	jsr $97a2			jsr 	TokeniseSearchTable
.9b8b	a2 00		ldx #$00			ldx 	#0
.9b8d	b0 1f		bcs $9bae			bcs 	_TKFoundToken
.9b8f	a0 99		ldy #$99			ldy 	#(KeywordSet1) >> 8
.9b91	a9 1d		lda #$1d			lda 	#(KeywordSet1) & $FF
.9b93	20 a2 97	jsr $97a2			jsr 	TokeniseSearchTable
.9b96	a2 81		ldx #$81			ldx 	#$81
.9b98	b0 14		bcs $9bae			bcs 	_TKFoundToken
.9b9a	a0 99		ldy #$99			ldy 	#(KeywordSet2) >> 8
.9b9c	a9 61		lda #$61			lda 	#(KeywordSet2) & $FF
.9b9e	20 a2 97	jsr $97a2			jsr 	TokeniseSearchTable
.9ba1	a2 82		ldx #$82			ldx 	#$82
.9ba3	b0 09		bcs $9bae			bcs 	_TKFoundToken
.9ba5	20 ab 9c	jsr $9cab			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9ba8	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9bab	4c cd 9a	jmp $9acd			jmp 	_TKTokeniseLoop 			; and go round again.
.9bae					_TKFoundToken:
.9bae	48		pha				pha 								; save token
.9baf	8a		txa				txa 								; shift in X, is there one ?
.9bb0	f0 03		beq $9bb5			beq 	_TKNoTShift
.9bb2	20 9f 9c	jsr $9c9f			jsr 	TokeniseWriteByte 			; if so, write it out
.9bb5					_TKNoTShift:
.9bb5	68		pla				pla 								; restore and write token
.9bb6	20 9f 9c	jsr $9c9f			jsr 	TokeniseWriteByte
.9bb9	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9bbc	4c cd 9a	jmp $9acd			jmp 	_TKTokeniseLoop 			; and go round again.
.9bbf					TokeniseString:
.9bbf	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9bc1	20 9f 9c	jsr $9c9f			jsr 	TokeniseWriteByte
.9bc4	e8		inx				inx									; start of quoted string.
.9bc5	da		phx				phx 								; push start of string on top
.9bc6	ca		dex				dex
.9bc7					_TSFindEnd:
.9bc7	e8		inx				inx
.9bc8	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; next character
.9bcb	f0 04		beq $9bd1			beq 	_TSEndOfString
.9bcd	c9 22		cmp #$22			cmp 	#'"'
.9bcf	d0 f6		bne $9bc7			bne 	_TSFindEnd
.9bd1					_TSEndOfString:
.9bd1	7a		ply				ply  								; so now Y is first character, X is character after end.
.9bd2	48		pha				pha 								; save terminating character
.9bd3	20 db 9b	jsr $9bdb			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9bd6	68		pla				pla 								; terminating character
.9bd7	f0 01		beq $9bda			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9bd9	e8		inx				inx
.9bda					_TSNotQuote:
.9bda	60		rts				rts
.9bdb					TOWriteBlockXY:
.9bdb	86 36		stx $36				stx 	zTemp0 						; write end character
.9bdd	98		tya				tya
.9bde	49 ff		eor #$ff			eor 	#$FF
.9be0	38		sec				sec
.9be1	65 36		adc $36				adc 	zTemp0
.9be3	1a		inc a				inc 	a 							; one extra for NULL
.9be4	20 9f 9c	jsr $9c9f			jsr 	TokeniseWriteByte
.9be7					_TOBlockLoop:
.9be7	c4 36		cpy $36				cpy 	zTemp0
.9be9	f0 09		beq $9bf4			beq 	_TOBlockExit
.9beb	b9 24 08	lda $0824,y			lda 	lineBuffer,y
.9bee	20 9f 9c	jsr $9c9f			jsr 	TokeniseWriteByte
.9bf1	c8		iny				iny
.9bf2	80 f3		bra $9be7			bra 	_TOBlockLoop
.9bf4					_TOBlockExit:
.9bf4	a9 00		lda #$00			lda 	#0
.9bf6	20 9f 9c	jsr $9c9f			jsr 	TokeniseWriteByte
.9bf9	60		rts				rts
.9bfa					TokeniseHexConstant:
.9bfa	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9bfc	20 9f 9c	jsr $9c9f			jsr 	TokeniseWriteByte
.9bff	e8		inx				inx									; start of quoted string.
.9c00	da		phx				phx 								; push start of constant on top
.9c01	ca		dex				dex
.9c02					_THFindLoop:
.9c02	e8		inx				inx
.9c03	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9c06	c9 30		cmp #$30			cmp 	#"0"
.9c08	90 0c		bcc $9c16			bcc 	_THFoundEnd
.9c0a	c9 3a		cmp #$3a			cmp 	#"9"+1
.9c0c	90 f4		bcc $9c02			bcc 	_THFindLoop
.9c0e	c9 41		cmp #$41			cmp 	#"A"
.9c10	90 04		bcc $9c16			bcc 	_THFoundEnd
.9c12	c9 47		cmp #$47			cmp 	#"F"+1
.9c14	90 ec		bcc $9c02			bcc 	_THFindLoop
.9c16					_THFoundEnd:
.9c16	7a		ply				ply 								; restore start
.9c17	20 db 9b	jsr $9bdb			jsr 	TOWriteBlockXY 				; output the block
.9c1a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9c1b					TokeniseCalculateHash:
.9c1b	da		phx				phx
.9c1c	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9c1f	a9 00		lda #$00			lda 	#0
.9c21					_TCHLoop:
.9c21	18		clc				clc
.9c22	7d 24 08	adc $0824,x			adc 	lineBuffer,x
.9c25	e8		inx				inx
.9c26	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9c29	d0 f6		bne $9c21			bne 	_TCHLoop
.9c2b	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9c2e	fa		plx				plx
.9c2f	60		rts				rts
.9c30					FixLineBufferCase:
.9c30	a2 00		ldx #$00			ldx 	#0
.9c32					_FLBCLoop:
.9c32	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get next character
.9c35	f0 22		beq $9c59			beq 	_FLBCExit 					; end of string.
.9c37	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9c39	f0 11		beq $9c4c			beq 	_FLBCInQuotes
.9c3b	e8		inx				inx
.9c3c	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9c3e	90 f2		bcc $9c32			bcc 	_FLBCLoop
.9c40	c9 7b		cmp #$7b			cmp 	#'z'+1
.9c42	b0 ee		bcs $9c32			bcs 	_FLBCLoop
.9c44	38		sec				sec 								; make U/C
.9c45	e9 20		sbc #$20			sbc 	#32
.9c47	9d 23 08	sta $0823,x			sta	 	lineBuffer-1,x 				; write back
.9c4a	80 e6		bra $9c32			bra 	_FLBCLoop
.9c4c					_FLBCInQuotes:
.9c4c	e8		inx				inx 								; advance
.9c4d	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get next
.9c50	f0 07		beq $9c59			beq 	_FLBCExit 					; exit on EOS
.9c52	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9c54	d0 f6		bne $9c4c			bne 	_FLBCInQuotes
.9c56	e8		inx				inx 								; skip over it
.9c57	80 d9		bra $9c32			bra 	_FLBCLoop
.9c59					_FLBCExit:
.9c59	60		rts				rts
.9c5a					TokeniseExtractLineNumber:
.9c5a	ad 26 07	lda $0726			lda 	tokenLineNumber+1 			; push current value on stack
.9c5d	48		pha				pha
.9c5e	ad 25 07	lda $0725			lda 	tokenLineNumber
.9c61	48		pha				pha
.9c62	20 98 9c	jsr $9c98			jsr 	_TELNTimes2 				; line # x 4
.9c65	20 98 9c	jsr $9c98			jsr 	_TELNTimes2 				; line # x 2
.9c68	18		clc				clc 								; add stacked value
.9c69	68		pla				pla
.9c6a	6d 25 07	adc $0725			adc 	tokenLineNumber
.9c6d	8d 25 07	sta $0725			sta 	tokenLineNumber
.9c70	68		pla				pla
.9c71	6d 26 07	adc $0726			adc 	tokenLineNumber+1
.9c74	8d 26 07	sta $0726			sta 	tokenLineNumber+1 			; line # x 5
.9c77	20 98 9c	jsr $9c98			jsr 	_TELNTimes2 				; line # x 10
.9c7a	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get and consume character
.9c7d	e8		inx				inx
.9c7e	29 0f		and #$0f			and 	#15 						; add to line #
.9c80	18		clc				clc
.9c81	6d 25 07	adc $0725			adc 	tokenLineNumber
.9c84	8d 25 07	sta $0725			sta 	tokenLineNumber
.9c87	90 03		bcc $9c8c			bcc 	_TLENNoCarry
.9c89	ee 26 07	inc $0726			inc 	tokenLineNumber+1
.9c8c					_TLENNoCarry:
.9c8c	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; more digits ?
.9c8f	c9 30		cmp #$30			cmp 	#'0'
.9c91	90 04		bcc $9c97			bcc 	_TLENExit
.9c93	c9 3a		cmp #$3a			cmp 	#'9'+1
.9c95	90 c3		bcc $9c5a			bcc 	TokeniseExtractLineNumber
.9c97					_TLENExit:
.9c97	60		rts				rts
.9c98					_TELNTimes2:
.9c98	0e 25 07	asl $0725			asl 	tokenLineNumber
.9c9b	2e 26 07	rol $0726			rol 	tokenLineNumber+1
.9c9e	60		rts				rts
.9c9f					TokeniseWriteByte:
.9c9f	da		phx				phx
.9ca0	ae 24 07	ldx $0724			ldx 	tokenOffset 				; next slot to write to
.9ca3	9d 24 07	sta $0724,x			sta 	tokenOffset,x 				; write byte out
.9ca6	ee 24 07	inc $0724			inc 	tokenOffset 				; advance slot.
.9ca9	fa		plx				plx
.9caa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9cab					CheckCreateVariableRecord:
.9cab	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9cad	85 36		sta $36				sta 	0+zTemp0
.9caf	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9cb1	85 37		sta $37				sta 	1+zTemp0
.9cb3					_CCVSearch:
.9cb3	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9cb5	f0 2c		beq $9ce3			beq 	_CCVFail
.9cb7	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9cb9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9cbb	cd 03 07	cmp $0703			cmp 	identHash
.9cbe	d0 16		bne $9cd6			bne 	_CCVNext
.9cc0	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9cc2	ae 00 07	ldx $0700			ldx 	identStart
.9cc5					_CCVCompare:
.9cc5	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9cc8	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9cca	e8		inx				inx 								; advance pointers
.9ccb	c8		iny				iny
.9ccc	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9ccd	d0 07		bne $9cd6			bne 	_CCVNext  					; didn't match go to next.
.9ccf	90 f4		bcc $9cc5			bcc 	_CCVCompare 				; not finished yet.
.9cd1	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9cd4	f0 41		beq $9d17			beq 	_CCVFound 					; yes, we were successful
.9cd6					_CCVNext:
.9cd6	18		clc				clc
.9cd7	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9cd9	65 36		adc $36				adc 	zTemp0
.9cdb	85 36		sta $36				sta 	zTemp0
.9cdd	90 d4		bcc $9cb3			bcc 	_CCVSearch
.9cdf	e6 37		inc $37				inc 	zTemp0+1
.9ce1	80 d0		bra $9cb3			bra 	_CCVSearch
.9ce3					_CCVFail:
.9ce3	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9ce5	ad 03 07	lda $0703			lda 	identHash
.9ce8	91 36		sta ($36),y			sta 	(zTemp0),y
.9cea	c8		iny				iny 								; offset 2 is the type byte
.9ceb	ad 04 07	lda $0704			lda 	identTypeByte
.9cee	91 36		sta ($36),y			sta 	(zTemp0),y
.9cf0	c8		iny				iny
.9cf1					_CCVData:
.9cf1	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9cf3	91 36		sta ($36),y			sta 	(zTemp0),y
.9cf5	c8		iny				iny
.9cf6	c0 08		cpy #$08			cpy 	#8
.9cf8	90 f7		bcc $9cf1			bcc 	_CCVData
.9cfa	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9cfd					_CCVCopyName:
.9cfd	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9d00	91 36		sta ($36),y			sta 	(zTemp0),y
.9d02	e8		inx				inx
.9d03	c8		iny				iny
.9d04	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9d07	d0 f4		bne $9cfd			bne 	_CCVCopyName
.9d09	98		tya				tya 								; patch offset
.9d0a	92 36		sta ($36)			sta 	(zTemp0)
.9d0c	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9d0e	91 36		sta ($36),y			sta 	(zTemp0),y
.9d10	88		dey				dey
.9d11	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9d13	09 80		ora #$80			ora 	#$80
.9d15	91 36		sta ($36),y			sta 	(zTemp0),y
.9d17					_CCVFound:
.9d17	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9d19	38		sec				sec
.9d1a	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9d1c	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9d1e	20 9f 9c	jsr $9c9f			jsr 	TokeniseWriteByte
.9d21	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9d23	20 9f 9c	jsr $9c9f			jsr 	TokeniseWriteByte
.9d26	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.a612					MemoryPeek:
.a612	b2 36		lda ($36)			lda 	(zTemp0)
.a614	60		rts				rts
.a615					MemoryPoke:
.a615	92 36		sta ($36)			sta 	(zTemp0)
.a617	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.a618					EXTPrintCharacter:
.a618	48		pha				pha
.a619	da		phx				phx
.a61a	5a		phy				phy
.a61b	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a61e	7a		ply				ply
.a61f	fa		plx				plx
.a620	68		pla				pla
.a621	60		rts				rts
.a622					EXTInputSingleCharacter:
.a622	da		phx				phx
.a623	5a		phy				phy
.a624					_EISCWait:
.a624	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a627	c9 00		cmp #$00			cmp 	#0
.a629	f0 f9		beq $a624			beq 	_EISCWait
.a62b	7a		ply				ply
.a62c	fa		plx				plx
.a62d	60		rts				rts
.a62e					EXTInputLine:
.a62e	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a630					_ILLoop:
.a630	da		phx				phx 								; read character in
.a631	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a634	fa		plx				plx
.a635	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a637	f0 12		beq $a64b			beq 	_ILBackspace
.a639	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a63b	f0 15		beq $a652			beq 	_ILExit
.a63d	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a63f	90 ef		bcc $a630			bcc 	_ILLoop
.a641	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a643	f0 eb		beq $a630			beq 	_ILLoop
.a645	9d 24 08	sta $0824,x			sta 	lineBuffer,x 				; save it
.a648	e8		inx				inx
.a649	80 e5		bra $a630			bra 	_ILLoop
.a64b					_ILBackspace:
.a64b	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a64d	f0 e1		beq $a630			beq 	_ILLoop
.a64f	ca		dex				dex 								; back one.
.a650	80 de		bra $a630			bra 	_ILLoop
.a652					_ILExit:
.a652	20 18 a6	jsr $a618			jsr 	EXTPrintCharacter
.a655	9e 24 08	stz $0824,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a658	60		rts				rts
.a659					EXTBreakCheck:
.a659	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9d27					MemoryNew:
.9d27	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9d29	85 30		sta $30				sta 	codePtr
.9d2b	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9d2d	85 31		sta $31				sta 	codePtr+1
.9d2f	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9d31	92 30		sta ($30)			sta 	(codePtr)
.9d33	60		rts				rts
.9d34					MemoryAppend:
.9d34	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9d36	85 30		sta $30				sta 	codePtr
.9d38	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9d3a	85 31		sta $31				sta 	codePtr+1
.9d3c					_MAFindEnd:
.9d3c	b2 30		lda ($30)			lda 	(codePtr)
.9d3e	f0 0d		beq $9d4d			beq 	_MAFoundEnd
.9d40	18		clc				clc
.9d41	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9d43	65 30		adc $30				adc 	codePtr
.9d45	85 30		sta $30				sta 	codePtr
.9d47	90 02		bcc $9d4b			bcc 	_CREExit
.9d49	e6 31		inc $31				inc 	codePtr+1
.9d4b					_CREExit:
.9d4b	80 ef		bra $9d3c			bra 	_MAFindEnd
.9d4d					_MAFoundEnd:
.9d4d	ac 24 07	ldy $0724			ldy 	tokenOffset 				; bytes to copy
.9d50	c0 04		cpy #$04			cpy 	#4 							; blank line
.9d52	f0 0e		beq $9d62			beq 	_MANoLine
.9d54	a9 00		lda #$00			lda 	#0 							; end of program
.9d56	91 30		sta ($30),y			sta 	(codePtr),y
.9d58					_MACopy:
.9d58	88		dey				dey
.9d59	b9 24 07	lda $0724,y			lda 	tokenOffset,y
.9d5c	91 30		sta ($30),y			sta 	(codePtr),y
.9d5e	c0 00		cpy #$00			cpy 	#0
.9d60	d0 f6		bne $9d58			bne 	_MACopy
.9d62					_MANoLine:
.9d62	60		rts				rts
.9d63					MemoryInline:
.9d63	98		tya				tya 								; put address into stack,x
.9d64	18		clc				clc
.9d65	65 30		adc $30				adc 	codePtr
.9d67	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9d6a	a5 31		lda $31				lda 	codePtr+1
.9d6c	69 00		adc #$00			adc 	#0
.9d6e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9d71	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9d74	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9d77	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/search.asm

.9d78					SearchLineAX:
.9d78	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9d7a	86 37		stx $37				stx 	zTemp0+1
.9d7c	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9d7e	85 30		sta $30				sta 	codePtr
.9d80	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9d82	85 31		sta $31				sta 	codePtr+1
.9d84					_MTAXLoop:
.9d84	b2 30		lda ($30)			lda 	(codePtr)
.9d86	18		clc				clc
.9d87	f0 21		beq $9daa			beq 	_MTAXExit 					; reached end, exit with CC.
.9d89	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9d8b	b1 30		lda ($30),y			lda 	(codePtr),y
.9d8d	38		sec				sec
.9d8e	e5 36		sbc $36				sbc 	zTemp0
.9d90	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9d92	c8		iny				iny 								; do the MSB
.9d93	b1 30		lda ($30),y			lda 	(codePtr),y
.9d95	e5 37		sbc $37				sbc 	zTemp0+1
.9d97	05 38		ora $38				ora 	zTemp1
.9d99	f0 0f		beq $9daa			beq 	_MTAXExit	 				; found
.9d9b	b0 0d		bcs $9daa			bcs 	_MTAXExit 					; current < required exit
.9d9d	18		clc				clc
.9d9e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9da0	65 30		adc $30				adc 	codePtr
.9da2	85 30		sta $30				sta 	codePtr
.9da4	90 02		bcc $9da8			bcc 	_CREExit
.9da6	e6 31		inc $31				inc 	codePtr+1
.9da8					_CREExit:
.9da8	80 da		bra $9d84			bra 	_MTAXLoop
.9daa					_MTAXExit:
.9daa	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
