
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Fri Sep 30 17:20:29 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 91 81	jsr $8191			jsr 	NewCommand 					; erase current program
.8006	20 7e 8c	jsr $8c7e			jsr 	BackloadProgram
.8009	4c ff 81	jmp $81ff			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 1d 97	jsr $971d			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	f1 83					.word	ShiftLeft                        ; $00 <<
>8016	eb 82					.word	BinaryCompareLessEqual           ; $01 <=
>8018	e1 82					.word	BinaryCompareNotEqual            ; $02 <>
>801a	f5 95					.word	SyntaxError                      ; $03 !!3
>801c	f5 95					.word	SyntaxError                      ; $04 ><
>801e	f5 82					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	f4 83					.word	ShiftRight                       ; $06 >>
>8022	f5 95					.word	SyntaxError                      ; $07 !!7
>8024	f5 95					.word	SyntaxError                      ; $08 !!8
>8026	f5 95					.word	SyntaxError                      ; $09 !!9
>8028	f5 95					.word	SyntaxError                      ; $0a !!10
>802a	f5 95					.word	SyntaxError                      ; $0b !!11
>802c	f5 95					.word	SyntaxError                      ; $0c !!12
>802e	f5 95					.word	SyntaxError                      ; $0d !!13
>8030	f5 95					.word	SyntaxError                      ; $0e !!14
>8032	f5 95					.word	SyntaxError                      ; $0f !!15
>8034	f5 95					.word	SyntaxError                      ; $10 @
>8036	f5 95					.word	SyntaxError                      ; $11 !!17
>8038	f5 95					.word	SyntaxError                      ; $12 !!18
>803a	f5 95					.word	SyntaxError                      ; $13 [
>803c	57 91					.word	IntegerDivide                    ; $14 \
>803e	f5 95					.word	SyntaxError                      ; $15 ]
>8040	77 85					.word	EorInteger                       ; $16 ^
>8042	f5 95					.word	SyntaxError                      ; $17 _
>8044	f5 95					.word	SyntaxError                      ; $18 `
>8046	f5 95					.word	SyntaxError                      ; $19 !!25
>8048	f5 95					.word	SyntaxError                      ; $1a !!26
>804a	f5 95					.word	SyntaxError                      ; $1b {
>804c	32 85					.word	OraInteger                       ; $1c |
>804e	f5 95					.word	SyntaxError                      ; $1d }
>8050	f5 95					.word	SyntaxError                      ; $1e ~
>8052	f5 95					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	f5 95					.word	SyntaxError                      ; $20
>8056	f5 95					.word	SyntaxError                      ; $21 !
>8058	f5 95					.word	SyntaxError                      ; $22 "
>805a	f5 95					.word	SyntaxError                      ; $23 #
>805c	f5 95					.word	SyntaxError                      ; $24 $
>805e	a3 91					.word	IntegerModulus                   ; $25 %
>8060	ed 84					.word	AndInteger                       ; $26 &
>8062	f5 95					.word	SyntaxError                      ; $27 '
>8064	f5 95					.word	SyntaxError                      ; $28 (
>8066	f5 95					.word	SyntaxError                      ; $29 )
>8068	17 92					.word	MulInteger                       ; $2a *
>806a	87 84					.word	AddInteger                       ; $2b +
>806c	f5 95					.word	SyntaxError                      ; $2c ,
>806e	c2 84					.word	SubInteger                       ; $2d -
>8070	f5 95					.word	SyntaxError                      ; $2e .
>8072	ae 93					.word	FDivideCommand                   ; $2f /
>8074	f5 95					.word	SyntaxError                      ; $30 0
>8076	f5 95					.word	SyntaxError                      ; $31 1
>8078	f5 95					.word	SyntaxError                      ; $32 2
>807a	f5 95					.word	SyntaxError                      ; $33 3
>807c	f5 95					.word	SyntaxError                      ; $34 4
>807e	f5 95					.word	SyntaxError                      ; $35 5
>8080	f5 95					.word	SyntaxError                      ; $36 6
>8082	f5 95					.word	SyntaxError                      ; $37 7
>8084	f5 95					.word	SyntaxError                      ; $38 8
>8086	f5 95					.word	SyntaxError                      ; $39 9
>8088	f5 95					.word	SyntaxError                      ; $3a :
>808a	f5 95					.word	SyntaxError                      ; $3b ;
>808c	cd 82					.word	BinaryCompareLess                ; $3c <
>808e	c3 82					.word	BinaryCompareEqual               ; $3d =
>8090	d7 82					.word	BinaryCompareGreater             ; $3e >
>8092	f5 95					.word	SyntaxError                      ; $3f ?
.8094					VectorSet0:
>8094	39 82					.word	EOLCommand                       ; $80 !0:EOF
>8096	46 82					.word	Shift1Command                    ; $81 !1:SH1
>8098	f5 95					.word	SyntaxError                      ; $82 !2:SH2
>809a	f4 94					.word	AbsUnary                         ; $83 ABS(
>809c	76 89					.word	AllocUnary                       ; $84 ALLOC(
>809e	04 95					.word	AscUnary                         ; $85 ASC(
>80a0	13 8a					.word	ChrUnary                         ; $86 CHR$(
>80a2	bf 82					.word	UnaryFalse                       ; $87 FALSE
>80a4	11 95					.word	FracUnary                        ; $88 FRAC(
>80a6	27 95					.word	IntUnary                         ; $89 INT(
>80a8	7d 95					.word	IsValUnary                       ; $8a ISVAL(
>80aa	ed 8a					.word	Unary_Left                       ; $8b LEFT$(
>80ac	39 95					.word	LenUnary                         ; $8c LEN(
>80ae	17 8b					.word	Unary_Mid                        ; $8d MID$(
>80b0	b0 89					.word	Unary_Not                        ; $8e NOT(
>80b2	fd 8a					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	c6 89					.word	Unary_Rnd                        ; $90 RND(
>80b6	53 95					.word	SgnUnary                         ; $91 SGN(
>80b8	25 8a					.word	SpcUnary                         ; $92 SPC(
>80ba	40 8a					.word	Unary_Str                        ; $93 STR$(
>80bc	b3 82					.word	UnaryTrue                        ; $94 TRUE
>80be	73 95					.word	ValUnary                         ; $95 VAL(
>80c0	f5 95					.word	SyntaxError                      ; $96 FOR
>80c2	f5 95					.word	SyntaxError                      ; $97 IF
>80c4	f5 95					.word	SyntaxError                      ; $98 PROC
>80c6	f5 95					.word	SyntaxError                      ; $99 REPEAT
>80c8	f5 95					.word	SyntaxError                      ; $9a WHILE
>80ca	f5 95					.word	SyntaxError                      ; $9b ENDIF
>80cc	f5 95					.word	SyntaxError                      ; $9c ENDPROC
>80ce	f5 95					.word	SyntaxError                      ; $9d NEXT
>80d0	f5 95					.word	SyntaxError                      ; $9e UNTIL
>80d2	f5 95					.word	SyntaxError                      ; $9f WEND
>80d4	1a 81					.word	CallCommand                      ; $a0 CALL
>80d6	f5 95					.word	SyntaxError                      ; $a1 CLS
>80d8	f5 95					.word	SyntaxError                      ; $a2 DATA
>80da	f5 95					.word	SyntaxError                      ; $a3 DIM
>80dc	f5 95					.word	SyntaxError                      ; $a4 GOSUB
>80de	f5 95					.word	SyntaxError                      ; $a5 GOTO
>80e0	62 81					.word	LetCommand                       ; $a6 LET
>80e2	9b 81					.word	Command_Print                    ; $a7 PRINT
>80e4	f5 95					.word	SyntaxError                      ; $a8 READ
>80e6	f2 81					.word	RemCommand                       ; $a9 REM
>80e8	f5 95					.word	SyntaxError                      ; $aa RETURN
>80ea	f5 95					.word	SyntaxError                      ; $ab THEN
>80ec	f5 95					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	f5 95					.word	SyntaxError                      ; $80 !0:EOF
>80f0	f5 95					.word	SyntaxError                      ; $81 !1:SH1
>80f2	f5 95					.word	SyntaxError                      ; $82 !2:SH2
>80f4	0a 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	28 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	5f 81					.word	EndCommand                       ; $85 END
>80fa	f5 95					.word	SyntaxError                      ; $86 LIST
>80fc	91 81					.word	NewCommand                       ; $87 NEW
>80fe	f5 95					.word	SyntaxError                      ; $88 RESTORE
>8100	ff 81					.word	CommandRUN                       ; $89 RUN
>8102	f5 95					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	f5 95					.word	SyntaxError                      ; $80 !0:EOF
>8106	f5 95					.word	SyntaxError                      ; $81 !1:SH1
>8108	f5 95					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810a					AssertCommand:
.810a	a2 00		ldx #$00			ldx 	#0
.810c	20 b8 8b	jsr $8bb8			jsr 	EvaluateInteger 			; the assert test
.810f	20 71 8c	jsr $8c71			jsr 	NSMIsZero 					; exit if result is non zero.
.8112	d0 05		bne $8119			bne 	_ACExit
.8114	a9 0a		lda #$0a		lda	#10
.8116	4c 4e 82	jmp $824e		jmp	ErrorHandler
.8119					_ACExit:
.8119	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811a					CallCommand:
.811a	a2 00		ldx #$00			ldx 	#0
.811c	20 cd 8b	jsr $8bcd			jsr 	Evaluate16BitInteger
.811f	ad 10 06	lda $0610			lda 	NSMantissa1
.8122	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8125	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8128					ClearCommand:
.8128	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812a	85 36		sta $36				sta 	0+zTemp0
.812c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.812e	85 37		sta $37				sta 	1+zTemp0
.8130					_ClearZeroLoop:
.8130	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8132	f0 18		beq $814c			beq 	_ClearZeroEnd
.8134	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8136	a9 00		lda #$00			lda 	#0
.8138					_ClearOneVariable:
.8138	91 36		sta ($36),y			sta 	(zTemp0),y
.813a	c8		iny				iny
.813b	c0 08		cpy #$08			cpy 	#8
.813d	d0 f9		bne $8138			bne 	_ClearOneVariable
.813f	18		clc				clc 								; go to the next variable
.8140	b2 36		lda ($36)			lda 	(zTemp0)
.8142	65 36		adc $36				adc 	zTemp0
.8144	85 36		sta $36				sta 	zTemp0
.8146	90 e8		bcc $8130			bcc 	_ClearZeroLoop
.8148	e6 37		inc $37				inc 	zTemp0+1
.814a	80 e4		bra $8130			bra 	_ClearZeroLoop
.814c					_ClearZeroEnd:
.814c	18		clc				clc
.814d	a5 36		lda $36				lda 	zTemp0
.814f	69 01		adc #$01			adc 	#1
.8151	8d 0c 07	sta $070c			sta 	lowMemPtr
.8154	a5 37		lda $37				lda 	zTemp0+1
.8156	69 00		adc #$00			adc 	#0
.8158	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.815b	20 ac 96	jsr $96ac			jsr 	StringSystemInitialise
.815e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.815f					EndCommand:
.815f	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8162					LetCommand:
.8162	a2 00		ldx #$00			ldx 	#0
.8164	ad e6 85	lda $85e6			lda 	PrecedenceLevel+"*"			; precedence > this
.8167	20 00 86	jsr $8600			jsr 	EvaluateExpressionAtPrecedence
.816a	a9 3d		lda #$3d			lda 	#"=" 						; check =
.816c	20 4e 91	jsr $914e			jsr 	CheckNextA
.816f	e8		inx				inx 								; RHS
.8170	20 fe 85	jsr $85fe			jsr 	EvaluateExpression
.8173	ca		dex				dex
.8174	20 78 81	jsr $8178			jsr 	AssignVariable
.8177	60		rts				rts
.8178					AssignVariable:
.8178	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.817b	48		pha				pha 								; save a copy
.817c	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.817f	29 10		and #$10			and 	#NSBIsString
.8181	d0 0b		bne $818e			bne 	_ASError
.8183	68		pla				pla 								; get back
.8184	29 10		and #$10			and 	#NSBIsString 				; check type
.8186	d0 03		bne $818b			bne 	_ASString
.8188	4c 3b 86	jmp $863b			jmp 	AssignNumber
.818b					_ASString:
.818b	4c a9 86	jmp $86a9			jmp 	AssignString
.818e					_ASError:
.818e	4c ff 95	jmp $95ff			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8191					NewCommand:
.8191	20 eb 90	jsr $90eb			jsr 	MemoryNew
.8194	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8197	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear everything.
.819a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.819b					Command_Print:
.819b	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.819c					_CPLoop:
.819c	08		php				php 								; save last action flag
.819d	b1 30		lda ($30),y			lda 	(codePtr),y
.819f	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.81a1	f0 46		beq $81e9			beq 	_CPExit
.81a3	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.81a5	f0 42		beq $81e9			beq 	_CPExit
.81a7	68		pla				pla 								; throw last action flag
.81a8	b1 30		lda ($30),y			lda 	(codePtr),y
.81aa	c8		iny				iny
.81ab	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.81ad	f0 37		beq $81e6			beq 	_CPContinueWithSameLine
.81af	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.81b1	f0 2e		beq $81e1			beq 	_CPTab
.81b3	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.81b5	f0 26		beq $81dd			beq 	_CPNewLine
.81b7	88		dey				dey 								; undo the get.
.81b8	a2 00		ldx #$00			ldx 	#0
.81ba	20 8c 8b	jsr $8b8c			jsr 	EvaluateValue 				; get a value into slot 0
.81bd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.81c0	29 10		and #$10			and 	#NSBIsString
.81c2	f0 0b		beq $81cf			beq 	_CPNumber
.81c4	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.81c7	ad 08 06	lda $0608			lda 	NSMantissa0
.81ca	20 a0 82	jsr $82a0			jsr 	PrintStringXA
.81cd	80 cc		bra $819b			bra 	Command_Print 				; loop round clearing carry so NL if end
.81cf					_CPNumber:
.81cf	a9 05		lda #$05			lda 	#5 							; maximum decimals
.81d1	20 62 8a	jsr $8a62			jsr 	ConvertNumberToString 		; convert to string
.81d4	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.81d6	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.81d8	20 a0 82	jsr $82a0			jsr 	PrintStringXA
.81db	80 be		bra $819b			bra 	Command_Print 				; loop round clearing carry so NL if end
.81dd					_CPNewLine:
.81dd	a9 0d		lda #$0d			lda 	#13
.81df	80 02		bra $81e3			bra 	_CPPrintChar
.81e1					_CPTab:
.81e1	a9 09		lda #$09			lda 	#9 							; print TAB
.81e3					_CPPrintChar:
.81e3	20 1d 97	jsr $971d			jsr 	EXTPrintCharacter
.81e6					_CPContinueWithSameLine:
.81e6	38		sec				sec 								; loop round with carry set, which
.81e7	80 b3		bra $819c			bra 	_CPLoop 					; will inhibit final CR
.81e9					_CPExit:
.81e9	28		plp				plp 								; get last action flag
.81ea	b0 05		bcs $81f1			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.81ec	a9 0d		lda #$0d			lda 	#13 						; print new line
.81ee	20 1d 97	jsr $971d			jsr 	EXTPrintCharacter
.81f1					_CPExit2:
.81f1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.81f2					RemCommand:
.81f2	b1 30		lda ($30),y			lda 	(codePtr),y
.81f4	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.81f6	d0 06		bne $81fe			bne 	_RMExit
.81f8	c8		iny				iny
.81f9	98		tya				tya
.81fa	38		sec				sec
.81fb	71 30		adc ($30),y			adc 	(codePtr),y
.81fd	a8		tay				tay
.81fe					_RMExit:
.81fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.81ff					CommandRUN:
.81ff	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8202	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8204	85 30		sta $30				sta 	codePtr
.8206	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8208	85 31		sta $31				sta 	codePtr+1
.820a					RUNNewLine:
.820a	b2 30		lda ($30)			lda 	(codePtr)
.820c	f0 28		beq $8236			beq 	CRNoProgram         		; no then END.
.820e	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8210	9a		txs				txs
.8211					RUNCodePointerLine:
.8211	a0 02		ldy #$02			ldy 	#2 							; start of program
.8213					_CRIncMainLoop:
.8213	c8		iny				iny
.8214					_CRMainLoop:
.8214	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8217	b1 30		lda ($30),y			lda 	(codePtr),y
.8219	10 10		bpl $822b			bpl 	_CRNotKeyword
.821b	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.821d	b0 04		bcs $8223			bcs 	_CRIsKeyword
.821f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8221	b0 0d		bcs $8230			bcs		_CRSyntaxError
.8223					_CRIsKeyword:
.8223	c8		iny				iny 								; consume command
.8224	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8225	aa		tax				tax 								; put in X for vector jump
.8226	20 33 82	jsr $8233			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8229	80 e9		bra $8214			bra 	_CRMainLoop 				; and loop round
.822b					_CRNotKeyword:
.822b	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.822d	f0 e4		beq $8213			beq 	_CRIncMainLoop
>822f	db						.byte 	$DB 						; causes a break in the emulator
.8230					_CRSyntaxError:
.8230	4c f5 95	jmp $95f5			jmp 	SyntaxError
.8233					_CRCallVector0:
.8233	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8236					CRNoProgram:
.8236	4c 5f 81	jmp $815f			jmp 	EndCommand
.8239					EOLCommand:
.8239	18		clc				clc
.823a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.823c	65 30		adc $30				adc 	codePtr
.823e	85 30		sta $30				sta 	codePtr
.8240	90 02		bcc $8244			bcc 	_CREExit
.8242	e6 31		inc $31				inc 	codePtr+1
.8244					_CREExit:
.8244	80 c4		bra $820a			bra 	RunNewLine
.8246					Shift1Command:
.8246	b1 30		lda ($30),y			lda 	(codePtr),y
.8248	c8		iny				iny
.8249	0a		asl a				asl 	a
.824a	aa		tax				tax
.824b	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.913e					CheckRightBracket:
.913e	b1 30		lda ($30),y			lda 	(codePtr),y
.9140	c8		iny				iny
.9141	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9143	d0 0f		bne $9154			bne 	CNAFail
.9145	60		rts				rts
.9146					CheckComma:
.9146	b1 30		lda ($30),y			lda 	(codePtr),y
.9148	c8		iny				iny
.9149	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.914b	d0 07		bne $9154			bne 	CNAFail
.914d	60		rts				rts
.914e					CheckNextA:
.914e	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9150	d0 02		bne $9154			bne 	CNAFail
.9152	c8		iny				iny 								; skip character
.9153	60		rts				rts 								; and exit
.9154					CNAFail:
.9154	4c f5 95	jmp $95f5			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.824e					ErrorHandler:
.824e	a8		tay				tay 								; find the error text
.824f	f0 42		beq $8293			beq 	_EHEnd
.8251	a2 00		ldx #$00			ldx 	#0
.8253					_EHFind:
.8253	88		dey				dey 								; found the error text ?
.8254	f0 0a		beq $8260			beq 	_EHFound
.8256					_EHFindZero:
.8256	bd 0e 96	lda $960e,x			lda 	ErrorText,x 				; find the next error
.8259	e8		inx				inx
.825a	c9 00		cmp #$00			cmp 	#0
.825c	d0 f8		bne $8256			bne 	_EHFindZero
.825e	80 f3		bra $8253			bra 	_EHFind
.8260					_EHFound:
.8260	bd 0e 96	lda $960e,x			lda 	ErrorText,x 				; print the message
.8263	20 1d 97	jsr $971d			jsr 	EXTPrintCharacter
.8266	e8		inx				inx
.8267	bd 0e 96	lda $960e,x			lda 	ErrorText,x
.826a	d0 f4		bne $8260			bne 	_EHFound
.826c	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.826e	b1 30		lda ($30),y			lda 	(codePtr),y
.8270	d0 05		bne $8277			bne 	_EHAtMsg
.8272	c8		iny				iny
.8273	b1 30		lda ($30),y			lda 	(codePtr),y
.8275	f0 17		beq $828e			beq 	_EHCREnd
.8277					_EHAtMsg:
.8277	a2 82		ldx #$82			ldx 	#_AtMsg >> 8 				; print " at "
.8279	a9 96		lda #$96			lda 	#_AtMsg & $FF
.827b	20 a0 82	jsr $82a0			jsr 	PrintStringXA
.827e	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8280	b1 30		lda ($30),y			lda 	(codePtr),y
.8282	48		pha				pha
.8283	c8		iny				iny
.8284	b1 30		lda ($30),y			lda 	(codePtr),y
.8286	aa		tax				tax
.8287	68		pla				pla
.8288	20 98 92	jsr $9298			jsr 	ConvertInt16 				; convert XA to string
.828b	20 a0 82	jsr $82a0			jsr 	PrintStringXA 				; and print it.
.828e					_EHCREnd:
.828e	a9 0d		lda #$0d			lda 	#13 						; new line
.8290	20 1d 97	jsr $971d			jsr 	EXTPrintCharacter
.8293					_EHEnd:
.8293	4c 0c 80	jmp $800c			jmp 	WarmStart
>8296	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>829e	20 00
.82a0					PrintStringXA:
.82a0	5a		phy				phy
.82a1	86 37		stx $37				stx 	zTemp0+1
.82a3	85 36		sta $36				sta 	zTemp0
.82a5	a0 00		ldy #$00			ldy 	#0
.82a7					_PSXALoop:
.82a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.82a9	f0 06		beq $82b1			beq 	_PSXAExit
.82ab	20 1d 97	jsr $971d			jsr 	EXTPrintCharacter
.82ae	c8		iny				iny
.82af	80 f6		bra $82a7			bra 	_PSXALoop
.82b1					_PSXAExit:
.82b1	7a		ply				ply
.82b2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.82b3					UnaryTrue:
.82b3	fa		plx				plx
.82b4					ReturnTrue:
.82b4	a9 01		lda #$01			lda 	#1  						; set to 1
.82b6	20 43 8c	jsr $8c43			jsr 	NSMSetByte
.82b9	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.82bb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.82be	60		rts				rts
.82bf					UnaryFalse:
.82bf	fa		plx				plx
.82c0					ReturnFalse:
.82c0	4c 41 8c	jmp $8c41			jmp 	NSMSetZero 					; set it all to zero
.82c3					BinaryCompareEqual:
.82c3	fa		plx				plx
.82c4	20 ff 82	jsr $82ff			jsr 	CompareBaseCode
.82c7	c9 00		cmp #$00			cmp 	#0
.82c9	f0 e9		beq $82b4			beq 	ReturnTrue
.82cb	80 f3		bra $82c0			bra 	ReturnFalse
.82cd					BinaryCompareLess:
.82cd	fa		plx				plx
.82ce	20 ff 82	jsr $82ff			jsr 	CompareBaseCode
.82d1	c9 ff		cmp #$ff			cmp 	#$FF
.82d3	f0 df		beq $82b4			beq 	ReturnTrue
.82d5	80 e9		bra $82c0			bra 	ReturnFalse
.82d7					BinaryCompareGreater:
.82d7	fa		plx				plx
.82d8	20 ff 82	jsr $82ff			jsr 	CompareBaseCode
.82db	c9 01		cmp #$01			cmp 	#1
.82dd	f0 d5		beq $82b4			beq 	ReturnTrue
.82df	80 df		bra $82c0			bra 	ReturnFalse
.82e1					BinaryCompareNotEqual:
.82e1	fa		plx				plx
.82e2	20 ff 82	jsr $82ff			jsr 	CompareBaseCode
.82e5	c9 00		cmp #$00			cmp 	#0
.82e7	d0 cb		bne $82b4			bne 	ReturnTrue
.82e9	80 d5		bra $82c0			bra 	ReturnFalse
.82eb					BinaryCompareLessEqual:
.82eb	fa		plx				plx
.82ec	20 ff 82	jsr $82ff			jsr 	CompareBaseCode
.82ef	c9 01		cmp #$01			cmp 	#1
.82f1	d0 c1		bne $82b4			bne 	ReturnTrue
.82f3	80 cb		bra $82c0			bra 	ReturnFalse
.82f5					BinaryCompareGreaterEqual:
.82f5	fa		plx				plx
.82f6	20 ff 82	jsr $82ff			jsr 	CompareBaseCode
.82f9	c9 ff		cmp #$ff			cmp 	#$FF
.82fb	d0 b7		bne $82b4			bne 	ReturnTrue
.82fd	80 c1		bra $82c0			bra 	ReturnFalse
.82ff					CompareBaseCode:
.82ff	20 ac 86	jsr $86ac			jsr 	DereferenceTopTwo 			; make both values if references.
.8302	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8305	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8308	29 10		and #$10			and 	#NSTString
.830a	d0 40		bne $834c			bne 	_CBCString
.830c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.830f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8312	d0 3b		bne $834f			bne 	_CBCFloat
.8314	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8317	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.831a	29 08		and #$08			and 	#NSTFloat
.831c	d0 31		bne $834f			bne 	_CBCFloat
.831e	20 52 83	jsr $8352			jsr 	CompareFixMinusZero
.8321	e8		inx				inx
.8322	20 52 83	jsr $8352			jsr 	CompareFixMinusZero
.8325	ca		dex				dex
.8326	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8329	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.832c	10 0b		bpl $8339			bpl 	_CDCSameSign
.832e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8331	30 16		bmi $8349			bmi 	_CBCLess 					; return $FF
.8333					_CBCGreater:
.8333	a9 01		lda #$01			lda 	#1
.8335	60		rts				rts
.8336					_CBCEqual:
.8336	a9 00		lda #$00			lda 	#0
.8338	60		rts				rts
.8339					_CDCSameSign:
.8339	20 61 84	jsr $8461			jsr 	SubTopTwoStack 				; unsigned subtract
.833c	20 71 8c	jsr $8c71			jsr 	NSMIsZero 					; or the mantissa together
.833f	f0 f5		beq $8336			beq 	_CBCEqual 					; -0 == 0
.8341	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8344	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8347	10 ea		bpl $8333			bpl 	_CBCGreater
.8349					_CBCLess:
.8349	a9 ff		lda #$ff			lda 	#$FF
.834b	60		rts				rts
.834c					_CBCString:
.834c	4c b8 83	jmp $83b8			jmp 	CompareStrings
.834f					_CBCFloat:
.834f	4c 94 93	jmp $9394			jmp 	CompareFloat
.8352					CompareFixMinusZero:
.8352	20 71 8c	jsr $8c71			jsr 	NSMIsZero
.8355	d0 03		bne $835a			bne 	_CFXMZNotZero
.8357	9e 00 06	stz $0600,x			stz 	NSStatus,x
.835a					_CFXMZNotZero:
.835a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.835b					StringConcat:
.835b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.835e	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8361	29 18		and #$18			and 	#NSBTypeMask
.8363	c9 10		cmp #$10			cmp 	#NSTString
.8365	d0 4e		bne $83b5			bne		_SCType
.8367	64 38		stz $38				stz 	zTemp1 						; counting total length
.8369	e8		inx				inx
.836a	20 88 83	jsr $8388			jsr 	_SCSetupZ0 					; setup for second
.836d	20 93 83	jsr $8393			jsr 	_SCLengthZ0 				; length for second
.8370	ca		dex				dex
.8371	20 88 83	jsr $8388			jsr 	_SCSetupZ0 					; setup for first
.8374	20 93 83	jsr $8393			jsr 	_SCLengthZ0 				; length for first
.8377	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8379	20 ca 96	jsr $96ca			jsr 	StringTempAllocate
.837c	20 a6 83	jsr $83a6			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.837f	e8		inx				inx
.8380	20 88 83	jsr $8388			jsr 	_SCSetupZ0 					; copy second out
.8383	20 a6 83	jsr $83a6			jsr 	_SCCopy
.8386	ca		dex				dex
.8387	60		rts				rts
.8388					_SCSetupZ0:
.8388	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.838b	85 36		sta $36				sta 	zTemp0
.838d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8390	85 37		sta $37				sta 	zTemp0+1
.8392	60		rts				rts
.8393					_SCLengthZ0:
.8393	5a		phy				phy
.8394	a0 00		ldy #$00			ldy 	#0
.8396					_SCLenLoop:
.8396	b1 36		lda ($36),y			lda 	(zTemp0),y
.8398	f0 0a		beq $83a4			beq 	_SCLExit
.839a	c8		iny				iny
.839b	e6 38		inc $38				inc 	zTemp1
.839d	10 f7		bpl $8396			bpl		_SCLenLoop
.839f	a9 09		lda #$09		lda	#9
.83a1	4c 4e 82	jmp $824e		jmp	ErrorHandler
.83a4					_SCLExit:
.83a4	7a		ply				ply
.83a5	60		rts				rts
.83a6					_SCCopy:
.83a6	5a		phy				phy
.83a7	a0 00		ldy #$00			ldy 	#0
.83a9					_SCCopyLoop:
.83a9	b1 36		lda ($36),y			lda 	(zTemp0),y
.83ab	f0 06		beq $83b3			beq 	_SCCExit
.83ad	20 08 97	jsr $9708			jsr 	StringTempWrite
.83b0	c8		iny				iny
.83b1	80 f6		bra $83a9			bra 	_SCCopyLoop
.83b3					_SCCExit:
.83b3	7a		ply				ply
.83b4	60		rts				rts
.83b5					_SCType:
.83b5	4c ff 95	jmp $95ff			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9157					IntegerDivide:
.9157	fa		plx				plx
.9158	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.915b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.915e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.915f	0a		asl a				asl 	a
.9160	10 05		bpl $9167			bpl 	_NotRef
.9162	48		pha				pha
.9163	20 ac 86	jsr $86ac			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9166	68		pla				pla
.9167					_NotRef:
.9167	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9169	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.916c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.916f	f0 03		beq $9174			beq 	_IntegerCode 				; if clear, then we have two integers
.9171	4c ff 95	jmp $95ff			jmp 	TypeError 					; anything else, type mismatch.
.9174					_IntegerCode:
.9174	20 96 91	jsr $9196			jsr 	CheckDivideZero 			; do div zero check
.9177	20 cd 91	jsr $91cd			jsr 	Int32Divide 				; do the division
.917a	20 8a 92	jsr $928a			jsr 	CalculateSign 				; calculate result sign
.917d					NSMCopyPlusTwoToZero:
.917d	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9180	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9183	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9186	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9189	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.918c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.918f	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9192	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9195	60		rts				rts
.9196					CheckDivideZero:
.9196	e8		inx				inx
.9197	20 71 8c	jsr $8c71			jsr 	NSMIsZero
.919a	f0 02		beq $919e			beq 	_CDVError
.919c	ca		dex				dex
.919d	60		rts				rts
.919e					_CDVError:
.919e	a9 03		lda #$03		lda	#3
.91a0	4c 4e 82	jmp $824e		jmp	ErrorHandler
.91a3					IntegerModulus:
.91a3	fa		plx				plx
.91a4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.91a7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.91aa	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91ab	0a		asl a				asl 	a
.91ac	10 05		bpl $91b3			bpl 	_NotRef
.91ae	48		pha				pha
.91af	20 ac 86	jsr $86ac			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91b2	68		pla				pla
.91b3					_NotRef:
.91b3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91b5	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91b8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.91bb	f0 03		beq $91c0			beq 	_IntegerCode 				; if clear, then we have two integers
.91bd	4c ff 95	jmp $95ff			jmp 	TypeError 					; anything else, type mismatch.
.91c0					_IntegerCode:
.91c0	20 96 91	jsr $9196			jsr 	CheckDivideZero 			; do div zero check
.91c3	20 cd 91	jsr $91cd			jsr 	Int32Divide 				; do the division
.91c6	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.91c9	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.91cc	60		rts				rts
.91cd					Int32Divide:
.91cd	48		pha				pha 								; save AXY
.91ce	5a		phy				phy
.91cf	20 18 8c	jsr $8c18			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.91d2	20 3d 8c	jsr $8c3d			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.91d5	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.91d7					_I32DivideLoop:
.91d7	e8		inx				inx
.91d8	e8		inx				inx
.91d9	20 56 8c	jsr $8c56			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.91dc	ca		dex				dex
.91dd	ca		dex				dex
.91de	20 57 8c	jsr $8c57			jsr 	NSMRotateLeft
.91e1	20 0d 92	jsr $920d			jsr 	DivideCheckSubtract 		; check if subtract possible
.91e4	90 03		bcc $91e9			bcc 	_I32DivideNoCarryIn
.91e6	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.91e9					_I32DivideNoCarryIn:
.91e9	88		dey				dey 								; loop round till division completed.
.91ea	d0 eb		bne $91d7			bne 	_I32DivideLoop
.91ec	7a		ply				ply 								; restore AXY and exit
.91ed	68		pla				pla
.91ee	60		rts				rts
.91ef					Int32ShiftDivide:
.91ef	48		pha				pha 								; save AY
.91f0	5a		phy				phy
.91f1	e8		inx				inx 								; clear S[X+2]
.91f2	e8		inx				inx
.91f3	20 41 8c	jsr $8c41			jsr 	NSMSetZero
.91f6	ca		dex				dex
.91f7	ca		dex				dex
.91f8	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.91fa					_I32SDLoop:
.91fa	20 0d 92	jsr $920d			jsr 	DivideCheckSubtract 		; check if subtract possible
.91fd	e8		inx				inx
.91fe	e8		inx				inx
.91ff	20 57 8c	jsr $8c57			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9202	ca		dex				dex
.9203	ca		dex				dex
.9204	20 57 8c	jsr $8c57			jsr 	NSMRotateLeft
.9207	88		dey				dey 	 							; do 31 times
.9208	d0 f0		bne $91fa			bne 	_I32SDLoop
.920a	7a		ply				ply 								; restore AY and exit
.920b	68		pla				pla
.920c	60		rts				rts
.920d					DivideCheckSubtract:
.920d	20 61 84	jsr $8461			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9210	b0 04		bcs $9216			bcs 	_DCSExit 					; if carry set, then could do, exit
.9212	20 3b 84	jsr $843b			jsr 	AddTopTwoStack 				; add it back in
.9215	18		clc				clc 								; and return False
.9216					_DCSExit:
.9216	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9217					MulInteger:
.9217	fa		plx				plx
.9218	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.921b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.921e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.921f	0a		asl a				asl 	a
.9220	10 05		bpl $9227			bpl 	_NotRef
.9222	48		pha				pha
.9223	20 ac 86	jsr $86ac			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9226	68		pla				pla
.9227					_NotRef:
.9227	0a		asl a				asl 	a 							; put MSB of type into A:7
.9228	30 0b		bmi $9235			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.922a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.922d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9230	f0 06		beq $9238			beq 	_IntegerCode 				; if clear, then we have two integers
.9232	4c 6b 94	jmp $946b			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9235					_StringData:
.9235	4c 09 96	jmp $9609			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9238					_IntegerCode:
.9238	20 45 92	jsr $9245			jsr 	MultiplyShort
.923b	c9 00		cmp #$00			cmp 	#0
.923d	f0 05		beq $9244			beq 	_MIExit
.923f	a9 04		lda #$04		lda	#4
.9241	4c 4e 82	jmp $824e		jmp	ErrorHandler
.9244					_MIExit:
.9244	60		rts				rts
.9245					MultiplyShort:
.9245	5a		phy				phy 								; save Y
.9246	20 18 8c	jsr $8c18			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9249	20 3d 8c	jsr $8c3d			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.924c	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.924e					_I32MLoop:
.924e	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9251	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9254	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9257	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.925a	f0 28		beq $9284			beq 	_I32MExit 					; exit if zero
.925c	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.925f	29 01		and #$01			and 	#1
.9261	f0 0e		beq $9271			beq 	_I32MNoAdd
.9263	20 3b 84	jsr $843b			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9266	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9269	10 06		bpl $9271			bpl 	_I32MNoAdd
.926b					_I32ShiftRight:
.926b	20 64 8c	jsr $8c64			jsr 	NSMShiftRight 				; shift S[X] right
.926e	c8		iny				iny 								; increment shift count
.926f	80 0a		bra $927b			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9271					_I32MNoAdd:
.9271	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9274	70 f5		bvs $926b			bvs 	_I32ShiftRight 				; instead.
.9276	e8		inx				inx
.9277	20 56 8c	jsr $8c56			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.927a	ca		dex				dex
.927b					_I32MShiftUpper:
.927b	e8		inx				inx 								; shift S[X+2] right
.927c	e8		inx				inx
.927d	20 64 8c	jsr $8c64			jsr 	NSMShiftRight
.9280	ca		dex				dex
.9281	ca		dex				dex
.9282	80 ca		bra $924e			bra 	_I32MLoop 					; try again.
.9284					_I32MExit:
.9284	20 8a 92	jsr $928a			jsr 	CalculateSign
.9287	98		tya				tya 								; shift in A
.9288	7a		ply				ply 								; restore Y and exit
.9289	60		rts				rts
.928a					CalculateSign:
.928a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.928d	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9290	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9293	0a		asl a				asl 	a 							; shift bit 7 into carry
.9294	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.9297	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.83b8					CompareStrings:
.83b8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.83bb	3d 01 06	and $0601,x			and 	NSStatus+1,x
.83be	29 10		and #$10			and 	#NSBIsString
.83c0	f0 2c		beq $83ee			beq 	_CSTypeError
.83c2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.83c5	85 36		sta $36				sta 	zTemp0
.83c7	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83ca	85 37		sta $37				sta 	zTemp0+1
.83cc	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.83cf	85 38		sta $38				sta 	zTemp1
.83d1	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.83d4	85 39		sta $39				sta 	zTemp1+1
.83d6	5a		phy				phy 								; save Y so we can access strings
.83d7	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.83d9					_CSLoop:
.83d9	c8		iny				iny
.83da	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.83dc	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.83de	d0 06		bne $83e6			bne 	_CSDifferent
.83e0	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.83e2	d0 f5		bne $83d9			bne 	_CSLoop 					; still comparing
.83e4					_CSExit:
.83e4	7a		ply				ply 								; reached end, return zero in A from EOS
.83e5	60		rts				rts
.83e6					_CSDifferent:
.83e6	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.83e8	90 fa		bcc $83e4			bcc		_CSExit
.83ea	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.83ec	80 f6		bra $83e4			bra 	_CSExit
.83ee					_CSTypeError:
.83ee	4c ff 95	jmp $95ff			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.83f1					ShiftLeft:
.83f1	38		sec				sec
.83f2	80 01		bra $83f5			bra 	ShiftMain
.83f4					ShiftRight:
.83f4	18		clc				clc
.83f5					ShiftMain:
.83f5	fa		plx				plx 								; restore X
.83f6	08		php				php 								; save direction
.83f7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.83fa	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.83fd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.83fe	0a		asl a				asl 	a
.83ff	10 05		bpl $8406			bpl 	_NotRef
.8401	48		pha				pha
.8402	20 ac 86	jsr $86ac			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8405	68		pla				pla
.8406					_NotRef:
.8406	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8408	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.840b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.840e	f0 03		beq $8413			beq 	_IntegerCode 				; if clear, then we have two integers
.8410	4c ff 95	jmp $95ff			jmp 	TypeError 					; anything else, type mismatch.
.8413					_IntegerCode:
.8413	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8416	29 e0		and #$e0			and 	#$E0
.8418	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.841b	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.841e	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8421	d0 13		bne $8436			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8423					_SMLoop:
.8423	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8426	30 11		bmi $8439			bmi 	_SMExit 					; exit if done.
.8428	28		plp				plp 								; restore direcition setting
.8429	08		php				php
.842a	90 05		bcc $8431			bcc 	_SMRight
.842c	20 56 8c	jsr $8c56			jsr 	NSMShiftLeft 				; shift left if CS
.842f	80 f2		bra $8423			bra 	_SMLoop
.8431					_SMRight:
.8431	20 64 8c	jsr $8c64			jsr 	NSMShiftRight 				; shift right if CC
.8434	80 ed		bra $8423			bra 	_SMLoop
.8436					_SMExit0:
.8436	20 41 8c	jsr $8c41			jsr 	NSMSetZero 					; return zero.
.8439					_SMExit:
.8439	28		plp				plp 								; throw direction
.843a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.843b					AddTopTwoStack:
.843b	18		clc				clc
.843c	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.843f	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8442	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8445	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8448	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.844b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.844e	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8451	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8454	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8457	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.845a	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.845d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8460	60		rts				rts
.8461					SubTopTwoStack:
.8461	38		sec				sec
.8462	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8465	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8468	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.846b	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.846e	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8471	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8474	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8477	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.847a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.847d	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8480	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8483	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8486	60		rts				rts
.8487					AddInteger:
.8487	fa		plx				plx
.8488	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.848b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.848e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.848f	0a		asl a				asl 	a
.8490	10 05		bpl $8497			bpl 	_NotRef
.8492	48		pha				pha
.8493	20 ac 86	jsr $86ac			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8496	68		pla				pla
.8497					_NotRef:
.8497	0a		asl a				asl 	a 							; put MSB of type into A:7
.8498	30 0b		bmi $84a5			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.849a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.849d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84a0	f0 06		beq $84a8			beq 	_IntegerCode 				; if clear, then we have two integers
.84a2	4c f3 92	jmp $92f3			jmp 	FloatingPointAdd 							; otherwise at least one float.
.84a5					_StringData:
.84a5	4c 5b 83	jmp $835b			jmp 	StringConcat							; at least one string - don't know both are strings.
.84a8					_IntegerCode:
.84a8					AddCode:
.84a8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.84ab	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.84ae	10 8b		bpl $843b			bpl 	AddTopTwoStack
.84b0	20 61 84	jsr $8461			jsr 	SubTopTwoStack 				; do a physical subtraction
.84b3	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.84b6	10 09		bpl $84c1			bpl 	_AddExit
.84b8	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.84bb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84be	20 f6 8b	jsr $8bf6			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.84c1					_AddExit:
.84c1	60		rts				rts
.84c2					SubInteger:
.84c2	fa		plx				plx
.84c3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.84c6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84c9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84ca	0a		asl a				asl 	a
.84cb	10 05		bpl $84d2			bpl 	_NotRef
.84cd	48		pha				pha
.84ce	20 ac 86	jsr $86ac			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84d1	68		pla				pla
.84d2					_NotRef:
.84d2	0a		asl a				asl 	a 							; put MSB of type into A:7
.84d3	30 0b		bmi $84e0			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.84d5	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84d8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84db	f0 06		beq $84e3			beq 	_IntegerCode 				; if clear, then we have two integers
.84dd	4c f8 92	jmp $92f8			jmp 	FloatingPointSub 							; otherwise at least one float.
.84e0					_StringData:
.84e0	4c 09 96	jmp $9609			jmp 	NotDoneError							; at least one string - don't know both are strings.
.84e3					_IntegerCode:
.84e3	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.84e6	49 80		eor #$80			eor 	#$80
.84e8	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.84eb	80 bb		bra $84a8			bra 	AddCode 					; and do the same code as add.
.84ed					AndInteger:
.84ed	fa		plx				plx
.84ee	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.84f1	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84f4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84f5	0a		asl a				asl 	a
.84f6	10 05		bpl $84fd			bpl 	_NotRef
.84f8	48		pha				pha
.84f9	20 ac 86	jsr $86ac			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84fc	68		pla				pla
.84fd					_NotRef:
.84fd	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.84ff	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8502	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8505	f0 03		beq $850a			beq 	_IntegerCode 				; if clear, then we have two integers
.8507	4c ff 95	jmp $95ff			jmp 	TypeError 					; anything else, type mismatch.
.850a					_IntegerCode:
.850a	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.850d	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8510	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8513	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8516	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8519	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.851c	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.851f	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8522	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8525	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8528	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.852b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.852e	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8531	60		rts				rts
.8532					OraInteger:
.8532	fa		plx				plx
.8533	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8536	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8539	0a		asl a				asl 	a 							; shift reference bit into sign bit
.853a	0a		asl a				asl 	a
.853b	10 05		bpl $8542			bpl 	_NotRef
.853d	48		pha				pha
.853e	20 ac 86	jsr $86ac			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8541	68		pla				pla
.8542					_NotRef:
.8542	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8544	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8547	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.854a	f0 03		beq $854f			beq 	_IntegerCode 				; if clear, then we have two integers
.854c	4c ff 95	jmp $95ff			jmp 	TypeError 					; anything else, type mismatch.
.854f					_IntegerCode:
.854f	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8552	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8555	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8558	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.855b	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.855e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8561	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8564	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8567	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.856a	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.856d	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8570	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8573	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8576	60		rts				rts
.8577					EorInteger:
.8577	fa		plx				plx
.8578	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.857b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.857e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.857f	0a		asl a				asl 	a
.8580	10 05		bpl $8587			bpl 	_NotRef
.8582	48		pha				pha
.8583	20 ac 86	jsr $86ac			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8586	68		pla				pla
.8587					_NotRef:
.8587	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8589	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.858c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.858f	f0 03		beq $8594			beq 	_IntegerCode 				; if clear, then we have two integers
.8591	4c ff 95	jmp $95ff			jmp 	TypeError 					; anything else, type mismatch.
.8594					_IntegerCode:
.8594	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8597	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.859a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.859d	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.85a0	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.85a3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.85a6	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.85a9	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.85ac	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.85af	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.85b2	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.85b5	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.85b8	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.85bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9298					ConvertInt16:
.9298	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.929b	8e 10 06	stx $0610			stx 	NSMantissa1
.929e	9c 18 06	stz $0618			stz 	NSMantissa2
.92a1	9c 20 06	stz $0620			stz 	NSMantissa3
.92a4	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.92a7	a2 00		ldx #$00			ldx 	#0 							; stack level
.92a9	a9 0a		lda #$0a			lda 	#10 						; base
.92ab	80 00		bra $92ad			bra 	ConvertInt32
.92ad					ConvertInt32:
.92ad	5a		phy				phy
.92ae	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.92b0	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.92b3	10 08		bpl $92bd			bpl 	_CI32NotNeg
.92b5	48		pha				pha
.92b6	a9 2d		lda #$2d			lda 	#'-'
.92b8	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.92bb	c8		iny				iny
.92bc	68		pla				pla
.92bd					_CI32NotNeg:
.92bd	20 cb 92	jsr $92cb			jsr 	_CI32DivideConvert 			; recursive conversion
.92c0	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.92c2	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.92c5	7a		ply				ply
.92c6	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.92c8	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.92ca	60		rts				rts
.92cb					_CI32DivideConvert:
.92cb	e8		inx				inx 								; write to next slot up
.92cc	20 43 8c	jsr $8c43			jsr 	NSMSetByte
.92cf	ca		dex				dex
.92d0	20 cd 91	jsr $91cd			jsr 	Int32Divide 				; divide
.92d3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.92d6	48		pha				pha
.92d7	20 7d 91	jsr $917d			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.92da	20 71 8c	jsr $8c71			jsr 	NSMIsZero 					; is it zero ?
.92dd	f0 06		beq $92e5			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.92df	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.92e2	20 cb 92	jsr $92cb			jsr 	_CI32DivideConvert 			; and recusrively call.
.92e5					_CI32NoRecurse:
.92e5	68		pla				pla 								; remainder
.92e6	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.92e8	90 02		bcc $92ec			bcc 	_CI32NotHex
.92ea	69 26		adc #$26			adc 	#6+32
.92ec					_CI32NotHex:
.92ec	69 30		adc #$30			adc 	#48
.92ee	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.92f1	c8		iny				iny
.92f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.85bc					PrecedenceLevel:
>85bc	04					.byte	 4	; $00 <<
>85bd	02					.byte	 2	; $01 <=
>85be	02					.byte	 2	; $02 <>
>85bf	00					.byte	 0	; $03 !!3
>85c0	00					.byte	 0	; $04 ><
>85c1	02					.byte	 2	; $05 >=
>85c2	04					.byte	 4	; $06 >>
>85c3	00					.byte	 0	; $07 !!7
>85c4	00					.byte	 0	; $08 !!8
>85c5	00					.byte	 0	; $09 !!9
>85c6	00					.byte	 0	; $0a !!10
>85c7	00					.byte	 0	; $0b !!11
>85c8	00					.byte	 0	; $0c !!12
>85c9	00					.byte	 0	; $0d !!13
>85ca	00					.byte	 0	; $0e !!14
>85cb	00					.byte	 0	; $0f !!15
>85cc	00					.byte	 0	; $10 @
>85cd	00					.byte	 0	; $11 !!17
>85ce	00					.byte	 0	; $12 !!18
>85cf	00					.byte	 0	; $13 [
>85d0	04					.byte	 4	; $14 \
>85d1	00					.byte	 0	; $15 ]
>85d2	01					.byte	 1	; $16 ^
>85d3	00					.byte	 0	; $17 _
>85d4	00					.byte	 0	; $18 `
>85d5	00					.byte	 0	; $19 !!25
>85d6	00					.byte	 0	; $1a !!26
>85d7	00					.byte	 0	; $1b {
>85d8	01					.byte	 1	; $1c |
>85d9	00					.byte	 0	; $1d }
>85da	00					.byte	 0	; $1e ~
>85db	00					.byte	 0	; $1f [7m<7F>[m
>85dc	00					.byte	 0	; $20
>85dd	05					.byte	 5	; $21 !
>85de	00					.byte	 0	; $22 "
>85df	00					.byte	 0	; $23 #
>85e0	05					.byte	 5	; $24 $
>85e1	04					.byte	 4	; $25 %
>85e2	01					.byte	 1	; $26 &
>85e3	00					.byte	 0	; $27 '
>85e4	00					.byte	 0	; $28 (
>85e5	00					.byte	 0	; $29 )
>85e6	04					.byte	 4	; $2a *
>85e7	03					.byte	 3	; $2b +
>85e8	00					.byte	 0	; $2c ,
>85e9	03					.byte	 3	; $2d -
>85ea	00					.byte	 0	; $2e .
>85eb	04					.byte	 4	; $2f /
>85ec	00					.byte	 0	; $30 0
>85ed	00					.byte	 0	; $31 1
>85ee	00					.byte	 0	; $32 2
>85ef	00					.byte	 0	; $33 3
>85f0	00					.byte	 0	; $34 4
>85f1	00					.byte	 0	; $35 5
>85f2	00					.byte	 0	; $36 6
>85f3	00					.byte	 0	; $37 7
>85f4	00					.byte	 0	; $38 8
>85f5	00					.byte	 0	; $39 9
>85f6	00					.byte	 0	; $3a :
>85f7	00					.byte	 0	; $3b ;
>85f8	02					.byte	 2	; $3c <
>85f9	02					.byte	 2	; $3d =
>85fa	02					.byte	 2	; $3e >
>85fb	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.85fc					EvaluateExpressionAt0:
.85fc	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.85fe					EvaluateExpression:
.85fe	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8600					EvaluateExpressionAtPrecedence:
.8600	48		pha				pha 								; save precedence level
.8601	20 6d 88	jsr $886d			jsr 	EvaluateTerm 				; evaluate term into level X.
.8604	68		pla				pla 								; restore precedence level.
.8605					_EXPRLoop:
.8605	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8607	b1 30		lda ($30),y			lda 	(codePtr),y
.8609	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.860b	b0 25		bcs $8632			bcs 	_EXPRExit
.860d	da		phx				phx 								; read the operator precedence
.860e	aa		tax				tax
.860f	bd bc 85	lda $85bc,x			lda 	PrecedenceLevel,x
.8612	fa		plx				plx
.8613	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8615	f0 1b		beq $8632			beq 	_EXPRExit
.8617	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8619	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.861b	c5 37		cmp $37				cmp 	zTemp0+1
.861d	b0 13		bcs $8632			bcs		_EXPRExit 					; if current >= operator exit
.861f	48		pha				pha 								; save current precedence.
.8620	b1 30		lda ($30),y			lda 	(codePtr),y
.8622	c8		iny				iny
.8623	48		pha				pha
.8624	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8626	e8		inx				inx 								; work out the right hand side.
.8627	20 00 86	jsr $8600			jsr 	EvaluateExpressionAtPrecedence
.862a	ca		dex				dex
.862b	68		pla				pla 								; get operator, call the code.
.862c	20 35 86	jsr $8635			jsr 	_EXPRCaller
.862f	68		pla				pla 								; restore precedence level
.8630	80 d3		bra $8605			bra 	_EXPRLoop 					; and go round.
.8632					_EXPRExit:
.8632	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8634	60		rts				rts
.8635					_EXPRCaller:
.8635	da		phx				phx 								; save on stack, first thing is to restore it
.8636	0a		asl a				asl 	a 							; double so can use vectors into X
.8637	aa		tax				tax
.8638	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.92f3					FloatingPointAdd:
.92f3	20 94 94	jsr $9494			jsr 	FloatPrepare 				; prepare for floats
.92f6	80 0b		bra $9303			bra 	FloatAdd
.92f8					FloatingPointSub:
.92f8	20 94 94	jsr $9494			jsr 	FloatPrepare 				; prepare for floats
.92fb					FloatSubtract:
.92fb	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.92fe	49 80		eor #$80			eor 	#$80
.9300	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9303					FloatAdd:
.9303	48		pha				pha
.9304	5a		phy				phy
.9305	20 a5 94	jsr $94a5			jsr 	NSNormalise 				; normalise S[X]
.9308	f0 54		beq $935e			beq 	_FAReturn1
.930a	e8		inx				inx 								; normalise S[X+1]
.930b	20 a5 94	jsr $94a5			jsr 	NSNormalise
.930e	ca		dex				dex
.930f	c9 00		cmp #$00			cmp 	#0
.9311	f0 6f		beq $9382			beq 	_FAExit 					; if so, just return A
.9313	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9316	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.9319	f0 1b		beq $9336			beq 	_FAExponentsEqual
.931b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.931e	a8		tay				tay
.931f	38		sec				sec 								; do a signed comparison of the exponents.
.9320	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9323	50 02		bvc $9327			bvc 	_FANoSignedChange
.9325	49 80		eor #$80			eor 	#$80
.9327					_FANoSignedChange:
.9327	29 80		and #$80			and 	#$80
.9329	10 03		bpl $932e			bpl 	_FAHaveMax
.932b	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.932e					_FAHaveMax:
.932e	20 85 93	jsr $9385			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9331	e8		inx				inx
.9332	20 85 93	jsr $9385			jsr 	_FAShiftToExponent
.9335	ca		dex				dex
.9336					_FAExponentsEqual:
.9336	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9339	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.933c	30 10		bmi $934e			bmi 	_FADifferentSigns
.933e	20 3b 84	jsr $843b			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9341	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9344	10 3c		bpl $9382			bpl 	_FAExit 					; if no, we are done.
.9346	20 64 8c	jsr $8c64			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9349	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.934c	80 34		bra $9382			bra 	_FAExit
.934e					_FADifferentSigns:
.934e	20 61 84	jsr $8461			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9351	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.9354	10 2c		bpl $9382			bpl 	_FAExit 					; if no, we are done.
.9356	20 ed 8b	jsr $8bed			jsr 	NSMNegate 					; netate result
.9359	20 f6 8b	jsr $8bf6			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.935c	80 24		bra $9382			bra 	_FAExit
.935e					_FAReturn1:
.935e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9361	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9364	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9367	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.936a	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.936d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9370	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.9373	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9376	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9379	9d 28 06	sta $0628,x			sta 	NSExponent,x
.937c	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.937f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9382					_FAExit:
.9382	7a		ply				ply
.9383	68		pla				pla
.9384	60		rts				rts
.9385					_FAShiftToExponent:
.9385					_FAShiftToExponent2:
.9385	98		tya				tya 								; compare Y to exponent
.9386	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9389	f0 08		beq $9393			beq 	_FASEExit 					; exit if so.
.938b	20 64 8c	jsr $8c64			jsr 	NSMShiftRight	 			; shift the mantissa right
.938e	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9391	80 f2		bra $9385			bra 	_FAShiftToExponent2
.9393					_FASEExit:
.9393	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9394					CompareFloat:
.9394	20 fb 92	jsr $92fb			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9397	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.939a	29 f8		and #$f8			and 	#$F8
.939c	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.939f	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.93a2	f0 09		beq $93ad			beq 	_FCExit 					; zero, so approximately identical
.93a4	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.93a6	3c 00 06	bit $0600,x			bit 	NSStatus,x
.93a9	10 02		bpl $93ad			bpl 	_FCExit
.93ab					_FCNegative:
.93ab	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.93ad					_FCExit:
.93ad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.93ae					FDivideCommand:
.93ae	fa		plx				plx	 								; restore stack position
.93af	20 94 94	jsr $9494			jsr 	FloatPrepare 				; prepare for floats
.93b2					FloatDivide:
.93b2	48		pha				pha
.93b3	e8		inx				inx
.93b4	20 a5 94	jsr $94a5			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.93b7	ca		dex				dex
.93b8	c9 00		cmp #$00			cmp 	#0
.93ba	f0 20		beq $93dc			beq 	_FDZero
.93bc	20 a5 94	jsr $94a5			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.93bf	f0 19		beq $93da			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.93c1	20 ef 91	jsr $91ef			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.93c4	20 7d 91	jsr $917d			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.93c7	20 a5 94	jsr $94a5			jsr		NSNormalise 				; renormalise
.93ca	20 8a 92	jsr $928a			jsr 	CalculateSign 				; calculate result sign
.93cd	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.93d0	38		sec				sec
.93d1	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.93d4	38		sec				sec
.93d5	e9 1e		sbc #$1e			sbc 	#30
.93d7	9d 28 06	sta $0628,x			sta 	NSExponent,x
.93da					_FDExit:
.93da	68		pla				pla
.93db	60		rts				rts
.93dc					_FDZero:
.93dc	a9 03		lda #$03		lda	#3
.93de	4c 4e 82	jmp $824e		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.93e1					FloatFractionalPart:
.93e1	5a		phy				phy
.93e2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.93e5	29 7f		and #$7f			and 	#$7F
.93e7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.93ea	20 a5 94	jsr $94a5			jsr 	NSNormalise
.93ed	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.93f0	38		sec				sec
.93f1	e9 e0		sbc #$e0			sbc 	#$E0
.93f3	90 31		bcc $9426			bcc 	_FFPExit 					; already fractional
.93f5	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.93f7	b0 2a		bcs $9423			bcs 	_FFPZero
.93f9	a8		tay				tay 								; put count to do in Y
.93fa	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.93fd	20 28 94	jsr $9428			jsr 	_FFPPartial
.9400	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9403	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9406	20 28 94	jsr $9428			jsr 	_FFPPartial
.9409	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.940c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.940f	20 28 94	jsr $9428			jsr 	_FFPPartial
.9412	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9415	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9418	20 28 94	jsr $9428			jsr 	_FFPPartial
.941b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.941e	20 71 8c	jsr $8c71			jsr 	NSMIsZero 					; zeroed check.
.9421	d0 03		bne $9426			bne 	_FFPExit
.9423					_FFPZero:
.9423	20 41 8c	jsr $8c41			jsr 	NSMSetZero
.9426					_FFPExit:
.9426	7a		ply				ply
.9427	60		rts				rts
.9428					_FFPPartial:
.9428	c0 00		cpy #$00			cpy 	#0 							; no more to do
.942a	f0 17		beq $9443			beq 	_FFFPPExit
.942c	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.942e	b0 0c		bcs $943c			bcs 	_FFFPPWholeByte
.9430	5a		phy				phy
.9431					_FFFPPLeft:
.9431	0a		asl a				asl 	a
.9432	88		dey				dey
.9433	d0 fc		bne $9431			bne 	_FFFPPLeft
.9435	7a		ply				ply
.9436					_FFFPPRight:
.9436	4a		lsr a				lsr 	a
.9437	88		dey				dey
.9438	d0 fc		bne $9436			bne 	_FFFPPRight
.943a	80 07		bra $9443			bra 	_FFFPPExit
.943c					_FFFPPWholeByte:
.943c	98		tya				tya 								; subtract 8 from count
.943d	38		sec				sec
.943e	e9 08		sbc #$08			sbc 	#8
.9440	a8		tay				tay
.9441	a9 00		lda #$00			lda 	#0 							; and clear all
.9443					_FFFPPExit:
.9443	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9444					FloatIntegerPart:
.9444	48		pha				pha
.9445	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9448	f0 1f		beq $9469			beq 	_FIPExit 					; if so do nothing
.944a	20 71 8c	jsr $8c71			jsr 	NSMIsZero 					; is it zero ?
.944d	f0 17		beq $9466			beq 	_FIPZero 					; if so return zero.
.944f	20 a5 94	jsr $94a5			jsr 	NSNormalise 				; normalise
.9452	f0 12		beq $9466			beq 	_FIPZero 					; normalised to zero, exit zero
.9454					_FIPShift:
.9454	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9457	10 08		bpl $9461			bpl 	_FIPCheckZero
.9459	20 64 8c	jsr $8c64			jsr 	NSMShiftRight 				; shift mantissa right
.945c	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.945f	80 f3		bra $9454			bra 	_FIPShift
.9461					_FIPCheckZero:
.9461	20 71 8c	jsr $8c71			jsr 	NSMIsZero 					; avoid -0 problem
.9464	d0 03		bne $9469			bne 	_FIPExit 					; set to zero if mantissa zero.
.9466					_FIPZero:
.9466	20 41 8c	jsr $8c41			jsr 	NSMSetZero
.9469					_FIPExit:
.9469	68		pla				pla
.946a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.946b					FloatingPointMultiply:
.946b	20 94 94	jsr $9494			jsr 	FloatPrepare 				; prepare for floats
.946e					FloatMultiply:
.946e	48		pha				pha
.946f	20 a5 94	jsr $94a5			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9472	f0 1b		beq $948f			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9474	e8		inx				inx
.9475	20 a5 94	jsr $94a5			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9478	ca		dex				dex
.9479	c9 00		cmp #$00			cmp 	#0
.947b	f0 0f		beq $948c			beq 	_FDSetZero
.947d	20 45 92	jsr $9245			jsr 	MultiplyShort 				; calculate the result.
.9480	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9483	18		clc				clc
.9484	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.9487	9d 28 06	sta $0628,x			sta 	NSExponent,x
.948a	80 03		bra $948f			bra 	_FDExit
.948c					_FDSetZero:
.948c	20 41 8c	jsr $8c41			jsr 	NSMSetZero 					; return 0
.948f					_FDExit:
.948f	20 a5 94	jsr $94a5			jsr 	NSNormalise 				; normalise the result
.9492	68		pla				pla
.9493	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9494					FloatPrepare:
.9494	20 ac 86	jsr $86ac			jsr 	DereferenceTopTwo 			; dereference the top two values
.9497	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.949a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.949d	29 10		and #$10			and 	#NSBIsString
.949f	d0 01		bne $94a2			bne 	_FDType
.94a1	60		rts				rts
.94a2					_FDType:
.94a2	4c ff 95	jmp $95ff			jmp 	TypeError
.94a5					NSNormalise:
.94a5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.94a8	29 80		and #$80			and 	#$80
.94aa	09 08		ora #$08			ora 	#NSTFloat
.94ac	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94af	20 71 8c	jsr $8c71			jsr 	NSMIsZero 					; if zero exit
.94b2	d0 09		bne $94bd			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.94b4	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.94b7	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.94ba	a9 00		lda #$00			lda 	#0 							; set Z flag
.94bc	60		rts				rts
.94bd					_NSNormaliseOptimise:
.94bd	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.94c0	d0 22		bne $94e4			bne 	_NSNormaliseLoop
.94c2	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.94c5	30 1d		bmi $94e4			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.94c7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.94ca	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.94cd	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.94d0	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.94d3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.94d6	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.94d9	bd 28 06	lda $0628,x			lda 	NSExponent,x
.94dc	38		sec				sec
.94dd	e9 08		sbc #$08			sbc 	#8
.94df	9d 28 06	sta $0628,x			sta 	NSExponent,x
.94e2	80 d9		bra $94bd			bra 	_NSNormaliseOptimise
.94e4					_NSNormaliseLoop:
.94e4	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.94e7	70 08		bvs $94f1			bvs 	_NSNExit 					; exit if so with Z flag clear
.94e9	20 56 8c	jsr $8c56			jsr 	NSMShiftLeft 				; shift mantissa left
.94ec	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.94ef	80 f3		bra $94e4			bra 	_NSNormaliseLoop
.94f1					_NSNExit:
.94f1	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.94f3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.863b					AssignNumber:
.863b	5a		phy				phy
.863c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.863f	85 36		sta $36				sta 	zTemp0
.8641	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8644	85 37		sta $37				sta 	zTemp0+1
.8646	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8649	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.864b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.864e	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.8650	c9 08		cmp #$08			cmp 	#NSTFloat
.8652	f0 2a		beq $867e			beq 	_ANFloat
.8654	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.8657	f0 05		beq $865e			beq		_ANNotFloat
.8659	e8		inx				inx
.865a	20 44 94	jsr $9444			jsr 	FloatIntegerPart 			; make it an integer
.865d	ca		dex				dex
.865e					_ANNotFloat:
.865e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.8661	29 03		and #$03			and 	#3
.8663	d0 05		bne $866a			bne 	_ANByteWord
.8665	20 8a 86	jsr $868a			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8668	80 1e		bra $8688			bra 	_ANExit
.866a					_ANByteWord:
.866a	48		pha				pha 								; save count
.866b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.866e	92 36		sta ($36)			sta 	(zTemp0)
.8670	68		pla				pla
.8671	c9 01		cmp #$01			cmp	 	#1
.8673	f0 13		beq $8688			beq 	_ANExit
.8675	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.8678	a0 01		ldy #$01			ldy 	#1
.867a	91 36		sta ($36),y			sta 	(zTemp0),y
.867c	80 0a		bra $8688			bra 	_ANExit
.867e					_ANFloat:
.867e	20 8a 86	jsr $868a			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.8681	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.8684	a0 04		ldy #$04			ldy 	#4
.8686	91 36		sta ($36),y			sta 	(zTemp0),y
.8688					_ANExit:
.8688	7a		ply				ply
.8689	60		rts				rts
.868a					_ANCopy4PackSign:
.868a	a0 03		ldy #$03			ldy 	#3
.868c	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.868f	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.8691	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8694	91 36		sta ($36),y			sta 	(zTemp0),y
.8696	88		dey				dey
.8697	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.869a	91 36		sta ($36),y			sta 	(zTemp0),y
.869c	88		dey				dey
.869d	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.86a0	91 36		sta ($36),y			sta 	(zTemp0),y
.86a2	88		dey				dey
.86a3	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.86a6	91 36		sta ($36),y			sta 	(zTemp0),y
.86a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.86a9					AssignString:
>86a9	db						.byte 	$DB 						; causes a break in the emulator
.86aa	80 fd		bra $86a9			bra 	AssignString

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.86ac					DereferenceTopTwo:
.86ac	e8		inx				inx
.86ad	20 b1 86	jsr $86b1			jsr 	Dereference 				; deref x+1
.86b0	ca		dex				dex  								; falls through to deref x
.86b1					Dereference:
.86b1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.86b4	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.86b6	f0 57		beq $870f			beq 	_DRFExit 					; not a reference
.86b8	5a		phy				phy
.86b9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.86bc	85 36		sta $36				sta 	zTemp0
.86be	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.86c1	85 37		sta $37				sta 	zTemp0+1
.86c3	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.86c6	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.86c8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86cb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.86ce	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.86d0	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.86d2	f0 0f		beq $86e3			beq 	_DRFDereferenceTwo
.86d4	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.86d6	f0 39		beq $8711			beq 	_DRFFull
.86d8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.86db	29 03		and #$03			and 	#3
.86dd	f0 32		beq $8711			beq 	_DRFFull 					; the whole word
.86df	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.86e1	f0 07		beq $86ea			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.86e3					_DRFDereferenceTwo:
.86e3	a0 01		ldy #$01			ldy 	#1
.86e5	b1 36		lda ($36),y			lda 	(zTemp0),y
.86e7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.86ea					_DRFClear23:
.86ea	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.86ed	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.86f0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.86f3	29 18		and #$18			and 	#NSBTypeMask
.86f5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86f8	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.86fa	d0 12		bne $870e			bne 	_DRFNotString
.86fc	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.86ff	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8702	d0 0a		bne $870e			bne 	_DRFNotString
.8704	a9 10		lda #$10			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8706	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8709	a9 87		lda #$87			lda 	#_DRFNullString >> 8
.870b	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.870e					_DRFNotString
.870e	7a		ply				ply 								; restore Y and exit
.870f					_DRFExit:
.870f	60		rts				rts
.8710					_DRFNullString:
>8710	00						.byte 	0
.8711					_DRFFull:
.8711	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8713	b1 36		lda ($36),y			lda 	(zTemp0),y
.8715	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8718	c8		iny				iny
.8719	b1 36		lda ($36),y			lda 	(zTemp0),y
.871b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.871e	c8		iny				iny
.871f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8721	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8724	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8727	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.872a	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.872c	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.872f	f0 06		beq $8737			beq 	_DRFNoExponent
.8731	c8		iny				iny 								; if not, read the exponent as well.
.8732	b1 36		lda ($36),y			lda 	(zTemp0),y
.8734	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8737					_DRFNoExponent:
.8737	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.873a	10 0d		bpl $8749			bpl 	_DRFExit2 					; if not, then exit.
.873c	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.873e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8741	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8744	09 80		ora #$80			ora 	#NSBIsNegative
.8746	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8749					_DRFExit2:
.8749	7a		ply				ply
.874a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.874b					EncodeNumberStart:
.874b	38		sec				sec
.874c	80 01		bra $874f			bra 	EncodeNumberContinue+1
.874e					EncodeNumberContinue:
.874e	18		clc				clc
.874f					EncodeNumber:
.874f	08		php				php 								; save reset.
.8750	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8752	f0 12		beq $8766			beq 	_ENIsOkay
.8754	c9 30		cmp #$30			cmp 	#"0"
.8756	90 04		bcc $875c			bcc 	_ENBadNumber
.8758	c9 3a		cmp #$3a			cmp 	#"9"+1
.875a	90 0a		bcc $8766			bcc 	_ENIsOkay
.875c					_ENBadNumber:
.875c	28		plp				plp 								; throw saved reset
.875d	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8760	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8762	f0 7e		beq $87e2			beq 	_ENConstructFinal
.8764					_ENFail:
.8764	18		clc				clc 								; not allowed
.8765	60		rts				rts
.8766					_ENIsOkay:
.8766	28		plp				plp 								; are we restarting
.8767	90 15		bcc $877e			bcc 	_ENNoRestart
.8769					_ENStartEncode:
.8769	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.876b	f0 0c		beq $8779			beq 	_ENFirstDP
.876d	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.876f	20 43 8c	jsr $8c43			jsr 	NSMSetByte
.8772	a9 01		lda #$01			lda 	#ESTA_Low
.8774					_ENExitChange:
.8774	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8777	38		sec				sec
.8778	60		rts				rts
.8779					_ENFirstDP:
.8779	20 41 8c	jsr $8c41			jsr 	NSMSetZero 					; clear integer part
.877c	80 3f		bra $87bd			bra 	_ESTASwitchFloat			; go straight to float and exi
.877e					_ENNoRestart:
.877e	48		pha				pha 								; save on stack.
.877f	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8782	c9 01		cmp #$01			cmp 	#ESTA_Low
.8784	f0 09		beq $878f			beq  	_ESTALowState
.8786	c9 02		cmp #$02			cmp 	#ESTA_High
.8788	f0 29		beq $87b3			beq 	_ESTAHighState
.878a	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.878c	f0 3b		beq $87c9			beq 	_ESTADecimalState
>878e	db						.byte 	$DB 						; causes a break in the emulator
.878f					_ESTALowState:
.878f	68		pla				pla 								; get value back
.8790	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8792	f0 29		beq $87bd			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8794	29 0f		and #$0f			and 	#15 						; make digit
.8796	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8799	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.879c	0a		asl a				asl 	a
.879d	0a		asl a				asl 	a
.879e	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.87a1	0a		asl a				asl 	a
.87a2	6d 06 07	adc $0706			adc 	DigitTemp
.87a5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87a8	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.87aa	90 05		bcc $87b1			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.87ac	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.87ae	8d 05 07	sta $0705			sta 	EncodeState
.87b1					_ESTANoSwitch:
.87b1	38		sec				sec
.87b2	60		rts				rts
.87b3					_ESTAHighState:
.87b3	68		pla				pla 								; get value back
.87b4	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.87b6	f0 05		beq $87bd			beq 	_ESTASwitchFloat
.87b8	20 1c 88	jsr $881c			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.87bb	38		sec				sec
.87bc	60		rts				rts
.87bd					_ESTASwitchFloat:
.87bd	9c 07 07	stz $0707			stz 	DecimalCount
.87c0	e8		inx				inx 								; zero the decimal additive.
.87c1	20 41 8c	jsr $8c41			jsr 	NSMSetZero
.87c4	ca		dex				dex
.87c5	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.87c7	80 ab		bra $8774			bra 	_ENExitChange
.87c9					_ESTADecimalState:
.87c9	68		pla				pla 								; digit.
.87ca	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.87cc	f0 96		beq $8764			beq 	_ENFail
.87ce	e8		inx				inx 								; put digit into fractional part of X+1
.87cf	20 1c 88	jsr $881c			jsr 	ESTAShiftDigitIntoMantissa
.87d2	ca		dex				dex
.87d3	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.87d6	ad 07 07	lda $0707			lda 	DecimalCount
.87d9	c9 0b		cmp #$0b			cmp 	#11
.87db	f0 02		beq $87df			beq 	_ESTADSFail
.87dd	38		sec				sec
.87de	60		rts				rts
.87df					_ESTADSFail:
.87df	4c fa 95	jmp $95fa			jmp 	RangeError
.87e2					_ENConstructFinal:
.87e2	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.87e5	f0 33		beq $881a			beq 	_ENCFExit 					; no decimals
.87e7	5a		phy				phy
.87e8	0a		asl a				asl 	a 							; x 4 and CLC
.87e9	0a		asl a				asl 	a
.87ea	6d 07 07	adc $0707			adc 	DecimalCount
.87ed	a8		tay				tay
.87ee	b9 b9 95	lda $95b9,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.87f1	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.87f4	b9 ba 95	lda $95ba,y			lda 	DecimalScalarTable-5+1,y
.87f7	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.87fa	b9 bb 95	lda $95bb,y			lda 	DecimalScalarTable-5+2,y
.87fd	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8800	b9 bc 95	lda $95bc,y			lda 	DecimalScalarTable-5+3,y
.8803	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8806	b9 bd 95	lda $95bd,y			lda 	DecimalScalarTable-5+4,y
.8809	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.880c	a9 08		lda #$08			lda 	#NSTFloat
.880e	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8811	7a		ply				ply
.8812	e8		inx				inx 								; multiply decimal const by decimal scalar
.8813	20 6e 94	jsr $946e			jsr 	FloatMultiply
.8816	ca		dex				dex
.8817	20 03 93	jsr $9303			jsr 	FloatAdd 					; add to integer part.
.881a					_ENCFExit:
.881a	18		clc				clc 								; reject the digit.
.881b	60		rts				rts
.881c					ESTAShiftDigitIntoMantissa:
.881c	29 0f		and #$0f			and 	#15 						; save digit
.881e	48		pha				pha
.881f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8822	48		pha				pha
.8823	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8826	48		pha				pha
.8827	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.882a	48		pha				pha
.882b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.882e	48		pha				pha
.882f	20 56 8c	jsr $8c56			jsr 	NSMShiftLeft 				; x 2
.8832	20 56 8c	jsr $8c56			jsr 	NSMShiftLeft 				; x 4
.8835	18		clc				clc 								; pop mantissa and add
.8836	68		pla				pla
.8837	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.883a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.883d	68		pla				pla
.883e	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8841	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8844	68		pla				pla
.8845	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8848	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.884b	68		pla				pla
.884c	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.884f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8852	20 56 8c	jsr $8c56			jsr 	NSMShiftLeft 				; x 10
.8855	68		pla				pla 								; add digit
.8856	18		clc				clc
.8857	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.885a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.885d	90 0d		bcc $886c			bcc 	_ESTASDExit
.885f	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8862	d0 08		bne $886c			bne 	_ESTASDExit
.8864	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8867	d0 03		bne $886c			bne 	_ESTASDExit
.8869	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.886c					_ESTASDExit:
.886c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.886d					EvaluateTerm:
.886d	b1 30		lda ($30),y			lda 	(codePtr),y
.886f	30 18		bmi $8889			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8871	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8873	b0 6f		bcs $88e4			bcs 	_ETVariable
.8875	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8877	90 6e		bcc $88e7			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8879	c9 3a		cmp #$3a			cmp 	#'9'+1
.887b	b0 6a		bcs $88e7			bcs 	_ETPuncUnary
.887d	20 4b 87	jsr $874b			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8880					_ETNumber:
.8880	c8		iny				iny 								; keep encoding until we have the numbers
.8881	b1 30		lda ($30),y			lda 	(codePtr),y
.8883	20 4e 87	jsr $874e			jsr 	EncodeNumberContinue
.8886	b0 f8		bcs $8880			bcs 	_ETNumber 					; go back if accepted.
.8888	60		rts				rts
.8889					_ETCheckUnary:
.8889	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.888b	f0 41		beq $88ce			beq 	_ETString
.888d	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.888f	f0 12		beq $88a3			beq 	_ETHexConstant
.8891	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8893	90 0b		bcc $88a0			bcc 	_ETSyntaxError
.8895	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8897	b0 07		bcs $88a0			bcs 	_ETSyntaxError
.8899	da		phx				phx 								; push X on the stack
.889a	0a		asl a				asl 	a 							; put vector x 2 into X
.889b	aa		tax				tax
.889c	c8		iny				iny 								; consume unary function token
.889d	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.88a0					_ETSyntaxError:
.88a0	4c f5 95	jmp $95f5			jmp 	SyntaxError
.88a3					_ETHexConstant:
.88a3	c8		iny				iny 								; skip #
.88a4	c8		iny				iny 								; skip count
.88a5	20 41 8c	jsr $8c41			jsr 	NSMSetZero 					; clear result
.88a8					_ETHLoop:
.88a8	b1 30		lda ($30),y			lda 	(codePtr),y
.88aa	c8		iny				iny 								; and consume
.88ab	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.88ad	f0 1e		beq $88cd			beq 	_ETHExit
.88af	48		pha				pha 								; save on stack.
.88b0	20 56 8c	jsr $8c56			jsr 	NSMShiftLeft 				; x 2
.88b3	20 56 8c	jsr $8c56			jsr 	NSMShiftLeft 				; x 4
.88b6	20 56 8c	jsr $8c56			jsr 	NSMShiftLeft 				; x 8
.88b9	20 56 8c	jsr $8c56			jsr 	NSMShiftLeft 				; x 16
.88bc	68		pla				pla 								; ASCII
.88bd	c9 41		cmp #$41			cmp 	#'A'
.88bf	90 02		bcc $88c3			bcc 	_ETHNotChar
.88c1	e9 07		sbc #$07			sbc 	#7
.88c3					_ETHNotChar:
.88c3	29 0f		and #$0f			and 	#15 						; digit now
.88c5	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.88c8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.88cb	80 db		bra $88a8			bra 	_ETHLoop 					; go round.
.88cd					_ETHExit:
.88cd	60		rts				rts
.88ce					_ETString:
.88ce	c8		iny				iny 								; look at length
.88cf	b1 30		lda ($30),y			lda 	(codePtr),y
.88d1	48		pha				pha
.88d2	c8		iny				iny 								; first character
.88d3	20 27 91	jsr $9127			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.88d6	68		pla				pla 								; restore count and save
.88d7	85 36		sta $36				sta 	zTemp0
.88d9	98		tya				tya 								; add length to Y to skip it.
.88da	18		clc				clc
.88db	65 36		adc $36				adc 	zTemp0
.88dd	a8		tay				tay
.88de	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.88e0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88e3	60		rts				rts
.88e4					_ETVariable:
.88e4	4c 3e 89	jmp $893e			jmp 	VariableHandler
.88e7					_ETPuncUnary:
.88e7	c8		iny				iny 								; consume the unary character
.88e8	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.88ea	f0 2d		beq $8919			beq 	_ETUnaryNegate
.88ec	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.88ee	f0 39		beq $8929			beq 	_ETDereference
.88f0	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.88f2	f0 43		beq $8937			beq 	_ETParenthesis
.88f4	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.88f6	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.88f8	f0 06		beq $8900			beq 	_ETIndirection
.88fa	e6 36		inc $36				inc 	zTemp0
.88fc	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.88fe	d0 a0		bne $88a0			bne 	_ETSyntaxError
.8900					_ETIndirection:
.8900	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8902	1a		inc a				inc 	a
.8903	48		pha				pha
.8904	20 6d 88	jsr $886d			jsr 	EvaluateTerm				; evaluate the term
.8907	20 b1 86	jsr $86b1			jsr 	Dereference 				; dereference it.
.890a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.890d	d0 07		bne $8916			bne 	_ETTypeMismatch
.890f	68		pla				pla 								; indirection 1-2
.8910	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8912	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8915	60		rts				rts
.8916					_ETTypeMismatch:
.8916	4c ff 95	jmp $95ff			jmp 	TypeError
.8919					_ETUnaryNegate:
.8919	20 6d 88	jsr $886d			jsr 	EvaluateTerm				; evaluate the term
.891c	20 b1 86	jsr $86b1			jsr 	Dereference 				; dereference it.
.891f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8922	29 10		and #$10			and 	#NSTString
.8924	d0 f0		bne $8916			bne 	_ETTypeMismatch
.8926	4c ed 8b	jmp $8bed			jmp 	NSMNegate  					; just toggles the sign bit.
.8929					_ETDereference:
.8929	20 6d 88	jsr $886d			jsr 	EvaluateTerm				; evaluate the term
.892c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.892f	29 20		and #$20			and 	#NSBIsReference
.8931	f0 e3		beq $8916			beq 	_ETTypeMismatch
.8933	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8936	60		rts				rts
.8937					_ETParenthesis:
.8937	20 fe 85	jsr $85fe			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.893a	20 3e 91	jsr $913e			jsr 	CheckRightBracket 			; check for )
.893d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.893e					VariableHandler:
.893e	b1 30		lda ($30),y			lda 	(codePtr),y
.8940	18		clc				clc
.8941	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8943	85 37		sta $37				sta 	zTemp0+1
.8945	c8		iny				iny
.8946	b1 30		lda ($30),y			lda 	(codePtr),y
.8948	85 36		sta $36				sta 	zTemp0
.894a	c8		iny				iny
.894b	18		clc				clc									; copy variable address+3 to mantissa
.894c	69 03		adc #$03			adc 	#3
.894e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8951	a5 37		lda $37				lda 	zTemp0+1
.8953	69 00		adc #$00			adc 	#0
.8955	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8958	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.895b	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.895e	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8961	5a		phy				phy
.8962	a0 02		ldy #$02			ldy 	#2 							; read type
.8964	b1 36		lda ($36),y			lda 	(zTemp0),y
.8966	7a		ply				ply
.8967	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8969	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.896b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.896e	29 04		and #$04			and 	#NSBIsArray
.8970	d0 01		bne $8973			bne 	_VHArray
.8972	60		rts				rts
.8973					_VHArray:
>8973	db						.byte 	$DB 						; causes a break in the emulator
.8974	80 fd		bra $8973			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.94f4					AbsUnary:
.94f4	fa		plx				plx 								; restore stack pos
.94f5	20 95 8b	jsr $8b95			jsr 	EvaluateNumber 				; get a float or int
.94f8	20 3e 91	jsr $913e			jsr 	CheckRightBracket
.94fb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.94fe	29 7f		and #$7f			and 	#$7F
.9500	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9503	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8976					AllocUnary:
.8976	fa		plx				plx 								; restore stack pos
.8977	20 cd 8b	jsr $8bcd			jsr 	Evaluate16BitInteger		; get bytes required.
.897a	20 3e 91	jsr $913e			jsr 	CheckRightBracket
.897d	da		phx				phx 								; save X/Y
.897e	5a		phy				phy
.897f	8a		txa				txa 								; copy X into Y
.8980	a8		tay				tay
.8981	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8984	aa		tax				tax
.8985	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8988	20 95 89	jsr $8995			jsr 	AllocateXABytes 			; allocate memory
.898b	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.898e	8a		txa				txa
.898f	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8992	7a		ply				ply
.8993	fa		plx				plx
.8994	60		rts				rts
.8995					AllocateXABytes:
.8995	5a		phy				phy
.8996	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8999	5a		phy				phy
.899a	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.899d	5a		phy				phy
.899e	18		clc				clc
.899f	6d 0c 07	adc $070c			adc 	lowMemPtr
.89a2	8d 0c 07	sta $070c			sta 	lowMemPtr
.89a5	8a		txa				txa
.89a6	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.89a9	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.89ac	fa		plx				plx
.89ad	68		pla				pla
.89ae	7a		ply				ply
.89af	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9504					AscUnary:
.9504	fa		plx				plx 								; restore stack pos
.9505	20 a0 8b	jsr $8ba0			jsr 	EvaluateString 				; get a string
.9508	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.950a	20 43 8c	jsr $8c43			jsr 	NSMSetByte
.950d	20 3e 91	jsr $913e			jsr 	CheckRightBracket
.9510	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9511					FracUnary:
.9511	fa		plx				plx 								; restore stack pos
.9512	20 95 8b	jsr $8b95			jsr 	EvaluateNumber 				; get a float or int
.9515	20 3e 91	jsr $913e			jsr 	CheckRightBracket
.9518	bd 00 06	lda $0600,x			lda 	NSStatus,x
.951b	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.951d	f0 04		beq $9523			beq 	_IUZero
.951f	20 e1 93	jsr $93e1			jsr 	FloatFractionalPart
.9522	60		rts				rts
.9523					_IUZero:
.9523	20 41 8c	jsr $8c41			jsr 	NSMSetZero
.9526	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9527					IntUnary:
.9527	fa		plx				plx 								; restore stack pos
.9528	20 95 8b	jsr $8b95			jsr 	EvaluateNumber 				; get a float or int
.952b	20 3e 91	jsr $913e			jsr 	CheckRightBracket
.952e	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9531	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9533	f0 03		beq $9538			beq 	_IUExit
.9535	20 44 94	jsr $9444			jsr 	FloatIntegerPart
.9538					_IUExit:
.9538	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9539					LenUnary:
.9539	fa		plx				plx 								; restore stack pos
.953a	20 a0 8b	jsr $8ba0			jsr 	EvaluateString 				; get a string
.953d	5a		phy				phy
.953e	a0 00		ldy #$00			ldy 	#0 							; find length
.9540					_LenFind:
.9540	b1 36		lda ($36),y			lda 	(zTemp0),y
.9542	f0 06		beq $954a			beq 	_LenExit
.9544	c8		iny				iny
.9545	d0 f9		bne $9540			bne 	_LenFind
.9547	4c fa 95	jmp $95fa			jmp 	RangeError 					; string > 255
.954a					_LenExit:
.954a	98		tya				tya
.954b	20 43 8c	jsr $8c43			jsr 	NSMSetByte
.954e	7a		ply				ply
.954f	20 3e 91	jsr $913e			jsr 	CheckRightBracket
.9552	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.89b0					Unary_Not:
.89b0	fa		plx				plx
.89b1	20 b8 8b	jsr $8bb8			jsr 	EvaluateInteger 			; get integer
.89b4	20 3e 91	jsr $913e			jsr 	CheckRightBracket
.89b7	20 71 8c	jsr $8c71			jsr 	NSMIsZero 					; zero mantissa ?
.89ba	f0 04		beq $89c0			beq 	_NotZero
.89bc	20 41 8c	jsr $8c41			jsr 	NSMSetZero
.89bf	60		rts				rts
.89c0					_NotZero:
.89c0	4c b4 82	jmp $82b4			jmp 	ReturnTrue
.89c3					_UNBad:
.89c3	4c 04 96	jmp $9604			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.89c6					Unary_Rnd:
.89c6	20 95 8b	jsr $8b95			jsr 	EvaluateNumber 				; number to use.
.89c9	20 3e 91	jsr $913e			jsr 	CheckRightBracket 			; closing bracket
.89cc	20 f5 89	jsr $89f5			jsr 	Random32Bit 				; generate a number.
.89cf	ad 08 07	lda $0708			lda 	RandomSeed+0
.89d2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.89d5	ad 09 07	lda $0709			lda 	RandomSeed+1
.89d8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.89db	ad 0a 07	lda $070a			lda 	RandomSeed+2
.89de	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.89e1	ad 0b 07	lda $070b			lda 	RandomSeed+3
.89e4	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.89e6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.89e9	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.89eb	8d 28 06	sta $0628			sta 	NSExponent
.89ee	a9 08		lda #$08			lda 	#NSTFloat
.89f0	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>89f3	db						.byte 	$DB 						; causes a break in the emulator
.89f4	60		rts				rts
.89f5					Random32Bit:
.89f5	5a		phy				phy
.89f6	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.89f8	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.89fb	d0 03		bne $8a00			bne 	_Random1
.89fd	a8		tay				tay 								; if so do it 256 times
.89fe	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8a00					_Random1:
.8a00	0a		asl a				asl 	a 							; LSFR RNG
.8a01	2e 09 07	rol $0709			rol 	RandomSeed+1
.8a04	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8a07	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8a0a	90 02		bcc $8a0e			bcc 	_Random2
.8a0c	49 c5		eor #$c5			eor 	#$C5
.8a0e					_Random2:
.8a0e	88		dey				dey
.8a0f	d0 ef		bne $8a00			bne 	_Random1
.8a11	7a		ply				ply
.8a12	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9553					SgnUnary:
.9553	fa		plx				plx 								; restore stack pos
.9554	20 95 8b	jsr $8b95			jsr 	EvaluateNumber 				; get a float or int
.9557	20 3e 91	jsr $913e			jsr 	CheckRightBracket
.955a	20 71 8c	jsr $8c71			jsr 	NSMIsZero 					; if zero
.955d	f0 10		beq $956f			beq 	_SGZero  					; return Int Zero
.955f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9562	48		pha				pha
.9563	a9 01		lda #$01			lda 	#1 							; set to 1
.9565	20 43 8c	jsr $8c43			jsr 	NSMSetByte
.9568	68		pla				pla
.9569	29 80		and #$80			and		#$80 						; copy the sign byte out
.956b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.956e	60		rts				rts
.956f	20 41 8c	jsr $8c41	_SGZero:jsr 	NSMSetZero
.9572	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9573					ValUnary:
.9573	fa		plx				plx 								; restore stack pos
.9574	20 89 95	jsr $9589			jsr 	ValMainCode 				; do the main val() code
.9577	b0 01		bcs $957a			bcs 	_VUError 					; couldn't convert
.9579	60		rts				rts
.957a					_VUError:
.957a	4c ff 95	jmp $95ff			jmp 	TypeError
.957d					IsValUnary:
.957d	fa		plx				plx 								; restore stack pos
.957e	20 89 95	jsr $9589			jsr 	ValMainCode 				; do the main val() code
.9581	b0 03		bcs $9586			bcs 	_VUBad
.9583	4c b4 82	jmp $82b4			jmp 	ReturnTrue
.9586					_VUBad:
.9586	4c c0 82	jmp $82c0			jmp 	ReturnFalse
.9589					ValMainCode:
.9589	20 a0 8b	jsr $8ba0			jsr 	EvaluateString 				; get a string
.958c	20 3e 91	jsr $913e			jsr 	CheckRightBracket 			; check right bracket present
.958f	5a		phy				phy
.9590	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9592	f0 17		beq $95ab			beq 	_VMCFail2
.9594	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9596	48		pha				pha 								; save first character
.9597	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9599	d0 01		bne $959c			bne 	_VMCStart
.959b	c8		iny				iny 								; skip over -
.959c					_VMCStart:
.959c	38		sec				sec 								; initialise first time round.
.959d					_VMCNext:
.959d	c8		iny				iny 								; pre-increment
.959e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.95a0	f0 0c		beq $95ae			beq 	_VMCSuccess 				; successful.
.95a2	20 4f 87	jsr $874f			jsr 	EncodeNumber 				; send it to the number-builder
.95a5	90 03		bcc $95aa			bcc 	_VMCFail 					; if failed, give up.
.95a7	18		clc				clc 								; next time round, countinue
.95a8	80 f3		bra $959d			bra 	_VMCNext
.95aa					_VMCFail:
.95aa	68		pla				pla
.95ab					_VMCFail2:
.95ab	7a		ply				ply
.95ac	38		sec				sec
.95ad	60		rts				rts
.95ae					_VMCSuccess:
.95ae	a9 00		lda #$00			lda 	#0 							; construct final
.95b0	20 4f 87	jsr $874f			jsr 	EncodeNumber
.95b3	68		pla				pla
.95b4	c9 2d		cmp #$2d			cmp 	#"-"
.95b6	d0 03		bne $95bb			bne 	_VMCNotNegative
.95b8	20 ed 8b	jsr $8bed			jsr		NSMNegate
.95bb					_VMCNotNegative:
.95bb	7a		ply				ply
.95bc	18		clc				clc
.95bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8a13					ChrUnary:
.8a13	fa		plx				plx 								; restore stack pos
.8a14	20 d9 8b	jsr $8bd9			jsr 	Evaluate8BitInteger			; get value
.8a17	48		pha				pha
.8a18	20 3e 91	jsr $913e			jsr 	CheckRightBracket
.8a1b	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8a1d	20 ca 96	jsr $96ca			jsr 	StringTempAllocate
.8a20	68		pla				pla 								; write number to it
.8a21	20 08 97	jsr $9708			jsr 	StringTempWrite
.8a24	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8a25					SpcUnary:
.8a25	fa		plx				plx 								; restore stack pos
.8a26	20 d9 8b	jsr $8bd9			jsr 	Evaluate8BitInteger			; get value
.8a29	5a		phy				phy
.8a2a	48		pha				pha 								; save count
.8a2b	20 ca 96	jsr $96ca			jsr 	StringTempAllocate
.8a2e	7a		ply				ply 								; to do count in Y
.8a2f					_SpcLoop:
.8a2f	c0 00		cpy #$00			cpy 	#0
.8a31	f0 08		beq $8a3b			beq 	_SpcExit
.8a33	a9 20		lda #$20			lda 	#32
.8a35	20 08 97	jsr $9708			jsr 	StringTempWrite
.8a38	88		dey				dey
.8a39	80 f4		bra $8a2f			bra 	_SPCLoop
.8a3b					_SpcExit:
.8a3b	7a		ply				ply
.8a3c	20 3e 91	jsr $913e			jsr 	CheckRightBracket
.8a3f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8a40					Unary_Str:
.8a40	fa		plx				plx
.8a41	20 95 8b	jsr $8b95			jsr 	EvaluateNumber  			; get number
.8a44	20 3e 91	jsr $913e			jsr 	CheckRightBracket 			; closing bracket
.8a47	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8a49	20 62 8a	jsr $8a62			jsr 	ConvertNumberToString 		; do the conversion.
.8a4c	a9 21		lda #$21			lda		#33 						; create buffer
.8a4e	20 ca 96	jsr $96ca			jsr 	StringTempAllocate 			; allocate memory
.8a51	da		phx				phx
.8a52	a2 00		ldx #$00			ldx 	#0
.8a54					_USCopy:
.8a54	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8a57	20 08 97	jsr $9708			jsr 	StringTempWrite
.8a5a	e8		inx				inx
.8a5b	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8a5e	d0 f4		bne $8a54			bne 	_USCopy
.8a60	fa		plx				plx
.8a61	60		rts				rts
.8a62					ConvertNumberToString:
.8a62	5a		phy				phy 								; save code position
.8a63	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8a66	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8a69	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8a6c	10 0a		bpl $8a78			bpl 	_CNTSNotNegative
.8a6e	29 7f		and #$7f			and 	#$7F 						; make +ve
.8a70	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a73	a9 2d		lda #$2d			lda 	#"-"
.8a75	20 de 8a	jsr $8ade			jsr 	WriteDecimalBuffer
.8a78					_CNTSNotNegative:
.8a78	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8a7b	f0 15		beq $8a92			beq 	_CNTSNotFloat
.8a7d	e8		inx				inx 								; round up
.8a7e	a9 01		lda #$01			lda 	#1
.8a80	20 43 8c	jsr $8c43			jsr 	NSMSetByte
.8a83	ca		dex				dex
.8a84	bd 28 06	lda $0628,x			lda		NSExponent,x
.8a87	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8a8a	a9 08		lda #$08			lda 	#NSTFloat
.8a8c	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8a8f	20 03 93	jsr $9303			jsr 	FloatAdd
.8a92					_CNTSNotFloat:
.8a92	20 c0 8a	jsr $8ac0			jsr 	MakePlusTwoString
.8a95	20 e1 93	jsr $93e1			jsr 	FloatFractionalPart 		; get the fractional part
.8a98	20 a5 94	jsr $94a5			jsr 	NSNormalise					; normalise , exit if zero
.8a9b	f0 21		beq $8abe			beq 	_CNTSExit
.8a9d	a9 2e		lda #$2e			lda 	#"."
.8a9f	20 de 8a	jsr $8ade			jsr 	WriteDecimalBuffer 			; write decimal place
.8aa2					_CNTSDecimal:
.8aa2	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8aa5	30 17		bmi $8abe			bmi 	_CNTSExit
.8aa7	e8		inx				inx 								; x 10.0
.8aa8	a9 0a		lda #$0a			lda 	#10
.8aaa	20 43 8c	jsr $8c43			jsr 	NSMSetByte
.8aad	a9 08		lda #$08			lda 	#NSTFloat
.8aaf	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ab2	ca		dex				dex
.8ab3	20 6e 94	jsr $946e			jsr 	FloatMultiply
.8ab6	20 c0 8a	jsr $8ac0			jsr 	MakePlusTwoString
.8ab9	20 e1 93	jsr $93e1			jsr 	FloatFractionalPart 		; get the fractional part
.8abc	80 e4		bra $8aa2			bra 	_CNTSDecimal 				; keep going.
.8abe					_CNTSExit:
.8abe	7a		ply				ply
.8abf	60		rts				rts
.8ac0					MakePlusTwoString:
.8ac0	da		phx				phx
.8ac1	20 18 8c	jsr $8c18			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8ac4	e8		inx				inx 								; access it
.8ac5	e8		inx				inx
.8ac6	20 44 94	jsr $9444			jsr 	FloatIntegerPart 			; make it an integer
.8ac9	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8acb	20 ad 92	jsr $92ad			jsr 	ConvertInt32
.8ace	a2 00		ldx #$00			ldx	 	#0
.8ad0					_MPTSCopy:
.8ad0	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8ad3	20 de 8a	jsr $8ade			jsr 	WriteDecimalBuffer
.8ad6	e8		inx				inx
.8ad7	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8ada	d0 f4		bne $8ad0			bne 	_MPTSCopy
.8adc	fa		plx				plx
.8add	60		rts				rts
.8ade					WriteDecimalBuffer:
.8ade	da		phx				phx
.8adf	ae 14 07	ldx $0714			ldx 	dbOffset
.8ae2	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8ae5	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8ae8	ee 14 07	inc $0714			inc 	dbOffset
.8aeb	fa		plx				plx
.8aec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8aed					Unary_Left:
.8aed	fa		plx				plx
.8aee	18		clc				clc 								; only one parameter
.8aef	20 64 8b	jsr $8b64			jsr 	SubstringInitial 			; set up.
.8af2	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8af5	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8af8	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8afb	80 2c		bra $8b29			bra 	SubstringMain
.8afd					Unary_Right:
.8afd	fa		plx				plx
.8afe	18		clc				clc 								; only one parameter
.8aff	20 64 8b	jsr $8b64			jsr 	SubstringInitial 			; set up.
.8b02	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8b05	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8b08	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8b0b	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8b0e	b0 02		bcs $8b12			bcs 	_URNotUnderflow
.8b10	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8b12					_URNotUnderFlow:
.8b12	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8b15	80 12		bra $8b29			bra 	SubStringMain
.8b17					Unary_Mid:
.8b17	fa		plx				plx
.8b18	38		sec				sec 								; two parameters
.8b19	20 64 8b	jsr $8b64			jsr 	SubstringInitial 			; set up.
.8b1c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8b1f	f0 05		beq $8b26			beq 	_UMError
.8b21	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8b24	80 03		bra $8b29			bra 	SubStringMain
.8b26					_UMError:
.8b26	4c 04 96	jmp $9604			jmp 	ArgumentError
.8b29					SubStringMain:
.8b29	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8b2c	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8b2f	b0 2d		bcs $8b5e			bcs 	_SSMNull 					; if so, return an empty string.
.8b31	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8b34	f0 28		beq $8b5e			beq 	_SSMNull 					; return empty string.
.8b36	18		clc				clc 								; add the offset +1 to the address and
.8b37	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8b3a	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8b3d	85 36		sta $36				sta 	zTemp0
.8b3f	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8b42	69 00		adc #$00			adc 	#0
.8b44	85 37		sta $37				sta 	zTemp0+1
.8b46					_SSMNoCarry:
.8b46	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8b49	20 ca 96	jsr $96ca			jsr 	StringTempAllocate 			; allocate that many characters
.8b4c	5a		phy				phy 								; save Y
.8b4d	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8b4f					_SSMCopy:
.8b4f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8b51	f0 09		beq $8b5c			beq 	_SSMEString 				; no more to copy
.8b53	20 08 97	jsr $9708			jsr 	StringTempWrite 			; and write it out.
.8b56	c8		iny				iny
.8b57	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8b5a	d0 f3		bne $8b4f			bne 	_SSMCopy
.8b5c					_SSMEString:
.8b5c	7a		ply				ply
.8b5d					_SSMExit:
.8b5d	60		rts				rts
.8b5e					_SSMNull:
.8b5e	a9 00		lda #$00			lda 	#0
.8b60	20 ca 96	jsr $96ca			jsr 	StringTempAllocate
.8b63	60		rts				rts
.8b64					SubstringInitial:
.8b64	da		phx				phx 								; save initial stack position
.8b65	08		php				php 								; save carry on stack indicating 2 parameters
.8b66	20 a0 8b	jsr $8ba0			jsr 	EvaluateString 				; get a string
.8b69	5a		phy				phy 								; calculate length to exponent.
.8b6a	a0 ff		ldy #$ff			ldy 	#$FF
.8b6c					_SIFindLength:
.8b6c	c8		iny				iny
.8b6d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b6f	d0 fb		bne $8b6c			bne 	_SIFindLength
.8b71	98		tya				tya
.8b72	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8b75	7a		ply				ply
.8b76	e8		inx				inx
.8b77	20 46 91	jsr $9146			jsr 	CheckComma 					; comma next
.8b7a	20 d9 8b	jsr $8bd9			jsr 	Evaluate8BitInteger 		; get next parameter
.8b7d	28		plp				plp 								; is it the last parameter ?
.8b7e	90 07		bcc $8b87			bcc 	_SSIExit 					; if so, exit.
.8b80	e8		inx				inx
.8b81	20 46 91	jsr $9146			jsr 	CheckComma 					; comma next
.8b84	20 d9 8b	jsr $8bd9			jsr 	Evaluate8BitInteger 		; get last parameter
.8b87					_SSIExit:
.8b87	fa		plx				plx
.8b88	20 3e 91	jsr $913e			jsr 	CheckRightBracket 			; check closing bracket
.8b8b	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8b8c					EvaluateValue:
.8b8c	48		pha				pha
.8b8d	20 fe 85	jsr $85fe			jsr		EvaluateExpression 			; expression
.8b90	20 b1 86	jsr $86b1			jsr 	Dereference					; derefernce it
.8b93	68		pla				pla
.8b94	60		rts				rts
.8b95					EvaluateNumber:
.8b95	20 8c 8b	jsr $8b8c			jsr 	EvaluateValue 				; get a value
.8b98	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8b9b	29 10		and #$10			and 	#NSBIsString
.8b9d	d0 16		bne $8bb5			bne 	HelperTypeError
.8b9f	60		rts				rts
.8ba0					EvaluateString:
.8ba0	20 8c 8b	jsr $8b8c			jsr 	EvaluateValue 				; get a value
.8ba3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8ba6	29 10		and #$10			and 	#NSBIsString
.8ba8	f0 0b		beq $8bb5			beq 	HelperTypeError
.8baa					CopyAddressToTemp0:
.8baa	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8bad	85 36		sta $36				sta 	zTemp0
.8baf	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8bb2	85 37		sta $37				sta 	zTemp0+1
.8bb4	60		rts				rts
.8bb5					HelperTypeError:
.8bb5	4c ff 95	jmp $95ff			jmp 	TypeError
.8bb8					EvaluateInteger:
.8bb8	20 95 8b	jsr $8b95			jsr 	EvaluateNumber
.8bbb	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8bbe	d0 0a		bne $8bca			bne 	HelperValueError 			; if not, it's a float.
.8bc0	60		rts				rts
.8bc1					EvaluateUnsignedInteger:
.8bc1	20 b8 8b	jsr $8bb8			jsr 	EvaluateInteger 			; check integer is +ve
.8bc4	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8bc7	30 01		bmi $8bca			bmi 	HelperValueError
.8bc9	60		rts				rts
.8bca					HelperValueError:
.8bca	4c 04 96	jmp $9604			jmp 	ArgumentError
.8bcd					Evaluate16BitInteger:
.8bcd	20 c1 8b	jsr $8bc1			jsr	 	EvaluateUnsignedInteger		; get integer
.8bd0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8bd3	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8bd6	d0 f2		bne $8bca			bne 	HelperValueError
.8bd8	60		rts				rts
.8bd9					Evaluate8BitInteger:
.8bd9	20 c1 8b	jsr $8bc1			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8bdc	d0 ec		bne $8bca			bne 	HelperValueError
.8bde	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8be1	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8be4	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8be7	d0 e1		bne $8bca			bne 	HelperValueError
.8be9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8bec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8bed					NSMNegate:
.8bed	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8bf0	49 80		eor #$80			eor 	#NSBIsNegative
.8bf2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8bf5	60		rts				rts
.8bf6					NSMNegateMantissa:
.8bf6	38		sec				sec
.8bf7	a9 00		lda #$00			lda 	#0
.8bf9	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8bfc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8bff	a9 00		lda #$00			lda 	#0
.8c01	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8c04	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8c07	a9 00		lda #$00			lda 	#0
.8c09	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8c0c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8c0f	a9 00		lda #$00			lda 	#0
.8c11	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8c14	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8c17	60		rts				rts
.8c18					NSMShiftUpTwo:
.8c18	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8c1b	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8c1e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8c21	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8c24	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8c27	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8c2a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8c2d	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8c30	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8c33	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8c36	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8c39	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8c3c	60		rts				rts
.8c3d					NSMSetZeroMantissaOnly:
.8c3d	a9 00		lda #$00			lda 	#0
.8c3f	80 08		bra $8c49			bra 	NSMSetMantissa
.8c41					NSMSetZero:
.8c41	a9 00		lda #$00			lda 	#0
.8c43					NSMSetByte:
.8c43	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8c46	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8c49					NSMSetMantissa:
.8c49	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8c4c	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8c4f	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8c52	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8c55	60		rts				rts
.8c56					NSMShiftLeft:
.8c56	18		clc				clc
.8c57					NSMRotateLeft:
.8c57	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8c5a	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8c5d	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8c60	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8c63	60		rts				rts
.8c64					NSMShiftRight:
.8c64	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8c67	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8c6a	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8c6d	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8c70	60		rts				rts
.8c71					NSMIsZero:
.8c71	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8c74	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8c77	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8c7a	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8c7d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.95be					DecimalScalarTable:
>95be	66 66 66 66				.dword $66666666 ; 0.1
>95c2	de					.byte $de
>95c3	1f 85 eb 51				.dword $51eb851f ; 0.01
>95c7	db					.byte $db
>95c8	4c 37 89 41				.dword $4189374c ; 0.001
>95cc	d8					.byte $d8
>95cd	ac 8b db 68				.dword $68db8bac ; 0.0001
>95d1	d4					.byte $d4
>95d2	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>95d6	d1					.byte $d1
>95d7	83 de 1b 43				.dword $431bde83 ; 1e-06
>95db	ce					.byte $ce
>95dc	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>95e0	ca					.byte $ca
>95e1	89 3b e6 55				.dword $55e63b89 ; 1e-08
>95e5	c7					.byte $c7
>95e6	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>95ea	c4					.byte $c4
>95eb	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>95ef	c0					.byte $c0
>95f0	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>95f4	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.95f5					SyntaxError:
.95f5	a9 02		lda #$02		lda	#2
.95f7	4c 4e 82	jmp $824e		jmp	ErrorHandler
.95fa					RangeError:
.95fa	a9 04		lda #$04		lda	#4
.95fc	4c 4e 82	jmp $824e		jmp	ErrorHandler
.95ff					TypeError:
.95ff	a9 05		lda #$05		lda	#5
.9601	4c 4e 82	jmp $824e		jmp	ErrorHandler
.9604					ArgumentError:
.9604	a9 07		lda #$07		lda	#7
.9606	4c 4e 82	jmp $824e		jmp	ErrorHandler
.9609					NotDoneError:
.9609	a9 0c		lda #$0c		lda	#12
.960b	4c 4e 82	jmp $824e		jmp	ErrorHandler
.960e					ErrorText:
>960e	42 72 65 61 6b 00			.text	"Break",0
>9614	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>961c	72 72 6f 72 00
>9621	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9629	20 62 79 20 7a 65 72 6f 00
>9632	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>963a	61 6e 67 65 00
>963f	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9647	6d 61 74 63 68 00
>964d	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9655	65 6d 6f 72 79 00
>965b	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9663	61 72 67 75 6d 65 6e 74 00
>966c	53 74 6f 70 00				.text	"Stop",0
>9671	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9679	6f 6f 20 6c 6f 6e 67 00
>9681	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9689	6e 20 66 61 69 6c 65 64 00
>9692	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>969a	61 74 61 00
>969e	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>96a6	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.96ac					StringSystemInitialise:
.96ac	a9 00		lda #$00			lda 	#((EndVariableSpace) & $FF)
.96ae	8d 0e 07	sta $070e			sta 	0+StringMemory
.96b1	a9 20		lda #$20			lda 	#((EndVariableSpace) >> 8)
.96b3	8d 0f 07	sta $070f			sta 	1+StringMemory
.96b6	60		rts				rts
.96b7					StringSpaceInitialise:
.96b7	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.96b9	8d 10 07	sta $0710			sta 	StringInitialised
.96bc	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.96bf	8d 11 07	sta $0711			sta 	StringTempPointer
.96c2	ad 0f 07	lda $070f			lda 	StringMemory+1
.96c5	3a		dec a				dec 	a
.96c6	8d 12 07	sta $0712			sta 	StringTempPointer+1
.96c9	60		rts				rts
.96ca					StringTempAllocate:
.96ca	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.96cc	b0 35		bcs $9703			bcs 	_STALength
.96ce	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.96d1	30 05		bmi $96d8			bmi 	_STAAllocate
.96d3	48		pha				pha 								; save value to subtract.
.96d4	20 b7 96	jsr $96b7			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.96d7	68		pla				pla 								; restore it
.96d8					_STAAllocate:
.96d8	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.96da	18		clc				clc  								; deliberate allows one more
.96db	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.96de	8d 11 07	sta $0711			sta 	StringTempPointer
.96e1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.96e4	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.96e6	ad 12 07	lda $0712			lda 	StringTempPointer+1
.96e9	69 ff		adc #$ff			adc 	#$FF
.96eb	8d 12 07	sta $0712			sta 	StringTempPointer+1
.96ee	85 3d		sta $3d				sta 	zsTemp+1
.96f0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.96f3	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.96f6	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.96f9	a9 10		lda #$10			lda 	#NSTString
.96fb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.96fe	a9 00		lda #$00			lda 	#0 							; clear the target string
.9700	92 3c		sta ($3c)			sta 	(zsTemp)
.9702	60		rts				rts
.9703					_STALength:
.9703	a9 09		lda #$09		lda	#9
.9705	4c 4e 82	jmp $824e		jmp	ErrorHandler
.9708					StringTempWrite:
.9708	48		pha				pha
.9709	92 3c		sta ($3c)			sta 	(zsTemp)
.970b	e6 3c		inc $3c				inc 	zsTemp
.970d	d0 02		bne $9711			bne 	_STWNoCarry
.970f	e6 3d		inc $3d				inc 	zsTemp+1
.9711					_STWNoCarry:
.9711	a9 00		lda #$00			lda 	#0
.9713	92 3c		sta ($3c)			sta 	(zsTemp)
.9715	68		pla				pla
.9716	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.8c7e					BackloadProgram:
.8c7e	a2 ff		ldx #$ff			ldx 	#$FF
.8c80	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8c83	20 aa 8c	jsr $8caa			jsr 	BLReadByte
.8c86	30 1e		bmi $8ca6			bmi 	_BPExit
.8c88					_BPCopy:
.8c88	e8		inx				inx  								; copy byte in
.8c89	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8c8c	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8c8f	20 aa 8c	jsr $8caa			jsr 	BLReadByte 					; read next byte
.8c92	30 0a		bmi $8c9e			bmi 	_BPEndLine 					; -ve = EOL
.8c94	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8c96	d0 02		bne $8c9a			bne 	_BPNotTab
.8c98	a9 20		lda #$20			lda 	#' '
.8c9a					_BPNotTab:
.8c9a	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8c9c	b0 ea		bcs $8c88			bcs 	_BPCopy
.8c9e					_BPEndLine:
.8c9e	20 66 8e	jsr $8e66			jsr 	TokeniseLine 				; tokenise the line.
.8ca1	20 f8 90	jsr $90f8			jsr 	MemoryAppend 				; append to current program
.8ca4	80 d8		bra $8c7e			bra 	BackloadProgram
.8ca6					_BPExit:
.8ca6	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variables etc.
.8ca9	60		rts				rts
.8caa					BLReadByte:
.8caa					_BLLoad:
.8caa	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8cad	ee ab 8c	inc $8cab			inc 	_BLLoad+1
.8cb0	d0 03		bne $8cb5			bne 	_BLNoCarry
.8cb2	ee ac 8c	inc $8cac			inc 	_BLLoad+2
.8cb5					_BLNoCarry:
.8cb5	c9 00		cmp #$00			cmp 	#0
.8cb7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.8cb8					TokeniseSearchTable:
.8cb8	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8cba	85 36		sta $36				sta 	zTemp0
.8cbc	a0 00		ldy #$00			ldy 	#0
.8cbe	a9 80		lda #$80			lda 	#$80 						; token #
.8cc0	85 38		sta $38				sta 	zTemp1
.8cc2					_TSTLoop:
.8cc2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8cc4	30 49		bmi $8d0f			bmi 	_TSTFail 					; -ve = end of table
.8cc6	f0 2e		beq $8cf6			beq 	_TSTNext 					; zero, check next it's a dummy
.8cc8	c8		iny				iny 								; get the hash
.8cc9	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ccb	88		dey				dey
.8ccc	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8ccf	d0 25		bne $8cf6			bne 	_TSTNext
.8cd1	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8cd4	38		sec				sec
.8cd5	ed 00 07	sbc $0700			sbc 	identStart
.8cd8	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8cda	d0 1a		bne $8cf6			bne 	_TSTNext
.8cdc	5a		phy				phy 								; save Y , we might fail
.8cdd	c8		iny				iny 								; point to text
.8cde	c8		iny				iny
.8cdf	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8ce2					_TSTCompareName:
.8ce2	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8ce5	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8ce7	d0 0c		bne $8cf5			bne 	_TSTNextPullY 				; fail, pullY and do next
.8ce9	e8		inx				inx
.8cea	c8		iny				iny
.8ceb	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8cee	d0 f2		bne $8ce2			bne 	_TSTCompareName
.8cf0	7a		ply				ply 								; throw Y
.8cf1	a5 38		lda $38				lda 	zTemp1 						; get token #
.8cf3	38		sec				sec 								; return with CS = passed.
.8cf4	60		rts				rts
.8cf5					_TSTNextPullY:
.8cf5	7a		ply				ply 								; restore current, fall through.
.8cf6					_TSTNext:
.8cf6	e6 38		inc $38				inc 	zTemp1 						; token counter
.8cf8	98		tya				tya
.8cf9	18		clc				clc
.8cfa	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8cfc	1a		inc a				inc 	a 							; +1
.8cfd	1a		inc a				inc 	a 							; +2
.8cfe	a8		tay				tay
.8cff	10 c1		bpl $8cc2			bpl 	_TSTLoop 					; if Y < $80 loop back
.8d01	98		tya				tya 								; add Y to zTemp0 and reset Y
.8d02	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8d04	18		clc				clc  								; but have tables > 255 bytes
.8d05	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8d07	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8d09	90 b7		bcc $8cc2			bcc 	_TSTLoop
.8d0b	e6 37		inc $37				inc 	zTemp0+1
.8d0d	80 b3		bra $8cc2			bra 	_TSTLoop
.8d0f					_TSTFail:
.8d0f	18		clc				clc
.8d10	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.8d11					KeywordSet0:
>8d11	00 65					.text	0,$65,""               ; $80 !0:EOF
>8d13	00 58					.text	0,$58,""               ; $81 !1:SH1
>8d15	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8d17	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8d1d	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8d25	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8d2b	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8d32	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8d39	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8d40	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8d46	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8d4e	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8d56	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8d5c	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8d63	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8d69	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8d71	28
>8d72	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8d78	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8d7e	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8d84	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8d8b	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8d91	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8d97	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8d9c	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8da0	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8da6	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8dae	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8db5	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8dbc	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8dc4	43
>8dc5	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8dcb	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8dd2	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8dd8	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8dde	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8de3	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8de9	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8dee	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8df5	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8dfb	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8e00	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8e07	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8e0d	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8e12	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8e1a	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8e20	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8e24	ff					.text	$FF
.8e25					KeywordSet1:
>8e25	00 65					.text	0,$65,""               ; $80 !0:EOF
>8e27	00 58					.text	0,$58,""               ; $81 !1:SH1
>8e29	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8e2b	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8e33	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8e3a	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8e3f	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8e45	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8e4a	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8e52	45
>8e53	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8e58	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8e5e	ff					.text	$FF
.8e5f					KeywordSet2:
>8e5f	00 65					.text	0,$65,""               ; $80 !0:EOF
>8e61	00 58					.text	0,$58,""               ; $81 !1:SH1
>8e63	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8e65	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.8e66					TokeniseLine:
.8e66	20 ee 8f	jsr $8fee			jsr 	FixLineBufferCase 			; fix line case
.8e69	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8e6b	8d 15 07	sta $0715			sta 	tokenOffset
.8e6e	9c 16 07	stz $0716			stz 	tokenLineNumber
.8e71	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.8e74	a2 ff		ldx #$ff			ldx 	#$FF
.8e76					_TKFindFirst:
.8e76	e8		inx				inx
.8e77	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8e7a	f0 79		beq $8ef5			beq 	_TKExit
.8e7c	c9 20		cmp #$20			cmp 	#' '
.8e7e	90 f6		bcc $8e76			bcc 	_TKFindFirst
.8e80	c9 30		cmp #$30			cmp 	#'0'
.8e82	90 07		bcc $8e8b			bcc 	_TKNoLineNumber
.8e84	c9 3a		cmp #$3a			cmp 	#'9'+1
.8e86	b0 03		bcs $8e8b			bcs 	_TKNoLineNumber
.8e88	20 18 90	jsr $9018			jsr 	TokeniseExtractLineNumber
.8e8b					_TKNoLineNumber:
.8e8b					_TKTokeniseLoop:
.8e8b	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8e8e	f0 65		beq $8ef5			beq 	_TKExit
.8e90	e8		inx				inx
.8e91	c9 20		cmp #$20			cmp 	#' '
.8e93	f0 f6		beq $8e8b			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8e95	ca		dex				dex 								; undo last get, A contains character, X is position.
.8e96	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8e98	f0 61		beq $8efb			beq 	_TKTokeniseIdentifier
.8e9a	c9 41		cmp #$41			cmp 	#'A'
.8e9c	90 04		bcc $8ea2			bcc 	_TKTokenisePunctuation
.8e9e	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8ea0	90 59		bcc $8efb			bcc 	_TKTokeniseIdentifier
.8ea2					_TKTokenisePunctuation:
.8ea2	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8ea4	f0 27		beq $8ecd			beq 	_TKString
.8ea6	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8ea8	f0 28		beq $8ed2			beq 	_TKHexConstant
.8eaa	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8eac	f0 29		beq $8ed7			beq 	_TKCheckDouble
.8eae	c9 3e		cmp #$3e			cmp 	#'>'
.8eb0	f0 25		beq $8ed7			beq 	_TKCheckDouble
.8eb2					_TKStandardPunctuation:
.8eb2	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.8eb5	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8eb7	90 0e		bcc $8ec7			bcc 	_TKNoShift
.8eb9	48		pha				pha 								; save
.8eba	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8ebc	85 36		sta $36				sta 	zTemp0
.8ebe	68		pla				pla
.8ebf	29 20		and #$20			and 	#32 						; bit 5
.8ec1	4a		lsr a				lsr 	a 							; shift into bit 3
.8ec2	4a		lsr a				lsr 	a
.8ec3	05 36		ora $36				ora 	zTemp0
.8ec5	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8ec7					_TKNoShift:
.8ec7	20 5d 90	jsr $905d			jsr 	TokeniseWriteByte 			; write the punctuation character
.8eca	e8		inx				inx 								; consume the character
.8ecb	80 be		bra $8e8b			bra 	_TKTokeniseLoop 			; and loop round again.
.8ecd					_TKString:
.8ecd	20 7d 8f	jsr $8f7d			jsr 	TokeniseString
.8ed0	80 b9		bra $8e8b			bra 	_TKTokeniseLoop
.8ed2					_TKHexConstant:
.8ed2	20 b8 8f	jsr $8fb8			jsr 	TokeniseHexConstant
.8ed5	80 b4		bra $8e8b			bra 	_TKTokeniseLoop
.8ed7					_TKCheckDouble:
.8ed7	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.8eda	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8edc	90 d4		bcc $8eb2			bcc 	_TKStandardPunctuation
.8ede	c9 3f		cmp #$3f			cmp 	#'>'+1
.8ee0	b0 d0		bcs $8eb2			bcs 	_TKStandardPunctuation
.8ee2	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8ee5	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8ee7	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8ee8	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8eeb	38		sec				sec
.8eec	e9 3c		sbc #$3c			sbc 	#'<'
.8eee	20 5d 90	jsr $905d			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8ef1	e8		inx				inx 								; consume both
.8ef2	e8		inx				inx
.8ef3	80 96		bra $8e8b			bra 	_TKTokeniseLoop
.8ef5	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8ef7	20 5d 90	jsr $905d			jsr 	TokeniseWriteByte
.8efa	60		rts				rts
.8efb					_TKTokeniseIdentifier:
.8efb	8e 00 07	stx $0700			stx 	identStart 					; save start
.8efe	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8f01					_TKCheckLoop:
.8f01	e8		inx				inx 								; look at next, we know first is identifier.
.8f02	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.8f05	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8f07	f0 f8		beq $8f01			beq 	_TKCheckLoop
.8f09	c9 30		cmp #$30			cmp	 	#"0"
.8f0b	90 0c		bcc $8f19			bcc 	_TKEndIdentifier
.8f0d	c9 3a		cmp #$3a			cmp 	#"9"+1
.8f0f	90 f0		bcc $8f01			bcc 	_TKCheckLoop
.8f11	c9 41		cmp #$41			cmp	 	#"A"
.8f13	90 04		bcc $8f19			bcc 	_TKEndIdentifier
.8f15	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8f17	90 e8		bcc $8f01			bcc 	_TKCheckLoop
.8f19					_TKEndIdentifier:
.8f19	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8f1c	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8f1e	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8f20	f0 06		beq $8f28			beq 	_TKHasTypeCharacter
.8f22	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8f24	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8f26	d0 07		bne $8f2f			bne 	_TKNoTypeCharacter
.8f28					_TKHasTypeCharacter:
.8f28	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8f2b	e8		inx				inx 								; read next
.8f2c	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8f2f					_TKNoTypeCharacter:
.8f2f	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8f31	d0 09		bne $8f3c			bne 	_TKNoArray
.8f33	e8		inx				inx 								; skip the (
.8f34	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8f37	09 04		ora #$04			ora 	#$04
.8f39	8d 04 07	sta $0704			sta 	identTypeByte
.8f3c					_TKNoArray:
.8f3c	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8f3f	20 d9 8f	jsr $8fd9			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8f42	a0 8d		ldy #$8d			ldy 	#(KeywordSet0) >> 8
.8f44	a9 11		lda #$11			lda 	#(KeywordSet0) & $FF
.8f46	20 b8 8c	jsr $8cb8			jsr 	TokeniseSearchTable
.8f49	a2 00		ldx #$00			ldx 	#0
.8f4b	b0 1f		bcs $8f6c			bcs 	_TKFoundToken
.8f4d	a0 8e		ldy #$8e			ldy 	#(KeywordSet1) >> 8
.8f4f	a9 25		lda #$25			lda 	#(KeywordSet1) & $FF
.8f51	20 b8 8c	jsr $8cb8			jsr 	TokeniseSearchTable
.8f54	a2 81		ldx #$81			ldx 	#$81
.8f56	b0 14		bcs $8f6c			bcs 	_TKFoundToken
.8f58	a0 8e		ldy #$8e			ldy 	#(KeywordSet1) >> 8
.8f5a	a9 25		lda #$25			lda 	#(KeywordSet1) & $FF
.8f5c	20 b8 8c	jsr $8cb8			jsr 	TokeniseSearchTable
.8f5f	a2 82		ldx #$82			ldx 	#$82
.8f61	b0 09		bcs $8f6c			bcs 	_TKFoundToken
.8f63	20 69 90	jsr $9069			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8f66	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8f69	4c 8b 8e	jmp $8e8b			jmp 	_TKTokeniseLoop 			; and go round again.
.8f6c					_TKFoundToken:
.8f6c	48		pha				pha 								; save token
.8f6d	8a		txa				txa 								; shift in X, is there one ?
.8f6e	f0 03		beq $8f73			beq 	_TKNoTShift
.8f70	20 5d 90	jsr $905d			jsr 	TokeniseWriteByte 			; if so, write it out
.8f73					_TKNoTShift:
.8f73	68		pla				pla 								; restore and write token
.8f74	20 5d 90	jsr $905d			jsr 	TokeniseWriteByte
.8f77	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8f7a	4c 8b 8e	jmp $8e8b			jmp 	_TKTokeniseLoop 			; and go round again.
.8f7d					TokeniseString:
.8f7d	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8f7f	20 5d 90	jsr $905d			jsr 	TokeniseWriteByte
.8f82	e8		inx				inx									; start of quoted string.
.8f83	da		phx				phx 								; push start of string on top
.8f84	ca		dex				dex
.8f85					_TSFindEnd:
.8f85	e8		inx				inx
.8f86	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.8f89	f0 04		beq $8f8f			beq 	_TSEndOfString
.8f8b	c9 22		cmp #$22			cmp 	#'"'
.8f8d	d0 f6		bne $8f85			bne 	_TSFindEnd
.8f8f					_TSEndOfString:
.8f8f	7a		ply				ply  								; so now Y is first character, X is character after end.
.8f90	48		pha				pha 								; save terminating character
.8f91	20 99 8f	jsr $8f99			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8f94	68		pla				pla 								; terminating character
.8f95	f0 01		beq $8f98			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8f97	e8		inx				inx
.8f98					_TSNotQuote:
.8f98	60		rts				rts
.8f99					TOWriteBlockXY:
.8f99	86 36		stx $36				stx 	zTemp0 						; write end character
.8f9b	98		tya				tya
.8f9c	49 ff		eor #$ff			eor 	#$FF
.8f9e	38		sec				sec
.8f9f	65 36		adc $36				adc 	zTemp0
.8fa1	1a		inc a				inc 	a 							; one extra for NULL
.8fa2	20 5d 90	jsr $905d			jsr 	TokeniseWriteByte
.8fa5					_TOBlockLoop:
.8fa5	c4 36		cpy $36				cpy 	zTemp0
.8fa7	f0 09		beq $8fb2			beq 	_TOBlockExit
.8fa9	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.8fac	20 5d 90	jsr $905d			jsr 	TokeniseWriteByte
.8faf	c8		iny				iny
.8fb0	80 f3		bra $8fa5			bra 	_TOBlockLoop
.8fb2					_TOBlockExit:
.8fb2	a9 00		lda #$00			lda 	#0
.8fb4	20 5d 90	jsr $905d			jsr 	TokeniseWriteByte
.8fb7	60		rts				rts
.8fb8					TokeniseHexConstant:
.8fb8	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8fba	20 5d 90	jsr $905d			jsr 	TokeniseWriteByte
.8fbd	e8		inx				inx									; start of quoted string.
.8fbe	da		phx				phx 								; push start of constant on top
.8fbf	ca		dex				dex
.8fc0					_THFindLoop:
.8fc0	e8		inx				inx
.8fc1	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8fc4	c9 30		cmp #$30			cmp 	#"0"
.8fc6	90 0c		bcc $8fd4			bcc 	_THFoundEnd
.8fc8	c9 3a		cmp #$3a			cmp 	#"9"+1
.8fca	90 f4		bcc $8fc0			bcc 	_THFindLoop
.8fcc	c9 41		cmp #$41			cmp 	#"A"
.8fce	90 04		bcc $8fd4			bcc 	_THFoundEnd
.8fd0	c9 47		cmp #$47			cmp 	#"F"+1
.8fd2	90 ec		bcc $8fc0			bcc 	_THFindLoop
.8fd4					_THFoundEnd:
.8fd4	7a		ply				ply 								; restore start
.8fd5	20 99 8f	jsr $8f99			jsr 	TOWriteBlockXY 				; output the block
.8fd8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.8fd9					TokeniseCalculateHash:
.8fd9	da		phx				phx
.8fda	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8fdd	a9 00		lda #$00			lda 	#0
.8fdf					_TCHLoop:
.8fdf	18		clc				clc
.8fe0	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.8fe3	e8		inx				inx
.8fe4	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8fe7	d0 f6		bne $8fdf			bne 	_TCHLoop
.8fe9	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8fec	fa		plx				plx
.8fed	60		rts				rts
.8fee					FixLineBufferCase:
.8fee	a2 00		ldx #$00			ldx 	#0
.8ff0					_FLBCLoop:
.8ff0	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.8ff3	f0 22		beq $9017			beq 	_FLBCExit 					; end of string.
.8ff5	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8ff7	f0 11		beq $900a			beq 	_FLBCInQuotes
.8ff9	e8		inx				inx
.8ffa	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8ffc	90 f2		bcc $8ff0			bcc 	_FLBCLoop
.8ffe	c9 7b		cmp #$7b			cmp 	#'z'+1
.9000	b0 ee		bcs $8ff0			bcs 	_FLBCLoop
.9002	38		sec				sec 								; make U/C
.9003	e9 20		sbc #$20			sbc 	#32
.9005	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.9008	80 e6		bra $8ff0			bra 	_FLBCLoop
.900a					_FLBCInQuotes:
.900a	e8		inx				inx 								; advance
.900b	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.900e	f0 07		beq $9017			beq 	_FLBCExit 					; exit on EOS
.9010	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9012	d0 f6		bne $900a			bne 	_FLBCInQuotes
.9014	e8		inx				inx 								; skip over it
.9015	80 d9		bra $8ff0			bra 	_FLBCLoop
.9017					_FLBCExit:
.9017	60		rts				rts
.9018					TokeniseExtractLineNumber:
.9018	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.901b	48		pha				pha
.901c	ad 16 07	lda $0716			lda 	tokenLineNumber
.901f	48		pha				pha
.9020	20 56 90	jsr $9056			jsr 	_TELNTimes2 				; line # x 4
.9023	20 56 90	jsr $9056			jsr 	_TELNTimes2 				; line # x 2
.9026	18		clc				clc 								; add stacked value
.9027	68		pla				pla
.9028	6d 16 07	adc $0716			adc 	tokenLineNumber
.902b	8d 16 07	sta $0716			sta 	tokenLineNumber
.902e	68		pla				pla
.902f	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.9032	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.9035	20 56 90	jsr $9056			jsr 	_TELNTimes2 				; line # x 10
.9038	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.903b	e8		inx				inx
.903c	29 0f		and #$0f			and 	#15 						; add to line #
.903e	18		clc				clc
.903f	6d 16 07	adc $0716			adc 	tokenLineNumber
.9042	8d 16 07	sta $0716			sta 	tokenLineNumber
.9045	90 03		bcc $904a			bcc 	_TLENNoCarry
.9047	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.904a					_TLENNoCarry:
.904a	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.904d	c9 30		cmp #$30			cmp 	#'0'
.904f	90 04		bcc $9055			bcc 	_TLENExit
.9051	c9 3a		cmp #$3a			cmp 	#'9'+1
.9053	90 c3		bcc $9018			bcc 	TokeniseExtractLineNumber
.9055					_TLENExit:
.9055	60		rts				rts
.9056					_TELNTimes2:
.9056	0e 16 07	asl $0716			asl 	tokenLineNumber
.9059	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.905c	60		rts				rts
.905d					TokeniseWriteByte:
.905d	da		phx				phx
.905e	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.9061	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.9064	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.9067	fa		plx				plx
.9068	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9069					CheckCreateVariableRecord:
.9069	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.906b	85 36		sta $36				sta 	0+zTemp0
.906d	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.906f	85 37		sta $37				sta 	1+zTemp0
.9071	20 3c 91	jsr $913c			jsr 	VariableOpen 				; make variable space available
.9074					_CCVSearch:
.9074	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9076	f0 2c		beq $90a4			beq 	_CCVFail
.9078	a0 01		ldy #$01			ldy 	#1 							; read the hash
.907a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.907c	cd 03 07	cmp $0703			cmp 	identHash
.907f	d0 16		bne $9097			bne 	_CCVNext
.9081	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9083	ae 00 07	ldx $0700			ldx 	identStart
.9086					_CCVCompare:
.9086	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9089	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.908b	e8		inx				inx 								; advance pointers
.908c	c8		iny				iny
.908d	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.908e	d0 07		bne $9097			bne 	_CCVNext  					; didn't match go to next.
.9090	90 f4		bcc $9086			bcc 	_CCVCompare 				; not finished yet.
.9092	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9095	f0 41		beq $90d8			beq 	_CCVFound 					; yes, we were successful
.9097					_CCVNext:
.9097	18		clc				clc
.9098	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.909a	65 36		adc $36				adc 	zTemp0
.909c	85 36		sta $36				sta 	zTemp0
.909e	90 d4		bcc $9074			bcc 	_CCVSearch
.90a0	e6 37		inc $37				inc 	zTemp0+1
.90a2	80 d0		bra $9074			bra 	_CCVSearch
.90a4					_CCVFail:
.90a4	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.90a6	ad 03 07	lda $0703			lda 	identHash
.90a9	91 36		sta ($36),y			sta 	(zTemp0),y
.90ab	c8		iny				iny 								; offset 2 is the type byte
.90ac	ad 04 07	lda $0704			lda 	identTypeByte
.90af	91 36		sta ($36),y			sta 	(zTemp0),y
.90b1	c8		iny				iny
.90b2					_CCVData:
.90b2	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.90b4	91 36		sta ($36),y			sta 	(zTemp0),y
.90b6	c8		iny				iny
.90b7	c0 08		cpy #$08			cpy 	#8
.90b9	90 f7		bcc $90b2			bcc 	_CCVData
.90bb	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.90be					_CCVCopyName:
.90be	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.90c1	91 36		sta ($36),y			sta 	(zTemp0),y
.90c3	e8		inx				inx
.90c4	c8		iny				iny
.90c5	ec 02 07	cpx $0702			cpx 	identTypeEnd
.90c8	d0 f4		bne $90be			bne 	_CCVCopyName
.90ca	98		tya				tya 								; patch offset
.90cb	92 36		sta ($36)			sta 	(zTemp0)
.90cd	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.90cf	91 36		sta ($36),y			sta 	(zTemp0),y
.90d1	88		dey				dey
.90d2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.90d4	09 80		ora #$80			ora 	#$80
.90d6	91 36		sta ($36),y			sta 	(zTemp0),y
.90d8					_CCVFound:
.90d8	20 3d 91	jsr $913d			jsr 	VariableClose 				; map out variables, perhaps.
.90db	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.90dd	38		sec				sec
.90de	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.90e0	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.90e2	20 5d 90	jsr $905d			jsr 	TokeniseWriteByte
.90e5	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.90e7	20 5d 90	jsr $905d			jsr 	TokeniseWriteByte
.90ea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9717					MemoryPeek:
.9717	b2 36		lda ($36)			lda 	(zTemp0)
.9719	60		rts				rts
.971a					MemoryPoke:
.971a	92 36		sta ($36)			sta 	(zTemp0)
.971c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.971d					EXTPrintCharacter:
.971d	48		pha				pha
.971e	da		phx				phx
.971f	5a		phy				phy
.9720	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9723	7a		ply				ply
.9724	fa		plx				plx
.9725	68		pla				pla
.9726	60		rts				rts
.9727					EXTInputSingleCharacter:
.9727	da		phx				phx
.9728	5a		phy				phy
.9729					_EISCWait:
.9729	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.972c	c9 00		cmp #$00			cmp 	#0
.972e	f0 f9		beq $9729			beq 	_EISCWait
.9730	7a		ply				ply
.9731	fa		plx				plx
.9732	60		rts				rts
.9733					EXTInputLine:
.9733	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9735					_ILLoop:
.9735	da		phx				phx 								; read character in
.9736	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9739	fa		plx				plx
.973a	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.973c	f0 12		beq $9750			beq 	_ILBackspace
.973e	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9740	f0 15		beq $9757			beq 	_ILExit
.9742	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9744	90 ef		bcc $9735			bcc 	_ILLoop
.9746	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9748	f0 eb		beq $9735			beq 	_ILLoop
.974a	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.974d	e8		inx				inx
.974e	80 e5		bra $9735			bra 	_ILLoop
.9750					_ILBackspace:
.9750	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9752	f0 e1		beq $9735			beq 	_ILLoop
.9754	ca		dex				dex 								; back one.
.9755	80 de		bra $9735			bra 	_ILLoop
.9757					_ILExit:
.9757	20 1d 97	jsr $971d			jsr 	EXTPrintCharacter
.975a	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.975d	60		rts				rts
.975e					EXTBreakCheck:
.975e	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.90eb					MemoryNew:
.90eb	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.90ed	85 30		sta $30				sta 	codePtr
.90ef	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.90f1	85 31		sta $31				sta 	codePtr+1
.90f3	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.90f5	92 30		sta ($30)			sta 	(codePtr)
.90f7	60		rts				rts
.90f8					MemoryAppend:
.90f8	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.90fa	85 30		sta $30				sta 	codePtr
.90fc	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.90fe	85 31		sta $31				sta 	codePtr+1
.9100					_MAFindEnd:
.9100	b2 30		lda ($30)			lda 	(codePtr)
.9102	f0 0d		beq $9111			beq 	_MAFoundEnd
.9104	18		clc				clc
.9105	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9107	65 30		adc $30				adc 	codePtr
.9109	85 30		sta $30				sta 	codePtr
.910b	90 02		bcc $910f			bcc 	_CREExit
.910d	e6 31		inc $31				inc 	codePtr+1
.910f					_CREExit:
.910f	80 ef		bra $9100			bra 	_MAFindEnd
.9111					_MAFoundEnd:
.9111	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.9114	c0 04		cpy #$04			cpy 	#4 							; blank line
.9116	f0 0e		beq $9126			beq 	_MANoLine
.9118	a9 00		lda #$00			lda 	#0 							; end of program
.911a	91 30		sta ($30),y			sta 	(codePtr),y
.911c					_MACopy:
.911c	88		dey				dey
.911d	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.9120	91 30		sta ($30),y			sta 	(codePtr),y
.9122	c0 00		cpy #$00			cpy 	#0
.9124	d0 f6		bne $911c			bne 	_MACopy
.9126					_MANoLine:
.9126	60		rts				rts
.9127					MemoryInline:
.9127	98		tya				tya 								; put address into stack,x
.9128	18		clc				clc
.9129	65 30		adc $30				adc 	codePtr
.912b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.912e	a5 31		lda $31				lda 	codePtr+1
.9130	69 00		adc #$00			adc 	#0
.9132	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9135	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9138	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.913b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/variable.asm

.913c					VariableOpen:
.913c	60		rts				rts
.913d					VariableClose:
.913d	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
