
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Fri Sep 23 10:07:49 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8010					CodeStart = $8010
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					tokenOffset:
>0706							.fill 	1
.0707					tokenLineNumber:
>0707							.fill 	2
.0709					tokenBuffer:
>0709							.fill 	253
.0806					lineBuffer:
>0806							.fill 	256

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_DECLPAREN                        = $87; $87 DEC(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_GETDATEDOLLARLPAREN              = $89; $89 GETDATE$(
=$8a					KWD_GETTIMEDOLLARLPAREN              = $8a; $8a GETTIME$(
=$8b					KWD_HEXDOLLARLPAREN                  = $8b; $8b HEX$(
=$8c					KWD_INTLPAREN                        = $8c; $8c INT(
=$8d					KWD_ISVALLPAREN                      = $8d; $8d ISVAL(
=$8e					KWD_LEFTDOLLARLPAREN                 = $8e; $8e LEFT$(
=$8f					KWD_LENLPAREN                        = $8f; $8f LEN(
=$90					KWD_MIDDOLLARLPAREN                  = $90; $90 MID$(
=$91					KWD_NOT                              = $91; $91 NOT
=$92					KWD_PAGE                             = $92; $92 PAGE
=$93					KWD_RIGHTDOLLARLPAREN                = $93; $93 RIGHT$(
=$94					KWD_RNDLPAREN                        = $94; $94 RND(
=$95					KWD_SGNLPAREN                        = $95; $95 SGN(
=$96					KWD_SPCLPAREN                        = $96; $96 SPC(
=$97					KWD_STRDOLLARLPAREN                  = $97; $97 STR$(
=$98					KWD_TRUE                             = $98; $98 TRUE
=$99					KWD_VALLPAREN                        = $99; $99 VAL(
=$9a					KWD_FOR                              = $9a; $9a FOR
=$9b					KWD_IF                               = $9b; $9b IF
=$9c					KWD_PROC                             = $9c; $9c PROC
=$9d					KWD_REPEAT                           = $9d; $9d REPEAT
=$9e					KWD_WHILE                            = $9e; $9e WHILE
=$9f					KWD_ENDIF                            = $9f; $9f ENDIF
=$a0					KWD_ENDPROC                          = $a0; $a0 ENDPROC
=$a1					KWD_NEXT                             = $a1; $a1 NEXT
=$a2					KWD_UNTIL                            = $a2; $a2 UNTIL
=$a3					KWD_WEND                             = $a3; $a3 WEND
=$a4					KWD_CALL                             = $a4; $a4 CALL
=$a5					KWD_CLS                              = $a5; $a5 CLS
=$a6					KWD_DATA                             = $a6; $a6 DATA
=$a7					KWD_DIM                              = $a7; $a7 DIM
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_PRINT                            = $ab; $ab PRINT
=$ac					KWD_READ                             = $ac; $ac READ
=$ad					KWD_REM                              = $ad; $ad REM
=$ae					KWD_RETURN                           = $ae; $ae RETURN
=$af					KWD_THEN                             = $af; $af THEN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9a					KWC_FIRST_STRUCTURE = $9a
=$9f					KWC_FIRST_STRUCTURE_DEC = $9f
=$a3					KWC_LAST_STRUCTURE = $a3
=$83					KWC_FIRST_UNARY = $83
=$99					KWC_LAST_UNARY = $99

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8010	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8012	9a		txs				txs
.8013	20 40 81	jsr $8140			jsr 	NewCommand 					; erase current program
.8016	20 62 87	jsr $8762			jsr 	BackloadProgram
.8019	4c 57 81	jmp $8157			jmp 	CommandRun
.801c					WarmStart:
>801c	db						.byte 	$DB 						; causes a break in the emulator
.801d	80 fd		bra $801c			bra 	WarmStart
.801f					ErrorHandler:
>801f	db						.byte 	$DB 						; causes a break in the emulator
.8020	4c 1f 80	jmp $801f			jmp 	ErrorHandler
>8023							.align 2

;******  Processing file: ./aa_system/../generated/vectors.dat

.8024					VectorSetPunc:
>8024	a3 81					.word	ShiftLeft                        ; $00 <<
>8026	33 8c					.word	BinaryCompareLessEqual           ; $01 <=
>8028	29 8c					.word	BinaryCompareNotEqual            ; $02 <>
>802a	d2 8d					.word	SyntaxError                      ; $03 !!3
>802c	d2 8d					.word	SyntaxError                      ; $04 ><
>802e	3d 8c					.word	BinaryCompareGreaterEqual        ; $05 >=
>8030	a6 81					.word	ShiftRight                       ; $06 >>
>8032	d2 8d					.word	SyntaxError                      ; $07 !!7
>8034	d2 8d					.word	SyntaxError                      ; $08 !!8
>8036	d2 8d					.word	SyntaxError                      ; $09 !!9
>8038	d2 8d					.word	SyntaxError                      ; $0a !!10
>803a	d2 8d					.word	SyntaxError                      ; $0b !!11
>803c	d2 8d					.word	SyntaxError                      ; $0c !!12
>803e	d2 8d					.word	SyntaxError                      ; $0d !!13
>8040	d2 8d					.word	SyntaxError                      ; $0e !!14
>8042	d2 8d					.word	SyntaxError                      ; $0f !!15
>8044	d2 8d					.word	SyntaxError                      ; $10 @
>8046	d2 8d					.word	SyntaxError                      ; $11 !!17
>8048	d2 8d					.word	SyntaxError                      ; $12 !!18
>804a	d2 8d					.word	SyntaxError                      ; $13 [
>804c	95 8c					.word	IntegerDivide                    ; $14 \
>804e	d2 8d					.word	SyntaxError                      ; $15 ]
>8050	29 83					.word	EorInteger                       ; $16 ^
>8052	d2 8d					.word	SyntaxError                      ; $17 _
>8054	d2 8d					.word	SyntaxError                      ; $18 `
>8056	d2 8d					.word	SyntaxError                      ; $19 !!25
>8058	d2 8d					.word	SyntaxError                      ; $1a !!26
>805a	d2 8d					.word	SyntaxError                      ; $1b {
>805c	e4 82					.word	OraInteger                       ; $1c |
>805e	d2 8d					.word	SyntaxError                      ; $1d }
>8060	d2 8d					.word	SyntaxError                      ; $1e ~
>8062	d2 8d					.word	SyntaxError                      ; $1f [7m<7F>[m
>8064	d2 8d					.word	SyntaxError                      ; $20
>8066	d2 8d					.word	SyntaxError                      ; $21 !
>8068	d2 8d					.word	SyntaxError                      ; $22 "
>806a	d2 8d					.word	SyntaxError                      ; $23 #
>806c	d2 8d					.word	SyntaxError                      ; $24 $
>806e	e1 8c					.word	IntegerModulus                   ; $25 %
>8070	9f 82					.word	AndInteger                       ; $26 &
>8072	d2 8d					.word	SyntaxError                      ; $27 '
>8074	d2 8d					.word	SyntaxError                      ; $28 (
>8076	d2 8d					.word	SyntaxError                      ; $29 )
>8078	51 8d					.word	MulInteger                       ; $2a *
>807a	39 82					.word	AddInteger                       ; $2b +
>807c	d2 8d					.word	SyntaxError                      ; $2c ,
>807e	74 82					.word	SubInteger                       ; $2d -
>8080	d2 8d					.word	SyntaxError                      ; $2e .
>8082	d2 8d					.word	SyntaxError                      ; $2f /
>8084	d2 8d					.word	SyntaxError                      ; $30 0
>8086	d2 8d					.word	SyntaxError                      ; $31 1
>8088	d2 8d					.word	SyntaxError                      ; $32 2
>808a	d2 8d					.word	SyntaxError                      ; $33 3
>808c	d2 8d					.word	SyntaxError                      ; $34 4
>808e	d2 8d					.word	SyntaxError                      ; $35 5
>8090	d2 8d					.word	SyntaxError                      ; $36 6
>8092	d2 8d					.word	SyntaxError                      ; $37 7
>8094	d2 8d					.word	SyntaxError                      ; $38 8
>8096	d2 8d					.word	SyntaxError                      ; $39 9
>8098	d2 8d					.word	SyntaxError                      ; $3a :
>809a	d2 8d					.word	SyntaxError                      ; $3b ;
>809c	15 8c					.word	BinaryCompareLess                ; $3c <
>809e	0b 8c					.word	BinaryCompareEqual               ; $3d =
>80a0	1f 8c					.word	BinaryCompareGreater             ; $3e >
>80a2	d2 8d					.word	SyntaxError                      ; $3f ?
.80a4					VectorSet0:
>80a4	8e 81					.word	EOLCommand                       ; $80 !0:EOF
>80a6	9b 81					.word	Shift1Command                    ; $81 !1:SH1
>80a8	d2 8d					.word	SyntaxError                      ; $82 !2:SH2
>80aa	d2 8d					.word	SyntaxError                      ; $83 ABS(
>80ac	d2 8d					.word	SyntaxError                      ; $84 ALLOC(
>80ae	d2 8d					.word	SyntaxError                      ; $85 ASC(
>80b0	d2 8d					.word	SyntaxError                      ; $86 CHR$(
>80b2	d2 8d					.word	SyntaxError                      ; $87 DEC(
>80b4	07 8c					.word	UnaryFalse                       ; $88 FALSE
>80b6	d2 8d					.word	SyntaxError                      ; $89 GETDATE$(
>80b8	d2 8d					.word	SyntaxError                      ; $8a GETTIME$(
>80ba	d2 8d					.word	SyntaxError                      ; $8b HEX$(
>80bc	d2 8d					.word	SyntaxError                      ; $8c INT(
>80be	d2 8d					.word	SyntaxError                      ; $8d ISVAL(
>80c0	d2 8d					.word	SyntaxError                      ; $8e LEFT$(
>80c2	d2 8d					.word	SyntaxError                      ; $8f LEN(
>80c4	d2 8d					.word	SyntaxError                      ; $90 MID$(
>80c6	d2 8d					.word	SyntaxError                      ; $91 NOT
>80c8	d2 8d					.word	SyntaxError                      ; $92 PAGE
>80ca	d2 8d					.word	SyntaxError                      ; $93 RIGHT$(
>80cc	d2 8d					.word	SyntaxError                      ; $94 RND(
>80ce	d2 8d					.word	SyntaxError                      ; $95 SGN(
>80d0	d2 8d					.word	SyntaxError                      ; $96 SPC(
>80d2	d2 8d					.word	SyntaxError                      ; $97 STR$(
>80d4	fb 8b					.word	UnaryTrue                        ; $98 TRUE
>80d6	d2 8d					.word	SyntaxError                      ; $99 VAL(
>80d8	d2 8d					.word	SyntaxError                      ; $9a FOR
>80da	d2 8d					.word	SyntaxError                      ; $9b IF
>80dc	d2 8d					.word	SyntaxError                      ; $9c PROC
>80de	d2 8d					.word	SyntaxError                      ; $9d REPEAT
>80e0	d2 8d					.word	SyntaxError                      ; $9e WHILE
>80e2	d2 8d					.word	SyntaxError                      ; $9f ENDIF
>80e4	d2 8d					.word	SyntaxError                      ; $a0 ENDPROC
>80e6	d2 8d					.word	SyntaxError                      ; $a1 NEXT
>80e8	d2 8d					.word	SyntaxError                      ; $a2 UNTIL
>80ea	d2 8d					.word	SyntaxError                      ; $a3 WEND
>80ec	30 81					.word	CallCommand                      ; $a4 CALL
>80ee	d2 8d					.word	SyntaxError                      ; $a5 CLS
>80f0	d2 8d					.word	SyntaxError                      ; $a6 DATA
>80f2	d2 8d					.word	SyntaxError                      ; $a7 DIM
>80f4	d2 8d					.word	SyntaxError                      ; $a8 GOSUB
>80f6	d2 8d					.word	SyntaxError                      ; $a9 GOTO
>80f8	d2 8d					.word	SyntaxError                      ; $aa LET
>80fa	d2 8d					.word	SyntaxError                      ; $ab PRINT
>80fc	d2 8d					.word	SyntaxError                      ; $ac READ
>80fe	4a 81					.word	RemCommand                       ; $ad REM
>8100	d2 8d					.word	SyntaxError                      ; $ae RETURN
>8102	d2 8d					.word	SyntaxError                      ; $af THEN
>8104	d2 8d					.word	SyntaxError                      ; $b0 TO
.8106					VectorSet1:
>8106	d2 8d					.word	SyntaxError                      ; $80 !0:EOF
>8108	d2 8d					.word	SyntaxError                      ; $81 !1:SH1
>810a	d2 8d					.word	SyntaxError                      ; $82 !2:SH2
>810c	22 81					.word	AssertCommand                    ; $83 ASSERT
>810e	3c 81					.word	ClearCommand                     ; $84 CLEAR
>8110	3d 81					.word	EndCommand                       ; $85 END
>8112	d2 8d					.word	SyntaxError                      ; $86 LIST
>8114	40 81					.word	NewCommand                       ; $87 NEW
>8116	d2 8d					.word	SyntaxError                      ; $88 RESTORE
>8118	57 81					.word	CommandRUN                       ; $89 RUN
>811a	d2 8d					.word	SyntaxError                      ; $8a STOP
.811c					VectorSet2:
>811c	d2 8d					.word	SyntaxError                      ; $80 !0:EOF
>811e	d2 8d					.word	SyntaxError                      ; $81 !1:SH1
>8120	d2 8d					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./commands/assert.asm

.8122					AssertCommand:
.8122	20 4c 86	jsr $864c			jsr 	EvaluateInteger 			; the assert test
.8125	20 02 87	jsr $8702			jsr 	NSMIsZero 					; exit if result is non zero.
.8128	d0 05		bne $812f			bne 	_ACExit
.812a	a9 0a		lda #$0a		lda	#10
.812c	4c 1f 80	jmp $801f		jmp	ErrorHandler
.812f					_ACExit:
.812f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/call.asm

.8130					CallCommand:
.8130	20 61 86	jsr $8661			jsr 	Evaluate16BitInteger
.8133	ad 10 06	lda $0610			lda 	NSMantissa1
.8136	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8139	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.813c					ClearCommand:
.813c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.813d					EndCommand:
.813d	4c 1c 80	jmp $801c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.8140					NewCommand:
.8140	20 0f 87	jsr $870f			jsr 	MemoryNew
.8143	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8146	20 3c 81	jsr $813c			jsr 	ClearCommand 				; clear everything.
.8149	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/rem.asm

.814a					RemCommand:
.814a	b1 30		lda ($30),y			lda 	(codePtr),y
.814c	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.814e	d0 06		bne $8156			bne 	_RMExit
.8150	c8		iny				iny
.8151	98		tya				tya
.8152	38		sec				sec
.8153	71 30		adc ($30),y			adc 	(codePtr),y
.8155	a8		tay				tay
.8156					_RMExit:
.8156	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/run.asm

.8157					CommandRUN:
.8157	20 3c 81	jsr $813c			jsr 	ClearCommand 				; clear variable/stacks/etc.
.815a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.815c	85 30		sta $30				sta 	codePtr
.815e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8160	85 31		sta $31				sta 	codePtr+1
.8162					RUNNewLine:
.8162	b2 30		lda ($30)			lda 	(codePtr)
.8164	f0 25		beq $818b			beq 	CRNoProgram         		; no then END.
.8166	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8168	9a		txs				txs
.8169					RUNCodePointerLine:
.8169	a0 02		ldy #$02			ldy 	#2 							; start of program
.816b					_CRIncMainLoop:
.816b	c8		iny				iny
.816c					_CRMainLoop:
.816c	b1 30		lda ($30),y			lda 	(codePtr),y
.816e	10 10		bpl $8180			bpl 	_CRNotKeyword
.8170	c9 9a		cmp #$9a			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8172	b0 04		bcs $8178			bcs 	_CRIsKeyword
.8174	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8176	b0 0d		bcs $8185			bcs		_CRSyntaxError
.8178					_CRIsKeyword:
.8178	c8		iny				iny 								; consume command
.8179	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.817a	aa		tax				tax 								; put in X for vector jump
.817b	20 88 81	jsr $8188			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.817e	80 ec		bra $816c			bra 	_CRMainLoop 				; and loop round
.8180					_CRNotKeyword:
.8180	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8182	f0 e7		beq $816b			beq 	_CRIncMainLoop
>8184	db						.byte 	$DB 						; causes a break in the emulator
.8185					_CRSyntaxError:
.8185	4c d2 8d	jmp $8dd2			jmp 	SyntaxError
.8188					_CRCallVector0:
.8188	7c a4 80	jmp ($80a4,x)			jmp 	(VectorSet0,x)
.818b					CRNoProgram:
.818b	4c 3d 81	jmp $813d			jmp 	EndCommand
.818e					EOLCommand:
.818e	18		clc				clc
.818f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8191	65 30		adc $30				adc 	codePtr
.8193	85 30		sta $30				sta 	codePtr
.8195	90 02		bcc $8199			bcc 	_CREExit
.8197	e6 31		inc $31				inc 	codePtr+1
.8199					_CREExit:
.8199	80 c7		bra $8162			bra 	RunNewLine
.819b					Shift1Command:
.819b	b1 30		lda ($30),y			lda 	(codePtr),y
.819d	c8		iny				iny
.819e	0a		asl a				asl 	a
.819f	aa		tax				tax
.81a0	7c 06 81	jmp ($8106,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./errors/charcheck.asm

.8be2					CheckRightBracket:
.8be2	b1 30		lda ($30),y			lda 	(codePtr),y
.8be4	c8		iny				iny
.8be5	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8be7	d0 0f		bne $8bf8			bne 	CNAFail
.8be9	60		rts				rts
.8bea					CheckComma:
.8bea	b1 30		lda ($30),y			lda 	(codePtr),y
.8bec	c8		iny				iny
.8bed	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8bef	d0 07		bne $8bf8			bne 	CNAFail
.8bf1	60		rts				rts
.8bf2					CheckNextA:
.8bf2	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8bf4	d0 02		bne $8bf8			bne 	CNAFail
.8bf6	c8		iny				iny 								; skip character
.8bf7	60		rts				rts 								; and exit
.8bf8					CNAFail:
.8bf8	4c d2 8d	jmp $8dd2			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/compare.asm

.8bfb					UnaryTrue:
.8bfb	fa		plx				plx
.8bfc					ReturnTrue:
.8bfc	a9 01		lda #$01			lda 	#1  						; set to 1
.8bfe	20 d4 86	jsr $86d4			jsr 	NSMSetByte
.8c01	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8c03	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c06	60		rts				rts
.8c07					UnaryFalse:
.8c07	fa		plx				plx
.8c08					ReturnFalse:
.8c08	4c d2 86	jmp $86d2			jmp 	NSMSetZero 					; set it all to zero
.8c0b					BinaryCompareEqual:
.8c0b	fa		plx				plx
.8c0c	20 47 8c	jsr $8c47			jsr 	CompareBaseCode
.8c0f	c9 00		cmp #$00			cmp 	#0
.8c11	f0 e9		beq $8bfc			beq 	ReturnTrue
.8c13	80 f3		bra $8c08			bra 	ReturnFalse
.8c15					BinaryCompareLess:
.8c15	fa		plx				plx
.8c16	20 47 8c	jsr $8c47			jsr 	CompareBaseCode
.8c19	c9 ff		cmp #$ff			cmp 	#$FF
.8c1b	f0 df		beq $8bfc			beq 	ReturnTrue
.8c1d	80 e9		bra $8c08			bra 	ReturnFalse
.8c1f					BinaryCompareGreater:
.8c1f	fa		plx				plx
.8c20	20 47 8c	jsr $8c47			jsr 	CompareBaseCode
.8c23	c9 01		cmp #$01			cmp 	#1
.8c25	f0 d5		beq $8bfc			beq 	ReturnTrue
.8c27	80 df		bra $8c08			bra 	ReturnFalse
.8c29					BinaryCompareNotEqual:
.8c29	fa		plx				plx
.8c2a	20 47 8c	jsr $8c47			jsr 	CompareBaseCode
.8c2d	c9 00		cmp #$00			cmp 	#0
.8c2f	d0 cb		bne $8bfc			bne 	ReturnTrue
.8c31	80 d5		bra $8c08			bra 	ReturnFalse
.8c33					BinaryCompareLessEqual:
.8c33	fa		plx				plx
.8c34	20 47 8c	jsr $8c47			jsr 	CompareBaseCode
.8c37	c9 01		cmp #$01			cmp 	#1
.8c39	d0 c1		bne $8bfc			bne 	ReturnTrue
.8c3b	80 cb		bra $8c08			bra 	ReturnFalse
.8c3d					BinaryCompareGreaterEqual:
.8c3d	fa		plx				plx
.8c3e	20 47 8c	jsr $8c47			jsr 	CompareBaseCode
.8c41	c9 ff		cmp #$ff			cmp 	#$FF
.8c43	d0 b7		bne $8bfc			bne 	ReturnTrue
.8c45	80 c1		bra $8c08			bra 	ReturnFalse
.8c47					CompareBaseCode:
.8c47	20 ed 83	jsr $83ed			jsr 	DereferenceTopTwo 			; make both values if references.
.8c4a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8c4d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c50	29 10		and #$10			and 	#NSTString
.8c52	d0 36		bne $8c8a			bne 	_CBCString
.8c54	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8c57	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8c5a	d0 2f		bne $8c8b			bne 	_CBCFloat
.8c5c	20 8c 8c	jsr $8c8c			jsr 	CompareFixMinusZero
.8c5f	e8		inx				inx
.8c60	20 8c 8c	jsr $8c8c			jsr 	CompareFixMinusZero
.8c63	ca		dex				dex
.8c64	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8c67	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8c6a	10 0b		bpl $8c77			bpl 	_CDCSameSign
.8c6c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8c6f	30 16		bmi $8c87			bmi 	_CBCLess 					; return $FF
.8c71					_CBCGreater:
.8c71	a9 01		lda #$01			lda 	#1
.8c73	60		rts				rts
.8c74					_CBCEqual:
.8c74	a9 00		lda #$00			lda 	#0
.8c76	60		rts				rts
.8c77					_CDCSameSign:
.8c77	20 13 82	jsr $8213			jsr 	SubTopTwoStack 				; unsigned subtract
.8c7a	20 02 87	jsr $8702			jsr 	NSMIsZero 					; or the mantissa together
.8c7d	f0 f5		beq $8c74			beq 	_CBCEqual 					; -0 == 0
.8c7f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8c82	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8c85	10 ea		bpl $8c71			bpl 	_CBCGreater
.8c87					_CBCLess:
.8c87	a9 ff		lda #$ff			lda 	#$FF
.8c89	60		rts				rts
.8c8a					_CBCString:
>8c8a	db						.byte 	$DB 						; causes a break in the emulator
.8c8b					_CBCFloat:
>8c8b	db						.byte 	$DB 						; causes a break in the emulator
.8c8c					CompareFixMinusZero:
.8c8c	20 02 87	jsr $8702			jsr 	NSMIsZero
.8c8f	d0 03		bne $8c94			bne 	_CFXMZNotZero
.8c91	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8c94					_CFXMZNotZero:
.8c94	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/divide.asm

.8c95					IntegerDivide:
.8c95	fa		plx				plx
.8c96	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8c99	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c9c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8c9d	0a		asl a				asl 	a
.8c9e	10 05		bpl $8ca5			bpl 	_NotRef
.8ca0	48		pha				pha
.8ca1	20 ed 83	jsr $83ed			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ca4	68		pla				pla
.8ca5					_NotRef:
.8ca5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ca7	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8caa	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8cad	f0 03		beq $8cb2			beq 	_IntegerCode 				; if clear, then we have two integers
.8caf	4c dc 8d	jmp $8ddc			jmp 	TypeError 					; anything else, type mismatch.
.8cb2					_IntegerCode:
.8cb2	20 d4 8c	jsr $8cd4			jsr 	CheckDivideZero 			; do div zero check
.8cb5	20 0b 8d	jsr $8d0b			jsr 	Int32Divide 				; do the division
.8cb8	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8cbb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8cbe	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.8cc1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8cc4	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.8cc7	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8cca	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.8ccd	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8cd0	20 c4 8d	jsr $8dc4			jsr 	CalculateSign 				; calculate result sign
.8cd3	60		rts				rts
.8cd4					CheckDivideZero:
.8cd4	e8		inx				inx
.8cd5	20 02 87	jsr $8702			jsr 	NSMIsZero
.8cd8	f0 02		beq $8cdc			beq 	_CDVError
.8cda	ca		dex				dex
.8cdb	60		rts				rts
.8cdc					_CDVError:
.8cdc	a9 03		lda #$03		lda	#3
.8cde	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8ce1					IntegerModulus:
.8ce1	fa		plx				plx
.8ce2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ce5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ce8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ce9	0a		asl a				asl 	a
.8cea	10 05		bpl $8cf1			bpl 	_NotRef
.8cec	48		pha				pha
.8ced	20 ed 83	jsr $83ed			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8cf0	68		pla				pla
.8cf1					_NotRef:
.8cf1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8cf3	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8cf6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8cf9	f0 03		beq $8cfe			beq 	_IntegerCode 				; if clear, then we have two integers
.8cfb	4c dc 8d	jmp $8ddc			jmp 	TypeError 					; anything else, type mismatch.
.8cfe					_IntegerCode:
.8cfe	20 d4 8c	jsr $8cd4			jsr 	CheckDivideZero 			; do div zero check
.8d01	20 0b 8d	jsr $8d0b			jsr 	Int32Divide 				; do the division
.8d04	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.8d07	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.8d0a	60		rts				rts
.8d0b					Int32Divide:
.8d0b	48		pha				pha 								; save AXY
.8d0c	5a		phy				phy
.8d0d	20 a9 86	jsr $86a9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8d10	20 ce 86	jsr $86ce			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8d13	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8d15					_I32DivideLoop:
.8d15	e8		inx				inx
.8d16	e8		inx				inx
.8d17	20 e7 86	jsr $86e7			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8d1a	ca		dex				dex
.8d1b	ca		dex				dex
.8d1c	20 e8 86	jsr $86e8			jsr 	NSMRotateLeft
.8d1f	20 47 8d	jsr $8d47			jsr 	DivideCheckSubtract 		; check if subtract possible
.8d22	90 03		bcc $8d27			bcc 	_I32DivideNoCarryIn
.8d24	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8d27					_I32DivideNoCarryIn:
.8d27	88		dey				dey 								; loop round till division completed.
.8d28	d0 eb		bne $8d15			bne 	_I32DivideLoop
.8d2a	7a		ply				ply 								; restore AXY and exit
.8d2b	68		pla				pla
.8d2c	60		rts				rts
.8d2d					Int32ShiftDivide:
.8d2d	48		pha				pha 								; save AXY
.8d2e	5a		phy				phy
.8d2f	20 a9 86	jsr $86a9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8d32	20 ce 86	jsr $86ce			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8d35	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8d37					_I32SDLoop:
.8d37	20 47 8d	jsr $8d47			jsr 	DivideCheckSubtract 		; check if subtract possible
.8d3a	20 e8 86	jsr $86e8			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8d3d	e8		inx				inx
.8d3e	20 e8 86	jsr $86e8			jsr 	NSMRotateLeft
.8d41	88		dey				dey 	 							; do 31 times
.8d42	d0 f3		bne $8d37			bne 	_I32SDLoop
.8d44	7a		ply				ply 								; restore AXY and exit
.8d45	68		pla				pla
.8d46	60		rts				rts
.8d47					DivideCheckSubtract:
.8d47	20 13 82	jsr $8213			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8d4a	b0 04		bcs $8d50			bcs 	_DCSExit 					; if carry set, then could do, exit
.8d4c	20 ed 81	jsr $81ed			jsr 	AddTopTwoStack 				; add it back in
.8d4f	18		clc				clc 								; and return False
.8d50					_DCSExit:
.8d50	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/multiply.asm

.8d51					MulInteger:
.8d51	fa		plx				plx
.8d52	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8d55	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d58	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8d59	0a		asl a				asl 	a
.8d5a	10 05		bpl $8d61			bpl 	_NotRef
.8d5c	48		pha				pha
.8d5d	20 ed 83	jsr $83ed			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8d60	68		pla				pla
.8d61					_NotRef:
.8d61	0a		asl a				asl 	a 							; put MSB of type into A:7
.8d62	30 0b		bmi $8d6f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8d64	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8d67	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d6a	f0 06		beq $8d72			beq 	_IntegerCode 				; if clear, then we have two integers
.8d6c	4c e6 8d	jmp $8de6			jmp 	NotDoneError 							; otherwise at least one float.
.8d6f					_StringData:
.8d6f	4c e6 8d	jmp $8de6			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8d72					_IntegerCode:
.8d72	20 7f 8d	jsr $8d7f			jsr 	MultiplyShort
.8d75	c9 00		cmp #$00			cmp 	#0
.8d77	f0 05		beq $8d7e			beq 	_MIExit
.8d79	a9 04		lda #$04		lda	#4
.8d7b	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8d7e					_MIExit:
.8d7e	60		rts				rts
.8d7f					MultiplyShort:
.8d7f	5a		phy				phy 								; save Y
.8d80	20 a9 86	jsr $86a9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8d83	20 ce 86	jsr $86ce			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8d86	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8d88					_I32MLoop:
.8d88	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8d8b	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.8d8e	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.8d91	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.8d94	f0 28		beq $8dbe			beq 	_I32MExit 					; exit if zero
.8d96	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8d99	29 01		and #$01			and 	#1
.8d9b	f0 0e		beq $8dab			beq 	_I32MNoAdd
.8d9d	20 ed 81	jsr $81ed			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8da0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8da3	10 06		bpl $8dab			bpl 	_I32MNoAdd
.8da5					_I32ShiftRight:
.8da5	20 f5 86	jsr $86f5			jsr 	NSMShiftRight 				; shift S[X] right
.8da8	c8		iny				iny 								; increment shift count
.8da9	80 0a		bra $8db5			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8dab					_I32MNoAdd:
.8dab	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8dae	70 f5		bvs $8da5			bvs 	_I32ShiftRight 				; instead.
.8db0	e8		inx				inx
.8db1	20 e7 86	jsr $86e7			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8db4	ca		dex				dex
.8db5					_I32MShiftUpper:
.8db5	e8		inx				inx 								; shift S[X+2] right
.8db6	e8		inx				inx
.8db7	20 f5 86	jsr $86f5			jsr 	NSMShiftRight
.8dba	ca		dex				dex
.8dbb	ca		dex				dex
.8dbc	80 ca		bra $8d88			bra 	_I32MLoop 					; try again.
.8dbe					_I32MExit:
.8dbe	20 c4 8d	jsr $8dc4			jsr 	CalculateSign
.8dc1	98		tya				tya 								; shift in A
.8dc2	7a		ply				ply 								; restore Y and exit
.8dc3	60		rts				rts
.8dc4					CalculateSign:
.8dc4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8dc7	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.8dca	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8dcd	0a		asl a				asl 	a 							; shift bit 7 into carry
.8dce	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.8dd1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/shifts.asm

.81a3					ShiftLeft:
.81a3	38		sec				sec
.81a4	80 01		bra $81a7			bra 	ShiftMain
.81a6					ShiftRight:
.81a6	18		clc				clc
.81a7					ShiftMain:
.81a7	fa		plx				plx 								; restore X
.81a8	08		php				php 								; save direction
.81a9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.81ac	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.81af	0a		asl a				asl 	a 							; shift reference bit into sign bit
.81b0	0a		asl a				asl 	a
.81b1	10 05		bpl $81b8			bpl 	_NotRef
.81b3	48		pha				pha
.81b4	20 ed 83	jsr $83ed			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.81b7	68		pla				pla
.81b8					_NotRef:
.81b8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.81ba	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.81bd	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.81c0	f0 03		beq $81c5			beq 	_IntegerCode 				; if clear, then we have two integers
.81c2	4c dc 8d	jmp $8ddc			jmp 	TypeError 					; anything else, type mismatch.
.81c5					_IntegerCode:
.81c5	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.81c8	29 e0		and #$e0			and 	#$E0
.81ca	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.81cd	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.81d0	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.81d3	d0 13		bne $81e8			bne 	_SMExit0 					; if >= 32 it will always return zero.
.81d5					_SMLoop:
.81d5	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.81d8	30 11		bmi $81eb			bmi 	_SMExit 					; exit if done.
.81da	28		plp				plp 								; restore direcition setting
.81db	08		php				php
.81dc	90 05		bcc $81e3			bcc 	_SMRight
.81de	20 e7 86	jsr $86e7			jsr 	NSMShiftLeft 				; shift left if CS
.81e1	80 f2		bra $81d5			bra 	_SMLoop
.81e3					_SMRight:
.81e3	20 f5 86	jsr $86f5			jsr 	NSMShiftRight 				; shift right if CC
.81e6	80 ed		bra $81d5			bra 	_SMLoop
.81e8					_SMExit0:
.81e8	20 d2 86	jsr $86d2			jsr 	NSMSetZero 					; return zero.
.81eb					_SMExit:
.81eb	28		plp				plp 								; throw direction
.81ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/simple.asm

.81ed					AddTopTwoStack:
.81ed	18		clc				clc
.81ee	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.81f1	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.81f4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.81f7	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.81fa	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.81fd	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8200	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8203	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8206	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8209	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.820c	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.820f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8212	60		rts				rts
.8213					SubTopTwoStack:
.8213	38		sec				sec
.8214	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8217	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.821a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.821d	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8220	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8223	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8226	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8229	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.822c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.822f	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8232	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8235	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8238	60		rts				rts
.8239					AddInteger:
.8239	fa		plx				plx
.823a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.823d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8240	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8241	0a		asl a				asl 	a
.8242	10 05		bpl $8249			bpl 	_NotRef
.8244	48		pha				pha
.8245	20 ed 83	jsr $83ed			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8248	68		pla				pla
.8249					_NotRef:
.8249	0a		asl a				asl 	a 							; put MSB of type into A:7
.824a	30 0b		bmi $8257			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.824c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.824f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8252	f0 06		beq $825a			beq 	_IntegerCode 				; if clear, then we have two integers
.8254	4c e6 8d	jmp $8de6			jmp 	NotDoneError 							; otherwise at least one float.
.8257					_StringData:
.8257	4c e6 8d	jmp $8de6			jmp 	NotDoneError							; at least one string - don't know both are strings.
.825a					_IntegerCode:
.825a					AddCode:
.825a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.825d	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8260	10 8b		bpl $81ed			bpl 	AddTopTwoStack
.8262	20 13 82	jsr $8213			jsr 	SubTopTwoStack 				; do a physical subtraction
.8265	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8268	10 09		bpl $8273			bpl 	_AddExit
.826a	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.826d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8270	20 87 86	jsr $8687			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8273					_AddExit:
.8273	60		rts				rts
.8274					SubInteger:
.8274	fa		plx				plx
.8275	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8278	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.827b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.827c	0a		asl a				asl 	a
.827d	10 05		bpl $8284			bpl 	_NotRef
.827f	48		pha				pha
.8280	20 ed 83	jsr $83ed			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8283	68		pla				pla
.8284					_NotRef:
.8284	0a		asl a				asl 	a 							; put MSB of type into A:7
.8285	30 0b		bmi $8292			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8287	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.828a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.828d	f0 06		beq $8295			beq 	_IntegerCode 				; if clear, then we have two integers
.828f	4c e6 8d	jmp $8de6			jmp 	NotDoneError 							; otherwise at least one float.
.8292					_StringData:
.8292	4c e6 8d	jmp $8de6			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8295					_IntegerCode:
.8295	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8298	49 80		eor #$80			eor 	#$80
.829a	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.829d	80 bb		bra $825a			bra 	AddCode 					; and do the same code as add.
.829f					AndInteger:
.829f	fa		plx				plx
.82a0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82a3	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82a6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82a7	0a		asl a				asl 	a
.82a8	10 05		bpl $82af			bpl 	_NotRef
.82aa	48		pha				pha
.82ab	20 ed 83	jsr $83ed			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82ae	68		pla				pla
.82af					_NotRef:
.82af	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.82b1	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82b4	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82b7	f0 03		beq $82bc			beq 	_IntegerCode 				; if clear, then we have two integers
.82b9	4c dc 8d	jmp $8ddc			jmp 	TypeError 					; anything else, type mismatch.
.82bc					_IntegerCode:
.82bc	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.82bf	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.82c2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82c5	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82c8	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.82cb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82ce	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82d1	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.82d4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.82d7	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.82da	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.82dd	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.82e0	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.82e3	60		rts				rts
.82e4					OraInteger:
.82e4	fa		plx				plx
.82e5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82e8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82eb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82ec	0a		asl a				asl 	a
.82ed	10 05		bpl $82f4			bpl 	_NotRef
.82ef	48		pha				pha
.82f0	20 ed 83	jsr $83ed			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82f3	68		pla				pla
.82f4					_NotRef:
.82f4	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.82f6	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82f9	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82fc	f0 03		beq $8301			beq 	_IntegerCode 				; if clear, then we have two integers
.82fe	4c dc 8d	jmp $8ddc			jmp 	TypeError 					; anything else, type mismatch.
.8301					_IntegerCode:
.8301	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8304	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8307	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.830a	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.830d	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8310	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8313	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8316	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8319	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.831c	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.831f	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8322	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8325	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8328	60		rts				rts
.8329					EorInteger:
.8329	fa		plx				plx
.832a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.832d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8330	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8331	0a		asl a				asl 	a
.8332	10 05		bpl $8339			bpl 	_NotRef
.8334	48		pha				pha
.8335	20 ed 83	jsr $83ed			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8338	68		pla				pla
.8339					_NotRef:
.8339	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.833b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.833e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8341	f0 03		beq $8346			beq 	_IntegerCode 				; if clear, then we have two integers
.8343	4c dc 8d	jmp $8ddc			jmp 	TypeError 					; anything else, type mismatch.
.8346					_IntegerCode:
.8346	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8349	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.834c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.834f	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8352	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8355	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8358	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.835b	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.835e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8361	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8364	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8367	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.836a	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.836d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/expression.asm


;******  Processing file: ./expressions/../generated/precedence.dat

.836e					PrecedenceLevel:
>836e	04					.byte	 4	; $00 <<
>836f	02					.byte	 2	; $01 <=
>8370	02					.byte	 2	; $02 <>
>8371	00					.byte	 0	; $03 !!3
>8372	00					.byte	 0	; $04 ><
>8373	02					.byte	 2	; $05 >=
>8374	04					.byte	 4	; $06 >>
>8375	00					.byte	 0	; $07 !!7
>8376	00					.byte	 0	; $08 !!8
>8377	00					.byte	 0	; $09 !!9
>8378	00					.byte	 0	; $0a !!10
>8379	00					.byte	 0	; $0b !!11
>837a	00					.byte	 0	; $0c !!12
>837b	00					.byte	 0	; $0d !!13
>837c	00					.byte	 0	; $0e !!14
>837d	00					.byte	 0	; $0f !!15
>837e	00					.byte	 0	; $10 @
>837f	00					.byte	 0	; $11 !!17
>8380	00					.byte	 0	; $12 !!18
>8381	00					.byte	 0	; $13 [
>8382	04					.byte	 4	; $14 \
>8383	00					.byte	 0	; $15 ]
>8384	01					.byte	 1	; $16 ^
>8385	00					.byte	 0	; $17 _
>8386	00					.byte	 0	; $18 `
>8387	00					.byte	 0	; $19 !!25
>8388	00					.byte	 0	; $1a !!26
>8389	00					.byte	 0	; $1b {
>838a	01					.byte	 1	; $1c |
>838b	00					.byte	 0	; $1d }
>838c	00					.byte	 0	; $1e ~
>838d	00					.byte	 0	; $1f [7m<7F>[m
>838e	00					.byte	 0	; $20
>838f	05					.byte	 5	; $21 !
>8390	00					.byte	 0	; $22 "
>8391	00					.byte	 0	; $23 #
>8392	05					.byte	 5	; $24 $
>8393	04					.byte	 4	; $25 %
>8394	01					.byte	 1	; $26 &
>8395	00					.byte	 0	; $27 '
>8396	00					.byte	 0	; $28 (
>8397	00					.byte	 0	; $29 )
>8398	04					.byte	 4	; $2a *
>8399	03					.byte	 3	; $2b +
>839a	00					.byte	 0	; $2c ,
>839b	03					.byte	 3	; $2d -
>839c	00					.byte	 0	; $2e .
>839d	04					.byte	 4	; $2f /
>839e	00					.byte	 0	; $30 0
>839f	00					.byte	 0	; $31 1
>83a0	00					.byte	 0	; $32 2
>83a1	00					.byte	 0	; $33 3
>83a2	00					.byte	 0	; $34 4
>83a3	00					.byte	 0	; $35 5
>83a4	00					.byte	 0	; $36 6
>83a5	00					.byte	 0	; $37 7
>83a6	00					.byte	 0	; $38 8
>83a7	00					.byte	 0	; $39 9
>83a8	00					.byte	 0	; $3a :
>83a9	00					.byte	 0	; $3b ;
>83aa	02					.byte	 2	; $3c <
>83ab	02					.byte	 2	; $3d =
>83ac	02					.byte	 2	; $3e >
>83ad	05					.byte	 5	; $3f ?

;******  Return to file: ./expressions/expression.asm

.83ae					EvaluateExpressionAt0:
.83ae	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.83b0					EvaluateExpression:
.83b0	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.83b2					EvaluateExpressionAtPrecedence:
.83b2	48		pha				pha 								; save precedence level
.83b3	20 3a 85	jsr $853a			jsr 	EvaluateTerm 				; evaluate term into level X.
.83b6	68		pla				pla 								; restore precedence level.
.83b7					_EXPRLoop:
.83b7	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.83b9	b1 30		lda ($30),y			lda 	(codePtr),y
.83bb	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.83bd	b0 25		bcs $83e4			bcs 	_EXPRExit
.83bf	da		phx				phx 								; read the operator precedence
.83c0	aa		tax				tax
.83c1	bd 6e 83	lda $836e,x			lda 	PrecedenceLevel,x
.83c4	fa		plx				plx
.83c5	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.83c7	f0 1b		beq $83e4			beq 	_EXPRExit
.83c9	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.83cb	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.83cd	c5 37		cmp $37				cmp 	zTemp0+1
.83cf	b0 13		bcs $83e4			bcs		_EXPRExit 					; if current >= operator exit
.83d1	48		pha				pha 								; save current precedence.
.83d2	b1 30		lda ($30),y			lda 	(codePtr),y
.83d4	c8		iny				iny
.83d5	48		pha				pha
.83d6	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.83d8	e8		inx				inx 								; work out the right hand side.
.83d9	20 b2 83	jsr $83b2			jsr 	EvaluateExpressionAtPrecedence
.83dc	ca		dex				dex
.83dd	68		pla				pla 								; get operator, call the code.
.83de	20 e7 83	jsr $83e7			jsr 	_EXPRCaller
.83e1	68		pla				pla 								; restore precedence level
.83e2	80 d3		bra $83b7			bra 	_EXPRLoop 					; and go round.
.83e4					_EXPRExit:
.83e4	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.83e6	60		rts				rts
.83e7					_EXPRCaller:
.83e7	da		phx				phx 								; save on stack, first thing is to restore it
.83e8	0a		asl a				asl 	a 							; double so can use vectors into X
.83e9	aa		tax				tax
.83ea	7c 24 80	jmp ($8024,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/dereference.asm

.83ed					DereferenceTopTwo:
.83ed	e8		inx				inx
.83ee	20 f2 83	jsr $83f2			jsr 	Dereference 				; deref x+1
.83f1	ca		dex				dex  								; falls through to deref x
.83f2					Dereference:
.83f2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.83f5	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.83f7	f0 57		beq $8450			beq 	_DRFExit 					; not a reference
.83f9	5a		phy				phy
.83fa	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.83fd	85 36		sta $36				sta 	zTemp0
.83ff	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8402	85 37		sta $37				sta 	zTemp0+1
.8404	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8407	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8409	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.840c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.840f	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8411	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8413	f0 0f		beq $8424			beq 	_DRFDereferenceTwo
.8415	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8417	f0 39		beq $8452			beq 	_DRFFull
.8419	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.841c	29 03		and #$03			and 	#3
.841e	f0 32		beq $8452			beq 	_DRFFull 					; the whole word
.8420	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8422	f0 07		beq $842b			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8424					_DRFDereferenceTwo:
.8424	a0 01		ldy #$01			ldy 	#1
.8426	b1 36		lda ($36),y			lda 	(zTemp0),y
.8428	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.842b					_DRFClear23:
.842b	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.842e	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8431	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8434	29 18		and #$18			and 	#NSBTypeMask
.8436	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8439	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.843b	d0 12		bne $844f			bne 	_DRFNotString
.843d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8440	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8443	d0 0a		bne $844f			bne 	_DRFNotString
.8445	a9 51		lda #$51			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8447	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.844a	a9 84		lda #$84			lda 	#_DRFNullString >> 8
.844c	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.844f					_DRFNotString
.844f	7a		ply				ply 								; restore Y and exit
.8450					_DRFExit:
.8450	60		rts				rts
.8451					_DRFNullString:
>8451	00						.byte 	0
.8452					_DRFFull:
.8452	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8454	b1 36		lda ($36),y			lda 	(zTemp0),y
.8456	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8459	c8		iny				iny
.845a	b1 36		lda ($36),y			lda 	(zTemp0),y
.845c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.845f	c8		iny				iny
.8460	b1 36		lda ($36),y			lda 	(zTemp0),y
.8462	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8465	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8468	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.846b	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.846d	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8470	f0 06		beq $8478			beq 	_DRFNoExponent
.8472	c8		iny				iny 								; if not, read the exponent as well.
.8473	b1 36		lda ($36),y			lda 	(zTemp0),y
.8475	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8478					_DRFNoExponent:
.8478	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.847b	10 0d		bpl $848a			bpl 	_DRFExit2 					; if not, then exit.
.847d	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.847f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8482	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8485	09 80		ora #$80			ora 	#NSBIsNegative
.8487	9d 00 06	sta $0600,x			sta 	NSStatus,x
.848a					_DRFExit2:
.848a	7a		ply				ply
.848b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
.848c					EncodeNumberStart:
.848c	38		sec				sec
.848d	80 01		bra $8490			bra 	EncodeNumberContinue+1
.848f					EncodeNumberContinue:
.848f	18		clc				clc
.8490	08		php				php 								; save reset.
.8491	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8493	f0 0b		beq $84a0			beq 	_ENIsOkay
.8495	c9 30		cmp #$30			cmp 	#"0"
.8497	90 04		bcc $849d			bcc 	_ENBadNumber
.8499	c9 3a		cmp #$3a			cmp 	#"9"+1
.849b	90 03		bcc $84a0			bcc 	_ENIsOkay
.849d					_ENBadNumber:
.849d	28		plp				plp 								; throw saved reset
.849e					_ENFail:
.849e	18		clc				clc 								; not allowed
.849f	60		rts				rts
.84a0					_ENIsOkay:
.84a0	28		plp				plp 								; are we restarting
.84a1	90 0c		bcc $84af			bcc 	_ENNoRestart
.84a3					_ENStartEncode:
.84a3	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.84a5	20 d4 86	jsr $86d4			jsr 	NSMSetByte
.84a8	a9 01		lda #$01			lda 	#ESTA_Low
.84aa					_ENExitChange:
.84aa	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.84ad	38		sec				sec
.84ae	60		rts				rts
.84af					_ENNoRestart:
.84af	48		pha				pha 								; save on stack.
.84b0	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.84b3	c9 01		cmp #$01			cmp 	#ESTA_Low
.84b5	f0 05		beq $84bc			beq  	_ESTALowState
.84b7	c9 02		cmp #$02			cmp 	#ESTA_High
.84b9	f0 23		beq $84de			beq 	_ESTAHighState
>84bb	db						.byte 	$DB 						; causes a break in the emulator
.84bc					_ESTALowState:
.84bc	68		pla				pla 								; get value back
.84bd	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.84bf	f0 27		beq $84e8			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.84c1	29 0f		and #$0f			and 	#15 						; make digit
.84c3	85 36		sta $36				sta 	zTemp0 						; save it.
.84c5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.84c8	0a		asl a				asl 	a
.84c9	0a		asl a				asl 	a
.84ca	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.84cd	0a		asl a				asl 	a
.84ce	65 36		adc $36				adc 	zTemp0
.84d0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84d3	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.84d5	90 05		bcc $84dc			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.84d7	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.84d9	8d 05 07	sta $0705			sta 	EncodeState
.84dc					_ESTANoSwitch:
.84dc	38		sec				sec
.84dd	60		rts				rts
.84de					_ESTAHighState:
.84de	68		pla				pla 								; get value back
.84df	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.84e1	f0 05		beq $84e8			beq 	_ESTASwitchFloat
.84e3	20 e9 84	jsr $84e9			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.84e6	38		sec				sec
.84e7	60		rts				rts
.84e8					_ESTASwitchFloat:
>84e8	db						.byte 	$DB 						; causes a break in the emulator
.84e9					ESTAShiftDigitIntoMantissa:
.84e9	29 0f		and #$0f			and 	#15 						; save digit
.84eb	48		pha				pha
.84ec	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.84ef	48		pha				pha
.84f0	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.84f3	48		pha				pha
.84f4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.84f7	48		pha				pha
.84f8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.84fb	48		pha				pha
.84fc	20 e7 86	jsr $86e7			jsr 	NSMShiftLeft 				; x 2
.84ff	20 e7 86	jsr $86e7			jsr 	NSMShiftLeft 				; x 4
.8502	18		clc				clc 								; pop mantissa and add
.8503	68		pla				pla
.8504	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8507	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.850a	68		pla				pla
.850b	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.850e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8511	68		pla				pla
.8512	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8515	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8518	68		pla				pla
.8519	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.851c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.851f	20 e7 86	jsr $86e7			jsr 	NSMShiftLeft 				; x 10
.8522	68		pla				pla 								; add digit
.8523	18		clc				clc
.8524	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8527	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.852a	90 0d		bcc $8539			bcc 	_ESTASDExit
.852c	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.852f	d0 08		bne $8539			bne 	_ESTASDExit
.8531	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8534	d0 03		bne $8539			bne 	_ESTASDExit
.8536	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8539					_ESTASDExit:
.8539	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/term.asm

.853a					EvaluateTerm:
.853a	b1 30		lda ($30),y			lda 	(codePtr),y
.853c	30 18		bmi $8556			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.853e	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8540	b0 6e		bcs $85b0			bcs 	_ETVariable
.8542	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8544	90 6e		bcc $85b4			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8546	c9 3a		cmp #$3a			cmp 	#'9'+1
.8548	b0 6a		bcs $85b4			bcs 	_ETPuncUnary
.854a	20 8c 84	jsr $848c			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.854d					_ETNumber:
.854d	c8		iny				iny 								; keep encoding until we have the numbers
.854e	b1 30		lda ($30),y			lda 	(codePtr),y
.8550	20 8f 84	jsr $848f			jsr 	EncodeNumberContinue
.8553	b0 f8		bcs $854d			bcs 	_ETNumber 					; go back if accepted.
.8555	60		rts				rts
.8556					_ETCheckUnary:
.8556	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8558	f0 40		beq $859a			beq 	_ETString
.855a	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.855c	f0 11		beq $856f			beq 	_ETHexConstant
.855e	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8560	90 0a		bcc $856c			bcc 	_ETSyntaxError
.8562	c9 9a		cmp #$9a			cmp 	#KWC_LAST_UNARY+1
.8564	b0 06		bcs $856c			bcs 	_ETSyntaxError
.8566	da		phx				phx 								; push X on the stack
.8567	0a		asl a				asl 	a 							; put vector x 2 into X
.8568	aa		tax				tax
.8569	7c a4 80	jmp ($80a4,x)			jmp 	(VectorSet0,x) 				; and do it.
.856c					_ETSyntaxError:
.856c	4c d2 8d	jmp $8dd2			jmp 	SyntaxError
.856f					_ETHexConstant:
.856f	c8		iny				iny 								; skip #
.8570	c8		iny				iny 								; skip count
.8571	20 d2 86	jsr $86d2			jsr 	NSMSetZero 					; clear result
.8574					_ETHLoop:
.8574	b1 30		lda ($30),y			lda 	(codePtr),y
.8576	c8		iny				iny 								; and consume
.8577	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8579	f0 1e		beq $8599			beq 	_ETHExit
.857b	48		pha				pha 								; save on stack.
.857c	20 e7 86	jsr $86e7			jsr 	NSMShiftLeft 				; x 2
.857f	20 e7 86	jsr $86e7			jsr 	NSMShiftLeft 				; x 4
.8582	20 e7 86	jsr $86e7			jsr 	NSMShiftLeft 				; x 8
.8585	20 e7 86	jsr $86e7			jsr 	NSMShiftLeft 				; x 16
.8588	68		pla				pla 								; ASCII
.8589	c9 41		cmp #$41			cmp 	#'A'
.858b	90 02		bcc $858f			bcc 	_ETHNotChar
.858d	e9 07		sbc #$07			sbc 	#7
.858f					_ETHNotChar:
.858f	29 0f		and #$0f			and 	#15 						; digit now
.8591	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8594	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8597	80 db		bra $8574			bra 	_ETHLoop 					; go round.
.8599					_ETHExit:
.8599	60		rts				rts
.859a					_ETString:
.859a	c8		iny				iny 								; look at length
.859b	b1 30		lda ($30),y			lda 	(codePtr),y
.859d	48		pha				pha
.859e	c8		iny				iny 								; first character
.859f	20 4b 87	jsr $874b			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.85a2	68		pla				pla 								; restore count and save
.85a3	85 36		sta $36				sta 	zTemp0
.85a5	98		tya				tya 								; add length to Y to skip it.
.85a6	18		clc				clc
.85a7	65 36		adc $36				adc 	zTemp0
.85a9	a8		tay				tay
.85aa	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.85ac	9d 00 06	sta $0600,x			sta 	NSStatus,x
.85af	60		rts				rts
.85b0					_ETVariable:
>85b0	db						.byte 	$DB 						; causes a break in the emulator
.85b1	4c ff ff	jmp $ffff			jmp 	$FFFF
.85b4					_ETPuncUnary:
.85b4	c8		iny				iny 								; consume the unary character
.85b5	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.85b7	f0 31		beq $85ea			beq 	_ETUnaryNegate
.85b9	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.85bb	f0 3d		beq $85fa			beq 	_ETDereference
.85bd	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.85bf	f0 58		beq $8619			beq 	_ETParenthesis
.85c1	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.85c3	f0 43		beq $8608			beq 	_ETStringReference
.85c5	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.85c7	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.85c9	f0 06		beq $85d1			beq 	_ETIndirection
.85cb	e6 36		inc $36				inc 	zTemp0
.85cd	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.85cf	d0 9b		bne $856c			bne 	_ETSyntaxError
.85d1					_ETIndirection:
.85d1	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.85d3	1a		inc a				inc 	a
.85d4	48		pha				pha
.85d5	20 3a 85	jsr $853a			jsr 	EvaluateTerm				; evaluate the term
.85d8	20 f2 83	jsr $83f2			jsr 	Dereference 				; dereference it.
.85db	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.85de	d0 07		bne $85e7			bne 	_ETTypeMismatch
.85e0	68		pla				pla 								; indirection 1-2
.85e1	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.85e3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.85e6	60		rts				rts
.85e7					_ETTypeMismatch:
.85e7	4c dc 8d	jmp $8ddc			jmp 	TypeError
.85ea					_ETUnaryNegate:
.85ea	20 3a 85	jsr $853a			jsr 	EvaluateTerm				; evaluate the term
.85ed	20 f2 83	jsr $83f2			jsr 	Dereference 				; dereference it.
.85f0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.85f3	29 10		and #$10			and 	#NSTString
.85f5	d0 f0		bne $85e7			bne 	_ETTypeMismatch
.85f7	4c 7e 86	jmp $867e			jmp 	NSMNegate  					; just toggles the sign bit.
.85fa					_ETDereference:
.85fa	20 3a 85	jsr $853a			jsr 	EvaluateTerm				; evaluate the term
.85fd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8600	29 20		and #$20			and 	#NSBIsReference
.8602	f0 e3		beq $85e7			beq 	_ETTypeMismatch
.8604	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8607	60		rts				rts
.8608					_ETStringReference:
.8608	20 3a 85	jsr $853a			jsr 	EvaluateTerm				; evaluate the term
.860b	20 f2 83	jsr $83f2			jsr 	Dereference 				; dereference it.
.860e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8611	d0 d4		bne $85e7			bne 	_ETTypeMismatch
.8613	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.8615	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8618	60		rts				rts
.8619					_ETParenthesis:
.8619	20 b0 83	jsr $83b0			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.861c	20 e2 8b	jsr $8be2			jsr 	CheckRightBracket 			; check for )
.861f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/exprhelper.asm

.8620					EvaluateValue:
.8620	48		pha				pha
.8621	20 ae 83	jsr $83ae			jsr		EvaluateExpressionAt0 		; expression
.8624	20 f2 83	jsr $83f2			jsr 	Dereference					; derefernce it
.8627	68		pla				pla
.8628	60		rts				rts
.8629					EvaluateNumber:
.8629	20 20 86	jsr $8620			jsr 	EvaluateValue 				; get a value
.862c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.862f	29 10		and #$10			and 	#NSBIsString
.8631	d0 16		bne $8649			bne 	HelperTypeError
.8633	60		rts				rts
.8634					EvaluateString:
.8634	20 20 86	jsr $8620			jsr 	EvaluateValue 				; get a value
.8637	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.863a	29 10		and #$10			and 	#NSBIsString
.863c	f0 0b		beq $8649			beq 	HelperTypeError
.863e					CopyAddressToTemp0:
.863e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8641	85 36		sta $36				sta 	zTemp0
.8643	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8646	85 37		sta $37				sta 	zTemp0+1
.8648	60		rts				rts
.8649					HelperTypeError:
.8649	4c dc 8d	jmp $8ddc			jmp 	TypeError
.864c					EvaluateInteger:
.864c	20 29 86	jsr $8629			jsr 	EvaluateNumber
.864f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8652	d0 0a		bne $865e			bne 	HelperValueError 			; if not, it's a float.
.8654	60		rts				rts
.8655					EvaluateUnsignedInteger:
.8655	20 4c 86	jsr $864c			jsr 	EvaluateInteger 			; check integer is +ve
.8658	bd 00 06	lda $0600,x			lda 	NSStatus,x
.865b	30 01		bmi $865e			bmi 	HelperValueError
.865d	60		rts				rts
.865e					HelperValueError:
.865e	4c e1 8d	jmp $8de1			jmp 	ArgumentError
.8661					Evaluate16BitInteger:
.8661	20 55 86	jsr $8655			jsr	 	EvaluateUnsignedInteger		; get integer
.8664	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8667	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.866a	d0 f2		bne $865e			bne 	HelperValueError
.866c	60		rts				rts
.866d					Evaluate8BitInteger:
.866d	20 55 86	jsr $8655			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8670	d0 ec		bne $865e			bne 	HelperValueError
.8672	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8675	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8678	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.867b	d0 e1		bne $865e			bne 	HelperValueError
.867d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/utility.asm

.867e					NSMNegate:
.867e	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8681	49 80		eor #$80			eor 	#NSBIsNegative
.8683	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8686	60		rts				rts
.8687					NSMNegateMantissa:
.8687	38		sec				sec
.8688	a9 00		lda #$00			lda 	#0
.868a	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.868d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8690	a9 00		lda #$00			lda 	#0
.8692	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8695	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8698	a9 00		lda #$00			lda 	#0
.869a	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.869d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.86a0	a9 00		lda #$00			lda 	#0
.86a2	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.86a5	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.86a8	60		rts				rts
.86a9					NSMShiftUpTwo:
.86a9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.86ac	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.86af	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.86b2	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.86b5	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.86b8	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.86bb	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.86be	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.86c1	bd 28 06	lda $0628,x			lda 	NSExponent,x
.86c4	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.86c7	bd 00 06	lda $0600,x			lda 	NSStatus,x
.86ca	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.86cd	60		rts				rts
.86ce					NSMSetZeroMantissaOnly:
.86ce	a9 00		lda #$00			lda 	#0
.86d0	80 08		bra $86da			bra 	NSMSetMantissa
.86d2					NSMSetZero:
.86d2	a9 00		lda #$00			lda 	#0
.86d4					NSMSetByte:
.86d4	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.86d7	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.86da					NSMSetMantissa:
.86da	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.86dd	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.86e0	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.86e3	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.86e6	60		rts				rts
.86e7					NSMShiftLeft:
.86e7	18		clc				clc
.86e8					NSMRotateLeft:
.86e8	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.86eb	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.86ee	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.86f1	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.86f4	60		rts				rts
.86f5					NSMShiftRight:
.86f5	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.86f8	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.86fb	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.86fe	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8701	60		rts				rts
.8702					NSMIsZero:
.8702	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8705	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8708	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.870b	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.870e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.8dd2					SyntaxError:
.8dd2	a9 02		lda #$02		lda	#2
.8dd4	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8dd7					RangeError:
.8dd7	a9 04		lda #$04		lda	#4
.8dd9	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8ddc					TypeError:
.8ddc	a9 05		lda #$05		lda	#5
.8dde	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8de1					ArgumentError:
.8de1	a9 07		lda #$07		lda	#7
.8de3	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8de6					NotDoneError:
.8de6	a9 0c		lda #$0c		lda	#12
.8de8	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8deb					ErrorText:
>8deb	42 72 65 61 6b 00			.text	"Break",0
>8df1	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>8df9	72 72 6f 72 00
>8dfe	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>8e06	20 62 79 20 7a 65 72 6f 00
>8e0f	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>8e17	61 6e 67 65 00
>8e1c	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>8e24	6d 61 74 63 68 00
>8e2a	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>8e32	65 6d 6f 72 79 00
>8e38	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>8e40	61 72 67 75 6d 65 6e 74 00
>8e49	53 74 6f 70 00				.text	"Stop",0
>8e4e	53 74 72 69 6e 67 20 74			.text	"String too long",0
>8e56	6f 6f 20 6c 6f 6e 67 00
>8e5e	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>8e66	6e 20 66 61 69 6c 65 64 00
>8e6f	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>8e77	61 74 61 00
>8e7b	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>8e83	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.870f					MemoryNew:
.870f	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8711	85 30		sta $30				sta 	codePtr
.8713	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8715	85 31		sta $31				sta 	codePtr+1
.8717	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.8719	92 30		sta ($30)			sta 	(codePtr)
.871b	60		rts				rts
.871c					MemoryAppend:
.871c	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.871e	85 30		sta $30				sta 	codePtr
.8720	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8722	85 31		sta $31				sta 	codePtr+1
.8724					_MAFindEnd:
.8724	b2 30		lda ($30)			lda 	(codePtr)
.8726	f0 0d		beq $8735			beq 	_MAFoundEnd
.8728	18		clc				clc
.8729	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.872b	65 30		adc $30				adc 	codePtr
.872d	85 30		sta $30				sta 	codePtr
.872f	90 02		bcc $8733			bcc 	_CREExit
.8731	e6 31		inc $31				inc 	codePtr+1
.8733					_CREExit:
.8733	80 ef		bra $8724			bra 	_MAFindEnd
.8735					_MAFoundEnd:
.8735	ac 06 07	ldy $0706			ldy 	tokenOffset 				; bytes to copy
.8738	c0 04		cpy #$04			cpy 	#4 							; blank line
.873a	f0 0e		beq $874a			beq 	_MANoLine
.873c	a9 00		lda #$00			lda 	#0 							; end of program
.873e	91 30		sta ($30),y			sta 	(codePtr),y
.8740					_MACopy:
.8740	88		dey				dey
.8741	b9 06 07	lda $0706,y			lda 	tokenOffset,y
.8744	91 30		sta ($30),y			sta 	(codePtr),y
.8746	c0 00		cpy #$00			cpy 	#0
.8748	d0 f6		bne $8740			bne 	_MACopy
.874a					_MANoLine:
.874a	60		rts				rts
.874b					MemoryInline:
.874b	98		tya				tya 								; put address into stack,x
.874c	18		clc				clc
.874d	65 30		adc $30				adc 	codePtr
.874f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8752	a5 31		lda $31				lda 	codePtr+1
.8754	69 00		adc #$00			adc 	#0
.8756	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8759	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.875c	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.875f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.8760					VariableOpen:
.8760	60		rts				rts
.8761					VariableClose:
.8761	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.8762					BackloadProgram:
.8762	a2 ff		ldx #$ff			ldx 	#$FF
.8764	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8767	ad fa ff	lda $fffa			lda 	$FFFA 						; read first byte
.876a	30 1e		bmi $878a			bmi 	_BPExit
.876c					_BPCopy:
.876c	e8		inx				inx  								; copy byte in
.876d	9d 06 08	sta $0806,x			sta 	lineBuffer,x
.8770	9e 07 08	stz $0807,x			stz 	lineBuffer+1,x
.8773	ad fa ff	lda $fffa			lda 	$FFFA 						; read next byte
.8776	30 0a		bmi $8782			bmi 	_BPEndLine 					; -ve = EOL
.8778	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.877a	d0 02		bne $877e			bne 	_BPNotTab
.877c	a9 20		lda #$20			lda 	#' '
.877e					_BPNotTab:
.877e	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8780	b0 ea		bcs $876c			bcs 	_BPCopy
.8782					_BPEndLine:
.8782	20 5d 89	jsr $895d			jsr 	TokeniseLine 				; tokenise the line.
.8785	20 1c 87	jsr $871c			jsr 	MemoryAppend 				; append to current program
.8788	80 d8		bra $8762			bra 	BackloadProgram
.878a					_BPExit:
.878a	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.878d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.878e					TokeniseSearchTable:
.878e	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8790	85 36		sta $36				sta 	zTemp0
.8792	a0 00		ldy #$00			ldy 	#0
.8794	a9 80		lda #$80			lda 	#$80 						; token #
.8796	85 38		sta $38				sta 	zTemp1
.8798					_TSTLoop:
.8798	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.879a	30 49		bmi $87e5			bmi 	_TSTFail 					; -ve = end of table
.879c	f0 2e		beq $87cc			beq 	_TSTNext 					; zero, check next it's a dummy
.879e	c8		iny				iny 								; get the hash
.879f	b1 36		lda ($36),y			lda 	(zTemp0),y
.87a1	88		dey				dey
.87a2	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.87a5	d0 25		bne $87cc			bne 	_TSTNext
.87a7	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.87aa	38		sec				sec
.87ab	ed 00 07	sbc $0700			sbc 	identStart
.87ae	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.87b0	d0 1a		bne $87cc			bne 	_TSTNext
.87b2	5a		phy				phy 								; save Y , we might fail
.87b3	c8		iny				iny 								; point to text
.87b4	c8		iny				iny
.87b5	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.87b8					_TSTCompareName:
.87b8	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; compare text.
.87bb	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.87bd	d0 0c		bne $87cb			bne 	_TSTNextPullY 				; fail, pullY and do next
.87bf	e8		inx				inx
.87c0	c8		iny				iny
.87c1	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.87c4	d0 f2		bne $87b8			bne 	_TSTCompareName
.87c6	7a		ply				ply 								; throw Y
.87c7	a5 38		lda $38				lda 	zTemp1 						; get token #
.87c9	38		sec				sec 								; return with CS = passed.
.87ca	60		rts				rts
.87cb					_TSTNextPullY:
.87cb	7a		ply				ply 								; restore current, fall through.
.87cc					_TSTNext:
.87cc	e6 38		inc $38				inc 	zTemp1 						; token counter
.87ce	98		tya				tya
.87cf	18		clc				clc
.87d0	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.87d2	1a		inc a				inc 	a 							; +1
.87d3	1a		inc a				inc 	a 							; +2
.87d4	a8		tay				tay
.87d5	10 c1		bpl $8798			bpl 	_TSTLoop 					; if Y < $80 loop back
.87d7	98		tya				tya 								; add Y to zTemp0 and reset Y
.87d8	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.87da	18		clc				clc  								; but have tables > 255 bytes
.87db	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.87dd	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.87df	90 b7		bcc $8798			bcc 	_TSTLoop
.87e1	e6 37		inc $37				inc 	zTemp0+1
.87e3	80 b3		bra $8798			bra 	_TSTLoop
.87e5					_TSTFail:
.87e5	18		clc				clc
.87e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.87e7					KeywordSet0:
>87e7	00 65					.text	0,$65,""               ; $80 !0:EOF
>87e9	00 58					.text	0,$58,""               ; $81 !1:SH1
>87eb	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>87ed	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>87f3	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>87fb	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8801	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8808	04 f4 44 45 43 28			.text	4,$f4,"DEC("           ; $87 DEC(
>880e	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>8815	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $89 GETDATE$(
>881d	45 24 28
>8820	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8a GETTIME$(
>8828	45 24 28
>882b	05 31 48 45 58 24 28			.text	5,$31,"HEX$("          ; $8b HEX$(
>8832	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8c INT(
>8838	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8d ISVAL(
>8840	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8e LEFT$(
>8848	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8f LEN(
>884e	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $90 MID$(
>8855	03 f1 4e 4f 54				.text	3,$f1,"NOT"            ; $91 NOT
>885a	04 1d 50 41 47 45			.text	4,$1d,"PAGE"           ; $92 PAGE
>8860	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $93 RIGHT$(
>8868	28
>8869	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $94 RND(
>886f	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $95 SGN(
>8875	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $96 SPC(
>887b	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $97 STR$(
>8882	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $98 TRUE
>8888	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $99 VAL(
>888e	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9a FOR
>8893	02 8f 49 46				.text	2,$8f,"IF"             ; $9b IF
>8897	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9c PROC
>889d	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9d REPEAT
>88a5	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9e WHILE
>88ac	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9f ENDIF
>88b3	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a0 ENDPROC
>88bb	43
>88bc	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a1 NEXT
>88c2	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a2 UNTIL
>88c9	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a3 WEND
>88cf	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a4 CALL
>88d5	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a5 CLS
>88da	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a6 DATA
>88e0	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a7 DIM
>88e5	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>88ec	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>88f2	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>88f7	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ab PRINT
>88fe	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ac READ
>8904	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ad REM
>8909	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ae RETURN
>8911	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $af THEN
>8917	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>891b	ff					.text	$FF
.891c					KeywordSet1:
>891c	00 65					.text	0,$65,""               ; $80 !0:EOF
>891e	00 58					.text	0,$58,""               ; $81 !1:SH1
>8920	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8922	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>892a	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8931	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8936	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>893c	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8941	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8949	45
>894a	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>894f	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8955	ff					.text	$FF
.8956					KeywordSet2:
>8956	00 65					.text	0,$65,""               ; $80 !0:EOF
>8958	00 58					.text	0,$58,""               ; $81 !1:SH1
>895a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>895c	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.895d					TokeniseLine:
.895d	20 e5 8a	jsr $8ae5			jsr 	FixLineBufferCase 			; fix line case
.8960	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8962	8d 06 07	sta $0706			sta 	tokenOffset
.8965	9c 07 07	stz $0707			stz 	tokenLineNumber
.8968	9c 08 07	stz $0708			stz 	tokenLineNumber+1
.896b	a2 ff		ldx #$ff			ldx 	#$FF
.896d					_TKFindFirst:
.896d	e8		inx				inx
.896e	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8971	f0 79		beq $89ec			beq 	_TKExit
.8973	c9 20		cmp #$20			cmp 	#' '
.8975	90 f6		bcc $896d			bcc 	_TKFindFirst
.8977	c9 30		cmp #$30			cmp 	#'0'
.8979	90 07		bcc $8982			bcc 	_TKNoLineNumber
.897b	c9 3a		cmp #$3a			cmp 	#'9'+1
.897d	b0 03		bcs $8982			bcs 	_TKNoLineNumber
.897f	20 0f 8b	jsr $8b0f			jsr 	TokeniseExtractLineNumber
.8982					_TKNoLineNumber:
.8982					_TKTokeniseLoop:
.8982	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8985	f0 65		beq $89ec			beq 	_TKExit
.8987	e8		inx				inx
.8988	c9 20		cmp #$20			cmp 	#' '
.898a	f0 f6		beq $8982			beq 	_TKTokeniseLoop 			; keep looping if space found.
.898c	ca		dex				dex 								; undo last get, A contains character, X is position.
.898d	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.898f	f0 61		beq $89f2			beq 	_TKTokeniseIdentifier
.8991	c9 41		cmp #$41			cmp 	#'A'
.8993	90 04		bcc $8999			bcc 	_TKTokenisePunctuation
.8995	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8997	90 59		bcc $89f2			bcc 	_TKTokeniseIdentifier
.8999					_TKTokenisePunctuation:
.8999	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.899b	f0 27		beq $89c4			beq 	_TKString
.899d	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.899f	f0 28		beq $89c9			beq 	_TKHexConstant
.89a1	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.89a3	f0 29		beq $89ce			beq 	_TKCheckDouble
.89a5	c9 3e		cmp #$3e			cmp 	#'>'
.89a7	f0 25		beq $89ce			beq 	_TKCheckDouble
.89a9					_TKStandardPunctuation:
.89a9	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get it back.
.89ac	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.89ae	90 0e		bcc $89be			bcc 	_TKNoShift
.89b0	48		pha				pha 								; save
.89b1	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.89b3	85 36		sta $36				sta 	zTemp0
.89b5	68		pla				pla
.89b6	29 20		and #$20			and 	#32 						; bit 5
.89b8	4a		lsr a				lsr 	a 							; shift into bit 3
.89b9	4a		lsr a				lsr 	a
.89ba	05 36		ora $36				ora 	zTemp0
.89bc	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.89be					_TKNoShift:
.89be	20 54 8b	jsr $8b54			jsr 	TokeniseWriteByte 			; write the punctuation character
.89c1	e8		inx				inx 								; consume the character
.89c2	80 be		bra $8982			bra 	_TKTokeniseLoop 			; and loop round again.
.89c4					_TKString:
.89c4	20 74 8a	jsr $8a74			jsr 	TokeniseString
.89c7	80 b9		bra $8982			bra 	_TKTokeniseLoop
.89c9					_TKHexConstant:
.89c9	20 af 8a	jsr $8aaf			jsr 	TokeniseHexConstant
.89cc	80 b4		bra $8982			bra 	_TKTokeniseLoop
.89ce					_TKCheckDouble:
.89ce	bd 07 08	lda $0807,x			lda 	lineBuffer+1,x 				; get next character
.89d1	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.89d3	90 d4		bcc $89a9			bcc 	_TKStandardPunctuation
.89d5	c9 3f		cmp #$3f			cmp 	#'>'+1
.89d7	b0 d0		bcs $89a9			bcs 	_TKStandardPunctuation
.89d9	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.89dc	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.89de	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.89df	7d 07 08	adc $0807,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.89e2	38		sec				sec
.89e3	e9 3c		sbc #$3c			sbc 	#'<'
.89e5	20 54 8b	jsr $8b54			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.89e8	e8		inx				inx 								; consume both
.89e9	e8		inx				inx
.89ea	80 96		bra $8982			bra 	_TKTokeniseLoop
.89ec	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.89ee	20 54 8b	jsr $8b54			jsr 	TokeniseWriteByte
.89f1	60		rts				rts
.89f2					_TKTokeniseIdentifier:
.89f2	8e 00 07	stx $0700			stx 	identStart 					; save start
.89f5	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.89f8					_TKCheckLoop:
.89f8	e8		inx				inx 								; look at next, we know first is identifier.
.89f9	bd 06 08	lda $0806,x			lda  	lineBuffer,x
.89fc	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.89fe	f0 f8		beq $89f8			beq 	_TKCheckLoop
.8a00	c9 30		cmp #$30			cmp	 	#"0"
.8a02	90 0c		bcc $8a10			bcc 	_TKEndIdentifier
.8a04	c9 3a		cmp #$3a			cmp 	#"9"+1
.8a06	90 f0		bcc $89f8			bcc 	_TKCheckLoop
.8a08	c9 41		cmp #$41			cmp	 	#"A"
.8a0a	90 04		bcc $8a10			bcc 	_TKEndIdentifier
.8a0c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8a0e	90 e8		bcc $89f8			bcc 	_TKCheckLoop
.8a10					_TKEndIdentifier:
.8a10	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8a13	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8a15	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8a17	f0 06		beq $8a1f			beq 	_TKHasTypeCharacter
.8a19	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8a1b	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8a1d	d0 07		bne $8a26			bne 	_TKNoTypeCharacter
.8a1f					_TKHasTypeCharacter:
.8a1f	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8a22	e8		inx				inx 								; read next
.8a23	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8a26					_TKNoTypeCharacter:
.8a26	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8a28	d0 09		bne $8a33			bne 	_TKNoArray
.8a2a	e8		inx				inx 								; skip the (
.8a2b	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8a2e	09 04		ora #$04			ora 	#$04
.8a30	8d 04 07	sta $0704			sta 	identTypeByte
.8a33					_TKNoArray:
.8a33	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8a36	20 d0 8a	jsr $8ad0			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8a39	a0 87		ldy #$87			ldy 	#(KeywordSet0) >> 8
.8a3b	a9 e7		lda #$e7			lda 	#(KeywordSet0) & $FF
.8a3d	20 8e 87	jsr $878e			jsr 	TokeniseSearchTable
.8a40	a2 00		ldx #$00			ldx 	#0
.8a42	b0 1f		bcs $8a63			bcs 	_TKFoundToken
.8a44	a0 89		ldy #$89			ldy 	#(KeywordSet1) >> 8
.8a46	a9 1c		lda #$1c			lda 	#(KeywordSet1) & $FF
.8a48	20 8e 87	jsr $878e			jsr 	TokeniseSearchTable
.8a4b	a2 81		ldx #$81			ldx 	#$81
.8a4d	b0 14		bcs $8a63			bcs 	_TKFoundToken
.8a4f	a0 89		ldy #$89			ldy 	#(KeywordSet1) >> 8
.8a51	a9 1c		lda #$1c			lda 	#(KeywordSet1) & $FF
.8a53	20 8e 87	jsr $878e			jsr 	TokeniseSearchTable
.8a56	a2 82		ldx #$82			ldx 	#$82
.8a58	b0 09		bcs $8a63			bcs 	_TKFoundToken
.8a5a	20 60 8b	jsr $8b60			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8a5d	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8a60	4c 82 89	jmp $8982			jmp 	_TKTokeniseLoop 			; and go round again.
.8a63					_TKFoundToken:
.8a63	48		pha				pha 								; save token
.8a64	8a		txa				txa 								; shift in X, is there one ?
.8a65	f0 03		beq $8a6a			beq 	_TKNoTShift
.8a67	20 54 8b	jsr $8b54			jsr 	TokeniseWriteByte 			; if so, write it out
.8a6a					_TKNoTShift:
.8a6a	68		pla				pla 								; restore and write token
.8a6b	20 54 8b	jsr $8b54			jsr 	TokeniseWriteByte
.8a6e	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8a71	4c 82 89	jmp $8982			jmp 	_TKTokeniseLoop 			; and go round again.
.8a74					TokeniseString:
.8a74	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8a76	20 54 8b	jsr $8b54			jsr 	TokeniseWriteByte
.8a79	e8		inx				inx									; start of quoted string.
.8a7a	da		phx				phx 								; push start of string on top
.8a7b	ca		dex				dex
.8a7c					_TSFindEnd:
.8a7c	e8		inx				inx
.8a7d	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character
.8a80	f0 04		beq $8a86			beq 	_TSEndOfString
.8a82	c9 22		cmp #$22			cmp 	#'"'
.8a84	d0 f6		bne $8a7c			bne 	_TSFindEnd
.8a86					_TSEndOfString:
.8a86	7a		ply				ply  								; so now Y is first character, X is character after end.
.8a87	48		pha				pha 								; save terminating character
.8a88	20 90 8a	jsr $8a90			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8a8b	68		pla				pla 								; terminating character
.8a8c	f0 01		beq $8a8f			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8a8e	e8		inx				inx
.8a8f					_TSNotQuote:
.8a8f	60		rts				rts
.8a90					TOWriteBlockXY:
.8a90	86 36		stx $36				stx 	zTemp0 						; write end character
.8a92	98		tya				tya
.8a93	49 ff		eor #$ff			eor 	#$FF
.8a95	38		sec				sec
.8a96	65 36		adc $36				adc 	zTemp0
.8a98	1a		inc a				inc 	a 							; one extra for NULL
.8a99	20 54 8b	jsr $8b54			jsr 	TokeniseWriteByte
.8a9c					_TOBlockLoop:
.8a9c	c4 36		cpy $36				cpy 	zTemp0
.8a9e	f0 09		beq $8aa9			beq 	_TOBlockExit
.8aa0	b9 06 08	lda $0806,y			lda 	lineBuffer,y
.8aa3	20 54 8b	jsr $8b54			jsr 	TokeniseWriteByte
.8aa6	c8		iny				iny
.8aa7	80 f3		bra $8a9c			bra 	_TOBlockLoop
.8aa9					_TOBlockExit:
.8aa9	a9 00		lda #$00			lda 	#0
.8aab	20 54 8b	jsr $8b54			jsr 	TokeniseWriteByte
.8aae	60		rts				rts
.8aaf					TokeniseHexConstant:
.8aaf	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8ab1	20 54 8b	jsr $8b54			jsr 	TokeniseWriteByte
.8ab4	e8		inx				inx									; start of quoted string.
.8ab5	da		phx				phx 								; push start of constant on top
.8ab6	ca		dex				dex
.8ab7					_THFindLoop:
.8ab7	e8		inx				inx
.8ab8	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8abb	c9 30		cmp #$30			cmp 	#"0"
.8abd	90 0c		bcc $8acb			bcc 	_THFoundEnd
.8abf	c9 3a		cmp #$3a			cmp 	#"9"+1
.8ac1	90 f4		bcc $8ab7			bcc 	_THFindLoop
.8ac3	c9 41		cmp #$41			cmp 	#"A"
.8ac5	90 04		bcc $8acb			bcc 	_THFoundEnd
.8ac7	c9 47		cmp #$47			cmp 	#"F"+1
.8ac9	90 ec		bcc $8ab7			bcc 	_THFindLoop
.8acb					_THFoundEnd:
.8acb	7a		ply				ply 								; restore start
.8acc	20 90 8a	jsr $8a90			jsr 	TOWriteBlockXY 				; output the block
.8acf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.8ad0					TokeniseCalculateHash:
.8ad0	da		phx				phx
.8ad1	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8ad4	a9 00		lda #$00			lda 	#0
.8ad6					_TCHLoop:
.8ad6	18		clc				clc
.8ad7	7d 06 08	adc $0806,x			adc 	lineBuffer,x
.8ada	e8		inx				inx
.8adb	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8ade	d0 f6		bne $8ad6			bne 	_TCHLoop
.8ae0	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8ae3	fa		plx				plx
.8ae4	60		rts				rts
.8ae5					FixLineBufferCase:
.8ae5	a2 00		ldx #$00			ldx 	#0
.8ae7					_FLBCLoop:
.8ae7	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next character
.8aea	f0 22		beq $8b0e			beq 	_FLBCExit 					; end of string.
.8aec	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8aee	f0 11		beq $8b01			beq 	_FLBCInQuotes
.8af0	e8		inx				inx
.8af1	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8af3	90 f2		bcc $8ae7			bcc 	_FLBCLoop
.8af5	c9 7b		cmp #$7b			cmp 	#'z'+1
.8af7	b0 ee		bcs $8ae7			bcs 	_FLBCLoop
.8af9	38		sec				sec 								; make U/C
.8afa	e9 20		sbc #$20			sbc 	#32
.8afc	9d 05 08	sta $0805,x			sta	 	lineBuffer-1,x 				; write back
.8aff	80 e6		bra $8ae7			bra 	_FLBCLoop
.8b01					_FLBCInQuotes:
.8b01	e8		inx				inx 								; advance
.8b02	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next
.8b05	f0 07		beq $8b0e			beq 	_FLBCExit 					; exit on EOS
.8b07	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8b09	d0 f6		bne $8b01			bne 	_FLBCInQuotes
.8b0b	e8		inx				inx 								; skip over it
.8b0c	80 d9		bra $8ae7			bra 	_FLBCLoop
.8b0e					_FLBCExit:
.8b0e	60		rts				rts
.8b0f					TokeniseExtractLineNumber:
.8b0f	ad 08 07	lda $0708			lda 	tokenLineNumber+1 			; push current value on stack
.8b12	48		pha				pha
.8b13	ad 07 07	lda $0707			lda 	tokenLineNumber
.8b16	48		pha				pha
.8b17	20 4d 8b	jsr $8b4d			jsr 	_TELNTimes2 				; line # x 4
.8b1a	20 4d 8b	jsr $8b4d			jsr 	_TELNTimes2 				; line # x 2
.8b1d	18		clc				clc 								; add stacked value
.8b1e	68		pla				pla
.8b1f	6d 07 07	adc $0707			adc 	tokenLineNumber
.8b22	8d 07 07	sta $0707			sta 	tokenLineNumber
.8b25	68		pla				pla
.8b26	6d 08 07	adc $0708			adc 	tokenLineNumber+1
.8b29	8d 08 07	sta $0708			sta 	tokenLineNumber+1 			; line # x 5
.8b2c	20 4d 8b	jsr $8b4d			jsr 	_TELNTimes2 				; line # x 10
.8b2f	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get and consume character
.8b32	e8		inx				inx
.8b33	29 0f		and #$0f			and 	#15 						; add to line #
.8b35	18		clc				clc
.8b36	6d 07 07	adc $0707			adc 	tokenLineNumber
.8b39	8d 07 07	sta $0707			sta 	tokenLineNumber
.8b3c	90 03		bcc $8b41			bcc 	_TLENNoCarry
.8b3e	ee 08 07	inc $0708			inc 	tokenLineNumber+1
.8b41					_TLENNoCarry:
.8b41	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; more digits ?
.8b44	c9 30		cmp #$30			cmp 	#'0'
.8b46	90 04		bcc $8b4c			bcc 	_TLENExit
.8b48	c9 3a		cmp #$3a			cmp 	#'9'+1
.8b4a	90 c3		bcc $8b0f			bcc 	TokeniseExtractLineNumber
.8b4c					_TLENExit:
.8b4c	60		rts				rts
.8b4d					_TELNTimes2:
.8b4d	0e 07 07	asl $0707			asl 	tokenLineNumber
.8b50	2e 08 07	rol $0708			rol 	tokenLineNumber+1
.8b53	60		rts				rts
.8b54					TokeniseWriteByte:
.8b54	da		phx				phx
.8b55	ae 06 07	ldx $0706			ldx 	tokenOffset 				; next slot to write to
.8b58	9d 06 07	sta $0706,x			sta 	tokenOffset,x 				; write byte out
.8b5b	ee 06 07	inc $0706			inc 	tokenOffset 				; advance slot.
.8b5e	fa		plx				plx
.8b5f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.8b60					CheckCreateVariableRecord:
.8b60	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8b62	85 36		sta $36				sta 	0+zTemp0
.8b64	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8b66	85 37		sta $37				sta 	1+zTemp0
.8b68	20 60 87	jsr $8760			jsr 	VariableOpen 				; make variable space available
.8b6b					_CCVSearch:
.8b6b	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8b6d	f0 2c		beq $8b9b			beq 	_CCVFail
.8b6f	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8b71	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8b73	cd 03 07	cmp $0703			cmp 	identHash
.8b76	d0 16		bne $8b8e			bne 	_CCVNext
.8b78	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8b7a	ae 00 07	ldx $0700			ldx 	identStart
.8b7d					_CCVCompare:
.8b7d	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8b80	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8b82	e8		inx				inx 								; advance pointers
.8b83	c8		iny				iny
.8b84	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8b85	d0 07		bne $8b8e			bne 	_CCVNext  					; didn't match go to next.
.8b87	90 f4		bcc $8b7d			bcc 	_CCVCompare 				; not finished yet.
.8b89	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8b8c	f0 41		beq $8bcf			beq 	_CCVFound 					; yes, we were successful
.8b8e					_CCVNext:
.8b8e	18		clc				clc
.8b8f	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8b91	65 36		adc $36				adc 	zTemp0
.8b93	85 36		sta $36				sta 	zTemp0
.8b95	90 d4		bcc $8b6b			bcc 	_CCVSearch
.8b97	e6 37		inc $37				inc 	zTemp0+1
.8b99	80 d0		bra $8b6b			bra 	_CCVSearch
.8b9b					_CCVFail:
.8b9b	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8b9d	ad 03 07	lda $0703			lda 	identHash
.8ba0	91 36		sta ($36),y			sta 	(zTemp0),y
.8ba2	c8		iny				iny 								; offset 2 is the type byte
.8ba3	ad 04 07	lda $0704			lda 	identTypeByte
.8ba6	91 36		sta ($36),y			sta 	(zTemp0),y
.8ba8	c8		iny				iny
.8ba9					_CCVData:
.8ba9	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8bab	91 36		sta ($36),y			sta 	(zTemp0),y
.8bad	c8		iny				iny
.8bae	c0 08		cpy #$08			cpy 	#8
.8bb0	90 f7		bcc $8ba9			bcc 	_CCVData
.8bb2	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8bb5					_CCVCopyName:
.8bb5	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8bb8	91 36		sta ($36),y			sta 	(zTemp0),y
.8bba	e8		inx				inx
.8bbb	c8		iny				iny
.8bbc	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8bbf	d0 f4		bne $8bb5			bne 	_CCVCopyName
.8bc1	98		tya				tya 								; patch offset
.8bc2	92 36		sta ($36)			sta 	(zTemp0)
.8bc4	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8bc6	91 36		sta ($36),y			sta 	(zTemp0),y
.8bc8	88		dey				dey
.8bc9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8bcb	09 80		ora #$80			ora 	#$80
.8bcd	91 36		sta ($36),y			sta 	(zTemp0),y
.8bcf					_CCVFound:
.8bcf	20 61 87	jsr $8761			jsr 	VariableClose 				; map out variables, perhaps.
.8bd2	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8bd4	38		sec				sec
.8bd5	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8bd7	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8bd9	20 54 8b	jsr $8b54			jsr 	TokeniseWriteByte
.8bdc	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8bde	20 54 8b	jsr $8b54			jsr 	TokeniseWriteByte
.8be1	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
