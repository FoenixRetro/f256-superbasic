
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Oct  6 09:03:46 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					breakCheck:
>0713							.fill 	1
.0714					decimalPlaces:
>0714							.fill 	1
.0715					dbOffset:
>0715							.fill 	1
.0716					lastParameter:
>0716							.fill 	1
.0717					dataPointer:
>0717							.fill 	5
.071c					inDataStatement:
>071c							.fill 	1
.071d					tbOffset:
>071d							.fill 	1
.071e					AssemblerAddress:
>071e							.fill 	2
.0720					AssemblerControl:
>0720							.fill 	1
.0721					ParamStart:
>0721							.fill 	2
.0723					IsGroup1:
>0723							.fill 	1
.0724					BaseOpcode:
>0724							.fill 	1
.0725					ModeMask:
>0725							.fill 	1
.0726					tokenOffset:
>0726							.fill 	1
.0727					tokenLineNumber:
>0727							.fill 	2
.0729					tokenBuffer:
>0729							.fill 	253
.0826					lineBuffer:
>0826							.fill 	MaxLineSize+1
.0877					numberBuffer:
>0877							.fill 	34
.0899					decimalBuffer:
>0899							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 13		lda #$13			lda 	#(Prompt & $FF)
.8007	20 59 8d	jsr $8d59			jsr 	PrintStringXA
.800a	20 c2 88	jsr $88c2			jsr 	NewCommand 					; erase current program
.800d	20 40 99	jsr $9940			jsr 	BackloadProgram
.8010	4c 69 84	jmp $8469			jmp 	WarmStart
>8013	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>801b	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>802b	41 53 49 43 20 2a 2a 2a 0d 0d
>8035	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>803d	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>804d	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8053	42 75 69 6c 74 20 54 68			.text "Built Thursday 06-Oct-2022. Build 228."
>805b	75 72 73 64 61 79 20 30 36 2d 4f 63 74 2d 32 30
>806b	32 32 2e 20 42 75 69 6c 64 20 32 32 38 2e

;******  Return to file: ./common/aa.system/00start.asm

>8079	0d 0d 00					.byte 	13,13,0
>807c							.align 2

;******  Processing file: ./common/aa.system/../generated/vectors.dat

.807c					VectorSetPunc:
>807c	aa 8e					.word	ShiftLeft                        ; $00 <<
>807e	a4 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8080	9a 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8082	cd a5					.word	SyntaxError                      ; $03 !!3
>8084	cd a5					.word	SyntaxError                      ; $04 ><
>8086	ae 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8088	ad 8e					.word	ShiftRight                       ; $06 >>
>808a	cd a5					.word	SyntaxError                      ; $07 !!7
>808c	cd a5					.word	SyntaxError                      ; $08 !!8
>808e	cd a5					.word	SyntaxError                      ; $09 !!9
>8090	cd a5					.word	SyntaxError                      ; $0a !!10
>8092	cd a5					.word	SyntaxError                      ; $0b !!11
>8094	cd a5					.word	SyntaxError                      ; $0c !!12
>8096	cd a5					.word	SyntaxError                      ; $0d !!13
>8098	cd a5					.word	SyntaxError                      ; $0e !!14
>809a	cd a5					.word	SyntaxError                      ; $0f !!15
>809c	cd a5					.word	SyntaxError                      ; $10 @
>809e	cd a5					.word	SyntaxError                      ; $11 !!17
>80a0	cd a5					.word	SyntaxError                      ; $12 !!18
>80a2	cd a5					.word	SyntaxError                      ; $13 [
>80a4	04 a0					.word	IntegerDivide                    ; $14 \
>80a6	cd a5					.word	SyntaxError                      ; $15 ]
>80a8	33 90					.word	EorInteger                       ; $16 ^
>80aa	cd a5					.word	SyntaxError                      ; $17 _
>80ac	cd a5					.word	SyntaxError                      ; $18 `
>80ae	cd a5					.word	SyntaxError                      ; $19 !!25
>80b0	cd a5					.word	SyntaxError                      ; $1a !!26
>80b2	cd a5					.word	SyntaxError                      ; $1b {
>80b4	ed 8f					.word	OraInteger                       ; $1c |
>80b6	cd a5					.word	SyntaxError                      ; $1d }
>80b8	cd a5					.word	SyntaxError                      ; $1e ~
>80ba	cd a5					.word	SyntaxError                      ; $1f [7m<7F>[m
>80bc	cd a5					.word	SyntaxError                      ; $20
>80be	79 90					.word	WordIndirect                     ; $21 !
>80c0	cd a5					.word	SyntaxError                      ; $22 "
>80c2	cd a5					.word	SyntaxError                      ; $23 #
>80c4	cd a5					.word	SyntaxError                      ; $24 $
>80c6	51 a0					.word	IntegerModulus                   ; $25 %
>80c8	a7 8f					.word	AndInteger                       ; $26 &
>80ca	cd a5					.word	SyntaxError                      ; $27 '
>80cc	cd a5					.word	SyntaxError                      ; $28 (
>80ce	cd a5					.word	SyntaxError                      ; $29 )
>80d0	c6 a0					.word	MulInteger                       ; $2a *
>80d2	41 8f					.word	AddInteger                       ; $2b +
>80d4	cd a5					.word	SyntaxError                      ; $2c ,
>80d6	7c 8f					.word	SubInteger                       ; $2d -
>80d8	cd a5					.word	SyntaxError                      ; $2e .
>80da	5d a2					.word	FDivideCommand                   ; $2f /
>80dc	cd a5					.word	SyntaxError                      ; $30 0
>80de	cd a5					.word	SyntaxError                      ; $31 1
>80e0	cd a5					.word	SyntaxError                      ; $32 2
>80e2	cd a5					.word	SyntaxError                      ; $33 3
>80e4	cd a5					.word	SyntaxError                      ; $34 4
>80e6	cd a5					.word	SyntaxError                      ; $35 5
>80e8	cd a5					.word	SyntaxError                      ; $36 6
>80ea	cd a5					.word	SyntaxError                      ; $37 7
>80ec	cd a5					.word	SyntaxError                      ; $38 8
>80ee	cd a5					.word	SyntaxError                      ; $39 9
>80f0	cd a5					.word	SyntaxError                      ; $3a :
>80f2	cd a5					.word	SyntaxError                      ; $3b ;
>80f4	86 8d					.word	BinaryCompareLess                ; $3c <
>80f6	7c 8d					.word	BinaryCompareEqual               ; $3d =
>80f8	90 8d					.word	BinaryCompareGreater             ; $3e >
>80fa	a0 90					.word	ByteIndirect                     ; $3f ?
.80fc					VectorSet0:
>80fc	a9 8a					.word	EOLCommand                       ; $80 !0:EOF
>80fe	b6 8a					.word	Shift1Command                    ; $81 !1:SH1
>8100	be 8a					.word	Shift2Command                    ; $82 !2:SH2
>8102	a3 a3					.word	AbsUnary                         ; $83 ABS(
>8104	6a 95					.word	AllocUnary                       ; $84 ALLOC(
>8106	b3 a3					.word	AscUnary                         ; $85 ASC(
>8108	52 96					.word	ChrUnary                         ; $86 CHR$(
>810a	78 8d					.word	UnaryFalse                       ; $87 FALSE
>810c	c0 a3					.word	FracUnary                        ; $88 FRAC(
>810e	d6 a3					.word	IntUnary                         ; $89 INT(
>8110	2c a4					.word	IsValUnary                       ; $8a ISVAL(
>8112	2c 97					.word	Unary_Left                       ; $8b LEFT$(
>8114	e8 a3					.word	LenUnary                         ; $8c LEN(
>8116	56 97					.word	Unary_Mid                        ; $8d MID$(
>8118	c2 95					.word	Unary_Not                        ; $8e NOT(
>811a	cd a5					.word	SyntaxError                      ; $8f RANDOM(
>811c	3c 97					.word	Unary_Right                      ; $90 RIGHT$(
>811e	d8 95					.word	Unary_Rnd                        ; $91 RND(
>8120	02 a4					.word	SgnUnary                         ; $92 SGN(
>8122	64 96					.word	SpcUnary                         ; $93 SPC(
>8124	7f 96					.word	Unary_Str                        ; $94 STR$(
>8126	6c 8d					.word	UnaryTrue                        ; $95 TRUE
>8128	22 a4					.word	ValUnary                         ; $96 VAL(
>812a	f3 85					.word	ForCommand                       ; $97 FOR
>812c	40 87					.word	IfCommand                        ; $98 IF
>812e	c6 8a					.word	Unused1                          ; $99 PROC
>8130	e9 89					.word	Command_REPEAT                   ; $9a REPEAT
>8132	d1 8c					.word	Command_WHILE                    ; $9b WHILE
>8134	69 87					.word	EndIf                            ; $9c ENDIF
>8136	dd 9f					.word	Command_ENDPROC                  ; $9d ENDPROC
>8138	ad 86					.word	NextCommand                      ; $9e NEXT
>813a	c6 8a					.word	Unused4                          ; $9f THEN
>813c	f2 89					.word	Command_UNTIL                    ; $a0 UNTIL
>813e	f2 8c					.word	Command_WEND                     ; $a1 WEND
>8140	c8 84					.word	CallCommand                      ; $a2 CALL
>8142	cd a5					.word	SyntaxError                      ; $a3 CLS
>8144	2b 85					.word	Command_Data                     ; $a4 DATA
>8146	33 85					.word	DimCommand                       ; $a5 DIM
>8148	c6 8a					.word	Unused3                          ; $a6 DOWNTO
>814a	62 87					.word	ElseCode                         ; $a7 ELSE
>814c	06 87					.word	Command_GOSUB                    ; $a8 GOSUB
>814e	24 87					.word	GotoCommand                      ; $a9 GOTO
>8150	6a 87					.word	LetCommand                       ; $aa LET
>8152	3e 88					.word	Command_LOCAL                    ; $ab LOCAL
>8154	cc 88					.word	Command_Print                    ; $ac PRINT
>8156	83 89					.word	Command_Read                     ; $ad READ
>8158	dc 89					.word	RemCommand                       ; $ae REM
>815a	16 87					.word	Command_RETURN                   ; $af RETURN
>815c	c6 8a					.word	Unused2                          ; $b0 TO
.815e					VectorSet1:
>815e	cd a5					.word	SyntaxError                      ; $80 !0:EOF
>8160	cd a5					.word	SyntaxError                      ; $81 !1:SH1
>8162	cd a5					.word	SyntaxError                      ; $82 !2:SH2
>8164	99 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8166	b8 84					.word	AssertCommand                    ; $84 ASSERT
>8168	d6 84					.word	ClearCommand                     ; $85 CLEAR
>816a	f0 85					.word	EndCommand                       ; $86 END
>816c	a3 87					.word	Command_List                     ; $87 LIST
>816e	c2 88					.word	NewCommand                       ; $88 NEW
>8170	0b 8a					.word	Command_Restore                  ; $89 RESTORE
>8172	3d 8a					.word	CommandRUN                       ; $8a RUN
>8174	c9 8a					.word	StopCommand                      ; $8b STOP
.8176					VectorSet2:
>8176	cd a5					.word	SyntaxError                      ; $80 !0:EOF
>8178	cd a5					.word	SyntaxError                      ; $81 !1:SH1
>817a	cd a5					.word	SyntaxError                      ; $82 !2:SH2
>817c	90 a4					.word	Assemble_adc                     ; $83 ADC
>817e	88 a4					.word	Assemble_and                     ; $84 AND
>8180	a4 a4					.word	Assemble_asl                     ; $85 ASL
>8182	0e a5					.word	Assemble_bcc                     ; $86 BCC
>8184	12 a5					.word	Assemble_bcs                     ; $87 BCS
>8186	1a a5					.word	Assemble_beq                     ; $88 BEQ
>8188	d1 a4					.word	Assemble_bit                     ; $89 BIT
>818a	02 a5					.word	Assemble_bmi                     ; $8a BMI
>818c	16 a5					.word	Assemble_bne                     ; $8b BNE
>818e	fe a4					.word	Assemble_bpl                     ; $8c BPL
>8190	1e a5					.word	Assemble_bra                     ; $8d BRA
>8192	22 a5					.word	Assemble_brk                     ; $8e BRK
>8194	06 a5					.word	Assemble_bvc                     ; $8f BVC
>8196	0a a5					.word	Assemble_bvs                     ; $90 BVS
>8198	2a a5					.word	Assemble_clc                     ; $91 CLC
>819a	7e a5					.word	Assemble_cld                     ; $92 CLD
>819c	3e a5					.word	Assemble_cli                     ; $93 CLI
>819e	6e a5					.word	Assemble_clv                     ; $94 CLV
>81a0	9c a4					.word	Assemble_cmp                     ; $95 CMP
>81a2	e5 a4					.word	Assemble_cpx                     ; $96 CPX
>81a4	e0 a4					.word	Assemble_cpy                     ; $97 CPY
>81a6	c2 a4					.word	Assemble_dec                     ; $98 DEC
>81a8	7a a5					.word	Assemble_dex                     ; $99 DEX
>81aa	56 a5					.word	Assemble_dey                     ; $9a DEY
>81ac	8c a4					.word	Assemble_eor                     ; $9b EOR
>81ae	c7 a4					.word	Assemble_inc                     ; $9c INC
>81b0	86 a5					.word	Assemble_inx                     ; $9d INX
>81b2	76 a5					.word	Assemble_iny                     ; $9e INY
>81b4	f9 a4					.word	Assemble_jmp                     ; $9f JMP
>81b6	f4 a4					.word	Assemble_jsr                     ; $a0 JSR
>81b8	98 a4					.word	Assemble_lda                     ; $a1 LDA
>81ba	bd a4					.word	Assemble_ldx                     ; $a2 LDX
>81bc	db a4					.word	Assemble_ldy                     ; $a3 LDY
>81be	ae a4					.word	Assemble_lsr                     ; $a4 LSR
>81c0	8a a5					.word	Assemble_nop                     ; $a5 NOP
>81c2	84 a4					.word	Assemble_ora                     ; $a6 ORA
>81c4	3a a5					.word	Assemble_pha                     ; $a7 PHA
>81c6	26 a5					.word	Assemble_php                     ; $a8 PHP
>81c8	82 a5					.word	Assemble_phx                     ; $a9 PHX
>81ca	42 a5					.word	Assemble_phy                     ; $aa PHY
>81cc	4a a5					.word	Assemble_pla                     ; $ab PLA
>81ce	2e a5					.word	Assemble_plp                     ; $ac PLP
>81d0	92 a5					.word	Assemble_plx                     ; $ad PLX
>81d2	52 a5					.word	Assemble_ply                     ; $ae PLY
>81d4	a9 a4					.word	Assemble_rol                     ; $af ROL
>81d6	b3 a4					.word	Assemble_ror                     ; $b0 ROR
>81d8	36 a5					.word	Assemble_rti                     ; $b1 RTI
>81da	46 a5					.word	Assemble_rts                     ; $b2 RTS
>81dc	a0 a4					.word	Assemble_sbc                     ; $b3 SBC
>81de	32 a5					.word	Assemble_sec                     ; $b4 SEC
>81e0	8e a5					.word	Assemble_sed                     ; $b5 SED
>81e2	4e a5					.word	Assemble_sei                     ; $b6 SEI
>81e4	94 a4					.word	Assemble_sta                     ; $b7 STA
>81e6	b8 a4					.word	Assemble_stx                     ; $b8 STX
>81e8	d6 a4					.word	Assemble_sty                     ; $b9 STY
>81ea	cc a4					.word	Assemble_stz                     ; $ba STZ
>81ec	6a a5					.word	Assemble_tax                     ; $bb TAX
>81ee	66 a5					.word	Assemble_tay                     ; $bc TAY
>81f0	ef a4					.word	Assemble_trb                     ; $bd TRB
>81f2	ea a4					.word	Assemble_tsb                     ; $be TSB
>81f4	72 a5					.word	Assemble_tsx                     ; $bf TSX
>81f6	5a a5					.word	Assemble_txa                     ; $c0 TXA
>81f8	62 a5					.word	Assemble_txs                     ; $c1 TXS
>81fa	5e a5					.word	Assemble_tya                     ; $c2 TYA

;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.81fc					AssembleGroup1:
.81fc	a9 ff		lda #$ff			lda 	#$FF
.81fe	8d 25 07	sta $0725			sta 	ModeMask 					; initialise the mode mask - all for all
.8201	80 02		bra $8205			bra 	AsmGroup12
.8203					AssembleGroup2:
.8203	a5 00		lda $00				lda 	$00
.8205					AsmGroup12:
.8205	8d 23 07	sta $0723			sta 	IsGroup1 					; save the 'group 1' flag
.8208	68		pla				pla 								; pop the return address to access the information following.
.8209	fa		plx				plx
.820a	20 93 82	jsr $8293			jsr 	AccessParameters 			; get opcode and save as base
.820d	8d 24 07	sta $0724			sta 	BaseOpcode
.8210	ad 23 07	lda $0723			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8213	d0 08		bne $821d			bne 	_AG12HaveMask
.8215	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8217	20 9b 82	jsr $829b			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.821a	8d 25 07	sta $0725			sta 	ModeMask
.821d					_AG12HaveMask:
.821d	20 d6 83	jsr $83d6			jsr 	TypeAndCalculateOperand 	; get zero page type
.8220	da		phx				phx 								; save found address mode
.8221	20 ff 82	jsr $82ff			jsr 	AssembleModeX
.8224	fa		plx				plx  								; restore address mode
.8225	b0 0b		bcs $8232			bcs 	_AG12Exit
.8227	20 33 82	jsr $8233			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.822a	20 ff 82	jsr $82ff			jsr 	AssembleModeX
.822d	b0 03		bcs $8232			bcs 	_AG12Exit
.822f	4c cd a5	jmp $a5cd			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8232					_AG12Exit:
.8232	60		rts				rts
.8233					PromoteToAbsolute:
.8233	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8235	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8237	f0 19		beq $8252			beq 	_PTADo
.8239	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.823b	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.823d	f0 13		beq $8252			beq 	_PTADo
.823f	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8241	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8243	f0 0d		beq $8252			beq 	_PTADo
.8245	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8247	e0 d1		cpx #$d1			cpx 	#AM_IND
.8249	f0 07		beq $8252			beq 	_PTADo
.824b	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.824d	e0 c0		cpx #$c0			cpx 	#AM_INDX
.824f	f0 01		beq $8252			beq 	_PTADo
.8251	60		rts				rts
.8252					_PTADo:
.8252	aa		tax				tax
.8253	60		rts				rts
.8254					AssembleGroup3:
.8254	68		pla				pla 								; get parameters, which is just the opcode.
.8255	fa		plx				plx
.8256	20 93 82	jsr $8293			jsr 	AccessParameters 			; get and output opcode
.8259	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.825c	20 3a 84	jsr $843a			jsr 	CalculateOperand 			; get a 16 bit operand
.825f	ad 08 06	lda $0608			lda 	NSMantissa0 				; calculate the offset
.8262	38		sec				sec
.8263	ed 1e 07	sbc $071e			sbc 	AssemblerAddress
.8266	48		pha				pha 								; LSB in A
.8267	ad 10 06	lda $0610			lda 	NSMantissa1
.826a	ed 1f 07	sbc $071f			sbc 	AssemblerAddress+1
.826d	aa		tax				tax 								; MSB in X
.826e	68		pla				pla
.826f	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8270	69 7f		adc #$7f			adc 	#$7F
.8272	90 01		bcc $8275			bcc 	_AG3NoCarry
.8274	e8		inx				inx
.8275					_AG3NoCarry:
.8275	38		sec				sec 								; fix back and write out anyways.
.8276	e9 80		sbc #$80			sbc 	#$80
.8278	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.827b	e0 00		cpx #$00			cpx 	#0 							; was it in range
.827d	f0 0a		beq $8289			beq 	_AG3Exit
.827f	ad 20 07	lda $0720			lda 	AssemblerControl 			; are we allowing bad values ?
.8282	29 01		and #$01			and 	#1
.8284	f0 03		beq $8289			beq 	_AG3Exit
.8286	4c d2 a5	jmp $a5d2			jmp 	RangeError 					; no, branch is out of range
.8289					_AG3Exit:
.8289	60		rts				rts
.828a					AssembleGroup4:
.828a	68		pla				pla 								; pop address
.828b	fa		plx				plx
.828c	20 93 82	jsr $8293			jsr 	AccessParameters 			; access and get first
.828f	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte 			; output it.
.8292	60		rts				rts
.8293					AccessParameters:
.8293	8d 21 07	sta $0721			sta 	ParamStart
.8296	8e 22 07	stx $0722			stx 	ParamStart+1
.8299	a9 01		lda #$01			lda 	#1
.829b					GetParameter:
.829b	5a		phy				phy
.829c	a8		tay				tay
.829d	ad 21 07	lda $0721			lda 	ParamStart
.82a0	85 36		sta $36				sta 	zTemp0
.82a2	ad 22 07	lda $0722			lda 	ParamStart+1
.82a5	85 37		sta $37				sta 	zTemp0+1
.82a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.82a9	7a		ply				ply
.82aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.82ab					AssemblerWriteByte:
.82ab	48		pha			pha
.82ac	ad 20 07	lda $0720		lda 	AssemblerControl 				; check printing bytes ?
.82af	29 02		and #$02		and 	#2
.82b1	f0 1b		beq $82ce		beq 	_AWBNoPrint
.82b3	ad 1f 07	lda $071f		lda		AssemblerAddress+1 				; print address
.82b6	20 e9 82	jsr $82e9		jsr 	PrintHex
.82b9	ad 1e 07	lda $071e		lda		AssemblerAddress
.82bc	20 e9 82	jsr $82e9		jsr 	PrintHex
.82bf	a9 20		lda #$20		lda 	#' '
.82c1	20 3a a8	jsr $a83a		jsr 	EXTPrintCharacter
.82c4	68		pla			pla 									; print byte
.82c5	48		pha			pha
.82c6	20 e9 82	jsr $82e9		jsr 	PrintHex
.82c9	a9 0d		lda #$0d		lda 	#13
.82cb	20 3a a8	jsr $a83a		jsr 	EXTPrintCharacter
.82ce					_AWBNoPrint:
.82ce	ad 1e 07	lda $071e		lda		AssemblerAddress				; copy address to zTemp0
.82d1	85 36		sta $36			sta 	zTemp0
.82d3	ad 1f 07	lda $071f		lda		AssemblerAddress+1
.82d6	f0 0e		beq $82e6		beq 	_AWBRange
.82d8	85 37		sta $37			sta 	zTemp0+1
.82da	68		pla			pla 									; write byte out
.82db	92 36		sta ($36)		sta 	(zTemp0)
.82dd	ee 1e 07	inc $071e		inc 	AssemblerAddress 				; bump address
.82e0	d0 03		bne $82e5		bne 	_AWBNoCarry
.82e2	ee 1f 07	inc $071f		inc 	AssemblerAddress+1
.82e5					_AWBNoCarry:
.82e5	60		rts			rts
.82e6					_AWBRange:
.82e6	4c d2 a5	jmp $a5d2		jmp 	RangeError
.82e9					PrintHex:
.82e9	48		pha				pha
.82ea	4a		lsr a				lsr 	a
.82eb	4a		lsr a				lsr 	a
.82ec	4a		lsr a				lsr 	a
.82ed	4a		lsr a				lsr 	a
.82ee	20 f2 82	jsr $82f2			jsr 	_PrintNibble
.82f1	68		pla				pla
.82f2					_PrintNibble:
.82f2	29 0f		and #$0f			and 	#15
.82f4	c9 0a		cmp #$0a			cmp 	#10
.82f6	90 02		bcc $82fa			bcc 	_NoShift
.82f8	69 06		adc #$06			adc 	#6
.82fa					_NoShift:
.82fa	69 30		adc #$30			adc 	#48
.82fc	4c 3a a8	jmp $a83a			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.82ff					AssembleModeX:
.82ff	5a		phy				phy
.8300	ad 23 07	lda $0723			lda 	IsGroup1
.8303	f0 17		beq $831c			beq 	_AMXGroup2
.8305	8a		txa				txa 							; is it in group # 1
.8306	29 40		and #$40			and 	#AM_ISG1
.8308	f0 50		beq $835a			beq 	_AMXFail 				; no, give up.
.830a	8a		txa				txa 							; get back.
.830b	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.830d	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.830f	d0 22		bne $8333			bne 	_AMXHaveInfo
.8311	ad 24 07	lda $0724			lda 	BaseOpcode 				; cannot store immediate.
.8314	c9 81		cmp #$81			cmp 	#$81
.8316	f0 42		beq $835a			beq 	_AMXFail
.8318	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.831a	80 17		bra $8333			bra 	_AMXHaveInfo 			; odd design decision there.
.831c					_AMXGroup2:
.831c	8a		txa				txa 							; is it in group 2 ?
.831d	29 20		and #$20			and 	#AM_ISG2
.831f	f0 39		beq $835a			beq 	_AMXFail 				; no, give up.
.8321	8a		txa				txa 							; get the offset into Y
.8322	29 1f		and #$1f			and 	#$1F
.8324	4a		lsr a				lsr 	a 						; make it 0-7.
.8325	4a		lsr a				lsr  	a
.8326	a8		tay				tay
.8327	ad 25 07	lda $0725			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.832a					_AMXCheckOkay:
.832a	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.832b	88		dey				dey
.832c	10 fc		bpl $832a			bpl 	_AMXCheckOkay
.832e	90 2a		bcc $835a			bcc 	_AMXFail 				; not allowed.
.8330	8a		txa				txa  							; get mask back
.8331	29 1f		and #$1f			and 	#$1F
.8333					_AMXHaveInfo:
.8333	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8335	10 05		bpl $833c			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8337	ac 10 06	ldy $0610			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.833a	d0 1e		bne $835a			bne 	_AMXFail
.833c					_AMXAnySize:
.833c	18		clc				clc 							; add offset to the base opcode
.833d	6d 24 07	adc $0724			adc 	BaseOpcode
.8340					_AMXOutputCode:
.8340	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte 		; write the opcode out.
.8343	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8345	f0 10		beq $8357			beq 	_AMXExit
.8347	ad 08 06	lda $0608			lda 	NSMantissa0 				; write LSB operand
.834a	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.834d	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.834f	30 06		bmi $8357			bmi 	_AMXExit
.8351	ad 10 06	lda $0610			lda 	NSMantissa1 			; write MSB operand
.8354	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.8357					_AMXExit:
.8357	7a		ply				ply
.8358	38		sec				sec
.8359	60		rts				rts
.835a					_AMXFail:
.835a	a0 00		ldy #$00			ldy 	#0
.835c					_AMXCheckOddities:
.835c	8a		txa				txa
.835d	d9 85 83	cmp $8385,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8360	d0 16		bne $8378			bne 	_AMXCONext
.8362	b9 83 83	lda $8383,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8365	cd 24 07	cmp $0724			cmp 	BaseOpcode
.8368	d0 0e		bne $8378			bne 	_AMXCONext
.836a	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.836c	10 05		bpl $8373			bpl 	_AMXCONotZero
.836e	ad 10 06	lda $0610			lda 	NSMantissa1
.8371	d0 05		bne $8378			bne 	_AMXCONext
.8373					_AMXCONotZero:
.8373	b9 84 83	lda $8384,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8376	80 c8		bra $8340			bra 	_AMXOutputCode 			; and assemble it
.8378					_AMXCONext:
.8378	c8		iny				iny
.8379	c8		iny				iny
.837a	c8		iny				iny
.837b	b9 83 83	lda $8383,y			lda 	ExtraOpcode+0,y 		; end of table
.837e	d0 dc		bne $835c			bne 	_AMXCheckOddities
.8380					_AMXCOFail:
.8380	7a		ply				ply
.8381	18		clc				clc
.8382	60		rts				rts
.8383					ExtraOpcode:
>8383	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8386	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8389	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>838c	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>838f	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8392	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8395	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8398	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>839b	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>839e	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>83a1	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.83a2					LabelHere:
.83a2	c8		iny				iny 								; skip .
.83a3	a2 00		ldx #$00			ldx 	#0 							; get a term
.83a5	20 da 93	jsr $93da			jsr 	EvaluateTerm 				; get a term
.83a8	ad 00 06	lda $0600			lda 	NSStatus 					; needs to be an integer reference.
.83ab	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.83ad	d0 24		bne $83d3			bne 	_ALType
.83af	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.83b2	85 36		sta $36				sta 	zTemp0
.83b4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83b7	85 37		sta $37				sta 	zTemp0+1
.83b9	5a		phy				phy 								; copy address in.
.83ba	a0 01		ldy #$01			ldy 	#1
.83bc	ad 1e 07	lda $071e			lda	 	AssemblerAddress
.83bf	92 36		sta ($36)			sta 	(zTemp0)
.83c1	ad 1f 07	lda $071f			lda	 	AssemblerAddress+1
.83c4	91 36		sta ($36),y			sta 	(zTemp0),y
.83c6	c8		iny				iny
.83c7	a9 00		lda #$00			lda 	#0
.83c9	91 36		sta ($36),y			sta 	(zTemp0),y
.83cb	c8		iny				iny
.83cc	91 36		sta ($36),y			sta 	(zTemp0),y
.83ce	c8		iny				iny
.83cf	91 36		sta ($36),y			sta 	(zTemp0),y
.83d1	7a		ply				ply
.83d2	60		rts				rts
.83d3					_ALType:
.83d3	4c d7 a5	jmp $a5d7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.83d6					TypeAndCalculateOperand:
.83d6	b1 30		lda ($30),y			lda 	(codePtr),y
.83d8	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.83da	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.83dc	f0 5b		beq $8439			beq 	_TACOExit
.83de	c9 80		cmp #$80			cmp 	#KWC_EOL
.83e0	f0 57		beq $8439			beq 	_TACOExit
.83e2	c8		iny				iny
.83e3	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.83e5	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.83e7	f0 51		beq $843a			beq 	CalculateOperand
.83e9	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.83eb	f0 1f		beq $840c			beq 	_TACOIndirect
.83ed	88		dey				dey 								; undo get of first character
.83ee	20 3a 84	jsr $843a			jsr 	CalculateOperand 			; get operand
.83f1	b1 30		lda ($30),y			lda 	(codePtr),y
.83f3	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.83f5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83f7	d0 40		bne $8439			bne 	_TACOExit
.83f9	c8		iny				iny
.83fa	20 62 9f	jsr $9f62			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.83fd	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.83ff	c9 58		cmp #$58			cmp 	#'X'
.8401	f0 36		beq $8439			beq 	_TACOExit
.8403	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8405	c9 59		cmp #$59			cmp 	#'Y'
.8407	f0 30		beq $8439			beq 	_TACOExit
.8409					_TACOSyntax:
.8409	4c cd a5	jmp $a5cd			jmp 	SyntaxError
.840c					_TACOIndirect:
.840c	20 3a 84	jsr $843a			jsr 	CalculateOperand 			; get the operand
.840f	b1 30		lda ($30),y			lda 	(codePtr),y
.8411	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8413	f0 17		beq $842c			beq 	_TACOIndX
.8415	20 eb 9f	jsr $9feb			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8418	b1 30		lda ($30),y			lda 	(codePtr),y
.841a	a2 d1		ldx #$d1			ldx 	#AM_IND
.841c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.841e	d0 19		bne $8439			bne 	_TACOExit
.8420	c8		iny				iny
.8421	20 62 9f	jsr $9f62			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8424	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8426	d0 e1		bne $8409			bne 	_TACOSyntax
.8428	a2 d0		ldx #$d0			ldx 	#AM_INDY
.842a	80 0d		bra $8439			bra 	_TACOExit
.842c					_TACOIndX:
.842c	c8		iny				iny
.842d	20 62 9f	jsr $9f62			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8430	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8432	d0 d5		bne $8409			bne 	_TACOSyntax
.8434	20 eb 9f	jsr $9feb			jsr 	CheckRightBracket			; check )
.8437	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8439					_TACOExit:
.8439	60		rts				rts
.843a					CalculateOperand:
.843a	48		pha				pha
.843b	da		phx				phx
.843c	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.843e	20 0c 98	jsr $980c			jsr 	Evaluate16BitInteger
.8441	fa		plx				plx
.8442	68		pla				pla
.8443	60		rts				rts
.9f62					TACOCheckXY:
.9f62	b1 30		lda ($30),y			lda 	(codePtr),y
.9f64	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.9f66	c9 40		cmp #$40			cmp 	#$40
.9f68	d0 21		bne $9f8b			bne 	_TCXYFail
.9f6a	b1 30		lda ($30),y			lda 	(codePtr),y
.9f6c	18		clc				clc
.9f6d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9f6f	85 37		sta $37				sta 	zTemp0+1
.9f71	c8		iny				iny
.9f72	b1 30		lda ($30),y			lda 	(codePtr),y
.9f74	c8		iny				iny
.9f75	85 36		sta $36				sta 	zTemp0
.9f77	5a		phy				phy 								; save position
.9f78	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.9f7a	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f7c	d0 0c		bne $9f8a			bne 	_TCXYPopFail
.9f7e	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.9f80	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f82	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.9f84	f0 08		beq $9f8e			beq 	_TCXYFound
.9f86	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.9f88	f0 04		beq $9f8e			beq 	_TCXYFound
.9f8a					_TCXYPopFail:
.9f8a	7a		ply				ply
.9f8b					_TCXYFail:
.9f8b	a9 00		lda #$00			lda 	#0
.9f8d	60		rts				rts
.9f8e					_TCXYFound:
.9f8e	7a		ply				ply 								; restore position
.9f8f	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.9f91	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8444					EditProgramCode:
.8444	ad 27 07	lda $0727			lda 	TokenLineNumber 			; find the line.
.8447	ae 28 07	ldx $0728			ldx 	TokenLineNumber+1
.844a	20 2f 9f	jsr $9f2f			jsr 	MemorySearch
.844d	90 05		bcc $8454			bcc 	_EPCNoDelete 				; reached the end don't delete
.844f	d0 03		bne $8454			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8451	20 7e a8	jsr $a87e			jsr 	MemoryDeleteLine 			; delete the line
.8454					_EPCNoDelete:
.8454	ad 29 07	lda $0729			lda 	TokenBuffer 				; buffer empty
.8457	c9 80		cmp #$80			cmp 	#KWC_EOL
.8459	f0 0d		beq $8468			beq 	_EPCNoInsert
.845b	ad 27 07	lda $0727			lda 	TokenLineNumber 			; find the line - it cannot exist.
.845e	ae 28 07	ldx $0728			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8461	20 2f 9f	jsr $9f2f			jsr 	MemorySearch
.8464	18		clc				clc 								; insert at this point.
.8465	20 b5 a8	jsr $a8b5			jsr 	MemoryInsertLine 			; insert the line
.8468					_EPCNoInsert:
.8468	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8469					WarmStart:
.8469	a2 ff		ldx #$ff			ldx 	#$FF
.846b	9a		txs				txs
.846c	20 50 a8	jsr $a850			jsr 	EXTInputLine 				; get line to lineBuffer
.846f	20 8e 9c	jsr $9c8e			jsr 	TokeniseLine 				; tokenise the line
.8472	ad 27 07	lda $0727			lda 	TokenLineNumber 			; line number ?
.8475	0d 28 07	ora $0728			ora 	TokenLineNumber+1
.8478	d0 17		bne $8491			bne 	_WSEditCode 				; if so,edit code.
.847a	9c 26 07	stz $0726			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.847d	a9 26		lda #$26			lda 	#((TokenOffset) & $FF)
.847f	85 30		sta $30				sta 	codePtr
.8481	a9 07		lda #$07			lda 	#((TokenOffset) >> 8)
.8483	85 31		sta $31				sta 	codePtr+1
.8485	ad 29 07	lda $0729			lda 	TokenBuffer 				; nothing to run
.8488	c9 80		cmp #$80			cmp 	#KWC_EOL
.848a	f0 dd		beq $8469			beq 	WarmStart
.848c	20 4f 8a	jsr $8a4f			jsr 	RUNCodePointerLine 			; execute that line.
.848f	80 d8		bra $8469			bra 	WarmStart
.8491					_WSEditCode:
.8491	20 44 84	jsr $8444			jsr 	EditProgramCode
.8494	20 d6 84	jsr $84d6			jsr 	ClearCommand
.8497	80 d0		bra $8469			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8499					AssembleCommand:
.8499	a2 00		ldx #$00			ldx 	#0
.849b	20 0c 98	jsr $980c			jsr 	Evaluate16BitInteger 		; start address
.849e	ad 08 06	lda $0608			lda 	NSMantissa0
.84a1	8d 1e 07	sta $071e			sta 	AssemblerAddress
.84a4	ad 10 06	lda $0610			lda 	NSMantissa1
.84a7	8d 1f 07	sta $071f			sta 	AssemblerAddress+1
.84aa	20 f3 9f	jsr $9ff3			jsr 	CheckComma
.84ad	20 18 98	jsr $9818			jsr 	Evaluate8BitInteger 		; options
.84b0	ad 08 06	lda $0608			lda 	NSMantissa0
.84b3	8d 20 07	sta $0720			sta 	AssemblerControl
.84b6	60		rts				rts
.84b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.84b8					AssertCommand:
.84b8	a2 00		ldx #$00			ldx 	#0
.84ba	20 f7 97	jsr $97f7			jsr 	EvaluateInteger 			; the assert test
.84bd	20 b0 98	jsr $98b0			jsr 	NSMIsZero 					; exit if result is non zero.
.84c0	d0 05		bne $84c7			bne 	_ACExit
.84c2	a9 0a		lda #$0a		lda	#10
.84c4	4c 00 8d	jmp $8d00		jmp	ErrorHandler
.84c7					_ACExit:
.84c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.84c8					CallCommand:
.84c8	a2 00		ldx #$00			ldx 	#0
.84ca	20 0c 98	jsr $980c			jsr 	Evaluate16BitInteger
.84cd	ad 10 06	lda $0610			lda 	NSMantissa1
.84d0	8d 09 06	sta $0609			sta 	NSMantissa0+1
.84d3	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.84d6					ClearCommand:
.84d6	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.84d8	85 36		sta $36				sta 	0+zTemp0
.84da	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.84dc	85 37		sta $37				sta 	1+zTemp0
.84de					_ClearZeroLoop:
.84de	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.84e0	f0 24		beq $8506			beq 	_ClearZeroEnd
.84e2	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.84e4	a9 00		lda #$00			lda 	#0
.84e6					_ClearOneVariable:
.84e6	91 36		sta ($36),y			sta 	(zTemp0),y
.84e8	c8		iny				iny
.84e9	c0 08		cpy #$08			cpy 	#8
.84eb	d0 f9		bne $84e6			bne 	_ClearOneVariable
.84ed	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.84ef	b1 36		lda ($36),y			lda 	(zTemp0),y
.84f1	c9 18		cmp #$18			cmp 	#NSTProcedure
.84f3	d0 04		bne $84f9			bne 	_ClearNotProcedure
.84f5	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.84f7	91 36		sta ($36),y			sta 	(zTemp0),y
.84f9					_ClearNotProcedure:
.84f9	18		clc				clc 								; go to the next variable
.84fa	b2 36		lda ($36)			lda 	(zTemp0)
.84fc	65 36		adc $36				adc 	zTemp0
.84fe	85 36		sta $36				sta 	zTemp0
.8500	90 dc		bcc $84de			bcc 	_ClearZeroLoop
.8502	e6 37		inc $37				inc 	zTemp0+1
.8504	80 d8		bra $84de			bra 	_ClearZeroLoop
.8506					_ClearZeroEnd:
.8506	18		clc				clc
.8507	a5 36		lda $36				lda 	zTemp0
.8509	69 01		adc #$01			adc 	#1
.850b	8d 0c 07	sta $070c			sta 	lowMemPtr
.850e	a5 37		lda $37				lda 	zTemp0+1
.8510	69 00		adc #$00			adc 	#0
.8512	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8515	20 33 99	jsr $9933			jsr 	StackReset
.8518	20 cc a7	jsr $a7cc			jsr 	StringSystemInitialise
.851b	20 20 8c	jsr $8c20			jsr 	ProcedureScan
.851e	20 0b 8a	jsr $8a0b			jsr 	Command_Restore
.8521	9c 1e 07	stz $071e			stz 	AssemblerAddress
.8524	9c 1f 07	stz $071f			stz 	AssemblerAddress+1
.8527	9c 20 07	stz $0720			stz 	AssemblerControl
.852a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.852b					Command_Data:
.852b	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.852d	a2 80		ldx #$80			ldx 	#KWC_EOL
.852f	20 72 8c	jsr $8c72			jsr 	ScanForward
.8532	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8533					DimCommand:
.8533	b1 30		lda ($30),y			lda 	(codePtr),y
.8535	29 c0		and #$c0			and 	#$C0
.8537	c9 40		cmp #$40			cmp 	#$40
.8539	d0 7a		bne $85b5			bne 	_DCSyntax
.853b	b1 30		lda ($30),y			lda 	(codePtr),y
.853d	18		clc				clc
.853e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8540	85 3f		sta $3f				sta 	zaTemp+1
.8542	c8		iny				iny
.8543	b1 30		lda ($30),y			lda 	(codePtr),y
.8545	c8		iny				iny
.8546	85 3e		sta $3e				sta 	zaTemp
.8548	5a		phy				phy
.8549	a0 02		ldy #$02			ldy 	#2 						; read type byte
.854b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.854d	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.854f	c9 18		cmp #$18			cmp 	#NSTProcedure
.8551	f0 62		beq $85b5			beq 	_DCSyntax
.8553	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8555	29 04		and #$04			and 	#NSBIsArray
.8557	f0 64		beq $85bd			beq 	_DCType
.8559	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.855b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.855d	d0 59		bne $85b8			bne 	_DCRedefine
.855f	7a		ply				ply
.8560	20 c0 85	jsr $85c0			jsr 	_DCGetSize 				; get array size, check it.
.8563	5a		phy				phy
.8564	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8566	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8568	7a		ply				ply 							; is there a second (e.g. ,x)
.8569	b1 30		lda ($30),y			lda 	(codePtr),y
.856b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.856d	d0 0a		bne $8579			bne 	_DCOneDimension
.856f	c8		iny				iny 							; skip comma
.8570	20 c0 85	jsr $85c0			jsr 	_DCGetSize 				; get 2nd array size
.8573	5a		phy				phy
.8574	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8576	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8578	7a		ply				ply
.8579					_DCOneDimension:
.8579	5a		phy				phy 							; save position
.857a	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.857c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.857e	aa		tax				tax
.857f	c8		iny				iny
.8580	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8582	e8		inx				inx 							; bump them.
.8583	1a		inc a				inc 	a
.8584	20 6d a4	jsr $a46d			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8587	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8589	29 e0		and #$e0			and 	#$E0
.858b	d0 23		bne $85b0			bne 	_DCSize
.858d	a0 02		ldy #$02			ldy 	#2 						; get base type
.858f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8591	20 ce 85	jsr $85ce			jsr 	ScaleByBaseType 		; scale by base type
.8594	a5 36		lda $36				lda 	zTemp0
.8596	a6 37		ldx $37				ldx 	zTemp0+1
.8598	20 89 95	jsr $9589			jsr 	AllocateXABytes 		; allocate memory
.859b	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.859d	91 3e		sta ($3e),y			sta 	(zaTemp),y
.859f	c8		iny				iny
.85a0	8a		txa				txa
.85a1	91 3e		sta ($3e),y			sta 	(zaTemp),y
.85a3	7a		ply				ply 							; get position back
.85a4	20 eb 9f	jsr $9feb			jsr 	CheckRightBracket 		; check )
.85a7	b1 30		lda ($30),y			lda 	(codePtr),y
.85a9	c8		iny				iny 							; consume in case
.85aa	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.85ac	f0 85		beq $8533			beq 	DimCommand
.85ae	88		dey				dey 							; undo consume
.85af	60		rts				rts
.85b0					_DCSize:
.85b0	a9 16		lda #$16		lda	#22
.85b2	4c 00 8d	jmp $8d00		jmp	ErrorHandler
.85b5					_DCSyntax:
.85b5	4c cd a5	jmp $a5cd			jmp 	SyntaxError
.85b8					_DCRedefine:
.85b8	a9 15		lda #$15		lda	#21
.85ba	4c 00 8d	jmp $8d00		jmp	ErrorHandler
.85bd					_DCType:
.85bd	4c d7 a5	jmp $a5d7			jmp 	TypeError
.85c0					_DCGetSize:
.85c0	a2 00		ldx #$00			ldx 	#0 						; get first index.
.85c2	20 18 98	jsr $9818			jsr 	Evaluate8BitInteger 	; get array dimension
.85c5	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.85c7	f0 e7		beq $85b0			beq 	_DCSize
.85c9	c9 fe		cmp #$fe			cmp 	#254
.85cb	f0 e3		beq $85b0			beq 	_DCSize
.85cd	60		rts				rts
.85ce					ScaleByBaseType:
.85ce	29 10		and #$10			and 	#NSBIsString 			; is it string
.85d0	d0 19		bne $85eb			bne 	_SBBTString
.85d2	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.85d4	48		pha				pha
.85d5	a5 36		lda $36				lda 	zTemp0
.85d7	48		pha				pha
.85d8	06 36		asl $36				asl 	zTemp0 					; x 2
.85da	26 37		rol $37				rol 	zTemp0+1
.85dc	06 36		asl $36				asl 	zTemp0 					; x 4
.85de	26 37		rol $37				rol 	zTemp0+1
.85e0	68		pla				pla 							; add stacked value = x 5
.85e1	65 36		adc $36				adc 	zTemp0
.85e3	85 36		sta $36				sta 	zTemp0
.85e5	68		pla				pla
.85e6	65 37		adc $37				adc 	zTemp0+1
.85e8	85 37		sta $37				sta 	zTemp0+1
.85ea	60		rts				rts
.85eb					_SBBTString:
.85eb	06 36		asl $36				asl 	zTemp0
.85ed	26 37		rol $37				rol 	zTemp0+1
.85ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.85f0					EndCommand:
.85f0	4c 69 84	jmp $8469			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.85f3					ForCommand:
.85f3	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.85f5	20 d3 98	jsr $98d3			jsr 	StackOpen
.85f8	a2 00		ldx #$00			ldx 	#0
.85fa	20 da 93	jsr $93da			jsr 	EvaluateTerm
.85fd	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8600	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8602	d0 49		bne $864d			bne		_FCError
.8604	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8606	20 fb 9f	jsr $9ffb			jsr 	CheckNextA
.8609	e8		inx				inx
.860a	20 f7 97	jsr $97f7			jsr 	EvaluateInteger 			; <from> in +1
.860d	b1 30		lda ($30),y			lda 	(codePtr),y
.860f	c8		iny				iny 								; consume it
.8610	48		pha				pha 								; save on stack for later
.8611	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.8613	f0 04		beq $8619			beq 	_FCNoSyntax
.8615	c9 b0		cmp #$b0			cmp 	#KWD_TO
.8617	d0 37		bne $8650			bne 	_FCSyntaxError
.8619					_FCNoSyntax:
.8619	e8		inx				inx
.861a	20 f7 97	jsr $97f7			jsr 	EvaluateInteger
.861d	20 12 99	jsr $9912			jsr 	STKSaveCodePosition 		; save loop back position
.8620	68		pla				pla 								; restore DOWNTO or TO
.8621	5a		phy				phy 								; save Y on the stack
.8622	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8624	f0 02		beq $8628			beq 	_FCNotDownTo
.8626	a9 02		lda #$02			lda 	#2
.8628					_FCNotDownTo:
.8628	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8629	a0 10		ldy #$10			ldy 	#16
.862b	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.862d	a0 06		ldy #$06			ldy 	#6
.862f	ad 08 06	lda $0608			lda 	NSMantissa0
.8632	91 34		sta ($34),y			sta 	(basicStack),y
.8634	ad 10 06	lda $0610			lda 	NSMantissa1
.8637	c8		iny				iny
.8638	91 34		sta ($34),y			sta 	(basicStack),y
.863a	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.863c	a2 01		ldx #$01			ldx 	#1
.863e	20 53 86	jsr $8653			jsr 	FCIntegerToStack
.8641	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8643	a2 02		ldx #$02			ldx 	#2
.8645	20 53 86	jsr $8653			jsr 	FCIntegerToStack
.8648	20 73 86	jsr $8673			jsr 	CopyIndexToReference
.864b	7a		ply				ply 								; restore position
.864c	60		rts				rts
.864d					_FCError:
.864d	4c d7 a5	jmp $a5d7			jmp 	TypeError
.8650					_FCSyntaxError:
.8650	4c cd a5	jmp $a5cd			jmp 	SyntaxError
.8653					FCIntegerToStack:
.8653	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.8656	10 03		bpl $865b			bpl	 	_FCNotNegative
.8658	20 35 98	jsr $9835			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.865b					_FCNotNegative:
.865b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.865e	91 34		sta ($34),y			sta 	(basicStack),y
.8660	c8		iny				iny
.8661	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8664	91 34		sta ($34),y			sta 	(basicStack),y
.8666	c8		iny				iny
.8667	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.866a	91 34		sta ($34),y			sta 	(basicStack),y
.866c	c8		iny				iny
.866d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8670	91 34		sta ($34),y			sta 	(basicStack),y
.8672	60		rts				rts
.8673					CopyIndexToReference:
.8673	5a		phy				phy
.8674	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8676	38		sec				sec 								; (because we copy from offset 8)
.8677	b1 34		lda ($34),y			lda 	(basicStack),y
.8679	e9 08		sbc #$08			sbc 	#8
.867b	85 36		sta $36				sta 	zTemp0
.867d	c8		iny				iny
.867e	b1 34		lda ($34),y			lda 	(basicStack),y
.8680	e9 00		sbc #$00			sbc 	#0
.8682	85 37		sta $37				sta 	zTemp0+1
.8684	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8686	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8688	b1 34		lda ($34),y			lda 	(basicStack),y
.868a	0a		asl a				asl 	a 							; into carry
.868b	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.868d	90 14		bcc $86a3			bcc 	_CITRNormal
.868f	38		sec				sec
.8690					_CITRNegative:
.8690	a9 00		lda #$00			lda 	#0
.8692	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8694	91 36		sta ($36),y			sta 	(zTemp0),y
.8696	c8		iny				iny
.8697	ca		dex				dex
.8698	d0 f6		bne $8690			bne 	_CITRNegative
.869a	88		dey				dey 								; look at MSB of mantissa
.869b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.869d	09 80		ora #$80			ora 	#$80
.869f	91 36		sta ($36),y			sta 	(zTemp0),y
.86a1	7a		ply				ply
.86a2	60		rts				rts
.86a3					_CITRNormal:
.86a3	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.86a5	91 36		sta ($36),y			sta 	(zTemp0),y
.86a7	c8		iny				iny
.86a8	ca		dex				dex
.86a9	d0 f8		bne $86a3			bne 	_CITRNormal
.86ab	7a		ply				ply 								; and exit.
.86ac	60		rts				rts
.86ad					NextCommand:
.86ad	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.86af	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.86b1	20 fa 98	jsr $98fa			jsr 	StackCheckFrame
.86b4	5a		phy				phy
.86b5	a0 10		ldy #$10			ldy 	#16 						; get the step count
.86b7	b1 34		lda ($34),y			lda 	(basicStack),y
.86b9	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.86bb	30 02		bmi $86bf			bmi 	_NCStepNeg
.86bd	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.86bf					_NCStepNeg:
.86bf	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.86c1	a2 04		ldx #$04			ldx 	#4 							; count to bump
.86c3	18		clc				clc
.86c4					_NCBump:
.86c4	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.86c6	91 34		sta ($34),y			sta 	(basicStack),y
.86c8	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.86ca	c8		iny				iny 								; next byte
.86cb	ca		dex				dex 								; do four times
.86cc	d0 f6		bne $86c4			bne 	_NCBump
.86ce	20 73 86	jsr $8673			jsr		CopyIndexToReference		; copy it to the reference variable.
.86d1	a0 10		ldy #$10			ldy 	#16 						; get step count again
.86d3	b1 34		lda ($34),y			lda 	(basicStack),y
.86d5	0a		asl a				asl 	a 							; sign bit to carry
.86d6	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.86d8	85 38		sta $38				sta 	zTemp1
.86da	90 02		bcc $86de			bcc 	_NCCompRev 					; use if step is +ve
.86dc	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.86de					_NCCompRev:
.86de	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.86e0	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.86e2	85 39		sta $39				sta 	zTemp1+1
.86e4	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.86e6	38		sec				sec
.86e7					_NCCompare:
.86e7	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.86e9	b1 34		lda ($34),y			lda 	(basicStack),y
.86eb	a4 39		ldy $39				ldy 	zTemp1+1
.86ed	f1 34		sbc ($34),y			sbc 	(basicStack),y
.86ef	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.86f1	e6 39		inc $39				inc 	zTemp1+1
.86f3	ca		dex				dex 								; do it 4 times.
.86f4	d0 f1		bne $86e7			bne 	_NCCompare
.86f6	50 02		bvc $86fa			bvc 	_NCNoOverflow 				; convert to signed comparison
.86f8	49 80		eor #$80			eor 	#$80
.86fa					_NCNoOverflow:
.86fa	7a		ply				ply 								; restore Y position
.86fb	0a		asl a				asl 	a 							; is bit 7 set.
.86fc	90 04		bcc $8702			bcc 	_NCLoopback 				; if no , >= so loop back
.86fe	20 ec 98	jsr $98ec			jsr 	StackClose 					; exit the loop
.8701	60		rts				rts
.8702					_NCLoopBack:
.8702	20 23 99	jsr $9923			jsr 	STKLoadCodePosition 		; loop back
.8705	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8706					Command_GOSUB:
.8706	a2 00		ldx #$00			ldx 	#0
.8708	20 0c 98	jsr $980c			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.870b	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.870d	20 d3 98	jsr $98d3			jsr 	StackOpen 					; create frame
.8710	20 12 99	jsr $9912			jsr 	STKSaveCodePosition 		; save current position
.8713	4c 29 87	jmp $8729			jmp 	GotoStackX
.8716					Command_RETURN:
.8716	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8718	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.871a	20 fa 98	jsr $98fa			jsr 	StackCheckFrame
.871d	20 23 99	jsr $9923			jsr 	STKLoadCodePosition 		; restore code position
.8720	20 ec 98	jsr $98ec			jsr 	StackClose
.8723	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8724					GotoCommand:
.8724	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8726	20 0c 98	jsr $980c			jsr 	Evaluate16BitInteger
.8729					GotoStackX:
.8729	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.872c	48		pha				pha 								; it is slightly inefficient, just in cases.
.872d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8730	fa		plx				plx
.8731	20 2f 9f	jsr $9f2f			jsr 	MemorySearch 				; transfer to line number AX.
.8734	90 05		bcc $873b			bcc 	_GotoError 					; not found, off end.
.8736	d0 03		bne $873b			bne 	_GotoError 					; not found exactly
.8738	4c 48 8a	jmp $8a48			jmp 	RunNewLine 					; and go straight to new line code.
.873b					_GotoError:
.873b	a9 0d		lda #$0d		lda	#13
.873d	4c 00 8d	jmp $8d00		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8740					IfCommand:
.8740	a2 00		ldx #$00			ldx 	#0 							; If what.
.8742	20 d4 97	jsr $97d4			jsr 	EvaluateNumber
.8745	b1 30		lda ($30),y			lda 	(codePtr),y
.8747	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8749	d0 0a		bne $8755			bne 	_IFStructured
.874b	c8		iny				iny 								; consume THEN
.874c	20 b0 98	jsr $98b0			jsr 	NSMIsZero 					; is it zero
.874f	f0 01		beq $8752			beq 	_IfFail 					; if fail, go to next line
.8751	60		rts				rts 								; if THEN just continue
.8752					_IfFail:
.8752	4c a9 8a	jmp $8aa9			jmp 	EOLCommand
.8755					_IfStructured:
.8755	20 b0 98	jsr $98b0			jsr 	NSMIsZero 					; is it zero
.8758	d0 07		bne $8761			bne 	_IfExit 					; if not, then continue normally.
.875a	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.875c	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.875e	20 72 8c	jsr $8c72			jsr 	ScanForward 				; and run from there/
.8761					_IfExit:
.8761	60		rts				rts
.8762					ElseCode:
.8762	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8764	aa		tax				tax 								; so just go to the structure exit
.8765	20 72 8c	jsr $8c72			jsr 	ScanForward
.8768	60		rts				rts
.8769					EndIf:
.8769	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.876a					LetCommand:
.876a	a2 00		ldx #$00			ldx 	#0
.876c	ad f1 90	lda $90f1			lda 	PrecedenceLevel+"*"			; precedence > this
.876f	20 0b 91	jsr $910b			jsr 	EvaluateExpressionAtPrecedence
.8772	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.8775	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8777	f0 0e		beq $8787			beq 	_LetGoProc 					; it's a procedure call.
.8779	a9 3d		lda #$3d			lda 	#"=" 						; check =
.877b	20 fb 9f	jsr $9ffb			jsr 	CheckNextA
.877e	e8		inx				inx 								; RHS
.877f	20 cb 97	jsr $97cb			jsr 	EvaluateValue
.8782	ca		dex				dex
.8783	20 8a 87	jsr $878a			jsr 	AssignVariable
.8786	60		rts				rts
.8787					_LetGoProc:
.8787	4c 23 89	jmp $8923			jmp 	CallProcedure
.878a					AssignVariable:
.878a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.878d	48		pha				pha 								; save a copy
.878e	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8791	29 10		and #$10			and 	#NSBIsString
.8793	d0 0b		bne $87a0			bne 	_ASError
.8795	68		pla				pla 								; get back
.8796	29 10		and #$10			and 	#NSBIsString 				; check type
.8798	d0 03		bne $879d			bne 	_ASString
.879a	4c 46 91	jmp $9146			jmp 	AssignNumber
.879d					_ASString:
.879d	4c b4 91	jmp $91b4			jmp 	AssignString
.87a0					_ASError:
.87a0	4c d7 a5	jmp $a5d7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.87a3					Command_List:
.87a3	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.87a6	9c 14 06	stz $0614			stz 	NSMantissa1+4
.87a9	a9 ff		lda #$ff			lda 	#$FF
.87ab	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.87ae	8d 17 06	sta $0617			sta 	NSMantissa1+7
.87b1	b1 30		lda ($30),y			lda 	(codePtr),y
.87b3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87b5	f0 1e		beq $87d5			beq 	_CLSecond
.87b7	20 33 88	jsr $8833			jsr 	CLIsDigit 					; if not digit, list all
.87ba	b0 24		bcs $87e0			bcs 	_CLStart
.87bc	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.87be	20 0c 98	jsr $980c			jsr 	Evaluate16BitInteger
.87c1	b1 30		lda ($30),y			lda 	(codePtr),y
.87c3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87c5	f0 0e		beq $87d5			beq 	_CLSecond 					; if so go get it
.87c7	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.87ca	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.87cd	ad 14 06	lda $0614			lda 	NSMantissa1+4
.87d0	8d 17 06	sta $0617			sta 	NSMantissa1+7
.87d3	80 0b		bra $87e0			bra 	_CLStart
.87d5					_CLSecond:
.87d5	c8		iny				iny 								; consume comma
.87d6	20 33 88	jsr $8833			jsr 	CLIsDigit 					; digit found
.87d9	b0 05		bcs $87e0			bcs 	_CLStart 					; if not, continue listing
.87db	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.87dd	20 0c 98	jsr $980c			jsr 	Evaluate16BitInteger
.87e0					_CLStart
.87e0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.87e2	85 30		sta $30				sta 	codePtr
.87e4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.87e6	85 31		sta $31				sta 	codePtr+1
.87e8					_CLLoop:
.87e8	20 7b a8	jsr $a87b			jsr 	EXTBreakCheck 				; break check
.87eb	f0 30		beq $881d			beq 	_CLExit
.87ed	b2 30		lda ($30)			lda 	(codePtr)
.87ef	f0 2c		beq $881d			beq 	_CLExit
.87f1	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.87f3	20 20 88	jsr $8820			jsr 	CLCompareLineNo
.87f6	90 18		bcc $8810			bcc 	_CLNext
.87f8	a2 07		ldx #$07			ldx 	#7
.87fa	20 20 88	jsr $8820			jsr 	CLCompareLineNo
.87fd	f0 02		beq $8801			beq 	_CLDoThisOne
.87ff	b0 0f		bcs $8810			bcs 	_CLNext
.8801					_CLDoThisOne:
.8801	20 ce 8a	jsr $8ace			jsr 	ListConvertLine 			; convert line into token Buffer
.8804	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.8806	a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.8808	20 59 8d	jsr $8d59			jsr 	PrintStringXA
.880b	a9 0d		lda #$0d			lda 	#13 						; new line
.880d	20 3a a8	jsr $a83a			jsr 	EXTPrintCharacter
.8810					_CLNext:
.8810	18		clc				clc
.8811	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8813	65 30		adc $30				adc 	codePtr
.8815	85 30		sta $30				sta 	codePtr
.8817	90 02		bcc $881b			bcc 	_CREExit
.8819	e6 31		inc $31				inc 	codePtr+1
.881b					_CREExit:
.881b	80 cb		bra $87e8			bra 	_CLLoop
.881d					_CLExit:
.881d	4c 69 84	jmp $8469			jmp 	WarmStart
.8820					CLCompareLineNo:
.8820	38		sec				sec
.8821	a0 01		ldy #$01			ldy 	#1
.8823	b1 30		lda ($30),y			lda 	(codePtr),y
.8825	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8828	85 36		sta $36				sta 	zTemp0
.882a	c8		iny				iny
.882b	b1 30		lda ($30),y			lda 	(codePtr),y
.882d	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8830	05 36		ora $36				ora 	zTemp0
.8832	60		rts				rts
.8833					CLIsDigit:
.8833	b1 30		lda ($30),y			lda 	(codePtr),y
.8835	c9 30		cmp #$30			cmp 	#"0"
.8837	90 03		bcc $883c			bcc	 	_CLIDExitFalse
.8839	c9 3a		cmp #$3a			cmp 	#"9"+1
.883b	60		rts				rts
.883c					_CLIDExitFalse:
.883c	38		sec				sec
.883d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.883e					Command_LOCAL:
.883e	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8840	20 4c 88	jsr $884c			jsr 	LocaliseNextTerm 			; convert term to a local.
.8843	b1 30		lda ($30),y			lda 	(codePtr),y
.8845	c8		iny				iny
.8846	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8848	f0 f4		beq $883e			beq 	Command_LOCAL
.884a	88		dey				dey 								; unpick pre-get
.884b	60		rts				rts
.884c					LocaliseNextTerm:
.884c	20 da 93	jsr $93da			jsr 	EvaluateTerm 				; evaluate the term
.884f	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8852	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8854	f0 69		beq $88bf			beq		_LNTError
.8856	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8859	85 36		sta $36				sta 	zTemp0
.885b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.885e	85 37		sta $37				sta  	zTemp0+1
.8860	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8863	29 10		and #$10			and 	#NSBIsString
.8865	d0 22		bne $8889			bne 	_LNTPushString
.8867	5a		phy				phy
.8868	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.886a					_LNTPushNumLoop:
.886a	b1 36		lda ($36),y			lda		(zTemp0),y
.886c	20 bd 98	jsr $98bd			jsr 	StackPushByte
.886f	a9 00		lda #$00			lda 	#0
.8871	91 36		sta ($36),y			sta 	(zTemp0),y
.8873	c8		iny				iny
.8874	c0 05		cpy #$05			cpy 	#5
.8876	d0 f2		bne $886a			bne 	_LNTPushNumLoop
.8878	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.887a	20 bd 98	jsr $98bd			jsr 	StackPushByte
.887d	a5 37		lda $37				lda 	zTemp0+1
.887f	20 bd 98	jsr $98bd			jsr 	StackPushByte
.8882	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8884	20 bd 98	jsr $98bd			jsr 	StackPushByte
.8887	7a		ply				ply
.8888	60		rts				rts
.8889					_LNTPushString:
.8889	5a		phy				phy
.888a	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.888c	85 38		sta $38				sta 	zTemp1
.888e	a0 01		ldy #$01			ldy 	#1
.8890	b1 36		lda ($36),y			lda 	(zTemp0),y
.8892	85 39		sta $39				sta 	zTemp1+1
.8894	a0 00		ldy #$00			ldy 	#0 							; output string
.8896	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8898	f0 0a		beq $88a4			beq 	_LNTStringOut
.889a					_LNTPushStrLoop:
.889a	b1 38		lda ($38),y			lda 	(zTemp1),y
.889c	f0 06		beq $88a4			beq 	_LNTStringOut
.889e	20 bd 98	jsr $98bd			jsr 	StackPushByte
.88a1	c8		iny				iny
.88a2	80 f6		bra $889a			bra 	_LNTPushStrLoop
.88a4					_LNTStringOut:
.88a4	98		tya				tya									; output length
.88a5	20 bd 98	jsr $98bd			jsr 	StackPushByte
.88a8	a9 00		lda #$00			lda 	#0 							; clear original string.
.88aa	92 38		sta ($38)			sta 	(zTemp1)
.88ac	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.88af	20 bd 98	jsr $98bd			jsr 	StackPushByte
.88b2	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.88b5	20 bd 98	jsr $98bd			jsr 	StackPushByte
.88b8	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.88ba	20 bd 98	jsr $98bd			jsr 	StackPushByte
.88bd	7a		ply				ply
.88be	60		rts				rts
.88bf					_LNTError:
.88bf	4c cd a5	jmp $a5cd			jmp 	SyntaxError
.9f92					LocalPopValue:
.9f92	20 ca 98	jsr $98ca			jsr 	StackPopByte
.9f95	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.9f97	d0 17		bne $9fb0			bne 	_LPVString
.9f99	20 ca 98	jsr $98ca			jsr 	StackPopByte 				; address
.9f9c	85 37		sta $37				sta 	zTemp0+1
.9f9e	20 ca 98	jsr $98ca			jsr 	StackPopByte
.9fa1	85 36		sta $36				sta 	zTemp0
.9fa3	5a		phy				phy
.9fa4	a0 04		ldy #$04			ldy 	#4 							; copy back
.9fa6					_LPVNumberCopy:
.9fa6	20 ca 98	jsr $98ca			jsr 	StackPopByte
.9fa9	91 36		sta ($36),y			sta 	(zTemp0),y
.9fab	88		dey				dey
.9fac	10 f8		bpl $9fa6			bpl 	_LPVNumberCopy
.9fae	7a		ply				ply 								; and complete
.9faf	60		rts				rts
.9fb0					_LPVString:
.9fb0	20 ca 98	jsr $98ca			jsr 	StackPopByte 				; address of record => zTemp0
.9fb3	85 37		sta $37				sta 	zTemp0+1
.9fb5	20 ca 98	jsr $98ca			jsr 	StackPopByte
.9fb8	85 36		sta $36				sta 	zTemp0
.9fba	5a		phy				phy
.9fbb	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.9fbd	85 38		sta $38				sta 	zTemp1
.9fbf	a0 01		ldy #$01			ldy 	#1
.9fc1	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fc3	85 39		sta $39				sta 	zTemp1+1
.9fc5	20 ca 98	jsr $98ca			jsr 	StackPopByte 				; # to get => y
.9fc8	a8		tay				tay
.9fc9	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.9fcb	f0 0e		beq $9fdb			beq 	_LPVStringCopied
.9fcd	a9 00		lda #$00			lda 	#0 							; NULL on end
.9fcf	91 38		sta ($38),y			sta 	(zTemp1),y
.9fd1					_LPVStringCopy:
.9fd1	88		dey				dey
.9fd2	30 07		bmi $9fdb			bmi 	_LPVStringCopied
.9fd4	20 ca 98	jsr $98ca			jsr 	StackPopByte
.9fd7	91 38		sta ($38),y			sta 	(zTemp1),y
.9fd9	80 f6		bra $9fd1			bra 	_LPVStringCopy
.9fdb					_LPVStringCopied:
.9fdb	fa		plx				plx
.9fdc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.88c2					NewCommand:
.88c2	20 0d 9f	jsr $9f0d			jsr 	MemoryNew
.88c5	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.88c8	20 d6 84	jsr $84d6			jsr 	ClearCommand 				; clear everything.
.88cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.88cc					Command_Print:
.88cc	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.88cd					_CPLoop:
.88cd	08		php				php 								; save last action flag
.88ce	b1 30		lda ($30),y			lda 	(codePtr),y
.88d0	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.88d2	f0 46		beq $891a			beq 	_CPExit
.88d4	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.88d6	f0 42		beq $891a			beq 	_CPExit
.88d8	68		pla				pla 								; throw last action flag
.88d9	b1 30		lda ($30),y			lda 	(codePtr),y
.88db	c8		iny				iny
.88dc	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.88de	f0 37		beq $8917			beq 	_CPContinueWithSameLine
.88e0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.88e2	f0 2e		beq $8912			beq 	_CPTab
.88e4	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.88e6	f0 26		beq $890e			beq 	_CPNewLine
.88e8	88		dey				dey 								; undo the get.
.88e9	a2 00		ldx #$00			ldx 	#0
.88eb	20 cb 97	jsr $97cb			jsr 	EvaluateValue 				; get a value into slot 0
.88ee	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.88f1	29 10		and #$10			and 	#NSBIsString
.88f3	f0 0b		beq $8900			beq 	_CPNumber
.88f5	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.88f8	ad 08 06	lda $0608			lda 	NSMantissa0
.88fb	20 59 8d	jsr $8d59			jsr 	PrintStringXA
.88fe	80 cc		bra $88cc			bra 	Command_Print 				; loop round clearing carry so NL if end
.8900					_CPNumber:
.8900	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8902	20 a1 96	jsr $96a1			jsr 	ConvertNumberToString 		; convert to string
.8905	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8907	a9 99		lda #$99			lda 	#DecimalBuffer & $FF
.8909	20 59 8d	jsr $8d59			jsr 	PrintStringXA
.890c	80 be		bra $88cc			bra 	Command_Print 				; loop round clearing carry so NL if end
.890e					_CPNewLine:
.890e	a9 0d		lda #$0d			lda 	#13
.8910	80 02		bra $8914			bra 	_CPPrintChar
.8912					_CPTab:
.8912	a9 09		lda #$09			lda 	#9 							; print TAB
.8914					_CPPrintChar:
.8914	20 3a a8	jsr $a83a			jsr 	EXTPrintCharacter
.8917					_CPContinueWithSameLine:
.8917	38		sec				sec 								; loop round with carry set, which
.8918	80 b3		bra $88cd			bra 	_CPLoop 					; will inhibit final CR
.891a					_CPExit:
.891a	28		plp				plp 								; get last action flag
.891b	b0 05		bcs $8922			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.891d	a9 0d		lda #$0d			lda 	#13 						; print new line
.891f	20 3a a8	jsr $a83a			jsr 	EXTPrintCharacter
.8922					_CPExit2:
.8922	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8923					CallProcedure:
.8923	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8925	b1 30		lda ($30),y			lda 	(codePtr),y
.8927	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8929	f0 0c		beq $8937			beq 	_CPEndParam
.892b					_CPParamLoop:
.892b	20 09 91	jsr $9109			jsr 	EvaluateExpression 			; get parameter onto stack
.892e	e8		inx				inx 								; bump next stack
.892f	b1 30		lda ($30),y			lda 	(codePtr),y
.8931	c8		iny				iny
.8932	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8934	f0 f5		beq $892b			beq 	_CPParamLoop
.8936	88		dey				dey 								; unpick.
.8937					_CPEndParam:
.8937	8e 16 07	stx $0716			stx 	LastParameter 				; save the last parameters index.
.893a	c8		iny				iny									; skip right bracket
.893b	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.893d	20 d3 98	jsr $98d3			jsr 	StackOpen
.8940	20 12 99	jsr $9912			jsr 	STKSaveCodePosition 		; save loop position
.8943	ad 08 06	lda $0608			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8946	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8948	ad 10 06	lda $0610			lda 	NSMantissa1
.894b	85 37		sta $37				sta 	zTemp0+1
.894d	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.894f	b2 36		lda ($36)			lda 	(zTemp0)
.8951	85 30		sta $30				sta 	safePtr
.8953	b1 36		lda ($36),y			lda 	(zTemp0),y
.8955	85 31		sta $31				sta 	safePtr+1
.8957	c8		iny				iny
.8958	b1 36		lda ($36),y			lda 	(zTemp0),y
.895a	85 32		sta $32				sta 	safePtr+2
.895c	c8		iny				iny
.895d	b1 36		lda ($36),y			lda 	(zTemp0),y
.895f	85 33		sta $33				sta 	safePtr+3
.8961	c8		iny				iny 								; get Y offset -> Y
.8962	b1 36		lda ($36),y			lda 	(zTemp0),y
.8964	a8		tay				tay
.8965	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8967	ec 16 07	cpx $0716			cpx	 	LastParameter 				; check no parameters at the start
.896a	f0 13		beq $897f			beq 	_ParamExit 					; if so, exit.
.896c					_ParamExtract:
.896c	ca		dex				dex 								; put a local term on the level before
.896d	20 4c 88	jsr $884c			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8970	20 8a 87	jsr $878a			jsr 	AssignVariable 				; assign stacked value to the variable.
.8973	e8		inx				inx 								; advance to next parameter to do.
.8974	e8		inx				inx
.8975	ec 16 07	cpx $0716			cpx 	LastParameter 				; are we done ?
.8978	f0 05		beq $897f			beq 	_ParamExit
.897a	20 f3 9f	jsr $9ff3			jsr 	CheckComma 					; comma seperating parameters
.897d	80 ed		bra $896c			bra 	_ParamExtract
.897f					_ParamExit:
.897f	20 eb 9f	jsr $9feb			jsr 	CheckRightBracket 			; check )
.8982	60		rts				rts 								; and continue from here
.9fdd					Command_ENDPROC:
.9fdd	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9fdf	a2 14		ldx #$14			ldx 	#ERRID_PROC
.9fe1	20 fa 98	jsr $98fa			jsr 	StackCheckFrame
.9fe4	20 23 99	jsr $9923			jsr 	STKLoadCodePosition 		; restore code position
.9fe7	20 ec 98	jsr $98ec			jsr 	StackClose
.9fea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8983					Command_Read:
.8983	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8985	20 da 93	jsr $93da			jsr 	EvaluateTerm
.8988	bd 00 06	lda $0600,x			lda 	NSStatus,x
.898b	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.898d	f0 4a		beq $89d9			beq 	_CRSyntax 					; check reference (bit 0)
.898f	20 22 8a	jsr $8a22			jsr 	SwapDataCodePtrs 			; swap code and data
.8992	ad 1c 07	lda $071c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8995	d0 20		bne $89b7			bne 	_CRContinueData
.8997					_CRKeepSearching:
.8997	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.8999	aa		tax				tax
.899a	20 72 8c	jsr $8c72			jsr 	ScanForward
.899d	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.899f	f0 16		beq $89b7			beq 	_CRHaveData 				; found it
.89a1	18		clc				clc
.89a2	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.89a4	65 30		adc $30				adc 	codePtr
.89a6	85 30		sta $30				sta 	codePtr
.89a8	90 02		bcc $89ac			bcc 	_CREExit
.89aa	e6 31		inc $31				inc 	codePtr+1
.89ac					_CREExit:
.89ac	a0 03		ldy #$03			ldy 	#3 							; start of line.
.89ae	b2 30		lda ($30)			lda 	(codePtr)
.89b0	d0 e5		bne $8997			bne 	_CRKeepSearching
.89b2	a9 0b		lda #$0b		lda	#11
.89b4	4c 00 8d	jmp $8d00		jmp	ErrorHandler
.89b7					_CRHaveData:
.89b7					_CRContinueData:
.89b7	a2 01		ldx #$01			ldx 	#1
.89b9	20 cb 97	jsr $97cb			jsr 	EvaluateValue 				; evaluate value into slot # 1
.89bc	ca		dex				dex
.89bd	20 8a 87	jsr $878a			jsr		AssignVariable 				; do the assignment
.89c0	9c 1c 07	stz $071c			stz 	inDataStatement 			; clear in data
.89c3	b1 30		lda ($30),y			lda 	(codePtr),y
.89c5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.89c7	d0 04		bne $89cd			bne 	_CRSwapBack
.89c9	c8		iny				iny 								; consume comma
.89ca	ee 1c 07	inc $071c			inc 	inDataStatement 			; set in data statement currently.
.89cd					_CRSwapBack:
.89cd	20 22 8a	jsr $8a22			jsr 	SwapDataCodePtrs			; swap them back.
.89d0	b1 30		lda ($30),y			lda 	(codePtr),y
.89d2	c8		iny				iny
.89d3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.89d5	f0 ac		beq $8983			beq 	Command_Read 				; if so go round again.
.89d7	88		dey				dey 								; unpick get.
.89d8	60		rts				rts
.89d9					_CRSyntax:
.89d9	4c cd a5	jmp $a5cd			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.89dc					RemCommand:
.89dc	b1 30		lda ($30),y			lda 	(codePtr),y
.89de	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.89e0	d0 06		bne $89e8			bne 	_RMExit
.89e2	c8		iny				iny
.89e3	98		tya				tya
.89e4	38		sec				sec
.89e5	71 30		adc ($30),y			adc 	(codePtr),y
.89e7	a8		tay				tay
.89e8					_RMExit:
.89e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.89e9					Command_REPEAT:
.89e9	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.89eb	20 d3 98	jsr $98d3			jsr 	StackOpen
.89ee	20 12 99	jsr $9912			jsr 	STKSaveCodePosition 		; save loop position
.89f1	60		rts				rts
.89f2					Command_UNTIL:
.89f2	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.89f4	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.89f6	20 fa 98	jsr $98fa			jsr 	StackCheckFrame
.89f9	a2 00		ldx #$00			ldx 	#0
.89fb	20 d4 97	jsr $97d4			jsr 	EvaluateNumber 				; work out the number
.89fe	20 b0 98	jsr $98b0			jsr 	NSMIsZero 					; check if zero
.8a01	f0 04		beq $8a07			beq 	_CULoopBack 				; if so keep looping
.8a03	20 ec 98	jsr $98ec			jsr 	StackClose		 			; return
.8a06	60		rts				rts
.8a07					_CULoopBack:
.8a07	20 23 99	jsr $9923			jsr 	STKLoadCodePosition 		; loop back
.8a0a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8a0b					Command_Restore:
.8a0b	20 22 8a	jsr $8a22			jsr 	SwapDataCodePtrs 			; swap code and data
.8a0e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8a10	85 30		sta $30				sta 	codePtr
.8a12	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8a14	85 31		sta $31				sta 	codePtr+1
.8a16	20 22 8a	jsr $8a22			jsr 	SwapDataCodePtrs 			; put them back
.8a19	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8a1b	8d 1b 07	sta $071b			sta 	dataPointer+4
.8a1e	9c 1c 07	stz $071c			stz 	inDataStatement 			; not in data statement
.8a21	60		rts				rts
.8a22					SwapDataCodePtrs:
.8a22	da		phx				phx
.8a23	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8a25					_SDCPLoop:
.8a25	b5 30		lda $30,x			lda 	safePtr,x
.8a27	48		pha				pha
.8a28	bd 17 07	lda $0717,x			lda 	dataPointer,x
.8a2b	95 30		sta $30,x			sta 	safePtr,x
.8a2d	68		pla				pla
.8a2e	9d 17 07	sta $0717,x			sta 	dataPointer,x
.8a31	ca		dex				dex
.8a32	10 f1		bpl $8a25			bpl 	_SDCPLoop
.8a34	ad 1b 07	lda $071b			lda 	dataPointer+4 				; swap Y position over.
.8a37	8c 1b 07	sty $071b			sty 	dataPointer+4
.8a3a	a8		tay				tay
.8a3b	fa		plx				plx
.8a3c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8a3d					CommandRUN:
.8a3d	20 d6 84	jsr $84d6			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8a40	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8a42	85 30		sta $30				sta 	codePtr
.8a44	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8a46	85 31		sta $31				sta 	codePtr+1
.8a48					RUNNewLine:
.8a48	b2 30		lda ($30)			lda 	(codePtr)
.8a4a	f0 5a		beq $8aa6			beq 	CRNoProgram         		; no then END.
.8a4c	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8a4e	9a		txs				txs
.8a4f					RUNCodePointerLine:
.8a4f	a0 02		ldy #$02			ldy 	#2 							; start of program
.8a51					_CRIncMainLoop:
.8a51	0e 13 07	asl $0713			asl 	breakCheck 					; clears 1 time in 8
.8a54	d0 05		bne $8a5b			bne 	_CRNoBreakCheck
.8a56	20 7b a8	jsr $a87b			jsr 	EXTBreakCheck 				; break check
.8a59	f0 46		beq $8aa1			beq 	_CRBreak
.8a5b					_CRNoBreakCheck:
.8a5b	c8		iny				iny
.8a5c					_CRMainLoop:
.8a5c	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8a5f	b1 30		lda ($30),y			lda 	(codePtr),y
.8a61	10 10		bpl $8a73			bpl 	_CRNotKeyword
.8a63	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8a65	b0 04		bcs $8a6b			bcs 	_CRIsKeyword
.8a67	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8a69	b0 30		bcs $8a9b			bcs		_CRSyntaxError
.8a6b					_CRIsKeyword:
.8a6b	c8		iny				iny 								; consume command
.8a6c	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8a6d	aa		tax				tax 								; put in X for vector jump
.8a6e	20 9e 8a	jsr $8a9e			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a71	80 e9		bra $8a5c			bra 	_CRMainLoop 				; and loop round
.8a73					_CRNotKeyword:
.8a73	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a75	f0 da		beq $8a51			beq 	_CRIncMainLoop
.8a77	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a79	90 05		bcc $8a80			bcc 	_CRNotVariable
.8a7b					_CRGoLet:
.8a7b	20 6a 87	jsr $876a			jsr 	LetCommand
.8a7e	80 dc		bra $8a5c			bra 	_CRMainLoop
.8a80					_CRNotVariable:
.8a80	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8a82	f0 f7		beq $8a7b			beq 	_CRGoLet
.8a84	c9 21		cmp #$21			cmp 	#KWD_PLING
.8a86	f0 f3		beq $8a7b			beq 	_CRGoLet
.8a88	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8a8a	f0 09		beq $8a95			beq 	_CRGoRem
.8a8c	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8a8e	d0 0b		bne $8a9b			bne 	_CRSyntaxError
.8a90	20 a2 83	jsr $83a2			jsr 	LabelHere
.8a93	80 c7		bra $8a5c			bra 	_CRMainLoop
.8a95					_CRGoRem:
.8a95	c8		iny				iny
.8a96	20 dc 89	jsr $89dc			jsr 	RemCommand
.8a99	80 c1		bra $8a5c			bra 	_CRMainLoop
.8a9b					_CRSyntaxError:
.8a9b	4c cd a5	jmp $a5cd			jmp 	SyntaxError
.8a9e					_CRCallVector0:
.8a9e	7c fc 80	jmp ($80fc,x)			jmp 	(VectorSet0,x)
.8aa1					_CRBreak:
.8aa1	a9 01		lda #$01		lda	#1
.8aa3	4c 00 8d	jmp $8d00		jmp	ErrorHandler
.8aa6					CRNoProgram:
.8aa6	4c f0 85	jmp $85f0			jmp 	EndCommand
.8aa9					EOLCommand:
.8aa9	18		clc				clc
.8aaa	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8aac	65 30		adc $30				adc 	codePtr
.8aae	85 30		sta $30				sta 	codePtr
.8ab0	90 02		bcc $8ab4			bcc 	_CREExit
.8ab2	e6 31		inc $31				inc 	codePtr+1
.8ab4					_CREExit:
.8ab4	80 92		bra $8a48			bra 	RunNewLine
.8ab6					Shift1Command:
.8ab6	b1 30		lda ($30),y			lda 	(codePtr),y
.8ab8	c8		iny				iny
.8ab9	0a		asl a				asl 	a
.8aba	aa		tax				tax
.8abb	7c 5e 81	jmp ($815e,x)			jmp 	(VectorSet1,x)
.8abe					Shift2Command:
.8abe	b1 30		lda ($30),y			lda 	(codePtr),y
.8ac0	c8		iny				iny
.8ac1	0a		asl a				asl 	a
.8ac2	aa		tax				tax
.8ac3	7c 76 81	jmp ($8176,x)			jmp 	(VectorSet2,x)
.8ac6					Unused1:
.8ac6					Unused2:
.8ac6					Unused3:
.8ac6					Unused4:
.8ac6	4c cd a5	jmp $a5cd			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8ac9					StopCommand:
.8ac9	a9 08		lda #$08		lda	#8
.8acb	4c 00 8d	jmp $8d00		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8ace					ListConvertLine:
.8ace	9c 1d 07	stz $071d			stz 	tbOffset
.8ad1	9c 29 07	stz $0729			stz 	tokenBuffer
.8ad4	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.8ad6	b1 30		lda ($30),y			lda 	(codePtr),y
.8ad8	aa		tax				tax
.8ad9	88		dey				dey
.8ada	b1 30		lda ($30),y			lda 	(codePtr),y
.8adc	20 47 a1	jsr $a147			jsr 	ConvertInt16
.8adf	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8ae1	86 37		stx $37				stx 	zTemp0+1
.8ae3	a0 00		ldy #$00			ldy 	#0
.8ae5					_LCCopyNumber:
.8ae5	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ae7	20 e7 8b	jsr $8be7			jsr 	LCLWrite
.8aea	c8		iny				iny
.8aeb	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aed	d0 f6		bne $8ae5			bne 	_LCCopyNumber
.8aef					_LCPadOut:
.8aef	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.8af1	20 e7 8b	jsr $8be7			jsr 	LCLWrite
.8af4	ad 1d 07	lda $071d			lda 	tbOffset
.8af7	c9 06		cmp #$06			cmp 	#6
.8af9	d0 f4		bne $8aef			bne 	_LCPadOut
.8afb	a0 03		ldy #$03			ldy 	#3 							; start position.
.8afd					_LCMainLoop:
.8afd	b1 30		lda ($30),y			lda 	(codePtr),y
.8aff	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8b01	f0 17		beq $8b1a			beq 	_LCExit
.8b03	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.8b05	90 14		bcc $8b1b			bcc 	_LCDoubles
.8b07	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8b09	90 20		bcc $8b2b			bcc 	_LCShiftPunc
.8b0b	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8b0d	90 2b		bcc $8b3a			bcc 	_LCPunctuation
.8b0f	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8b11	90 2d		bcc $8b40			bcc 	_LCIdentifiers
.8b13	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8b15	90 49		bcc $8b60			bcc 	_LCTokens
.8b17	4c bb 8b	jmp $8bbb			jmp 	_LCData 					; 254-5 are data objects
.8b1a					_LCExit:
.8b1a	60		rts				rts
.8b1b					_LCDoubles:
.8b1b	48		pha				pha
.8b1c	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8b1d	29 02		and #$02			and 	#2
.8b1f	09 3c		ora #$3c			ora 	#60 						; make < >
.8b21	20 e7 8b	jsr $8be7			jsr 	LCLWrite
.8b24	68		pla				pla 								; restore, do lower bit
.8b25	29 03		and #$03			and 	#3
.8b27	09 3c		ora #$3c			ora 	#60
.8b29	80 0f		bra $8b3a			bra		_LCPunctuation 				; print, increment, loop
.8b2b					_LCShiftPunc:
.8b2b	aa		tax				tax 								; save in X
.8b2c	29 07		and #$07			and 	#7 							; lower 3 bits
.8b2e	f0 02		beq $8b32			beq 	_LCNoAdd
.8b30	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.8b32					_LCNoAdd:
.8b32	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8b34	90 02		bcc $8b38			bcc 	_LCNoAdd2
.8b36	09 20		ora #$20			ora 	#32 						; adds $20
.8b38					_LCNoAdd2:
.8b38	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8b3a					_LCPunctuation:
.8b3a	c8		iny				iny 								; consume character
.8b3b	20 e7 8b	jsr $8be7			jsr 	LCLWrite 					; write it out.
.8b3e	80 bd		bra $8afd			bra 	_LCMainLoop 				; go round again.
.8b40					_LCIdentifiers:
.8b40	18		clc				clc 								; convert to physical address
.8b41	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8b43	85 37		sta $37				sta 	zTemp0+1
.8b45	c8		iny				iny
.8b46	b1 30		lda ($30),y			lda 	(codePtr),y
.8b48	85 36		sta $36				sta 	zTemp0
.8b4a	c8		iny				iny
.8b4b	5a		phy				phy 								; save position
.8b4c	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8b4e					_LCOutIdentifier:
.8b4e	c8		iny				iny
.8b4f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b51	29 7f		and #$7f			and 	#$7F
.8b53	20 15 8c	jsr $8c15			jsr 	LCLLowerCase
.8b56	20 e7 8b	jsr $8be7			jsr 	LCLWrite
.8b59	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8b5b	10 f1		bpl $8b4e			bpl 	_LCOutIdentifier
.8b5d	7a		ply				ply 								; restore position
.8b5e	80 9d		bra $8afd			bra 	_LCMainLoop
.8b60					_LCTokens:
.8b60	aa		tax				tax 								; token in X
.8b61	a9 47		lda #$47			lda 	#((KeywordSet2) & $FF)
.8b63	85 36		sta $36				sta 	0+zTemp0
.8b65	a9 9b		lda #$9b			lda 	#((KeywordSet2) >> 8)
.8b67	85 37		sta $37				sta 	1+zTemp0
.8b69	e0 82		cpx #$82			cpx 	#$82
.8b6b	f0 16		beq $8b83			beq 	_LCUseShift
.8b6d	a9 03		lda #$03			lda 	#((KeywordSet1) & $FF)
.8b6f	85 36		sta $36				sta 	0+zTemp0
.8b71	a9 9b		lda #$9b			lda 	#((KeywordSet1) >> 8)
.8b73	85 37		sta $37				sta 	1+zTemp0
.8b75	e0 81		cpx #$81			cpx 	#$81
.8b77	f0 0a		beq $8b83			beq 	_LCUseShift
.8b79	a9 d1		lda #$d1			lda 	#((KeywordSet0) & $FF)
.8b7b	85 36		sta $36				sta 	0+zTemp0
.8b7d	a9 99		lda #$99			lda 	#((KeywordSet0) >> 8)
.8b7f	85 37		sta $37				sta 	1+zTemp0
.8b81	80 01		bra $8b84			bra 	_LCNoShift
.8b83					_LCUseShift:
.8b83	c8		iny				iny
.8b84					_LCNoShift:
.8b84	20 f6 8b	jsr $8bf6			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8b87	b1 30		lda ($30),y			lda 	(codePtr),y
.8b89	aa		tax				tax 								; into X
.8b8a					_LCFindText:
.8b8a	ca		dex				dex
.8b8b	10 0e		bpl $8b9b			bpl 	_LCFoundText 				; found text.
.8b8d	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8b8f	1a		inc a				inc 	a 							; one extra for size
.8b90	38		sec				sec 								; one extra for checksum
.8b91	65 36		adc $36				adc 	zTemp0 						; go to next token
.8b93	85 36		sta $36				sta 	zTemp0
.8b95	90 f3		bcc $8b8a			bcc 	_LCFindText
.8b97	e6 37		inc $37				inc 	zTemp0+1
.8b99	80 ef		bra $8b8a			bra 	_LCFindText
.8b9b					_LCFoundText:
.8b9b	5a		phy				phy 								; save List position
.8b9c	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8b9e	aa		tax				tax
.8b9f	a0 02		ldy #$02			ldy 	#2
.8ba1					_LCCopyToken:
.8ba1	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ba3	20 15 8c	jsr $8c15			jsr 	LCLLowerCase
.8ba6	20 e7 8b	jsr $8be7			jsr 	LCLWrite
.8ba9	c8		iny				iny
.8baa	ca		dex				dex
.8bab	d0 f4		bne $8ba1			bne 	_LCCopyToken
.8bad	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8baf	f0 05		beq $8bb6			beq 	_LCNoSpace
.8bb1	a9 20		lda #$20			lda 	#' '
.8bb3	20 e7 8b	jsr $8be7			jsr 	LCLWrite
.8bb6					_LCNoSpace:
.8bb6	7a		ply				ply 								; restore position.
.8bb7	c8		iny				iny 								; consume token
.8bb8	4c fd 8a	jmp $8afd			jmp 	_LCMainLoop 				; and go around again.
.8bbb					_LCData:
.8bbb	48		pha				pha 								; save type $FE/$FF
.8bbc	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8bbe	c9 fe		cmp #$fe			cmp 	#$FE
.8bc0	f0 02		beq $8bc4			beq 	_LCHaveOpener
.8bc2	a2 22		ldx #$22			ldx 	#'"'
.8bc4					_LCHaveOpener:
.8bc4	8a		txa				txa 								; output prefix (# or ")
.8bc5	20 e7 8b	jsr $8be7			jsr 	LCLWrite
.8bc8	c8		iny				iny 								; get count
.8bc9	b1 30		lda ($30),y			lda 	(codePtr),y
.8bcb	aa		tax				tax
.8bcc	c8		iny				iny 								; point at first character
.8bcd					_LCOutData:
.8bcd	b1 30		lda ($30),y			lda 	(codePtr),y
.8bcf	c9 00		cmp #$00			cmp 	#0
.8bd1	f0 03		beq $8bd6			beq 	_LCNoPrint
.8bd3	20 e7 8b	jsr $8be7			jsr 	LCLWrite
.8bd6					_LCNoPrint:
.8bd6	c8		iny				iny
.8bd7	ca		dex				dex
.8bd8	d0 f3		bne $8bcd			bne 	_LCOutData
.8bda	68		pla				pla 								; closing " required ?
.8bdb	c9 ff		cmp #$ff			cmp 	#$FF
.8bdd	d0 05		bne $8be4			bne 	_LCNoQuote
.8bdf	a9 22		lda #$22			lda 	#'"'
.8be1	20 e7 8b	jsr $8be7			jsr 	LCLWrite
.8be4					_LCNoQuote:
.8be4	4c fd 8a	jmp $8afd			jmp 	_LCMainLoop
.8be7					LCLWrite:
.8be7	da		phx				phx
.8be8	ae 1d 07	ldx $071d			ldx 	tbOffset
.8beb	9d 29 07	sta $0729,x			sta 	tokenBuffer,x
.8bee	9e 2a 07	stz $072a,x			stz 	tokenBuffer+1,x
.8bf1	ee 1d 07	inc $071d			inc 	tbOffset
.8bf4	fa		plx				plx
.8bf5	60		rts				rts
.8bf6					LCCheckSpaceRequired:
.8bf6	ae 1d 07	ldx $071d			ldx 	tbOffset
.8bf9	bd 28 07	lda $0728,x			lda 	tokenBuffer-1,x 			; previous character
.8bfc	20 15 8c	jsr $8c15			jsr 	LCLLowerCase 				; saves a little effort
.8bff	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8c01	90 11		bcc $8c14			bcc 	_LCCSRExit
.8c03	c9 3a		cmp #$3a			cmp 	#"9"+1
.8c05	90 08		bcc $8c0f			bcc 	_LCCSRSpace
.8c07	c9 61		cmp #$61			cmp 	#"a"
.8c09	90 09		bcc $8c14			bcc 	_LCCSRExit
.8c0b	c9 7b		cmp #$7b			cmp 	#"z"+1
.8c0d	b0 05		bcs $8c14			bcs 	_LCCSRExit
.8c0f					_LCCSRSpace:
.8c0f	a9 20		lda #$20			lda 	#' '
.8c11	20 e7 8b	jsr $8be7			jsr 	LCLWrite
.8c14					_LCCSRExit:
.8c14	60		rts				rts
.8c15					LCLLowerCase:
.8c15	c9 41		cmp #$41			cmp 	#"A"
.8c17	90 06		bcc $8c1f			bcc 	_LCLLCOut
.8c19	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8c1b	b0 02		bcs $8c1f			bcs 	_LCLLCOut
.8c1d	69 20		adc #$20			adc 	#$20
.8c1f					_LCLLCOut:
.8c1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8c20					ProcedureScan:
.8c20	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c22	85 30		sta $30				sta 	codePtr
.8c24	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c26	85 31		sta $31				sta 	codePtr+1
.8c28					_PSLoop:
.8c28	b2 30		lda ($30)			lda 	(codePtr)
.8c2a	f0 42		beq $8c6e			beq 	_PSExit
.8c2c	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8c2e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c30	c9 99		cmp #$99			cmp 	#KWD_PROC
.8c32	d0 2d		bne $8c61			bne 	_PSNext
.8c34	c8		iny				iny 								; get the address of the record to zTemp0 and
.8c35	b1 30		lda ($30),y			lda 	(codePtr),y
.8c37	29 c0		and #$c0			and 	#$C0
.8c39	c9 40		cmp #$40			cmp 	#$40
.8c3b	d0 32		bne $8c6f			bne 	_PSSyntax
.8c3d	b1 30		lda ($30),y			lda 	(codePtr),y
.8c3f	18		clc				clc
.8c40	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c42	85 37		sta $37				sta 	zTemp0+1
.8c44	c8		iny				iny 								; LSB
.8c45	b1 30		lda ($30),y			lda 	(codePtr),y
.8c47	85 36		sta $36				sta 	zTemp0
.8c49	c8		iny				iny 								; character after variable call.
.8c4a	98		tya				tya 								; save Y offset at +7
.8c4b	a0 07		ldy #$07			ldy 	#7
.8c4d	91 36		sta ($36),y			sta 	(zTemp0),y
.8c4f	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8c51	a0 02		ldy #$02			ldy 	#2
.8c53	91 36		sta ($36),y			sta 	(zTemp0),y
.8c55	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8c57					_PSCopy:
.8c57	b5 30		lda $30,x			lda 	safePtr,x
.8c59	c8		iny				iny
.8c5a	91 36		sta ($36),y			sta 	(zTemp0),y
.8c5c	e8		inx				inx
.8c5d	e0 04		cpx #$04			cpx 	#4
.8c5f	d0 f6		bne $8c57			bne 	_PSCopy
.8c61					_PSNext:
.8c61	18		clc				clc
.8c62	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c64	65 30		adc $30				adc 	codePtr
.8c66	85 30		sta $30				sta 	codePtr
.8c68	90 02		bcc $8c6c			bcc 	_CREExit
.8c6a	e6 31		inc $31				inc 	codePtr+1
.8c6c					_CREExit:
.8c6c	80 ba		bra $8c28			bra 	_PSLoop
.8c6e					_PSExit:
.8c6e	60		rts				rts
.8c6f					_PSSyntax:
.8c6f	4c cd a5	jmp $a5cd			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c72					ScanForward:
.8c72	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8c74	86 37		stx $37				stx 	zTemp0+1
.8c76	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c78					_ScanLoop:
.8c78	b1 30		lda ($30),y			lda 	(codePtr),y
.8c7a	c8		iny				iny
.8c7b	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8c7d	d0 0e		bne $8c8d			bne 	_ScanGoNext
.8c7f	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8c81	f0 04		beq $8c87			beq 	_ScanMatch
.8c83	c5 37		cmp $37				cmp 	zTemp0+1
.8c85	d0 06		bne $8c8d			bne 	_ScanGoNext
.8c87					_ScanMatch:
.8c87	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8c89	d0 01		bne $8c8c			bne 	_ScanNotEndEOL
.8c8b	88		dey				dey
.8c8c					_ScanNotEndEOL:
.8c8c	60		rts				rts
.8c8d					_ScanGoNext:
.8c8d	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8c8f	90 e7		bcc $8c78			bcc 	_ScanLoop
.8c91	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8c93	90 18		bcc $8cad			bcc 	_ScanSkipOne
.8c95	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8c97	b0 2f		bcs $8cc8			bcs 	_ScanSkipData
.8c99	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8c9b	90 db		bcc $8c78			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8c9d	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.8c9f	b0 d7		bcs $8c78			bcs 	_ScanLoop
.8ca1	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8ca3	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8ca5	b0 d1		bcs $8c78			bcs 	_ScanLoop
.8ca7	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8ca9	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8cab	80 cb		bra $8c78			bra 	_ScanLoop
.8cad					_ScanSkipOne:
.8cad	c8		iny				iny 								; consume the extra one.
.8cae	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8cb0	d0 c6		bne $8c78			bne 	_ScanLoop
.8cb2	18		clc				clc
.8cb3	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8cb5	65 30		adc $30				adc 	codePtr
.8cb7	85 30		sta $30				sta 	codePtr
.8cb9	90 02		bcc $8cbd			bcc 	_CREExit
.8cbb	e6 31		inc $31				inc 	codePtr+1
.8cbd					_CREExit:
.8cbd	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8cbf	b2 30		lda ($30)			lda 	(codePtr)
.8cc1	d0 b5		bne $8c78			bne 	_ScanLoop 					; if not zero, more to scan
.8cc3	a9 13		lda #$13		lda	#19
.8cc5	4c 00 8d	jmp $8d00		jmp	ErrorHandler
.8cc8					_ScanSkipData:
.8cc8	88		dey				dey 								; point at data token
.8cc9	c8		iny				iny
.8cca	98		tya				tya
.8ccb	38		sec				sec
.8ccc	71 30		adc ($30),y			adc 	(codePtr),y
.8cce	a8		tay				tay
.8ccf	80 a7		bra $8c78			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8cd1					Command_WHILE:
.8cd1	5a		phy				phy 								; save position of the test
.8cd2	a2 00		ldx #$00			ldx 	#0
.8cd4	20 d4 97	jsr $97d4			jsr 	EvaluateNumber 				; work out the number
.8cd7	20 b0 98	jsr $98b0			jsr 	NSMIsZero 					; check if zero
.8cda	f0 0e		beq $8cea			beq 	_WHExitLoop 				; if so exit the loop
.8cdc	98		tya				tya 								; position *after* test.
.8cdd	7a		ply				ply 								; restore position before test, at WHILE
.8cde	88		dey				dey
.8cdf	48		pha				pha 								; push after test on the stack
.8ce0	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8ce2	20 d3 98	jsr $98d3			jsr 	StackOpen
.8ce5	20 12 99	jsr $9912			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8ce8	7a		ply				ply 								; restore the position *after* the test
.8ce9	60		rts				rts
.8cea					_WHExitLoop:
.8cea	68		pla				pla 								; throw post loop position
.8ceb	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.8ced	aa		tax				tax
.8cee	20 72 8c	jsr $8c72			jsr 	ScanForward
.8cf1	60		rts				rts
.8cf2					Command_WEND:
.8cf2	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8cf4	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8cf6	20 fa 98	jsr $98fa			jsr 	StackCheckFrame
.8cf9	20 23 99	jsr $9923			jsr 	STKLoadCodePosition 		; loop back
.8cfc	20 ec 98	jsr $98ec			jsr 	StackClose		 			; erase the frame
.8cff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9feb					CheckRightBracket:
.9feb	b1 30		lda ($30),y			lda 	(codePtr),y
.9fed	c8		iny				iny
.9fee	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9ff0	d0 0f		bne $a001			bne 	CNAFail
.9ff2	60		rts				rts
.9ff3					CheckComma:
.9ff3	b1 30		lda ($30),y			lda 	(codePtr),y
.9ff5	c8		iny				iny
.9ff6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9ff8	d0 07		bne $a001			bne 	CNAFail
.9ffa	60		rts				rts
.9ffb					CheckNextA:
.9ffb	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9ffd	d0 02		bne $a001			bne 	CNAFail
.9fff	c8		iny				iny 								; skip character
.a000	60		rts				rts 								; and exit
.a001					CNAFail:
.a001	4c cd a5	jmp $a5cd			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8d00					ErrorHandler:
.8d00	a8		tay				tay 								; find the error text
.8d01	f0 49		beq $8d4c			beq 	_EHEnd
.8d03	a2 00		ldx #$00			ldx 	#0
.8d05	a9 e6		lda #$e6			lda 	#((ErrorText) & $FF)
.8d07	85 36		sta $36				sta 	0+zTemp0
.8d09	a9 a5		lda #$a5			lda 	#((ErrorText) >> 8)
.8d0b	85 37		sta $37				sta 	1+zTemp0
.8d0d					_EHFind:
.8d0d	88		dey				dey 								; found the error text ?
.8d0e	f0 0e		beq $8d1e			beq 	_EHFound
.8d10					_EHFindZero:
.8d10	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8d12	e6 36		inc $36				inc 	zTemp0
.8d14	d0 02		bne $8d18			bne 	_EHFNoCarry
.8d16	e6 37		inc $37				inc 	zTemp0+1
.8d18					_EHFNoCarry:
.8d18	c9 00		cmp #$00			cmp 	#0
.8d1a	d0 f4		bne $8d10			bne 	_EHFindZero
.8d1c	80 ef		bra $8d0d			bra 	_EHFind
.8d1e					_EHFound:
.8d1e	a5 36		lda $36				lda 	zTemp0 						; print message
.8d20	a6 37		ldx $37				ldx 	zTemp0+1
.8d22	20 59 8d	jsr $8d59			jsr 	PrintStringXA
.8d25	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8d27	b1 30		lda ($30),y			lda 	(codePtr),y
.8d29	d0 05		bne $8d30			bne 	_EHAtMsg
.8d2b	c8		iny				iny
.8d2c	b1 30		lda ($30),y			lda 	(codePtr),y
.8d2e	f0 17		beq $8d47			beq 	_EHCREnd
.8d30					_EHAtMsg:
.8d30	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8d32	a9 4f		lda #$4f			lda 	#_AtMsg & $FF
.8d34	20 59 8d	jsr $8d59			jsr 	PrintStringXA
.8d37	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8d39	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3b	48		pha				pha
.8d3c	c8		iny				iny
.8d3d	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3f	aa		tax				tax
.8d40	68		pla				pla
.8d41	20 47 a1	jsr $a147			jsr 	ConvertInt16 				; convert XA to string
.8d44	20 59 8d	jsr $8d59			jsr 	PrintStringXA 				; and print it.
.8d47					_EHCREnd:
.8d47	a9 0d		lda #$0d			lda 	#13 						; new line
.8d49	20 3a a8	jsr $a83a			jsr 	EXTPrintCharacter
.8d4c					_EHEnd:
.8d4c	4c 69 84	jmp $8469			jmp 	WarmStart
>8d4f	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8d57	20 00
.8d59					PrintStringXA:
.8d59	5a		phy				phy
.8d5a	86 37		stx $37				stx 	zTemp0+1
.8d5c	85 36		sta $36				sta 	zTemp0
.8d5e	a0 00		ldy #$00			ldy 	#0
.8d60					_PSXALoop:
.8d60	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d62	f0 06		beq $8d6a			beq 	_PSXAExit
.8d64	20 3a a8	jsr $a83a			jsr 	EXTPrintCharacter
.8d67	c8		iny				iny
.8d68	80 f6		bra $8d60			bra 	_PSXALoop
.8d6a					_PSXAExit:
.8d6a	7a		ply				ply
.8d6b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8d6c					UnaryTrue:
.8d6c	fa		plx				plx
.8d6d					ReturnTrue:
.8d6d	a9 01		lda #$01			lda 	#1  						; set to 1
.8d6f	20 82 98	jsr $9882			jsr 	NSMSetByte
.8d72	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8d74	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d77	60		rts				rts
.8d78					UnaryFalse:
.8d78	fa		plx				plx
.8d79					ReturnFalse:
.8d79	4c 80 98	jmp $9880			jmp 	NSMSetZero 					; set it all to zero
.8d7c					BinaryCompareEqual:
.8d7c	fa		plx				plx
.8d7d	20 b8 8d	jsr $8db8			jsr 	CompareBaseCode
.8d80	c9 00		cmp #$00			cmp 	#0
.8d82	f0 e9		beq $8d6d			beq 	ReturnTrue
.8d84	80 f3		bra $8d79			bra 	ReturnFalse
.8d86					BinaryCompareLess:
.8d86	fa		plx				plx
.8d87	20 b8 8d	jsr $8db8			jsr 	CompareBaseCode
.8d8a	c9 ff		cmp #$ff			cmp 	#$FF
.8d8c	f0 df		beq $8d6d			beq 	ReturnTrue
.8d8e	80 e9		bra $8d79			bra 	ReturnFalse
.8d90					BinaryCompareGreater:
.8d90	fa		plx				plx
.8d91	20 b8 8d	jsr $8db8			jsr 	CompareBaseCode
.8d94	c9 01		cmp #$01			cmp 	#1
.8d96	f0 d5		beq $8d6d			beq 	ReturnTrue
.8d98	80 df		bra $8d79			bra 	ReturnFalse
.8d9a					BinaryCompareNotEqual:
.8d9a	fa		plx				plx
.8d9b	20 b8 8d	jsr $8db8			jsr 	CompareBaseCode
.8d9e	c9 00		cmp #$00			cmp 	#0
.8da0	d0 cb		bne $8d6d			bne 	ReturnTrue
.8da2	80 d5		bra $8d79			bra 	ReturnFalse
.8da4					BinaryCompareLessEqual:
.8da4	fa		plx				plx
.8da5	20 b8 8d	jsr $8db8			jsr 	CompareBaseCode
.8da8	c9 01		cmp #$01			cmp 	#1
.8daa	d0 c1		bne $8d6d			bne 	ReturnTrue
.8dac	80 cb		bra $8d79			bra 	ReturnFalse
.8dae					BinaryCompareGreaterEqual:
.8dae	fa		plx				plx
.8daf	20 b8 8d	jsr $8db8			jsr 	CompareBaseCode
.8db2	c9 ff		cmp #$ff			cmp 	#$FF
.8db4	d0 b7		bne $8d6d			bne 	ReturnTrue
.8db6	80 c1		bra $8d79			bra 	ReturnFalse
.8db8					CompareBaseCode:
.8db8	20 19 92	jsr $9219			jsr 	DereferenceTopTwo 			; make both values if references.
.8dbb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8dbe	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8dc1	29 10		and #$10			and 	#NSTString
.8dc3	d0 40		bne $8e05			bne 	_CBCString
.8dc5	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8dc8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8dcb	d0 3b		bne $8e08			bne 	_CBCFloat
.8dcd	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8dd0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8dd3	29 08		and #$08			and 	#NSTFloat
.8dd5	d0 31		bne $8e08			bne 	_CBCFloat
.8dd7	20 0b 8e	jsr $8e0b			jsr 	CompareFixMinusZero
.8dda	e8		inx				inx
.8ddb	20 0b 8e	jsr $8e0b			jsr 	CompareFixMinusZero
.8dde	ca		dex				dex
.8ddf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8de2	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8de5	10 0b		bpl $8df2			bpl 	_CDCSameSign
.8de7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8dea	30 16		bmi $8e02			bmi 	_CBCLess 					; return $FF
.8dec					_CBCGreater:
.8dec	a9 01		lda #$01			lda 	#1
.8dee	60		rts				rts
.8def					_CBCEqual:
.8def	a9 00		lda #$00			lda 	#0
.8df1	60		rts				rts
.8df2					_CDCSameSign:
.8df2	20 1b 8f	jsr $8f1b			jsr 	SubTopTwoStack 				; unsigned subtract
.8df5	20 b0 98	jsr $98b0			jsr 	NSMIsZero 					; or the mantissa together
.8df8	f0 f5		beq $8def			beq 	_CBCEqual 					; -0 == 0
.8dfa	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8dfd	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8e00	10 ea		bpl $8dec			bpl 	_CBCGreater
.8e02					_CBCLess:
.8e02	a9 ff		lda #$ff			lda 	#$FF
.8e04	60		rts				rts
.8e05					_CBCString:
.8e05	4c 71 8e	jmp $8e71			jmp 	CompareStrings
.8e08					_CBCFloat:
.8e08	4c 43 a2	jmp $a243			jmp 	CompareFloat
.8e0b					CompareFixMinusZero:
.8e0b	20 b0 98	jsr $98b0			jsr 	NSMIsZero
.8e0e	d0 03		bne $8e13			bne 	_CFXMZNotZero
.8e10	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8e13					_CFXMZNotZero:
.8e13	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8e14					StringConcat:
.8e14	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8e17	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8e1a	29 18		and #$18			and 	#NSBTypeMask
.8e1c	c9 10		cmp #$10			cmp 	#NSTString
.8e1e	d0 4e		bne $8e6e			bne		_SCType
.8e20	64 38		stz $38				stz 	zTemp1 						; counting total length
.8e22	e8		inx				inx
.8e23	20 41 8e	jsr $8e41			jsr 	_SCSetupZ0 					; setup for second
.8e26	20 4c 8e	jsr $8e4c			jsr 	_SCLengthZ0 				; length for second
.8e29	ca		dex				dex
.8e2a	20 41 8e	jsr $8e41			jsr 	_SCSetupZ0 					; setup for first
.8e2d	20 4c 8e	jsr $8e4c			jsr 	_SCLengthZ0 				; length for first
.8e30	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8e32	20 ed a7	jsr $a7ed			jsr 	StringTempAllocate
.8e35	20 5f 8e	jsr $8e5f			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8e38	e8		inx				inx
.8e39	20 41 8e	jsr $8e41			jsr 	_SCSetupZ0 					; copy second out
.8e3c	20 5f 8e	jsr $8e5f			jsr 	_SCCopy
.8e3f	ca		dex				dex
.8e40	60		rts				rts
.8e41					_SCSetupZ0:
.8e41	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8e44	85 36		sta $36				sta 	zTemp0
.8e46	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8e49	85 37		sta $37				sta 	zTemp0+1
.8e4b	60		rts				rts
.8e4c					_SCLengthZ0:
.8e4c	5a		phy				phy
.8e4d	a0 00		ldy #$00			ldy 	#0
.8e4f					_SCLenLoop:
.8e4f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e51	f0 0a		beq $8e5d			beq 	_SCLExit
.8e53	c8		iny				iny
.8e54	e6 38		inc $38				inc 	zTemp1
.8e56	10 f7		bpl $8e4f			bpl		_SCLenLoop
.8e58	a9 09		lda #$09		lda	#9
.8e5a	4c 00 8d	jmp $8d00		jmp	ErrorHandler
.8e5d					_SCLExit:
.8e5d	7a		ply				ply
.8e5e	60		rts				rts
.8e5f					_SCCopy:
.8e5f	5a		phy				phy
.8e60	a0 00		ldy #$00			ldy 	#0
.8e62					_SCCopyLoop:
.8e62	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e64	f0 06		beq $8e6c			beq 	_SCCExit
.8e66	20 2b a8	jsr $a82b			jsr 	StringTempWrite
.8e69	c8		iny				iny
.8e6a	80 f6		bra $8e62			bra 	_SCCopyLoop
.8e6c					_SCCExit:
.8e6c	7a		ply				ply
.8e6d	60		rts				rts
.8e6e					_SCType:
.8e6e	4c d7 a5	jmp $a5d7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a004					IntegerDivide:
.a004	fa		plx				plx
.a005	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.a008	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a00b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a00c	0a		asl a				asl 	a
.a00d	10 05		bpl $a014			bpl 	_NotRef
.a00f	48		pha				pha
.a010	20 19 92	jsr $9219			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a013	68		pla				pla
.a014					_NotRef:
.a014	0a		asl a				asl 	a
.a015	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a017	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a01a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.a01d	f0 03		beq $a022			beq 	_IntegerCode 				; if clear, then we have two integers
.a01f	4c d7 a5	jmp $a5d7			jmp 	TypeError 					; anything else, type mismatch.
.a022					_IntegerCode:
.a022	20 44 a0	jsr $a044			jsr 	CheckDivideZero 			; do div zero check
.a025	20 7c a0	jsr $a07c			jsr 	Int32Divide 				; do the division
.a028	20 39 a1	jsr $a139			jsr 	CalculateSign 				; calculate result sign
.a02b					NSMCopyPlusTwoToZero:
.a02b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a02e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a031	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.a034	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a037	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.a03a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a03d	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.a040	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a043	60		rts				rts
.a044					CheckDivideZero:
.a044	e8		inx				inx
.a045	20 b0 98	jsr $98b0			jsr 	NSMIsZero
.a048	f0 02		beq $a04c			beq 	_CDVError
.a04a	ca		dex				dex
.a04b	60		rts				rts
.a04c					_CDVError:
.a04c	a9 03		lda #$03		lda	#3
.a04e	4c 00 8d	jmp $8d00		jmp	ErrorHandler
.a051					IntegerModulus:
.a051	fa		plx				plx
.a052	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.a055	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a058	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a059	0a		asl a				asl 	a
.a05a	10 05		bpl $a061			bpl 	_NotRef
.a05c	48		pha				pha
.a05d	20 19 92	jsr $9219			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a060	68		pla				pla
.a061					_NotRef:
.a061	0a		asl a				asl 	a
.a062	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a064	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a067	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.a06a	f0 03		beq $a06f			beq 	_IntegerCode 				; if clear, then we have two integers
.a06c	4c d7 a5	jmp $a5d7			jmp 	TypeError 					; anything else, type mismatch.
.a06f					_IntegerCode:
.a06f	20 44 a0	jsr $a044			jsr 	CheckDivideZero 			; do div zero check
.a072	20 7c a0	jsr $a07c			jsr 	Int32Divide 				; do the division
.a075	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a078	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.a07b	60		rts				rts
.a07c					Int32Divide:
.a07c	48		pha				pha 								; save AXY
.a07d	5a		phy				phy
.a07e	20 57 98	jsr $9857			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a081	20 7c 98	jsr $987c			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a084	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a086					_I32DivideLoop:
.a086	e8		inx				inx
.a087	e8		inx				inx
.a088	20 95 98	jsr $9895			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a08b	ca		dex				dex
.a08c	ca		dex				dex
.a08d	20 96 98	jsr $9896			jsr 	NSMRotateLeft
.a090	20 bc a0	jsr $a0bc			jsr 	DivideCheckSubtract 		; check if subtract possible
.a093	90 03		bcc $a098			bcc 	_I32DivideNoCarryIn
.a095	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a098					_I32DivideNoCarryIn:
.a098	88		dey				dey 								; loop round till division completed.
.a099	d0 eb		bne $a086			bne 	_I32DivideLoop
.a09b	7a		ply				ply 								; restore AXY and exit
.a09c	68		pla				pla
.a09d	60		rts				rts
.a09e					Int32ShiftDivide:
.a09e	48		pha				pha 								; save AY
.a09f	5a		phy				phy
.a0a0	e8		inx				inx 								; clear S[X+2]
.a0a1	e8		inx				inx
.a0a2	20 80 98	jsr $9880			jsr 	NSMSetZero
.a0a5	ca		dex				dex
.a0a6	ca		dex				dex
.a0a7	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a0a9					_I32SDLoop:
.a0a9	20 bc a0	jsr $a0bc			jsr 	DivideCheckSubtract 		; check if subtract possible
.a0ac	e8		inx				inx
.a0ad	e8		inx				inx
.a0ae	20 96 98	jsr $9896			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a0b1	ca		dex				dex
.a0b2	ca		dex				dex
.a0b3	20 96 98	jsr $9896			jsr 	NSMRotateLeft
.a0b6	88		dey				dey 	 							; do 31 times
.a0b7	d0 f0		bne $a0a9			bne 	_I32SDLoop
.a0b9	7a		ply				ply 								; restore AY and exit
.a0ba	68		pla				pla
.a0bb	60		rts				rts
.a0bc					DivideCheckSubtract:
.a0bc	20 1b 8f	jsr $8f1b			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a0bf	b0 04		bcs $a0c5			bcs 	_DCSExit 					; if carry set, then could do, exit
.a0c1	20 f5 8e	jsr $8ef5			jsr 	AddTopTwoStack 				; add it back in
.a0c4	18		clc				clc 								; and return False
.a0c5					_DCSExit:
.a0c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a0c6					MulInteger:
.a0c6	fa		plx				plx
.a0c7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.a0ca	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a0cd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a0ce	0a		asl a				asl 	a
.a0cf	10 05		bpl $a0d6			bpl 	_NotRef
.a0d1	48		pha				pha
.a0d2	20 19 92	jsr $9219			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a0d5	68		pla				pla
.a0d6					_NotRef:
.a0d6	0a		asl a				asl 	a 							; put MSB of type into A:7
.a0d7	30 0b		bmi $a0e4			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a0d9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a0dc	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.a0df	f0 06		beq $a0e7			beq 	_IntegerCode 				; if clear, then we have two integers
.a0e1	4c 1a a3	jmp $a31a			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a0e4					_StringData:
.a0e4	4c e1 a5	jmp $a5e1			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a0e7					_IntegerCode:
.a0e7	20 f4 a0	jsr $a0f4			jsr 	MultiplyShort
.a0ea	c9 00		cmp #$00			cmp 	#0
.a0ec	f0 05		beq $a0f3			beq 	_MIExit
.a0ee	a9 04		lda #$04		lda	#4
.a0f0	4c 00 8d	jmp $8d00		jmp	ErrorHandler
.a0f3					_MIExit:
.a0f3	60		rts				rts
.a0f4					MultiplyShort:
.a0f4	5a		phy				phy 								; save Y
.a0f5	20 57 98	jsr $9857			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a0f8	20 7c 98	jsr $987c			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a0fb	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a0fd					_I32MLoop:
.a0fd	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a100	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.a103	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.a106	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.a109	f0 28		beq $a133			beq 	_I32MExit 					; exit if zero
.a10b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a10e	29 01		and #$01			and 	#1
.a110	f0 0e		beq $a120			beq 	_I32MNoAdd
.a112	20 f5 8e	jsr $8ef5			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a115	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a118	10 06		bpl $a120			bpl 	_I32MNoAdd
.a11a					_I32ShiftRight:
.a11a	20 a3 98	jsr $98a3			jsr 	NSMShiftRight 				; shift S[X] right
.a11d	c8		iny				iny 								; increment shift count
.a11e	80 0a		bra $a12a			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a120					_I32MNoAdd:
.a120	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a123	70 f5		bvs $a11a			bvs 	_I32ShiftRight 				; instead.
.a125	e8		inx				inx
.a126	20 95 98	jsr $9895			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a129	ca		dex				dex
.a12a					_I32MShiftUpper:
.a12a	e8		inx				inx 								; shift S[X+2] right
.a12b	e8		inx				inx
.a12c	20 a3 98	jsr $98a3			jsr 	NSMShiftRight
.a12f	ca		dex				dex
.a130	ca		dex				dex
.a131	80 ca		bra $a0fd			bra 	_I32MLoop 					; try again.
.a133					_I32MExit:
.a133	20 39 a1	jsr $a139			jsr 	CalculateSign
.a136	98		tya				tya 								; shift in A
.a137	7a		ply				ply 								; restore Y and exit
.a138	60		rts				rts
.a139					CalculateSign:
.a139	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a13c	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.a13f	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a142	0a		asl a				asl 	a 							; shift bit 7 into carry
.a143	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.a146	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8e71					CompareStrings:
.8e71	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8e74	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8e77	29 10		and #$10			and 	#NSBIsString
.8e79	f0 2c		beq $8ea7			beq 	_CSTypeError
.8e7b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8e7e	85 36		sta $36				sta 	zTemp0
.8e80	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8e83	85 37		sta $37				sta 	zTemp0+1
.8e85	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8e88	85 38		sta $38				sta 	zTemp1
.8e8a	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8e8d	85 39		sta $39				sta 	zTemp1+1
.8e8f	5a		phy				phy 								; save Y so we can access strings
.8e90	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8e92					_CSLoop:
.8e92	c8		iny				iny
.8e93	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8e95	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8e97	d0 06		bne $8e9f			bne 	_CSDifferent
.8e99	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8e9b	d0 f5		bne $8e92			bne 	_CSLoop 					; still comparing
.8e9d					_CSExit:
.8e9d	7a		ply				ply 								; reached end, return zero in A from EOS
.8e9e	60		rts				rts
.8e9f					_CSDifferent:
.8e9f	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8ea1	90 fa		bcc $8e9d			bcc		_CSExit
.8ea3	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8ea5	80 f6		bra $8e9d			bra 	_CSExit
.8ea7					_CSTypeError:
.8ea7	4c d7 a5	jmp $a5d7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8eaa					ShiftLeft:
.8eaa	38		sec				sec
.8eab	80 01		bra $8eae			bra 	ShiftMain
.8ead					ShiftRight:
.8ead	18		clc				clc
.8eae					ShiftMain:
.8eae	fa		plx				plx 								; restore X
.8eaf	08		php				php 								; save direction
.8eb0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8eb3	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8eb6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eb7	0a		asl a				asl 	a
.8eb8	10 05		bpl $8ebf			bpl 	_NotRef
.8eba	48		pha				pha
.8ebb	20 19 92	jsr $9219			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ebe	68		pla				pla
.8ebf					_NotRef:
.8ebf	0a		asl a				asl 	a
.8ec0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ec2	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ec5	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ec8	f0 03		beq $8ecd			beq 	_IntegerCode 				; if clear, then we have two integers
.8eca	4c d7 a5	jmp $a5d7			jmp 	TypeError 					; anything else, type mismatch.
.8ecd					_IntegerCode:
.8ecd	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8ed0	29 e0		and #$e0			and 	#$E0
.8ed2	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8ed5	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8ed8	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8edb	d0 13		bne $8ef0			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8edd					_SMLoop:
.8edd	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8ee0	30 11		bmi $8ef3			bmi 	_SMExit 					; exit if done.
.8ee2	28		plp				plp 								; restore direcition setting
.8ee3	08		php				php
.8ee4	90 05		bcc $8eeb			bcc 	_SMRight
.8ee6	20 95 98	jsr $9895			jsr 	NSMShiftLeft 				; shift left if CS
.8ee9	80 f2		bra $8edd			bra 	_SMLoop
.8eeb					_SMRight:
.8eeb	20 a3 98	jsr $98a3			jsr 	NSMShiftRight 				; shift right if CC
.8eee	80 ed		bra $8edd			bra 	_SMLoop
.8ef0					_SMExit0:
.8ef0	20 80 98	jsr $9880			jsr 	NSMSetZero 					; return zero.
.8ef3					_SMExit:
.8ef3	28		plp				plp 								; throw direction
.8ef4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8ef5					AddTopTwoStack:
.8ef5	18		clc				clc
.8ef6	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8ef9	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8efc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8eff	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8f02	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8f05	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f08	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f0b	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8f0e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f11	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f14	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8f17	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f1a	60		rts				rts
.8f1b					SubTopTwoStack:
.8f1b	38		sec				sec
.8f1c	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8f1f	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8f22	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f25	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8f28	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8f2b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f2e	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f31	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8f34	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f37	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f3a	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8f3d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f40	60		rts				rts
.8f41					AddInteger:
.8f41	fa		plx				plx
.8f42	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f45	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f48	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f49	0a		asl a				asl 	a
.8f4a	10 05		bpl $8f51			bpl 	_NotRef
.8f4c	48		pha				pha
.8f4d	20 19 92	jsr $9219			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f50	68		pla				pla
.8f51					_NotRef:
.8f51	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f52	30 0b		bmi $8f5f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f54	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f57	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f5a	f0 06		beq $8f62			beq 	_IntegerCode 				; if clear, then we have two integers
.8f5c	4c a2 a1	jmp $a1a2			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8f5f					_StringData:
.8f5f	4c 14 8e	jmp $8e14			jmp 	StringConcat							; at least one string - don't know both are strings.
.8f62					_IntegerCode:
.8f62					AddCode:
.8f62	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8f65	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8f68	10 8b		bpl $8ef5			bpl 	AddTopTwoStack
.8f6a	20 1b 8f	jsr $8f1b			jsr 	SubTopTwoStack 				; do a physical subtraction
.8f6d	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8f70	10 09		bpl $8f7b			bpl 	_AddExit
.8f72	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8f75	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f78	20 35 98	jsr $9835			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8f7b					_AddExit:
.8f7b	60		rts				rts
.8f7c					SubInteger:
.8f7c	fa		plx				plx
.8f7d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f80	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f83	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f84	0a		asl a				asl 	a
.8f85	10 05		bpl $8f8c			bpl 	_NotRef
.8f87	48		pha				pha
.8f88	20 19 92	jsr $9219			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f8b	68		pla				pla
.8f8c					_NotRef:
.8f8c	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f8d	30 0b		bmi $8f9a			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f8f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f92	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f95	f0 06		beq $8f9d			beq 	_IntegerCode 				; if clear, then we have two integers
.8f97	4c a7 a1	jmp $a1a7			jmp 	FloatingPointSub 							; otherwise at least one float.
.8f9a					_StringData:
.8f9a	4c e1 a5	jmp $a5e1			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8f9d					_IntegerCode:
.8f9d	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8fa0	49 80		eor #$80			eor 	#$80
.8fa2	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8fa5	80 bb		bra $8f62			bra 	AddCode 					; and do the same code as add.
.8fa7					AndInteger:
.8fa7	fa		plx				plx
.8fa8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8fab	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fae	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8faf	0a		asl a				asl 	a
.8fb0	10 05		bpl $8fb7			bpl 	_NotRef
.8fb2	48		pha				pha
.8fb3	20 19 92	jsr $9219			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8fb6	68		pla				pla
.8fb7					_NotRef:
.8fb7	0a		asl a				asl 	a
.8fb8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8fba	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8fbd	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8fc0	f0 03		beq $8fc5			beq 	_IntegerCode 				; if clear, then we have two integers
.8fc2	4c d7 a5	jmp $a5d7			jmp 	TypeError 					; anything else, type mismatch.
.8fc5					_IntegerCode:
.8fc5	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8fc8	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8fcb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8fce	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8fd1	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8fd4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8fd7	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8fda	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8fdd	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8fe0	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8fe3	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8fe6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8fe9	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8fec	60		rts				rts
.8fed					OraInteger:
.8fed	fa		plx				plx
.8fee	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ff1	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ff4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ff5	0a		asl a				asl 	a
.8ff6	10 05		bpl $8ffd			bpl 	_NotRef
.8ff8	48		pha				pha
.8ff9	20 19 92	jsr $9219			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ffc	68		pla				pla
.8ffd					_NotRef:
.8ffd	0a		asl a				asl 	a
.8ffe	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9000	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9003	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9006	f0 03		beq $900b			beq 	_IntegerCode 				; if clear, then we have two integers
.9008	4c d7 a5	jmp $a5d7			jmp 	TypeError 					; anything else, type mismatch.
.900b					_IntegerCode:
.900b	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.900e	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.9011	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9014	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.9017	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.901a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.901d	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.9020	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.9023	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9026	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.9029	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.902c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.902f	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.9032	60		rts				rts
.9033					EorInteger:
.9033	fa		plx				plx
.9034	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9037	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.903a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.903b	0a		asl a				asl 	a
.903c	10 05		bpl $9043			bpl 	_NotRef
.903e	48		pha				pha
.903f	20 19 92	jsr $9219			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9042	68		pla				pla
.9043					_NotRef:
.9043	0a		asl a				asl 	a
.9044	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9046	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9049	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.904c	f0 03		beq $9051			beq 	_IntegerCode 				; if clear, then we have two integers
.904e	4c d7 a5	jmp $a5d7			jmp 	TypeError 					; anything else, type mismatch.
.9051					_IntegerCode:
.9051	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.9054	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.9057	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.905a	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.905d	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.9060	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9063	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.9066	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.9069	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.906c	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.906f	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.9072	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9075	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.9078	60		rts				rts
.9079					WordIndirect:
.9079	fa		plx				plx
.907a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.907d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9080	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9081	0a		asl a				asl 	a
.9082	10 05		bpl $9089			bpl 	_NotRef
.9084	48		pha				pha
.9085	20 19 92	jsr $9219			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9088	68		pla				pla
.9089					_NotRef:
.9089	0a		asl a				asl 	a
.908a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.908c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.908f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9092	f0 03		beq $9097			beq 	_IntegerCode 				; if clear, then we have two integers
.9094	4c d7 a5	jmp $a5d7			jmp 	TypeError 					; anything else, type mismatch.
.9097					_IntegerCode:
.9097	20 62 8f	jsr $8f62			jsr 	AddCode 					; add the two values
.909a	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.909c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.909f	60		rts				rts
.90a0					ByteIndirect:
.90a0	fa		plx				plx
.90a1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.90a4	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.90a7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90a8	0a		asl a				asl 	a
.90a9	10 05		bpl $90b0			bpl 	_NotRef
.90ab	48		pha				pha
.90ac	20 19 92	jsr $9219			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90af	68		pla				pla
.90b0					_NotRef:
.90b0	0a		asl a				asl 	a
.90b1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90b3	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90b6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.90b9	f0 03		beq $90be			beq 	_IntegerCode 				; if clear, then we have two integers
.90bb	4c d7 a5	jmp $a5d7			jmp 	TypeError 					; anything else, type mismatch.
.90be					_IntegerCode:
.90be	20 62 8f	jsr $8f62			jsr 	AddCode 					; add the two values
.90c1	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.90c3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.90c6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a147					ConvertInt16:
.a147	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.a14a	8e 10 06	stx $0610			stx 	NSMantissa1
.a14d	9c 18 06	stz $0618			stz 	NSMantissa2
.a150	9c 20 06	stz $0620			stz 	NSMantissa3
.a153	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.a156	a2 00		ldx #$00			ldx 	#0 							; stack level
.a158	a9 0a		lda #$0a			lda 	#10 						; base
.a15a	80 00		bra $a15c			bra 	ConvertInt32
.a15c					ConvertInt32:
.a15c	5a		phy				phy
.a15d	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a15f	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.a162	10 08		bpl $a16c			bpl 	_CI32NotNeg
.a164	48		pha				pha
.a165	a9 2d		lda #$2d			lda 	#'-'
.a167	99 77 08	sta $0877,y			sta 	NumberBuffer,y
.a16a	c8		iny				iny
.a16b	68		pla				pla
.a16c					_CI32NotNeg:
.a16c	20 7a a1	jsr $a17a			jsr 	_CI32DivideConvert 			; recursive conversion
.a16f	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a171	99 77 08	sta $0877,y			sta 	NumberBuffer,y
.a174	7a		ply				ply
.a175	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.a177	a9 77		lda #$77			lda 	#NumberBuffer & $FF
.a179	60		rts				rts
.a17a					_CI32DivideConvert:
.a17a	e8		inx				inx 								; write to next slot up
.a17b	20 82 98	jsr $9882			jsr 	NSMSetByte
.a17e	ca		dex				dex
.a17f	20 7c a0	jsr $a07c			jsr 	Int32Divide 				; divide
.a182	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.a185	48		pha				pha
.a186	20 2b a0	jsr $a02b			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a189	20 b0 98	jsr $98b0			jsr 	NSMIsZero 					; is it zero ?
.a18c	f0 06		beq $a194			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a18e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a191	20 7a a1	jsr $a17a			jsr 	_CI32DivideConvert 			; and recusrively call.
.a194					_CI32NoRecurse:
.a194	68		pla				pla 								; remainder
.a195	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a197	90 02		bcc $a19b			bcc 	_CI32NotHex
.a199	69 26		adc #$26			adc 	#6+32
.a19b					_CI32NotHex:
.a19b	69 30		adc #$30			adc 	#48
.a19d	99 77 08	sta $0877,y			sta 	NumberBuffer,y 				; write out and exit
.a1a0	c8		iny				iny
.a1a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.90c7					PrecedenceLevel:
>90c7	04					.byte	 4	; $00 <<
>90c8	02					.byte	 2	; $01 <=
>90c9	02					.byte	 2	; $02 <>
>90ca	00					.byte	 0	; $03 !!3
>90cb	00					.byte	 0	; $04 ><
>90cc	02					.byte	 2	; $05 >=
>90cd	04					.byte	 4	; $06 >>
>90ce	00					.byte	 0	; $07 !!7
>90cf	00					.byte	 0	; $08 !!8
>90d0	00					.byte	 0	; $09 !!9
>90d1	00					.byte	 0	; $0a !!10
>90d2	00					.byte	 0	; $0b !!11
>90d3	00					.byte	 0	; $0c !!12
>90d4	00					.byte	 0	; $0d !!13
>90d5	00					.byte	 0	; $0e !!14
>90d6	00					.byte	 0	; $0f !!15
>90d7	00					.byte	 0	; $10 @
>90d8	00					.byte	 0	; $11 !!17
>90d9	00					.byte	 0	; $12 !!18
>90da	00					.byte	 0	; $13 [
>90db	04					.byte	 4	; $14 \
>90dc	00					.byte	 0	; $15 ]
>90dd	01					.byte	 1	; $16 ^
>90de	00					.byte	 0	; $17 _
>90df	00					.byte	 0	; $18 `
>90e0	00					.byte	 0	; $19 !!25
>90e1	00					.byte	 0	; $1a !!26
>90e2	00					.byte	 0	; $1b {
>90e3	01					.byte	 1	; $1c |
>90e4	00					.byte	 0	; $1d }
>90e5	00					.byte	 0	; $1e ~
>90e6	00					.byte	 0	; $1f [7m<7F>[m
>90e7	00					.byte	 0	; $20
>90e8	05					.byte	 5	; $21 !
>90e9	00					.byte	 0	; $22 "
>90ea	00					.byte	 0	; $23 #
>90eb	05					.byte	 5	; $24 $
>90ec	04					.byte	 4	; $25 %
>90ed	01					.byte	 1	; $26 &
>90ee	00					.byte	 0	; $27 '
>90ef	00					.byte	 0	; $28 (
>90f0	00					.byte	 0	; $29 )
>90f1	04					.byte	 4	; $2a *
>90f2	03					.byte	 3	; $2b +
>90f3	00					.byte	 0	; $2c ,
>90f4	03					.byte	 3	; $2d -
>90f5	00					.byte	 0	; $2e .
>90f6	04					.byte	 4	; $2f /
>90f7	00					.byte	 0	; $30 0
>90f8	00					.byte	 0	; $31 1
>90f9	00					.byte	 0	; $32 2
>90fa	00					.byte	 0	; $33 3
>90fb	00					.byte	 0	; $34 4
>90fc	00					.byte	 0	; $35 5
>90fd	00					.byte	 0	; $36 6
>90fe	00					.byte	 0	; $37 7
>90ff	00					.byte	 0	; $38 8
>9100	00					.byte	 0	; $39 9
>9101	00					.byte	 0	; $3a :
>9102	00					.byte	 0	; $3b ;
>9103	02					.byte	 2	; $3c <
>9104	02					.byte	 2	; $3d =
>9105	02					.byte	 2	; $3e >
>9106	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9107					EvaluateExpressionAt0:
.9107	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9109					EvaluateExpression:
.9109	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.910b					EvaluateExpressionAtPrecedence:
.910b	48		pha				pha 								; save precedence level
.910c	20 da 93	jsr $93da			jsr 	EvaluateTerm 				; evaluate term into level X.
.910f	68		pla				pla 								; restore precedence level.
.9110					_EXPRLoop:
.9110	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9112	b1 30		lda ($30),y			lda 	(codePtr),y
.9114	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9116	b0 25		bcs $913d			bcs 	_EXPRExit
.9118	da		phx				phx 								; read the operator precedence
.9119	aa		tax				tax
.911a	bd c7 90	lda $90c7,x			lda 	PrecedenceLevel,x
.911d	fa		plx				plx
.911e	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9120	f0 1b		beq $913d			beq 	_EXPRExit
.9122	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9124	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9126	c5 37		cmp $37				cmp 	zTemp0+1
.9128	b0 13		bcs $913d			bcs		_EXPRExit 					; if current >= operator exit
.912a	48		pha				pha 								; save current precedence.
.912b	b1 30		lda ($30),y			lda 	(codePtr),y
.912d	c8		iny				iny
.912e	48		pha				pha
.912f	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9131	e8		inx				inx 								; work out the right hand side.
.9132	20 0b 91	jsr $910b			jsr 	EvaluateExpressionAtPrecedence
.9135	ca		dex				dex
.9136	68		pla				pla 								; get operator, call the code.
.9137	20 40 91	jsr $9140			jsr 	_EXPRCaller
.913a	68		pla				pla 								; restore precedence level
.913b	80 d3		bra $9110			bra 	_EXPRLoop 					; and go round.
.913d					_EXPRExit:
.913d	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.913f	60		rts				rts
.9140					_EXPRCaller:
.9140	da		phx				phx 								; save on stack, first thing is to restore it
.9141	0a		asl a				asl 	a 							; double so can use vectors into X
.9142	aa		tax				tax
.9143	7c 7c 80	jmp ($807c,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a1a2					FloatingPointAdd:
.a1a2	20 43 a3	jsr $a343			jsr 	FloatPrepare 				; prepare for floats
.a1a5	80 0b		bra $a1b2			bra 	FloatAdd
.a1a7					FloatingPointSub:
.a1a7	20 43 a3	jsr $a343			jsr 	FloatPrepare 				; prepare for floats
.a1aa					FloatSubtract:
.a1aa	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.a1ad	49 80		eor #$80			eor 	#$80
.a1af	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.a1b2					FloatAdd:
.a1b2	48		pha				pha
.a1b3	5a		phy				phy
.a1b4	20 54 a3	jsr $a354			jsr 	NSNormalise 				; normalise S[X]
.a1b7	f0 54		beq $a20d			beq 	_FAReturn1
.a1b9	e8		inx				inx 								; normalise S[X+1]
.a1ba	20 54 a3	jsr $a354			jsr 	NSNormalise
.a1bd	ca		dex				dex
.a1be	c9 00		cmp #$00			cmp 	#0
.a1c0	f0 6f		beq $a231			beq 	_FAExit 					; if so, just return A
.a1c2	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.a1c5	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.a1c8	f0 1b		beq $a1e5			beq 	_FAExponentsEqual
.a1ca	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.a1cd	a8		tay				tay
.a1ce	38		sec				sec 								; do a signed comparison of the exponents.
.a1cf	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a1d2	50 02		bvc $a1d6			bvc 	_FANoSignedChange
.a1d4	49 80		eor #$80			eor 	#$80
.a1d6					_FANoSignedChange:
.a1d6	29 80		and #$80			and 	#$80
.a1d8	10 03		bpl $a1dd			bpl 	_FAHaveMax
.a1da	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.a1dd					_FAHaveMax:
.a1dd	20 34 a2	jsr $a234			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a1e0	e8		inx				inx
.a1e1	20 34 a2	jsr $a234			jsr 	_FAShiftToExponent
.a1e4	ca		dex				dex
.a1e5					_FAExponentsEqual:
.a1e5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.a1e8	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a1eb	30 10		bmi $a1fd			bmi 	_FADifferentSigns
.a1ed	20 f5 8e	jsr $8ef5			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a1f0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a1f3	10 3c		bpl $a231			bpl 	_FAExit 					; if no, we are done.
.a1f5	20 a3 98	jsr $98a3			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a1f8	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.a1fb	80 34		bra $a231			bra 	_FAExit
.a1fd					_FADifferentSigns:
.a1fd	20 1b 8f	jsr $8f1b			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a200	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.a203	10 2c		bpl $a231			bpl 	_FAExit 					; if no, we are done.
.a205	20 2c 98	jsr $982c			jsr 	NSMNegate 					; netate result
.a208	20 35 98	jsr $9835			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a20b	80 24		bra $a231			bra 	_FAExit
.a20d					_FAReturn1:
.a20d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.a210	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a213	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.a216	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a219	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.a21c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a21f	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.a222	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a225	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.a228	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a22b	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.a22e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a231					_FAExit:
.a231	7a		ply				ply
.a232	68		pla				pla
.a233	60		rts				rts
.a234					_FAShiftToExponent:
.a234					_FAShiftToExponent2:
.a234	98		tya				tya 								; compare Y to exponent
.a235	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a238	f0 08		beq $a242			beq 	_FASEExit 					; exit if so.
.a23a	20 a3 98	jsr $98a3			jsr 	NSMShiftRight	 			; shift the mantissa right
.a23d	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.a240	80 f2		bra $a234			bra 	_FAShiftToExponent2
.a242					_FASEExit:
.a242	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a243					CompareFloat:
.a243	20 aa a1	jsr $a1aa			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a246	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a249	29 f8		and #$f8			and 	#$F8
.a24b	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.a24e	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.a251	f0 09		beq $a25c			beq 	_FCExit 					; zero, so approximately identical
.a253	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a255	3c 00 06	bit $0600,x			bit 	NSStatus,x
.a258	10 02		bpl $a25c			bpl 	_FCExit
.a25a					_FCNegative:
.a25a	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a25c					_FCExit:
.a25c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a25d					FDivideCommand:
.a25d	fa		plx				plx	 								; restore stack position
.a25e	20 43 a3	jsr $a343			jsr 	FloatPrepare 				; prepare for floats
.a261					FloatDivide:
.a261	48		pha				pha
.a262	e8		inx				inx
.a263	20 54 a3	jsr $a354			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a266	ca		dex				dex
.a267	c9 00		cmp #$00			cmp 	#0
.a269	f0 20		beq $a28b			beq 	_FDZero
.a26b	20 54 a3	jsr $a354			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a26e	f0 19		beq $a289			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a270	20 9e a0	jsr $a09e			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a273	20 2b a0	jsr $a02b			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a276	20 54 a3	jsr $a354			jsr		NSNormalise 				; renormalise
.a279	20 39 a1	jsr $a139			jsr 	CalculateSign 				; calculate result sign
.a27c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.a27f	38		sec				sec
.a280	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a283	38		sec				sec
.a284	e9 1e		sbc #$1e			sbc 	#30
.a286	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a289					_FDExit:
.a289	68		pla				pla
.a28a	60		rts				rts
.a28b					_FDZero:
.a28b	a9 03		lda #$03		lda	#3
.a28d	4c 00 8d	jmp $8d00		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a290					FloatFractionalPart:
.a290	5a		phy				phy
.a291	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.a294	29 7f		and #$7f			and 	#$7F
.a296	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a299	20 54 a3	jsr $a354			jsr 	NSNormalise
.a29c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a29f	38		sec				sec
.a2a0	e9 e0		sbc #$e0			sbc 	#$E0
.a2a2	90 31		bcc $a2d5			bcc 	_FFPExit 					; already fractional
.a2a4	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a2a6	b0 2a		bcs $a2d2			bcs 	_FFPZero
.a2a8	a8		tay				tay 								; put count to do in Y
.a2a9	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.a2ac	20 d7 a2	jsr $a2d7			jsr 	_FFPPartial
.a2af	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a2b2	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.a2b5	20 d7 a2	jsr $a2d7			jsr 	_FFPPartial
.a2b8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a2bb	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a2be	20 d7 a2	jsr $a2d7			jsr 	_FFPPartial
.a2c1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a2c4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a2c7	20 d7 a2	jsr $a2d7			jsr 	_FFPPartial
.a2ca	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a2cd	20 b0 98	jsr $98b0			jsr 	NSMIsZero 					; zeroed check.
.a2d0	d0 03		bne $a2d5			bne 	_FFPExit
.a2d2					_FFPZero:
.a2d2	20 80 98	jsr $9880			jsr 	NSMSetZero
.a2d5					_FFPExit:
.a2d5	7a		ply				ply
.a2d6	60		rts				rts
.a2d7					_FFPPartial:
.a2d7	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a2d9	f0 17		beq $a2f2			beq 	_FFFPPExit
.a2db	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a2dd	b0 0c		bcs $a2eb			bcs 	_FFFPPWholeByte
.a2df	5a		phy				phy
.a2e0					_FFFPPLeft:
.a2e0	0a		asl a				asl 	a
.a2e1	88		dey				dey
.a2e2	d0 fc		bne $a2e0			bne 	_FFFPPLeft
.a2e4	7a		ply				ply
.a2e5					_FFFPPRight:
.a2e5	4a		lsr a				lsr 	a
.a2e6	88		dey				dey
.a2e7	d0 fc		bne $a2e5			bne 	_FFFPPRight
.a2e9	80 07		bra $a2f2			bra 	_FFFPPExit
.a2eb					_FFFPPWholeByte:
.a2eb	98		tya				tya 								; subtract 8 from count
.a2ec	38		sec				sec
.a2ed	e9 08		sbc #$08			sbc 	#8
.a2ef	a8		tay				tay
.a2f0	a9 00		lda #$00			lda 	#0 							; and clear all
.a2f2					_FFFPPExit:
.a2f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a2f3					FloatIntegerPart:
.a2f3	48		pha				pha
.a2f4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.a2f7	f0 1f		beq $a318			beq 	_FIPExit 					; if so do nothing
.a2f9	20 b0 98	jsr $98b0			jsr 	NSMIsZero 					; is it zero ?
.a2fc	f0 17		beq $a315			beq 	_FIPZero 					; if so return zero.
.a2fe	20 54 a3	jsr $a354			jsr 	NSNormalise 				; normalise
.a301	f0 12		beq $a315			beq 	_FIPZero 					; normalised to zero, exit zero
.a303					_FIPShift:
.a303	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a306	10 08		bpl $a310			bpl 	_FIPCheckZero
.a308	20 a3 98	jsr $98a3			jsr 	NSMShiftRight 				; shift mantissa right
.a30b	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.a30e	80 f3		bra $a303			bra 	_FIPShift
.a310					_FIPCheckZero:
.a310	20 b0 98	jsr $98b0			jsr 	NSMIsZero 					; avoid -0 problem
.a313	d0 03		bne $a318			bne 	_FIPExit 					; set to zero if mantissa zero.
.a315					_FIPZero:
.a315	20 80 98	jsr $9880			jsr 	NSMSetZero
.a318					_FIPExit:
.a318	68		pla				pla
.a319	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a31a					FloatingPointMultiply:
.a31a	20 43 a3	jsr $a343			jsr 	FloatPrepare 				; prepare for floats
.a31d					FloatMultiply:
.a31d	48		pha				pha
.a31e	20 54 a3	jsr $a354			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a321	f0 1b		beq $a33e			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a323	e8		inx				inx
.a324	20 54 a3	jsr $a354			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a327	ca		dex				dex
.a328	c9 00		cmp #$00			cmp 	#0
.a32a	f0 0f		beq $a33b			beq 	_FDSetZero
.a32c	20 f4 a0	jsr $a0f4			jsr 	MultiplyShort 				; calculate the result.
.a32f	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a332	18		clc				clc
.a333	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.a336	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a339	80 03		bra $a33e			bra 	_FDExit
.a33b					_FDSetZero:
.a33b	20 80 98	jsr $9880			jsr 	NSMSetZero 					; return 0
.a33e					_FDExit:
.a33e	20 54 a3	jsr $a354			jsr 	NSNormalise 				; normalise the result
.a341	68		pla				pla
.a342	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a343					FloatPrepare:
.a343	20 19 92	jsr $9219			jsr 	DereferenceTopTwo 			; dereference the top two values
.a346	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.a349	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a34c	29 10		and #$10			and 	#NSBIsString
.a34e	d0 01		bne $a351			bne 	_FDType
.a350	60		rts				rts
.a351					_FDType:
.a351	4c d7 a5	jmp $a5d7			jmp 	TypeError
.a354					NSNormalise:
.a354	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.a357	29 80		and #$80			and 	#$80
.a359	09 08		ora #$08			ora 	#NSTFloat
.a35b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a35e	20 b0 98	jsr $98b0			jsr 	NSMIsZero 					; if zero exit
.a361	d0 09		bne $a36c			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a363	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a366	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.a369	a9 00		lda #$00			lda 	#0 							; set Z flag
.a36b	60		rts				rts
.a36c					_NSNormaliseOptimise:
.a36c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a36f	d0 22		bne $a393			bne 	_NSNormaliseLoop
.a371	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.a374	30 1d		bmi $a393			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a376	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a379	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a37c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a37f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a382	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a385	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.a388	bd 28 06	lda $0628,x			lda 	NSExponent,x
.a38b	38		sec				sec
.a38c	e9 08		sbc #$08			sbc 	#8
.a38e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a391	80 d9		bra $a36c			bra 	_NSNormaliseOptimise
.a393					_NSNormaliseLoop:
.a393	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a396	70 08		bvs $a3a0			bvs 	_NSNExit 					; exit if so with Z flag clear
.a398	20 95 98	jsr $9895			jsr 	NSMShiftLeft 				; shift mantissa left
.a39b	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.a39e	80 f3		bra $a393			bra 	_NSNormaliseLoop
.a3a0					_NSNExit:
.a3a0	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a3a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9146					AssignNumber:
.9146	5a		phy				phy
.9147	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.914a	85 36		sta $36				sta 	zTemp0
.914c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.914f	85 37		sta $37				sta 	zTemp0+1
.9151	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.9154	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9156	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9159	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.915b	c9 08		cmp #$08			cmp 	#NSTFloat
.915d	f0 2a		beq $9189			beq 	_ANFloat
.915f	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.9162	f0 05		beq $9169			beq		_ANNotFloat
.9164	e8		inx				inx
.9165	20 f3 a2	jsr $a2f3			jsr 	FloatIntegerPart 			; make it an integer
.9168	ca		dex				dex
.9169					_ANNotFloat:
.9169	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.916c	29 03		and #$03			and 	#3
.916e	d0 05		bne $9175			bne 	_ANByteWord
.9170	20 95 91	jsr $9195			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9173	80 1e		bra $9193			bra 	_ANExit
.9175					_ANByteWord:
.9175	48		pha				pha 								; save count
.9176	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.9179	92 36		sta ($36)			sta 	(zTemp0)
.917b	68		pla				pla
.917c	c9 01		cmp #$01			cmp	 	#1
.917e	f0 13		beq $9193			beq 	_ANExit
.9180	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.9183	a0 01		ldy #$01			ldy 	#1
.9185	91 36		sta ($36),y			sta 	(zTemp0),y
.9187	80 0a		bra $9193			bra 	_ANExit
.9189					_ANFloat:
.9189	20 95 91	jsr $9195			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.918c	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.918f	a0 04		ldy #$04			ldy 	#4
.9191	91 36		sta ($36),y			sta 	(zTemp0),y
.9193					_ANExit:
.9193	7a		ply				ply
.9194	60		rts				rts
.9195					_ANCopy4PackSign:
.9195	a0 03		ldy #$03			ldy 	#3
.9197	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.919a	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.919c	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.919f	91 36		sta ($36),y			sta 	(zTemp0),y
.91a1	88		dey				dey
.91a2	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.91a5	91 36		sta ($36),y			sta 	(zTemp0),y
.91a7	88		dey				dey
.91a8	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.91ab	91 36		sta ($36),y			sta 	(zTemp0),y
.91ad	88		dey				dey
.91ae	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.91b1	91 36		sta ($36),y			sta 	(zTemp0),y
.91b3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.91b4					AssignString:
.91b4	5a		phy				phy
.91b5	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.91b8	85 38		sta $38				sta 	zTemp1
.91ba	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.91bd	85 39		sta $39				sta 	zTemp1+1
.91bf	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.91c2	85 36		sta $36				sta 	zTemp0
.91c4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.91c7	85 37		sta $37				sta 	zTemp0+1
.91c9	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.91cb	b1 36		lda ($36),y			lda 	(zTemp0),y
.91cd	f0 23		beq $91f2			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.91cf	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.91d0	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.91d2	e9 02		sbc #$02			sbc 	#2
.91d4	85 3c		sta $3c				sta 	zsTemp
.91d6	a0 01		ldy #$01			ldy 	#1
.91d8	b1 36		lda ($36),y			lda 	(zTemp0),y
.91da	e9 00		sbc #$00			sbc 	#0
.91dc	85 3d		sta $3d				sta 	zsTemp+1
.91de	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.91e0					_ASGetLength:
.91e0	c8		iny				iny
.91e1	b1 38		lda ($38),y			lda 	(zTemp1),y
.91e3	d0 fb		bne $91e0			bne 	_ASGetLength
.91e5	98		tya				tya 								; is this length <= current length
.91e6	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.91e8	90 20		bcc $920a			bcc 	_ASCopyString
.91ea	f0 1e		beq $920a			beq 	_ASCopyString
.91ec	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.91ee	a0 01		ldy #$01			ldy 	#1
.91f0	91 3c		sta ($3c),y			sta 	(zsTemp),y
.91f2					_ASNewStringRequired:
.91f2	e8		inx				inx 								; concrete the new string.
.91f3	20 72 a7	jsr $a772			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.91f6	ca		dex				dex
.91f7	18		clc				clc
.91f8	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.91fb	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.91fd	92 36		sta ($36)			sta 	(zTemp0)
.91ff	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9202	69 00		adc #$00			adc 	#0
.9204	a0 01		ldy #$01			ldy 	#1
.9206	91 36		sta ($36),y			sta 	(zTemp0),y
.9208	80 0d		bra $9217			bra 	_ASExit
.920a					_ASCopyString:
.920a	a0 00		ldy #$00			ldy 	#0
.920c					_ASCopyLoop:
.920c	b1 38		lda ($38),y			lda 	(zTemp1),y
.920e	c8		iny				iny
.920f	c8		iny				iny
.9210	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9212	88		dey				dey
.9213	c9 00		cmp #$00			cmp 	#0
.9215	d0 f5		bne $920c			bne 	_ASCopyLoop
.9217					_ASExit:
.9217	7a		ply				ply
.9218	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9219					DereferenceTopTwo:
.9219	e8		inx				inx
.921a	20 1e 92	jsr $921e			jsr 	Dereference 				; deref x+1
.921d	ca		dex				dex  								; falls through to deref x
.921e					Dereference:
.921e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.9221	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9223	f0 57		beq $927c			beq 	_DRFExit 					; not a reference
.9225	5a		phy				phy
.9226	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9229	85 36		sta $36				sta 	zTemp0
.922b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.922e	85 37		sta $37				sta 	zTemp0+1
.9230	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.9233	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9235	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9238	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.923b	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.923d	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.923f	f0 0f		beq $9250			beq 	_DRFDereferenceTwo
.9241	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9243	f0 39		beq $927e			beq 	_DRFFull
.9245	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9248	29 03		and #$03			and 	#3
.924a	f0 32		beq $927e			beq 	_DRFFull 					; the whole word
.924c	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.924e	f0 07		beq $9257			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9250					_DRFDereferenceTwo:
.9250	a0 01		ldy #$01			ldy 	#1
.9252	b1 36		lda ($36),y			lda 	(zTemp0),y
.9254	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9257					_DRFClear23:
.9257	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.925a	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.925d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.9260	29 18		and #$18			and 	#NSBTypeMask
.9262	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9265	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9267	d0 12		bne $927b			bne 	_DRFNotString
.9269	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.926c	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.926f	d0 0a		bne $927b			bne 	_DRFNotString
.9271	a9 7d		lda #$7d			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9273	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.9276	a9 92		lda #$92			lda 	#_DRFNullString >> 8
.9278	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.927b					_DRFNotString
.927b	7a		ply				ply 								; restore Y and exit
.927c					_DRFExit:
.927c	60		rts				rts
.927d					_DRFNullString:
>927d	00						.byte 	0
.927e					_DRFFull:
.927e	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9280	b1 36		lda ($36),y			lda 	(zTemp0),y
.9282	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9285	c8		iny				iny
.9286	b1 36		lda ($36),y			lda 	(zTemp0),y
.9288	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.928b	c8		iny				iny
.928c	b1 36		lda ($36),y			lda 	(zTemp0),y
.928e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9291	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.9294	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.9297	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9299	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.929c	f0 06		beq $92a4			beq 	_DRFNoExponent
.929e	c8		iny				iny 								; if not, read the exponent as well.
.929f	b1 36		lda ($36),y			lda 	(zTemp0),y
.92a1	9d 28 06	sta $0628,x			sta 	NSExponent,x
.92a4					_DRFNoExponent:
.92a4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.92a7	10 0d		bpl $92b6			bpl 	_DRFExit2 					; if not, then exit.
.92a9	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.92ab	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.92ae	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.92b1	09 80		ora #$80			ora 	#NSBIsNegative
.92b3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.92b6					_DRFExit2:
.92b6	7a		ply				ply
.92b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.92b8					EncodeNumberStart:
.92b8	38		sec				sec
.92b9	80 01		bra $92bc			bra 	EncodeNumberContinue+1
.92bb					EncodeNumberContinue:
.92bb	18		clc				clc
.92bc					EncodeNumber:
.92bc	08		php				php 								; save reset.
.92bd	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.92bf	f0 12		beq $92d3			beq 	_ENIsOkay
.92c1	c9 30		cmp #$30			cmp 	#"0"
.92c3	90 04		bcc $92c9			bcc 	_ENBadNumber
.92c5	c9 3a		cmp #$3a			cmp 	#"9"+1
.92c7	90 0a		bcc $92d3			bcc 	_ENIsOkay
.92c9					_ENBadNumber:
.92c9	28		plp				plp 								; throw saved reset
.92ca	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.92cd	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.92cf	f0 7e		beq $934f			beq 	_ENConstructFinal
.92d1					_ENFail:
.92d1	18		clc				clc 								; not allowed
.92d2	60		rts				rts
.92d3					_ENIsOkay:
.92d3	28		plp				plp 								; are we restarting
.92d4	90 15		bcc $92eb			bcc 	_ENNoRestart
.92d6					_ENStartEncode:
.92d6	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.92d8	f0 0c		beq $92e6			beq 	_ENFirstDP
.92da	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.92dc	20 82 98	jsr $9882			jsr 	NSMSetByte
.92df	a9 01		lda #$01			lda 	#ESTA_Low
.92e1					_ENExitChange:
.92e1	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.92e4	38		sec				sec
.92e5	60		rts				rts
.92e6					_ENFirstDP:
.92e6	20 80 98	jsr $9880			jsr 	NSMSetZero 					; clear integer part
.92e9	80 3f		bra $932a			bra 	_ESTASwitchFloat			; go straight to float and exi
.92eb					_ENNoRestart:
.92eb	48		pha				pha 								; save on stack.
.92ec	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.92ef	c9 01		cmp #$01			cmp 	#ESTA_Low
.92f1	f0 09		beq $92fc			beq  	_ESTALowState
.92f3	c9 02		cmp #$02			cmp 	#ESTA_High
.92f5	f0 29		beq $9320			beq 	_ESTAHighState
.92f7	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.92f9	f0 3b		beq $9336			beq 	_ESTADecimalState
>92fb	db						.byte 	$DB 						; causes a break in the emulator
.92fc					_ESTALowState:
.92fc	68		pla				pla 								; get value back
.92fd	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.92ff	f0 29		beq $932a			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9301	29 0f		and #$0f			and 	#15 						; make digit
.9303	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.9306	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9309	0a		asl a				asl 	a
.930a	0a		asl a				asl 	a
.930b	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.930e	0a		asl a				asl 	a
.930f	6d 06 07	adc $0706			adc 	DigitTemp
.9312	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9315	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9317	90 05		bcc $931e			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9319	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.931b	8d 05 07	sta $0705			sta 	EncodeState
.931e					_ESTANoSwitch:
.931e	38		sec				sec
.931f	60		rts				rts
.9320					_ESTAHighState:
.9320	68		pla				pla 								; get value back
.9321	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9323	f0 05		beq $932a			beq 	_ESTASwitchFloat
.9325	20 89 93	jsr $9389			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9328	38		sec				sec
.9329	60		rts				rts
.932a					_ESTASwitchFloat:
.932a	9c 07 07	stz $0707			stz 	DecimalCount
.932d	e8		inx				inx 								; zero the decimal additive.
.932e	20 80 98	jsr $9880			jsr 	NSMSetZero
.9331	ca		dex				dex
.9332	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9334	80 ab		bra $92e1			bra 	_ENExitChange
.9336					_ESTADecimalState:
.9336	68		pla				pla 								; digit.
.9337	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9339	f0 96		beq $92d1			beq 	_ENFail
.933b	e8		inx				inx 								; put digit into fractional part of X+1
.933c	20 89 93	jsr $9389			jsr 	ESTAShiftDigitIntoMantissa
.933f	ca		dex				dex
.9340	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.9343	ad 07 07	lda $0707			lda 	DecimalCount
.9346	c9 0b		cmp #$0b			cmp 	#11
.9348	f0 02		beq $934c			beq 	_ESTADSFail
.934a	38		sec				sec
.934b	60		rts				rts
.934c					_ESTADSFail:
.934c	4c d2 a5	jmp $a5d2			jmp 	RangeError
.934f					_ENConstructFinal:
.934f	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.9352	f0 33		beq $9387			beq 	_ENCFExit 					; no decimals
.9354	5a		phy				phy
.9355	0a		asl a				asl 	a 							; x 4 and CLC
.9356	0a		asl a				asl 	a
.9357	6d 07 07	adc $0707			adc 	DecimalCount
.935a	a8		tay				tay
.935b	b9 91 a5	lda $a591,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.935e	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9361	b9 92 a5	lda $a592,y			lda 	DecimalScalarTable-5+1,y
.9364	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9367	b9 93 a5	lda $a593,y			lda 	DecimalScalarTable-5+2,y
.936a	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.936d	b9 94 a5	lda $a594,y			lda 	DecimalScalarTable-5+3,y
.9370	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9373	b9 95 a5	lda $a595,y			lda 	DecimalScalarTable-5+4,y
.9376	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9379	a9 08		lda #$08			lda 	#NSTFloat
.937b	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.937e	7a		ply				ply
.937f	e8		inx				inx 								; multiply decimal const by decimal scalar
.9380	20 1d a3	jsr $a31d			jsr 	FloatMultiply
.9383	ca		dex				dex
.9384	20 b2 a1	jsr $a1b2			jsr 	FloatAdd 					; add to integer part.
.9387					_ENCFExit:
.9387	18		clc				clc 								; reject the digit.
.9388	60		rts				rts
.9389					ESTAShiftDigitIntoMantissa:
.9389	29 0f		and #$0f			and 	#15 						; save digit
.938b	48		pha				pha
.938c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.938f	48		pha				pha
.9390	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9393	48		pha				pha
.9394	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9397	48		pha				pha
.9398	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.939b	48		pha				pha
.939c	20 95 98	jsr $9895			jsr 	NSMShiftLeft 				; x 2
.939f	20 95 98	jsr $9895			jsr 	NSMShiftLeft 				; x 4
.93a2	18		clc				clc 								; pop mantissa and add
.93a3	68		pla				pla
.93a4	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.93a7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.93aa	68		pla				pla
.93ab	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.93ae	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.93b1	68		pla				pla
.93b2	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.93b5	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.93b8	68		pla				pla
.93b9	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.93bc	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.93bf	20 95 98	jsr $9895			jsr 	NSMShiftLeft 				; x 10
.93c2	68		pla				pla 								; add digit
.93c3	18		clc				clc
.93c4	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.93c7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.93ca	90 0d		bcc $93d9			bcc 	_ESTASDExit
.93cc	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.93cf	d0 08		bne $93d9			bne 	_ESTASDExit
.93d1	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.93d4	d0 03		bne $93d9			bne 	_ESTASDExit
.93d6	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.93d9					_ESTASDExit:
.93d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.93da					EvaluateTerm:
.93da	b1 30		lda ($30),y			lda 	(codePtr),y
.93dc	30 18		bmi $93f6			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.93de	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.93e0	b0 6f		bcs $9451			bcs 	_ETVariable
.93e2	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.93e4	90 6e		bcc $9454			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.93e6	c9 3a		cmp #$3a			cmp 	#'9'+1
.93e8	b0 6a		bcs $9454			bcs 	_ETPuncUnary
.93ea	20 b8 92	jsr $92b8			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.93ed					_ETNumber:
.93ed	c8		iny				iny 								; keep encoding until we have the numbers
.93ee	b1 30		lda ($30),y			lda 	(codePtr),y
.93f0	20 bb 92	jsr $92bb			jsr 	EncodeNumberContinue
.93f3	b0 f8		bcs $93ed			bcs 	_ETNumber 					; go back if accepted.
.93f5	60		rts				rts
.93f6					_ETCheckUnary:
.93f6	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.93f8	f0 41		beq $943b			beq 	_ETString
.93fa	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.93fc	f0 12		beq $9410			beq 	_ETHexConstant
.93fe	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9400	90 0b		bcc $940d			bcc 	_ETSyntaxError
.9402	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.9404	b0 07		bcs $940d			bcs 	_ETSyntaxError
.9406	da		phx				phx 								; push X on the stack
.9407	0a		asl a				asl 	a 							; put vector x 2 into X
.9408	aa		tax				tax
.9409	c8		iny				iny 								; consume unary function token
.940a	7c fc 80	jmp ($80fc,x)			jmp 	(VectorSet0,x) 				; and do it.
.940d					_ETSyntaxError:
.940d	4c cd a5	jmp $a5cd			jmp 	SyntaxError
.9410					_ETHexConstant:
.9410	c8		iny				iny 								; skip #
.9411	c8		iny				iny 								; skip count
.9412	20 80 98	jsr $9880			jsr 	NSMSetZero 					; clear result
.9415					_ETHLoop:
.9415	b1 30		lda ($30),y			lda 	(codePtr),y
.9417	c8		iny				iny 								; and consume
.9418	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.941a	f0 1e		beq $943a			beq 	_ETHExit
.941c	48		pha				pha 								; save on stack.
.941d	20 95 98	jsr $9895			jsr 	NSMShiftLeft 				; x 2
.9420	20 95 98	jsr $9895			jsr 	NSMShiftLeft 				; x 4
.9423	20 95 98	jsr $9895			jsr 	NSMShiftLeft 				; x 8
.9426	20 95 98	jsr $9895			jsr 	NSMShiftLeft 				; x 16
.9429	68		pla				pla 								; ASCII
.942a	c9 41		cmp #$41			cmp 	#'A'
.942c	90 02		bcc $9430			bcc 	_ETHNotChar
.942e	e9 07		sbc #$07			sbc 	#7
.9430					_ETHNotChar:
.9430	29 0f		and #$0f			and 	#15 						; digit now
.9432	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9435	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9438	80 db		bra $9415			bra 	_ETHLoop 					; go round.
.943a					_ETHExit:
.943a	60		rts				rts
.943b					_ETString:
.943b	c8		iny				iny 								; look at length
.943c	b1 30		lda ($30),y			lda 	(codePtr),y
.943e	48		pha				pha
.943f	c8		iny				iny 								; first character
.9440	20 1a 9f	jsr $9f1a			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9443	68		pla				pla 								; restore count and save
.9444	85 36		sta $36				sta 	zTemp0
.9446	98		tya				tya 								; add length to Y to skip it.
.9447	18		clc				clc
.9448	65 36		adc $36				adc 	zTemp0
.944a	a8		tay				tay
.944b	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.944d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9450	60		rts				rts
.9451					_ETVariable:
.9451	4c ab 94	jmp $94ab			jmp 	VariableHandler
.9454					_ETPuncUnary:
.9454	c8		iny				iny 								; consume the unary character
.9455	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9457	f0 2d		beq $9486			beq 	_ETUnaryNegate
.9459	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.945b	f0 39		beq $9496			beq 	_ETDereference
.945d	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.945f	f0 43		beq $94a4			beq 	_ETParenthesis
.9461	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9463	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9465	f0 06		beq $946d			beq 	_ETIndirection
.9467	e6 36		inc $36				inc 	zTemp0
.9469	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.946b	d0 a0		bne $940d			bne 	_ETSyntaxError
.946d					_ETIndirection:
.946d	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.946f	1a		inc a				inc 	a
.9470	48		pha				pha
.9471	20 da 93	jsr $93da			jsr 	EvaluateTerm				; evaluate the term
.9474	20 1e 92	jsr $921e			jsr 	Dereference 				; dereference it.
.9477	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.947a	d0 07		bne $9483			bne 	_ETTypeMismatch
.947c	68		pla				pla 								; indirection 1-2
.947d	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.947f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9482	60		rts				rts
.9483					_ETTypeMismatch:
.9483	4c d7 a5	jmp $a5d7			jmp 	TypeError
.9486					_ETUnaryNegate:
.9486	20 da 93	jsr $93da			jsr 	EvaluateTerm				; evaluate the term
.9489	20 1e 92	jsr $921e			jsr 	Dereference 				; dereference it.
.948c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.948f	29 10		and #$10			and 	#NSTString
.9491	d0 f0		bne $9483			bne 	_ETTypeMismatch
.9493	4c 2c 98	jmp $982c			jmp 	NSMNegate  					; just toggles the sign bit.
.9496					_ETDereference:
.9496	20 da 93	jsr $93da			jsr 	EvaluateTerm				; evaluate the term
.9499	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.949c	29 20		and #$20			and 	#NSBIsReference
.949e	f0 e3		beq $9483			beq 	_ETTypeMismatch
.94a0	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.94a3	60		rts				rts
.94a4					_ETParenthesis:
.94a4	20 09 91	jsr $9109			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.94a7	20 eb 9f	jsr $9feb			jsr 	CheckRightBracket 			; check for )
.94aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.94ab					VariableHandler:
.94ab	b1 30		lda ($30),y			lda 	(codePtr),y
.94ad	18		clc				clc
.94ae	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.94b0	85 37		sta $37				sta 	zTemp0+1
.94b2	c8		iny				iny
.94b3	b1 30		lda ($30),y			lda 	(codePtr),y
.94b5	85 36		sta $36				sta 	zTemp0
.94b7	c8		iny				iny
.94b8	18		clc				clc									; copy variable address+3 to mantissa
.94b9	69 03		adc #$03			adc 	#3
.94bb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.94be	a5 37		lda $37				lda 	zTemp0+1
.94c0	69 00		adc #$00			adc 	#0
.94c2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.94c5	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.94c8	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.94cb	9e 28 06	stz $0628,x			stz 	NSExponent,x
.94ce	5a		phy				phy
.94cf	a0 02		ldy #$02			ldy 	#2 							; read type
.94d1	b1 36		lda ($36),y			lda 	(zTemp0),y
.94d3	7a		ply				ply
.94d4	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.94d6	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.94d8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94db	29 04		and #$04			and 	#NSBIsArray
.94dd	d0 01		bne $94e0			bne 	_VHArray
.94df	60		rts				rts
.94e0					_VHArray:
.94e0	e8		inx				inx
.94e1	20 18 98	jsr $9818			jsr 	Evaluate8BitInteger 		; get the 1st index.
.94e4	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.94e6	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.94e9	b1 30		lda ($30),y			lda 	(codePtr),y
.94eb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.94ed	d0 06		bne $94f5			bne 	_VHNoSecondIndex
.94ef	c8		iny				iny 								; skip the comma
.94f0	e8		inx				inx
.94f1	20 18 98	jsr $9818			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.94f4	ca		dex				dex
.94f5					_VHNoSecondIndex:
.94f5	ca		dex				dex 								; set X back.
.94f6	20 eb 9f	jsr $9feb			jsr 	CheckRightBracket 			; and check the right bracket.
.94f9	5a		phy				phy 								; save position
.94fa	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.94fd	85 3e		sta $3e				sta 	zaTemp
.94ff	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9502	85 3f		sta $3f				sta 	zaTemp+1
.9504	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9506	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9508	f0 02		beq $950c			beq 	_VHHas2Mask
.950a	a9 ff		lda #$ff			lda 	#$FF
.950c					_VHHas2Mask:
.950c	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.950f	f0 54		beq $9565			beq 	_VHBadIndex
.9511	0a		asl a				asl 	a 							; carry will be set if a second index
.9512	90 09		bcc $951d			bcc 	_VHCheckFirstIndex
.9514	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9516	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9518	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.951b	90 48		bcc $9565			bcc 	_VHBadIndex
.951d					_VHCheckFirstIndex:
.951d	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.951f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9521	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.9524	90 3f		bcc $9565			bcc 	_VHBadIndex
.9526	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9528	64 37		stz $37				stz 	zTemp0+1
.952a	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.952d	30 0f		bmi $953e			bmi 	_VHNoMultiply
.952f	da		phx				phx
.9530	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9533	48		pha				pha
.9534	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9536	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9538	1a		inc a				inc 	a 							; add 1 for zero base
.9539	fa		plx				plx
.953a	20 6d a4	jsr $a46d			jsr 	Multiply8x8 				; calculate -> Z0
.953d	fa		plx				plx
.953e					_VHNoMultiply:
.953e	18		clc				clc
.953f	a5 36		lda $36				lda 	zTemp0
.9541	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.9544	85 36		sta $36				sta 	zTemp0
.9546	a5 37		lda $37				lda 	zTemp0+1
.9548	69 00		adc #$00			adc 	#0
.954a	85 37		sta $37				sta 	zTemp0+1
.954c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.954f	20 ce 85	jsr $85ce			jsr 	ScaleByBaseType
.9552	18		clc				clc
.9553	b2 3e		lda ($3e)			lda 	(zaTemp)
.9555	65 36		adc $36				adc 	zTemp0
.9557	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.955a	a0 01		ldy #$01			ldy 	#1
.955c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.955e	65 37		adc $37				adc 	zTemp0+1
.9560	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9563	7a		ply				ply 								; restore position
.9564	60		rts				rts
.9565					_VHBadIndex:
.9565	a9 17		lda #$17		lda	#23
.9567	4c 00 8d	jmp $8d00		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a3a3					AbsUnary:
.a3a3	fa		plx				plx 								; restore stack pos
.a3a4	20 d4 97	jsr $97d4			jsr 	EvaluateNumber 				; get a float or int
.a3a7	20 eb 9f	jsr $9feb			jsr 	CheckRightBracket
.a3aa	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.a3ad	29 7f		and #$7f			and 	#$7F
.a3af	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a3b2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.956a					AllocUnary:
.956a	fa		plx				plx 								; restore stack pos
.956b	20 0c 98	jsr $980c			jsr 	Evaluate16BitInteger		; get bytes required.
.956e	20 eb 9f	jsr $9feb			jsr 	CheckRightBracket
.9571	da		phx				phx 								; save X/Y
.9572	5a		phy				phy
.9573	8a		txa				txa 								; copy X into Y
.9574	a8		tay				tay
.9575	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.9578	aa		tax				tax
.9579	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.957c	20 89 95	jsr $9589			jsr 	AllocateXABytes 			; allocate memory
.957f	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.9582	8a		txa				txa
.9583	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.9586	7a		ply				ply
.9587	fa		plx				plx
.9588	60		rts				rts
.9589					AllocateXABytes:
.9589	5a		phy				phy
.958a	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.958d	84 36		sty $36				sty 	zTemp0
.958f	5a		phy				phy
.9590	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.9593	84 37		sty $37				sty 	zTemp0+1
.9595	5a		phy				phy
.9596	18		clc				clc 								; add to low memory pointer
.9597	6d 0c 07	adc $070c			adc 	lowMemPtr
.959a	8d 0c 07	sta $070c			sta 	lowMemPtr
.959d	8a		txa				txa
.959e	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.95a1	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.95a4					_ClearMemory:
.95a4	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.95a7	c5 36		cmp $36				cmp 	zTemp0
.95a9	d0 07		bne $95b2			bne 	_CMClearNext
.95ab	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.95ae	c5 37		cmp $37				cmp 	zTemp0+1
.95b0	f0 0c		beq $95be			beq 	_CMExit
.95b2					_CMClearNext:
.95b2	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.95b4	92 36		sta ($36)			sta 	(zTemp0)
.95b6	e6 36		inc $36				inc 	zTemp0
.95b8	d0 ea		bne $95a4			bne 	_ClearMemory
.95ba	e6 37		inc $37				inc		zTemp0+1
.95bc	80 e6		bra $95a4			bra 	_ClearMemory
.95be					_CMExit:
.95be	fa		plx				plx
.95bf	68		pla				pla
.95c0	7a		ply				ply
.95c1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a3b3					AscUnary:
.a3b3	fa		plx				plx 								; restore stack pos
.a3b4	20 df 97	jsr $97df			jsr 	EvaluateString 				; get a string
.a3b7	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a3b9	20 82 98	jsr $9882			jsr 	NSMSetByte
.a3bc	20 eb 9f	jsr $9feb			jsr 	CheckRightBracket
.a3bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a3c0					FracUnary:
.a3c0	fa		plx				plx 								; restore stack pos
.a3c1	20 d4 97	jsr $97d4			jsr 	EvaluateNumber 				; get a float or int
.a3c4	20 eb 9f	jsr $9feb			jsr 	CheckRightBracket
.a3c7	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a3ca	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a3cc	f0 04		beq $a3d2			beq 	_IUZero
.a3ce	20 90 a2	jsr $a290			jsr 	FloatFractionalPart
.a3d1	60		rts				rts
.a3d2					_IUZero:
.a3d2	20 80 98	jsr $9880			jsr 	NSMSetZero
.a3d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a3d6					IntUnary:
.a3d6	fa		plx				plx 								; restore stack pos
.a3d7	20 d4 97	jsr $97d4			jsr 	EvaluateNumber 				; get a float or int
.a3da	20 eb 9f	jsr $9feb			jsr 	CheckRightBracket
.a3dd	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a3e0	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a3e2	f0 03		beq $a3e7			beq 	_IUExit
.a3e4	20 f3 a2	jsr $a2f3			jsr 	FloatIntegerPart
.a3e7					_IUExit:
.a3e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a3e8					LenUnary:
.a3e8	fa		plx				plx 								; restore stack pos
.a3e9	20 df 97	jsr $97df			jsr 	EvaluateString 				; get a string
.a3ec	5a		phy				phy
.a3ed	a0 00		ldy #$00			ldy 	#0 							; find length
.a3ef					_LenFind:
.a3ef	b1 36		lda ($36),y			lda 	(zTemp0),y
.a3f1	f0 06		beq $a3f9			beq 	_LenExit
.a3f3	c8		iny				iny
.a3f4	d0 f9		bne $a3ef			bne 	_LenFind
.a3f6	4c d2 a5	jmp $a5d2			jmp 	RangeError 					; string > 255
.a3f9					_LenExit:
.a3f9	98		tya				tya
.a3fa	20 82 98	jsr $9882			jsr 	NSMSetByte
.a3fd	7a		ply				ply
.a3fe	20 eb 9f	jsr $9feb			jsr 	CheckRightBracket
.a401	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.95c2					Unary_Not:
.95c2	fa		plx				plx
.95c3	20 f7 97	jsr $97f7			jsr 	EvaluateInteger 			; get integer
.95c6	20 eb 9f	jsr $9feb			jsr 	CheckRightBracket
.95c9	20 b0 98	jsr $98b0			jsr 	NSMIsZero 					; zero mantissa ?
.95cc	f0 04		beq $95d2			beq 	_NotZero
.95ce	20 80 98	jsr $9880			jsr 	NSMSetZero
.95d1	60		rts				rts
.95d2					_NotZero:
.95d2	4c 6d 8d	jmp $8d6d			jmp 	ReturnTrue
.95d5					_UNBad:
.95d5	4c dc a5	jmp $a5dc			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.95d8					Unary_Rnd:
.95d8	fa		plx				plx
.95d9	20 d4 97	jsr $97d4			jsr 	EvaluateNumber 				; number to use.
.95dc	20 eb 9f	jsr $9feb			jsr 	CheckRightBracket 			; closing bracket
.95df	20 b0 98	jsr $98b0			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.95e2	f0 2b		beq $960f			beq 	_URCopySeed
.95e4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.95e7	10 23		bpl $960c			bpl 	_URDontSeed
.95e9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.95ec	49 17		eor #$17			eor 	#$17
.95ee	8d 08 07	sta $0708			sta 	RandomSeed+0
.95f1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.95f4	49 a5		eor #$a5			eor 	#$A5
.95f6	8d 09 07	sta $0709			sta 	RandomSeed+1
.95f9	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.95fc	49 c2		eor #$c2			eor 	#$C2
.95fe	8d 0a 07	sta $070a			sta 	RandomSeed+2
.9601	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9604	49 9d		eor #$9d			eor 	#$9D
.9606	8d 0b 07	sta $070b			sta 	RandomSeed+3
.9609	20 34 96	jsr $9634			jsr 	Random32Bit
.960c					_URDontSeed:
.960c	20 34 96	jsr $9634			jsr 	Random32Bit 				; generate a number.
.960f					_URCopySeed:
.960f	ad 08 07	lda $0708			lda 	RandomSeed+0
.9612	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9615	ad 09 07	lda $0709			lda 	RandomSeed+1
.9618	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.961b	ad 0a 07	lda $070a			lda 	RandomSeed+2
.961e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9621	ad 0b 07	lda $070b			lda 	RandomSeed+3
.9624	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9626	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9629	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.962b	8d 28 06	sta $0628			sta 	NSExponent
.962e	a9 08		lda #$08			lda 	#NSTFloat
.9630	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
.9633	60		rts				rts
.9634					Random32Bit:
.9634	5a		phy				phy
.9635	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9637	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.963a	d0 03		bne $963f			bne 	_Random1
.963c	a8		tay				tay 								; if so do it 256 times
.963d	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.963f					_Random1:
.963f	0a		asl a				asl 	a 							; LSFR RNG
.9640	2e 09 07	rol $0709			rol 	RandomSeed+1
.9643	2e 0a 07	rol $070a			rol 	RandomSeed+2
.9646	2e 0b 07	rol $070b			rol 	RandomSeed+3
.9649	90 02		bcc $964d			bcc 	_Random2
.964b	49 c5		eor #$c5			eor 	#$C5
.964d					_Random2:
.964d	88		dey				dey
.964e	d0 ef		bne $963f			bne 	_Random1
.9650	7a		ply				ply
.9651	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a402					SgnUnary:
.a402	fa		plx				plx 								; restore stack pos
.a403	20 d4 97	jsr $97d4			jsr 	EvaluateNumber 				; get a float or int
.a406	20 eb 9f	jsr $9feb			jsr 	CheckRightBracket
.a409	20 b0 98	jsr $98b0			jsr 	NSMIsZero 					; if zero
.a40c	f0 10		beq $a41e			beq 	_SGZero  					; return Int Zero
.a40e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.a411	48		pha				pha
.a412	a9 01		lda #$01			lda 	#1 							; set to 1
.a414	20 82 98	jsr $9882			jsr 	NSMSetByte
.a417	68		pla				pla
.a418	29 80		and #$80			and		#$80 						; copy the sign byte out
.a41a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a41d	60		rts				rts
.a41e	20 80 98	jsr $9880	_SGZero:jsr 	NSMSetZero
.a421	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a422					ValUnary:
.a422	fa		plx				plx 								; restore stack pos
.a423	20 38 a4	jsr $a438			jsr 	ValMainCode 				; do the main val() code
.a426	b0 01		bcs $a429			bcs 	_VUError 					; couldn't convert
.a428	60		rts				rts
.a429					_VUError:
.a429	4c d7 a5	jmp $a5d7			jmp 	TypeError
.a42c					IsValUnary:
.a42c	fa		plx				plx 								; restore stack pos
.a42d	20 38 a4	jsr $a438			jsr 	ValMainCode 				; do the main val() code
.a430	b0 03		bcs $a435			bcs 	_VUBad
.a432	4c 6d 8d	jmp $8d6d			jmp 	ReturnTrue
.a435					_VUBad:
.a435	4c 79 8d	jmp $8d79			jmp 	ReturnFalse
.a438					ValMainCode:
.a438	20 df 97	jsr $97df			jsr 	EvaluateString 				; get a string
.a43b	20 eb 9f	jsr $9feb			jsr 	CheckRightBracket 			; check right bracket present
.a43e	5a		phy				phy
.a43f	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a441	f0 17		beq $a45a			beq 	_VMCFail2
.a443	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a445	48		pha				pha 								; save first character
.a446	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a448	d0 01		bne $a44b			bne 	_VMCStart
.a44a	c8		iny				iny 								; skip over -
.a44b					_VMCStart:
.a44b	38		sec				sec 								; initialise first time round.
.a44c					_VMCNext:
.a44c	c8		iny				iny 								; pre-increment
.a44d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a44f	f0 0c		beq $a45d			beq 	_VMCSuccess 				; successful.
.a451	20 bc 92	jsr $92bc			jsr 	EncodeNumber 				; send it to the number-builder
.a454	90 03		bcc $a459			bcc 	_VMCFail 					; if failed, give up.
.a456	18		clc				clc 								; next time round, countinue
.a457	80 f3		bra $a44c			bra 	_VMCNext
.a459					_VMCFail:
.a459	68		pla				pla
.a45a					_VMCFail2:
.a45a	7a		ply				ply
.a45b	38		sec				sec
.a45c	60		rts				rts
.a45d					_VMCSuccess:
.a45d	a9 00		lda #$00			lda 	#0 							; construct final
.a45f	20 bc 92	jsr $92bc			jsr 	EncodeNumber
.a462	68		pla				pla
.a463	c9 2d		cmp #$2d			cmp 	#"-"
.a465	d0 03		bne $a46a			bne 	_VMCNotNegative
.a467	20 2c 98	jsr $982c			jsr		NSMNegate
.a46a					_VMCNotNegative:
.a46a	7a		ply				ply
.a46b	18		clc				clc
.a46c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9652					ChrUnary:
.9652	fa		plx				plx 								; restore stack pos
.9653	20 18 98	jsr $9818			jsr 	Evaluate8BitInteger			; get value
.9656	48		pha				pha
.9657	20 eb 9f	jsr $9feb			jsr 	CheckRightBracket
.965a	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.965c	20 ed a7	jsr $a7ed			jsr 	StringTempAllocate
.965f	68		pla				pla 								; write number to it
.9660	20 2b a8	jsr $a82b			jsr 	StringTempWrite
.9663	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9664					SpcUnary:
.9664	fa		plx				plx 								; restore stack pos
.9665	20 18 98	jsr $9818			jsr 	Evaluate8BitInteger			; get value
.9668	5a		phy				phy
.9669	48		pha				pha 								; save count
.966a	20 ed a7	jsr $a7ed			jsr 	StringTempAllocate
.966d	7a		ply				ply 								; to do count in Y
.966e					_SpcLoop:
.966e	c0 00		cpy #$00			cpy 	#0
.9670	f0 08		beq $967a			beq 	_SpcExit
.9672	a9 20		lda #$20			lda 	#32
.9674	20 2b a8	jsr $a82b			jsr 	StringTempWrite
.9677	88		dey				dey
.9678	80 f4		bra $966e			bra 	_SPCLoop
.967a					_SpcExit:
.967a	7a		ply				ply
.967b	20 eb 9f	jsr $9feb			jsr 	CheckRightBracket
.967e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.967f					Unary_Str:
.967f	fa		plx				plx
.9680	20 d4 97	jsr $97d4			jsr 	EvaluateNumber  			; get number
.9683	20 eb 9f	jsr $9feb			jsr 	CheckRightBracket 			; closing bracket
.9686	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9688	20 a1 96	jsr $96a1			jsr 	ConvertNumberToString 		; do the conversion.
.968b	a9 21		lda #$21			lda		#33 						; create buffer
.968d	20 ed a7	jsr $a7ed			jsr 	StringTempAllocate 			; allocate memory
.9690	da		phx				phx
.9691	a2 00		ldx #$00			ldx 	#0
.9693					_USCopy:
.9693	bd 99 08	lda $0899,x			lda 	DecimalBuffer,x
.9696	20 2b a8	jsr $a82b			jsr 	StringTempWrite
.9699	e8		inx				inx
.969a	bd 99 08	lda $0899,x			lda 	DecimalBuffer,x
.969d	d0 f4		bne $9693			bne 	_USCopy
.969f	fa		plx				plx
.96a0	60		rts				rts
.96a1					ConvertNumberToString:
.96a1	5a		phy				phy 								; save code position
.96a2	8d 14 07	sta $0714			sta 	DecimalPlaces	 			; save number of DPs.
.96a5	9c 15 07	stz $0715			stz 	dbOffset 					; offset into decimal buffer = start.
.96a8	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.96ab	10 0a		bpl $96b7			bpl 	_CNTSNotNegative
.96ad	29 7f		and #$7f			and 	#$7F 						; make +ve
.96af	9d 00 06	sta $0600,x			sta 	NSStatus,x
.96b2	a9 2d		lda #$2d			lda 	#"-"
.96b4	20 1d 97	jsr $971d			jsr 	WriteDecimalBuffer
.96b7					_CNTSNotNegative:
.96b7	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.96ba	f0 15		beq $96d1			beq 	_CNTSNotFloat
.96bc	e8		inx				inx 								; round up
.96bd	a9 01		lda #$01			lda 	#1
.96bf	20 82 98	jsr $9882			jsr 	NSMSetByte
.96c2	ca		dex				dex
.96c3	bd 28 06	lda $0628,x			lda		NSExponent,x
.96c6	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.96c9	a9 08		lda #$08			lda 	#NSTFloat
.96cb	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.96ce	20 b2 a1	jsr $a1b2			jsr 	FloatAdd
.96d1					_CNTSNotFloat:
.96d1	20 ff 96	jsr $96ff			jsr 	MakePlusTwoString
.96d4	20 90 a2	jsr $a290			jsr 	FloatFractionalPart 		; get the fractional part
.96d7	20 54 a3	jsr $a354			jsr 	NSNormalise					; normalise , exit if zero
.96da	f0 21		beq $96fd			beq 	_CNTSExit
.96dc	a9 2e		lda #$2e			lda 	#"."
.96de	20 1d 97	jsr $971d			jsr 	WriteDecimalBuffer 			; write decimal place
.96e1					_CNTSDecimal:
.96e1	ce 14 07	dec $0714			dec 	DecimalPlaces 				; done all the decimals
.96e4	30 17		bmi $96fd			bmi 	_CNTSExit
.96e6	e8		inx				inx 								; x 10.0
.96e7	a9 0a		lda #$0a			lda 	#10
.96e9	20 82 98	jsr $9882			jsr 	NSMSetByte
.96ec	a9 08		lda #$08			lda 	#NSTFloat
.96ee	9d 00 06	sta $0600,x			sta 	NSStatus,x
.96f1	ca		dex				dex
.96f2	20 1d a3	jsr $a31d			jsr 	FloatMultiply
.96f5	20 ff 96	jsr $96ff			jsr 	MakePlusTwoString
.96f8	20 90 a2	jsr $a290			jsr 	FloatFractionalPart 		; get the fractional part
.96fb	80 e4		bra $96e1			bra 	_CNTSDecimal 				; keep going.
.96fd					_CNTSExit:
.96fd	7a		ply				ply
.96fe	60		rts				rts
.96ff					MakePlusTwoString:
.96ff	da		phx				phx
.9700	20 57 98	jsr $9857			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9703	e8		inx				inx 								; access it
.9704	e8		inx				inx
.9705	20 f3 a2	jsr $a2f3			jsr 	FloatIntegerPart 			; make it an integer
.9708	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.970a	20 5c a1	jsr $a15c			jsr 	ConvertInt32
.970d	a2 00		ldx #$00			ldx	 	#0
.970f					_MPTSCopy:
.970f	bd 77 08	lda $0877,x			lda 	NumberBuffer,x
.9712	20 1d 97	jsr $971d			jsr 	WriteDecimalBuffer
.9715	e8		inx				inx
.9716	bd 77 08	lda $0877,x			lda 	NumberBuffer,x
.9719	d0 f4		bne $970f			bne 	_MPTSCopy
.971b	fa		plx				plx
.971c	60		rts				rts
.971d					WriteDecimalBuffer:
.971d	da		phx				phx
.971e	ae 15 07	ldx $0715			ldx 	dbOffset
.9721	9d 99 08	sta $0899,x			sta 	DecimalBuffer,x
.9724	9e 9a 08	stz $089a,x			stz 	DecimalBuffer+1,x
.9727	ee 15 07	inc $0715			inc 	dbOffset
.972a	fa		plx				plx
.972b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.972c					Unary_Left:
.972c	fa		plx				plx
.972d	18		clc				clc 								; only one parameter
.972e	20 a3 97	jsr $97a3			jsr 	SubstringInitial 			; set up.
.9731	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9734	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9737	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.973a	80 2c		bra $9768			bra 	SubstringMain
.973c					Unary_Right:
.973c	fa		plx				plx
.973d	18		clc				clc 								; only one parameter
.973e	20 a3 97	jsr $97a3			jsr 	SubstringInitial 			; set up.
.9741	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.9744	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9747	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.974a	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.974d	b0 02		bcs $9751			bcs 	_URNotUnderflow
.974f	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9751					_URNotUnderFlow:
.9751	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.9754	80 12		bra $9768			bra 	SubStringMain
.9756					Unary_Mid:
.9756	fa		plx				plx
.9757	38		sec				sec 								; two parameters
.9758	20 a3 97	jsr $97a3			jsr 	SubstringInitial 			; set up.
.975b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.975e	f0 05		beq $9765			beq 	_UMError
.9760	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9763	80 03		bra $9768			bra 	SubStringMain
.9765					_UMError:
.9765	4c dc a5	jmp $a5dc			jmp 	ArgumentError
.9768					SubStringMain:
.9768	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.976b	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.976e	b0 2d		bcs $979d			bcs 	_SSMNull 					; if so, return an empty string.
.9770	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9773	f0 28		beq $979d			beq 	_SSMNull 					; return empty string.
.9775	18		clc				clc 								; add the offset +1 to the address and
.9776	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.9779	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.977c	85 36		sta $36				sta 	zTemp0
.977e	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.9781	69 00		adc #$00			adc 	#0
.9783	85 37		sta $37				sta 	zTemp0+1
.9785					_SSMNoCarry:
.9785	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.9788	20 ed a7	jsr $a7ed			jsr 	StringTempAllocate 			; allocate that many characters
.978b	5a		phy				phy 								; save Y
.978c	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.978e					_SSMCopy:
.978e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9790	f0 09		beq $979b			beq 	_SSMEString 				; no more to copy
.9792	20 2b a8	jsr $a82b			jsr 	StringTempWrite 			; and write it out.
.9795	c8		iny				iny
.9796	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.9799	d0 f3		bne $978e			bne 	_SSMCopy
.979b					_SSMEString:
.979b	7a		ply				ply
.979c					_SSMExit:
.979c	60		rts				rts
.979d					_SSMNull:
.979d	a9 00		lda #$00			lda 	#0
.979f	20 ed a7	jsr $a7ed			jsr 	StringTempAllocate
.97a2	60		rts				rts
.97a3					SubstringInitial:
.97a3	da		phx				phx 								; save initial stack position
.97a4	08		php				php 								; save carry on stack indicating 2 parameters
.97a5	20 df 97	jsr $97df			jsr 	EvaluateString 				; get a string
.97a8	5a		phy				phy 								; calculate length to exponent.
.97a9	a0 ff		ldy #$ff			ldy 	#$FF
.97ab					_SIFindLength:
.97ab	c8		iny				iny
.97ac	b1 36		lda ($36),y			lda 	(zTemp0),y
.97ae	d0 fb		bne $97ab			bne 	_SIFindLength
.97b0	98		tya				tya
.97b1	9d 28 06	sta $0628,x			sta 	NSExponent,x
.97b4	7a		ply				ply
.97b5	e8		inx				inx
.97b6	20 f3 9f	jsr $9ff3			jsr 	CheckComma 					; comma next
.97b9	20 18 98	jsr $9818			jsr 	Evaluate8BitInteger 		; get next parameter
.97bc	28		plp				plp 								; is it the last parameter ?
.97bd	90 07		bcc $97c6			bcc 	_SSIExit 					; if so, exit.
.97bf	e8		inx				inx
.97c0	20 f3 9f	jsr $9ff3			jsr 	CheckComma 					; comma next
.97c3	20 18 98	jsr $9818			jsr 	Evaluate8BitInteger 		; get last parameter
.97c6					_SSIExit:
.97c6	fa		plx				plx
.97c7	20 eb 9f	jsr $9feb			jsr 	CheckRightBracket 			; check closing bracket
.97ca	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.97cb					EvaluateValue:
.97cb	48		pha				pha
.97cc	20 09 91	jsr $9109			jsr		EvaluateExpression 			; expression
.97cf	20 1e 92	jsr $921e			jsr 	Dereference					; derefernce it
.97d2	68		pla				pla
.97d3	60		rts				rts
.97d4					EvaluateNumber:
.97d4	20 cb 97	jsr $97cb			jsr 	EvaluateValue 				; get a value
.97d7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.97da	29 10		and #$10			and 	#NSBIsString
.97dc	d0 16		bne $97f4			bne 	HelperTypeError
.97de	60		rts				rts
.97df					EvaluateString:
.97df	20 cb 97	jsr $97cb			jsr 	EvaluateValue 				; get a value
.97e2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.97e5	29 10		and #$10			and 	#NSBIsString
.97e7	f0 0b		beq $97f4			beq 	HelperTypeError
.97e9					CopyAddressToTemp0:
.97e9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.97ec	85 36		sta $36				sta 	zTemp0
.97ee	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.97f1	85 37		sta $37				sta 	zTemp0+1
.97f3	60		rts				rts
.97f4					HelperTypeError:
.97f4	4c d7 a5	jmp $a5d7			jmp 	TypeError
.97f7					EvaluateInteger:
.97f7	20 d4 97	jsr $97d4			jsr 	EvaluateNumber
.97fa	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.97fd	d0 0a		bne $9809			bne 	HelperValueError 			; if not, it's a float.
.97ff	60		rts				rts
.9800					EvaluateUnsignedInteger:
.9800	20 f7 97	jsr $97f7			jsr 	EvaluateInteger 			; check integer is +ve
.9803	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9806	30 01		bmi $9809			bmi 	HelperValueError
.9808	60		rts				rts
.9809					HelperValueError:
.9809	4c dc a5	jmp $a5dc			jmp 	ArgumentError
.980c					Evaluate16BitInteger:
.980c	20 00 98	jsr $9800			jsr	 	EvaluateUnsignedInteger		; get integer
.980f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9812	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9815	d0 f2		bne $9809			bne 	HelperValueError
.9817	60		rts				rts
.9818					Evaluate8BitInteger:
.9818	20 00 98	jsr $9800			jsr	 	EvaluateUnsignedInteger 	; get an integer
.981b	d0 ec		bne $9809			bne 	HelperValueError
.981d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9820	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9823	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.9826	d0 e1		bne $9809			bne 	HelperValueError
.9828	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.982b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a46d					Multiply8x8:
.a46d	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a46e	85 36		sta $36			  	sta 	zTemp0
.a470	86 37		stx $37				stx 	zTemp0+1
.a472	a9 00		lda #$00			lda 	#0
.a474	a2 08		ldx #$08			ldx 	#8
.a476					_M88Loop:
.a476	90 03		bcc $a47b			bcc 	_M88NoAdd
.a478	18		clc				clc
.a479	65 37		adc $37				adc 	zTemp0+1
.a47b					_M88NoAdd:
.a47b	6a		ror a				ror 	a
.a47c	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a47e	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a47f	d0 f5		bne $a476			bne 	_M88Loop
.a481	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a483	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.982c					NSMNegate:
.982c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.982f	49 80		eor #$80			eor 	#NSBIsNegative
.9831	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9834	60		rts				rts
.9835					NSMNegateMantissa:
.9835	38		sec				sec
.9836	a9 00		lda #$00			lda 	#0
.9838	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.983b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.983e	a9 00		lda #$00			lda 	#0
.9840	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.9843	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9846	a9 00		lda #$00			lda 	#0
.9848	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.984b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.984e	a9 00		lda #$00			lda 	#0
.9850	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.9853	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9856	60		rts				rts
.9857					NSMShiftUpTwo:
.9857	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.985a	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.985d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9860	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9863	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9866	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.9869	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.986c	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.986f	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9872	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9875	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9878	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.987b	60		rts				rts
.987c					NSMSetZeroMantissaOnly:
.987c	a9 00		lda #$00			lda 	#0
.987e	80 08		bra $9888			bra 	NSMSetMantissa
.9880					NSMSetZero:
.9880	a9 00		lda #$00			lda 	#0
.9882					NSMSetByte:
.9882	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9885	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.9888					NSMSetMantissa:
.9888	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.988b	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.988e	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9891	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9894	60		rts				rts
.9895					NSMShiftLeft:
.9895	18		clc				clc
.9896					NSMRotateLeft:
.9896	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.9899	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.989c	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.989f	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.98a2	60		rts				rts
.98a3					NSMShiftRight:
.98a3	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.98a6	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.98a9	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.98ac	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.98af	60		rts				rts
.98b0					NSMIsZero:
.98b0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.98b3	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.98b6	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.98b9	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.98bc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a484					Assemble_ora:
.a484	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a487	01					.byte $01
.a488					Assemble_and:
.a488	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a48b	21					.byte $21
.a48c					Assemble_eor:
.a48c	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a48f	41					.byte $41
.a490					Assemble_adc:
.a490	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a493	61					.byte $61
.a494					Assemble_sta:
.a494	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a497	81					.byte $81
.a498					Assemble_lda:
.a498	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a49b	a1					.byte $a1
.a49c					Assemble_cmp:
.a49c	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a49f	c1					.byte $c1
.a4a0					Assemble_sbc:
.a4a0	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a4a3	e1					.byte $e1
.a4a4					Assemble_asl:
.a4a4	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4a7	02					.byte $02
>a4a8	75					.byte $75
.a4a9					Assemble_rol:
.a4a9	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4ac	22					.byte $22
>a4ad	75					.byte $75
.a4ae					Assemble_lsr:
.a4ae	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4b1	42					.byte $42
>a4b2	75					.byte $75
.a4b3					Assemble_ror:
.a4b3	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4b6	62					.byte $62
>a4b7	75					.byte $75
.a4b8					Assemble_stx:
.a4b8	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4bb	82					.byte $82
>a4bc	50					.byte $50
.a4bd					Assemble_ldx:
.a4bd	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4c0	a2					.byte $a2
>a4c1	d0					.byte $d0
.a4c2					Assemble_dec:
.a4c2	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4c5	c2					.byte $c2
>a4c6	55					.byte $55
.a4c7					Assemble_inc:
.a4c7	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4ca	e2					.byte $e2
>a4cb	55					.byte $55
.a4cc					Assemble_stz:
.a4cc	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4cf	60					.byte $60
>a4d0	44					.byte $44
.a4d1					Assemble_bit:
.a4d1	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4d4	20					.byte $20
>a4d5	55					.byte $55
.a4d6					Assemble_sty:
.a4d6	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4d9	80					.byte $80
>a4da	54					.byte $54
.a4db					Assemble_ldy:
.a4db	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4de	a0					.byte $a0
>a4df	d5					.byte $d5
.a4e0					Assemble_cpy:
.a4e0	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4e3	c0					.byte $c0
>a4e4	d4					.byte $d4
.a4e5					Assemble_cpx:
.a4e5	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4e8	e0					.byte $e0
>a4e9	d0					.byte $d0
.a4ea					Assemble_tsb:
.a4ea	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4ed	00					.byte $00
>a4ee	50					.byte $50
.a4ef					Assemble_trb:
.a4ef	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4f2	10					.byte $10
>a4f3	50					.byte $50
.a4f4					Assemble_jsr:
.a4f4	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4f7	14					.byte $14
>a4f8	10					.byte $10
.a4f9					Assemble_jmp:
.a4f9	20 03 82	jsr $8203		jsr	AssembleGroup2
>a4fc	40					.byte $40
>a4fd	10					.byte $10
.a4fe					Assemble_bpl:
.a4fe	20 54 82	jsr $8254		jsr	AssembleGroup3
>a501	10					.byte $10
.a502					Assemble_bmi:
.a502	20 54 82	jsr $8254		jsr	AssembleGroup3
>a505	30					.byte $30
.a506					Assemble_bvc:
.a506	20 54 82	jsr $8254		jsr	AssembleGroup3
>a509	50					.byte $50
.a50a					Assemble_bvs:
.a50a	20 54 82	jsr $8254		jsr	AssembleGroup3
>a50d	70					.byte $70
.a50e					Assemble_bcc:
.a50e	20 54 82	jsr $8254		jsr	AssembleGroup3
>a511	90					.byte $90
.a512					Assemble_bcs:
.a512	20 54 82	jsr $8254		jsr	AssembleGroup3
>a515	b0					.byte $b0
.a516					Assemble_bne:
.a516	20 54 82	jsr $8254		jsr	AssembleGroup3
>a519	d0					.byte $d0
.a51a					Assemble_beq:
.a51a	20 54 82	jsr $8254		jsr	AssembleGroup3
>a51d	f0					.byte $f0
.a51e					Assemble_bra:
.a51e	20 54 82	jsr $8254		jsr	AssembleGroup3
>a521	80					.byte $80
.a522					Assemble_brk:
.a522	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a525	00					.byte $00
.a526					Assemble_php:
.a526	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a529	08					.byte $08
.a52a					Assemble_clc:
.a52a	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a52d	18					.byte $18
.a52e					Assemble_plp:
.a52e	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a531	28					.byte $28
.a532					Assemble_sec:
.a532	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a535	38					.byte $38
.a536					Assemble_rti:
.a536	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a539	40					.byte $40
.a53a					Assemble_pha:
.a53a	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a53d	48					.byte $48
.a53e					Assemble_cli:
.a53e	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a541	58					.byte $58
.a542					Assemble_phy:
.a542	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a545	5a					.byte $5a
.a546					Assemble_rts:
.a546	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a549	60					.byte $60
.a54a					Assemble_pla:
.a54a	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a54d	68					.byte $68
.a54e					Assemble_sei:
.a54e	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a551	78					.byte $78
.a552					Assemble_ply:
.a552	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a555	7a					.byte $7a
.a556					Assemble_dey:
.a556	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a559	88					.byte $88
.a55a					Assemble_txa:
.a55a	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a55d	8a					.byte $8a
.a55e					Assemble_tya:
.a55e	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a561	98					.byte $98
.a562					Assemble_txs:
.a562	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a565	9a					.byte $9a
.a566					Assemble_tay:
.a566	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a569	a8					.byte $a8
.a56a					Assemble_tax:
.a56a	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a56d	aa					.byte $aa
.a56e					Assemble_clv:
.a56e	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a571	b8					.byte $b8
.a572					Assemble_tsx:
.a572	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a575	ba					.byte $ba
.a576					Assemble_iny:
.a576	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a579	c8					.byte $c8
.a57a					Assemble_dex:
.a57a	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a57d	ca					.byte $ca
.a57e					Assemble_cld:
.a57e	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a581	d8					.byte $d8
.a582					Assemble_phx:
.a582	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a585	da					.byte $da
.a586					Assemble_inx:
.a586	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a589	e8					.byte $e8
.a58a					Assemble_nop:
.a58a	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a58d	ea					.byte $ea
.a58e					Assemble_sed:
.a58e	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a591	f8					.byte $f8
.a592					Assemble_plx:
.a592	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a595	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a596					DecimalScalarTable:
>a596	66 66 66 66				.dword $66666666 ; 0.1
>a59a	de					.byte $de
>a59b	1f 85 eb 51				.dword $51eb851f ; 0.01
>a59f	db					.byte $db
>a5a0	4c 37 89 41				.dword $4189374c ; 0.001
>a5a4	d8					.byte $d8
>a5a5	ac 8b db 68				.dword $68db8bac ; 0.0001
>a5a9	d4					.byte $d4
>a5aa	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a5ae	d1					.byte $d1
>a5af	83 de 1b 43				.dword $431bde83 ; 1e-06
>a5b3	ce					.byte $ce
>a5b4	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a5b8	ca					.byte $ca
>a5b9	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a5bd	c7					.byte $c7
>a5be	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a5c2	c4					.byte $c4
>a5c3	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a5c7	c0					.byte $c0
>a5c8	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a5cc	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a5cd					SyntaxError:
.a5cd	a9 02		lda #$02		lda	#2
.a5cf	4c 00 8d	jmp $8d00		jmp	ErrorHandler
.a5d2					RangeError:
.a5d2	a9 04		lda #$04		lda	#4
.a5d4	4c 00 8d	jmp $8d00		jmp	ErrorHandler
.a5d7					TypeError:
.a5d7	a9 05		lda #$05		lda	#5
.a5d9	4c 00 8d	jmp $8d00		jmp	ErrorHandler
.a5dc					ArgumentError:
.a5dc	a9 07		lda #$07		lda	#7
.a5de	4c 00 8d	jmp $8d00		jmp	ErrorHandler
.a5e1					NotDoneError:
.a5e1	a9 0c		lda #$0c		lda	#12
.a5e3	4c 00 8d	jmp $8d00		jmp	ErrorHandler
.a5e6					ErrorText:
>a5e6	42 72 65 61 6b 00			.text	"Break",0
>a5ec	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a5f4	72 72 6f 72 00
>a5f9	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a601	20 62 79 20 7a 65 72 6f 00
>a60a	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a612	61 6e 67 65 00
>a617	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a61f	6d 61 74 63 68 00
>a625	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a62d	65 6d 6f 72 79 00
>a633	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a63b	61 72 67 75 6d 65 6e 74 00
>a644	53 74 6f 70 00				.text	"Stop",0
>a649	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a651	6f 6f 20 6c 6f 6e 67 00
>a659	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a661	6e 20 66 61 69 6c 65 64 00
>a66a	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a672	61 74 61 00
>a676	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a67e	65 6e 74 65 64 00
>a684	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a68c	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a698	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a6a0	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a6ad	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a6b5	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a6c2	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a6ca	68 6f 75 74 20 57 68 69 6c 65 00
>a6d5	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a6dd	68 6f 75 74 20 46 6f 72 00
>a6e6	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a6ee	61 63 6b 20 66 75 6c 6c 00
>a6f7	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a6ff	75 63 74 75 72 65 00
>a706	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a70e	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a71b	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a723	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a731	41 72 72 61 79 20 73 69			.text	"Array size",0
>a739	7a 65 00
>a73c	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a744	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a74c	42 75 69 6c 74 20 54 68			.text "Built Thursday 06-Oct-2022. Build 228."
>a754	75 72 73 64 61 79 20 30 36 2d 4f 63 74 2d 32 30
>a764	32 32 2e 20 42 75 69 6c 64 20 32 32 38 2e

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.98bd					StackPushByte:
.98bd	48		pha				pha 								; save byte
.98be	a5 34		lda $34				lda 	BasicStack
.98c0	d0 02		bne $98c4			bne 	_SPBNoBorrow
.98c2	c6 35		dec $35				dec 	BasicStack+1
.98c4					_SPBNoBorrow:
.98c4	c6 34		dec $34				dec 	BasicStack
.98c6	68		pla				pla 								; get back and write
.98c7	92 34		sta ($34)			sta 	(BasicStack)
.98c9	60		rts				rts
.98ca					StackPopByte:
.98ca	b2 34		lda ($34)			lda 	(BasicStack)
.98cc	e6 34		inc $34				inc 	BasicStack
.98ce	d0 02		bne $98d2			bne 	_SPBNoCarry
.98d0	e6 35		inc $35				inc 	BasicStack+1
.98d2					_SPBNoCarry:
.98d2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.98d3					StackOpen:
.98d3	48		pha				pha 								; save frame byte
.98d4	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.98d6	0a		asl a				asl 	a 							; claim twice this for storage
.98d7	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.98d9	38		sec				sec 								; so basically subtracting from
.98da	65 34		adc $34				adc 	basicStack 	 				; basicStack
.98dc	85 34		sta $34				sta 	basicStack
.98de	b0 08		bcs $98e8			bcs 	_SONoBorrow
.98e0	c6 35		dec $35				dec 	basicStack+1
.98e2	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.98e4	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.98e6	90 04		bcc $98ec			bcc 	_SOMemory
.98e8					_SONoBorrow:
.98e8	68		pla				pla 								; get marker back and write at TOS
.98e9	92 34		sta ($34)			sta 	(basicStack)
.98eb	60		rts				rts
.98ec					_SOMemory:
.98ec							ERR_STACK
.98ec					StackClose:
.98ec	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.98ee	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.98f0	0a		asl a				asl 	a 							; claim twice this.
.98f1	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.98f3	85 34		sta $34				sta 	basicStack
.98f5	90 02		bcc $98f9			bcc 	_SCExit
.98f7	e6 35		inc $35				inc 	basicStack+1
.98f9					_SCExit:
.98f9	60		rts				rts
.98fa					StackCheckFrame:
.98fa	48		pha				pha
.98fb					_StackRemoveLocals:
.98fb	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.98fd	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.98ff	b0 05		bcs $9906			bcs 	_SCNoLocal
.9901	20 92 9f	jsr $9f92			jsr 	LocalPopValue
.9904	80 f5		bra $98fb			bra 	_StackRemoveLocals
.9906					_SCNoLocal:
.9906	68		pla				pla
.9907	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9909	29 f0		and #$f0			and 	#$F0 						; check type bits
.990b	d0 01		bne $990e			bne 	_SCFError 					; different, we have structures mixed up
.990d	60		rts				rts
.990e					_SCFError:
.990e	8a		txa				txa 								; report error X
.990f	4c 00 8d	jmp $8d00			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9912					STKSaveCodePosition:
.9912	5a		phy				phy
.9913	98		tya				tya 								; save Y
.9914	a0 05		ldy #$05			ldy 	#5
.9916	91 34		sta ($34),y			sta 	(basicStack),y
.9918	88		dey				dey 								; save Code Pointer
.9919					_STKSaveLoop:
.9919	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.991c	91 34		sta ($34),y			sta 	(basicStack),y
.991e	88		dey				dey
.991f	d0 f8		bne $9919			bne 	_STKSaveLoop
.9921	7a		ply				ply
.9922	60		rts				rts
.9923					STKLoadCodePosition:
.9923	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9925					_STKLoadLoop:
.9925	b1 34		lda ($34),y			lda 	(basicStack),y
.9927	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.992a	c8		iny				iny
.992b	c0 05		cpy #$05			cpy 	#5
.992d	d0 f6		bne $9925			bne 	_STKLoadLoop
.992f	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9931	a8		tay				tay
.9932	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9933					StackReset:
.9933	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9935	85 34		sta $34				sta 	0+basicStack
.9937	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9939	85 35		sta $35				sta 	1+basicStack
.993b	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.993d	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.993f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a772					StringConcrete:
.a772	5a		phy				phy 								; save position on stack
.a773	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a776	85 38		sta $38				sta 	zTemp1
.a778	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a77b	85 39		sta $39				sta 	zTemp1+1
.a77d	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a77f					_SALength:
.a77f	c8		iny				iny
.a780	b1 38		lda ($38),y			lda 	(zTemp1),y
.a782	d0 fb		bne $a77f			bne 	_SALength
.a784	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a786	b0 3f		bcs $a7c7			bcs 	_SALengthError
.a788	98		tya				tya 				 				; length of the new string
.a789	18		clc				clc
.a78a	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a78c	90 02		bcc $a790			bcc 	_SAHaveLength
.a78e	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a790					_SAHaveLength:
.a790	48		pha				pha 								; save length.
.a791	38		sec				sec
.a792	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a794	6d 0e 07	adc $070e			adc 	StringMemory
.a797	8d 0e 07	sta $070e			sta 	StringMemory
.a79a	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a79c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.a79f	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a7a1	6d 0f 07	adc $070f			adc 	StringMemory+1
.a7a4	8d 0f 07	sta $070f			sta 	StringMemory+1
.a7a7	85 3b		sta $3b				sta 	zTemp2+1
.a7a9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a7ac	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a7ad	38		sec				sec
.a7ae	e9 03		sbc #$03			sbc 	#3
.a7b0	92 3a		sta ($3a)			sta 	(zTemp2)
.a7b2	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a7b4	a0 01		ldy #$01			ldy 	#1
.a7b6	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a7b8					_SACopyNewString:
.a7b8	a0 00		ldy #$00			ldy 	#0
.a7ba					_SACopyNSLoop:
.a7ba	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a7bc	c8		iny				iny 								; write two on in string storage
.a7bd	c8		iny				iny
.a7be	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a7c0	88		dey				dey 								; this makes it one one.
.a7c1	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a7c3	d0 f5		bne $a7ba			bne 	_SACopyNSLoop
.a7c5	7a		ply				ply
.a7c6	60		rts				rts
.a7c7					_SALengthError:
.a7c7	a9 09		lda #$09		lda	#9
.a7c9	4c 00 8d	jmp $8d00		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a7cc					StringSystemInitialise:
.a7cc	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a7ce	8d 0e 07	sta $070e			sta 	0+StringMemory
.a7d1	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a7d3	8d 0f 07	sta $070f			sta 	1+StringMemory
.a7d6	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a7d9	60		rts				rts
.a7da					StringSpaceInitialise:
.a7da	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a7dc	8d 10 07	sta $0710			sta 	StringInitialised
.a7df	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a7e2	8d 11 07	sta $0711			sta 	StringTempPointer
.a7e5	ad 0f 07	lda $070f			lda 	StringMemory+1
.a7e8	3a		dec a				dec 	a
.a7e9	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a7ec	60		rts				rts
.a7ed					StringTempAllocate:
.a7ed	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a7ef	b0 35		bcs $a826			bcs 	_STALength
.a7f1	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a7f4	30 05		bmi $a7fb			bmi 	_STAAllocate
.a7f6	48		pha				pha 								; save value to subtract.
.a7f7	20 da a7	jsr $a7da			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a7fa	68		pla				pla 								; restore it
.a7fb					_STAAllocate:
.a7fb	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a7fd	18		clc				clc  								; deliberate allows one more
.a7fe	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a801	8d 11 07	sta $0711			sta 	StringTempPointer
.a804	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a807	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a809	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a80c	69 ff		adc #$ff			adc 	#$FF
.a80e	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a811	85 3d		sta $3d				sta 	zsTemp+1
.a813	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a816	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a819	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a81c	a9 10		lda #$10			lda 	#NSTString
.a81e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a821	a9 00		lda #$00			lda 	#0 							; clear the target string
.a823	92 3c		sta ($3c)			sta 	(zsTemp)
.a825	60		rts				rts
.a826					_STALength:
.a826	a9 09		lda #$09		lda	#9
.a828	4c 00 8d	jmp $8d00		jmp	ErrorHandler
.a82b					StringTempWrite:
.a82b	48		pha				pha
.a82c	92 3c		sta ($3c)			sta 	(zsTemp)
.a82e	e6 3c		inc $3c				inc 	zsTemp
.a830	d0 02		bne $a834			bne 	_STWNoCarry
.a832	e6 3d		inc $3d				inc 	zsTemp+1
.a834					_STWNoCarry:
.a834	a9 00		lda #$00			lda 	#0
.a836	92 3c		sta ($3c)			sta 	(zsTemp)
.a838	68		pla				pla
.a839	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9940					BackloadProgram:
.9940	a2 ff		ldx #$ff			ldx 	#$FF
.9942	20 6a 99	jsr $996a			jsr 	BLReadByte
.9945	30 1f		bmi $9966			bmi 	_BPExit
.9947					_BPCopy:
.9947	e8		inx				inx  								; copy byte in
.9948	9d 26 08	sta $0826,x			sta 	lineBuffer,x
.994b	9e 27 08	stz $0827,x			stz 	lineBuffer+1,x
.994e	20 6a 99	jsr $996a			jsr 	BLReadByte 					; read next byte
.9951	30 0a		bmi $995d			bmi 	_BPEndLine 					; -ve = EOL
.9953	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9955	d0 02		bne $9959			bne 	_BPNotTab
.9957	a9 20		lda #$20			lda 	#' '
.9959					_BPNotTab:
.9959	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.995b	b0 ea		bcs $9947			bcs 	_BPCopy
.995d					_BPEndLine:
.995d	20 8e 9c	jsr $9c8e			jsr 	TokeniseLine 				; tokenise the line.
.9960	38		sec				sec 								; append not insert
.9961	20 b5 a8	jsr $a8b5			jsr 	MemoryInsertLine 			; append to current program
.9964	80 da		bra $9940			bra 	BackloadProgram
.9966					_BPExit:
.9966	20 d6 84	jsr $84d6			jsr 	ClearCommand 				; clear variables etc.
.9969	60		rts				rts
.996a					BLReadByte:
.996a					_BLLoad:
.996a	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.996d	ee 6b 99	inc $996b			inc 	_BLLoad+1
.9970	d0 03		bne $9975			bne 	_BLNoCarry
.9972	ee 6c 99	inc $996c			inc 	_BLLoad+2
.9975					_BLNoCarry:
.9975	c9 00		cmp #$00			cmp 	#0
.9977	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9978					TokeniseSearchTable:
.9978	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.997a	85 36		sta $36				sta 	zTemp0
.997c	a0 00		ldy #$00			ldy 	#0
.997e	a9 80		lda #$80			lda 	#$80 						; token #
.9980	85 38		sta $38				sta 	zTemp1
.9982					_TSTLoop:
.9982	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9984	30 49		bmi $99cf			bmi 	_TSTFail 					; -ve = end of table
.9986	f0 2e		beq $99b6			beq 	_TSTNext 					; zero, check next it's a dummy
.9988	c8		iny				iny 								; get the hash
.9989	b1 36		lda ($36),y			lda 	(zTemp0),y
.998b	88		dey				dey
.998c	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.998f	d0 25		bne $99b6			bne 	_TSTNext
.9991	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.9994	38		sec				sec
.9995	ed 00 07	sbc $0700			sbc 	identStart
.9998	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.999a	d0 1a		bne $99b6			bne 	_TSTNext
.999c	5a		phy				phy 								; save Y , we might fail
.999d	c8		iny				iny 								; point to text
.999e	c8		iny				iny
.999f	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.99a2					_TSTCompareName:
.99a2	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; compare text.
.99a5	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.99a7	d0 0c		bne $99b5			bne 	_TSTNextPullY 				; fail, pullY and do next
.99a9	e8		inx				inx
.99aa	c8		iny				iny
.99ab	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.99ae	d0 f2		bne $99a2			bne 	_TSTCompareName
.99b0	7a		ply				ply 								; throw Y
.99b1	a5 38		lda $38				lda 	zTemp1 						; get token #
.99b3	38		sec				sec 								; return with CS = passed.
.99b4	60		rts				rts
.99b5					_TSTNextPullY:
.99b5	7a		ply				ply 								; restore current, fall through.
.99b6					_TSTNext:
.99b6	e6 38		inc $38				inc 	zTemp1 						; token counter
.99b8	98		tya				tya
.99b9	18		clc				clc
.99ba	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.99bc	1a		inc a				inc 	a 							; +1
.99bd	1a		inc a				inc 	a 							; +2
.99be	a8		tay				tay
.99bf	10 c1		bpl $9982			bpl 	_TSTLoop 					; if Y < $80 loop back
.99c1	98		tya				tya 								; add Y to zTemp0 and reset Y
.99c2	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.99c4	18		clc				clc  								; but have tables > 255 bytes
.99c5	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.99c7	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.99c9	90 b7		bcc $9982			bcc 	_TSTLoop
.99cb	e6 37		inc $37				inc 	zTemp0+1
.99cd	80 b3		bra $9982			bra 	_TSTLoop
.99cf					_TSTFail:
.99cf	18		clc				clc
.99d0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.99d1					KeywordSet0:
>99d1	00 65					.text	0,$65,""               ; $80 !0:EOF
>99d3	00 58					.text	0,$58,""               ; $81 !1:SH1
>99d5	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>99d7	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>99dd	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>99e5	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>99eb	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>99f2	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>99f9	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9a00	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9a06	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9a0e	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9a16	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9a1c	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9a23	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>9a29	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>9a31	28
>9a32	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>9a3a	28
>9a3b	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>9a41	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>9a47	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>9a4d	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>9a54	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>9a5a	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>9a60	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>9a65	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>9a69	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>9a6f	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>9a77	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>9a7e	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>9a85	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>9a8d	43
>9a8e	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>9a94	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>9a9a	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>9aa1	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>9aa7	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>9aad	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>9ab2	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>9ab8	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>9abd	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>9ac5	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>9acb	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>9ad2	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>9ad8	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>9add	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>9ae4	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>9aeb	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>9af1	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>9af6	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>9afe	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>9b02	ff					.text	$FF
.9b03					KeywordSet1:
>9b03	00 65					.text	0,$65,""               ; $80 !0:EOF
>9b05	00 58					.text	0,$58,""               ; $81 !1:SH1
>9b07	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9b09	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>9b11	4c 45
>9b13	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>9b1b	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>9b22	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>9b27	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>9b2d	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>9b32	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>9b3a	45
>9b3b	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>9b40	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>9b46	ff					.text	$FF
.9b47					KeywordSet2:
>9b47	00 65					.text	0,$65,""               ; $80 !0:EOF
>9b49	00 58					.text	0,$58,""               ; $81 !1:SH1
>9b4b	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9b4d	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>9b52	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>9b57	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>9b5c	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>9b61	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>9b66	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>9b6b	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>9b70	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>9b75	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>9b7a	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>9b7f	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>9b84	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>9b89	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>9b8e	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>9b93	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>9b98	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>9b9d	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>9ba2	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>9ba7	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>9bac	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9bb1	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>9bb6	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>9bbb	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9bc0	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>9bc5	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>9bca	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>9bcf	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9bd4	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>9bd9	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>9bde	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9be3	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9be8	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9bed	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9bf2	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9bf7	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9bfc	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9c01	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9c06	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9c0b	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9c10	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9c15	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>9c1a	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>9c1f	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9c24	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9c29	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9c2e	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9c33	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9c38	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>9c3d	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9c42	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9c47	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>9c4c	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>9c51	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>9c56	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b8 STX
>9c5b	03 00 53 54 59				.text	3,$00,"STY"            ; $b9 STY
>9c60	03 01 53 54 5a				.text	3,$01,"STZ"            ; $ba STZ
>9c65	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bb TAX
>9c6a	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bc TAY
>9c6f	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $bd TRB
>9c74	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $be TSB
>9c79	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $bf TSX
>9c7e	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c0 TXA
>9c83	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c1 TXS
>9c88	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c2 TYA
>9c8d	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9c8e					TokeniseLine:
.9c8e	20 16 9e	jsr $9e16			jsr 	FixLineBufferCase 			; fix line case
.9c91	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9c93	8d 26 07	sta $0726			sta 	tokenOffset
.9c96	9c 27 07	stz $0727			stz 	tokenLineNumber
.9c99	9c 28 07	stz $0728			stz 	tokenLineNumber+1
.9c9c	a2 ff		ldx #$ff			ldx 	#$FF
.9c9e					_TKFindFirst:
.9c9e	e8		inx				inx
.9c9f	bd 26 08	lda $0826,x			lda 	lineBuffer,x
.9ca2	f0 79		beq $9d1d			beq 	_TKExit
.9ca4	c9 20		cmp #$20			cmp 	#' '
.9ca6	90 f6		bcc $9c9e			bcc 	_TKFindFirst
.9ca8	c9 30		cmp #$30			cmp 	#'0'
.9caa	90 07		bcc $9cb3			bcc 	_TKNoLineNumber
.9cac	c9 3a		cmp #$3a			cmp 	#'9'+1
.9cae	b0 03		bcs $9cb3			bcs 	_TKNoLineNumber
.9cb0	20 40 9e	jsr $9e40			jsr 	TokeniseExtractLineNumber
.9cb3					_TKNoLineNumber:
.9cb3					_TKTokeniseLoop:
.9cb3	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9cb6	f0 65		beq $9d1d			beq 	_TKExit
.9cb8	e8		inx				inx
.9cb9	c9 20		cmp #$20			cmp 	#' '
.9cbb	f0 f6		beq $9cb3			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9cbd	ca		dex				dex 								; undo last get, A contains character, X is position.
.9cbe	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9cc0	f0 61		beq $9d23			beq 	_TKTokeniseIdentifier
.9cc2	c9 41		cmp #$41			cmp 	#'A'
.9cc4	90 04		bcc $9cca			bcc 	_TKTokenisePunctuation
.9cc6	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9cc8	90 59		bcc $9d23			bcc 	_TKTokeniseIdentifier
.9cca					_TKTokenisePunctuation:
.9cca	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9ccc	f0 27		beq $9cf5			beq 	_TKString
.9cce	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.9cd0	f0 28		beq $9cfa			beq 	_TKHexConstant
.9cd2	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9cd4	f0 29		beq $9cff			beq 	_TKCheckDouble
.9cd6	c9 3e		cmp #$3e			cmp 	#'>'
.9cd8	f0 25		beq $9cff			beq 	_TKCheckDouble
.9cda					_TKStandardPunctuation:
.9cda	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; get it back.
.9cdd	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9cdf	90 0e		bcc $9cef			bcc 	_TKNoShift
.9ce1	48		pha				pha 								; save
.9ce2	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9ce4	85 36		sta $36				sta 	zTemp0
.9ce6	68		pla				pla
.9ce7	29 20		and #$20			and 	#32 						; bit 5
.9ce9	4a		lsr a				lsr 	a 							; shift into bit 3
.9cea	4a		lsr a				lsr 	a
.9ceb	05 36		ora $36				ora 	zTemp0
.9ced	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9cef					_TKNoShift:
.9cef	20 85 9e	jsr $9e85			jsr 	TokeniseWriteByte 			; write the punctuation character
.9cf2	e8		inx				inx 								; consume the character
.9cf3	80 be		bra $9cb3			bra 	_TKTokeniseLoop 			; and loop round again.
.9cf5					_TKString:
.9cf5	20 a5 9d	jsr $9da5			jsr 	TokeniseString
.9cf8	80 b9		bra $9cb3			bra 	_TKTokeniseLoop
.9cfa					_TKHexConstant:
.9cfa	20 e0 9d	jsr $9de0			jsr 	TokeniseHexConstant
.9cfd	80 b4		bra $9cb3			bra 	_TKTokeniseLoop
.9cff					_TKCheckDouble:
.9cff	bd 27 08	lda $0827,x			lda 	lineBuffer+1,x 				; get next character
.9d02	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9d04	90 d4		bcc $9cda			bcc 	_TKStandardPunctuation
.9d06	c9 3f		cmp #$3f			cmp 	#'>'+1
.9d08	b0 d0		bcs $9cda			bcs 	_TKStandardPunctuation
.9d0a	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9d0d	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9d0f	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9d10	7d 27 08	adc $0827,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9d13	38		sec				sec
.9d14	e9 3c		sbc #$3c			sbc 	#'<'
.9d16	20 85 9e	jsr $9e85			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9d19	e8		inx				inx 								; consume both
.9d1a	e8		inx				inx
.9d1b	80 96		bra $9cb3			bra 	_TKTokeniseLoop
.9d1d	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9d1f	20 85 9e	jsr $9e85			jsr 	TokeniseWriteByte
.9d22	60		rts				rts
.9d23					_TKTokeniseIdentifier:
.9d23	8e 00 07	stx $0700			stx 	identStart 					; save start
.9d26	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9d29					_TKCheckLoop:
.9d29	e8		inx				inx 								; look at next, we know first is identifier.
.9d2a	bd 26 08	lda $0826,x			lda  	lineBuffer,x
.9d2d	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9d2f	f0 f8		beq $9d29			beq 	_TKCheckLoop
.9d31	c9 30		cmp #$30			cmp	 	#"0"
.9d33	90 0c		bcc $9d41			bcc 	_TKEndIdentifier
.9d35	c9 3a		cmp #$3a			cmp 	#"9"+1
.9d37	90 f0		bcc $9d29			bcc 	_TKCheckLoop
.9d39	c9 41		cmp #$41			cmp	 	#"A"
.9d3b	90 04		bcc $9d41			bcc 	_TKEndIdentifier
.9d3d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9d3f	90 e8		bcc $9d29			bcc 	_TKCheckLoop
.9d41					_TKEndIdentifier:
.9d41	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9d44	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9d46	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9d48	f0 06		beq $9d50			beq 	_TKHasTypeCharacter
.9d4a	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9d4c	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9d4e	d0 07		bne $9d57			bne 	_TKNoTypeCharacter
.9d50					_TKHasTypeCharacter:
.9d50	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9d53	e8		inx				inx 								; read next
.9d54	bd 26 08	lda $0826,x			lda 	lineBuffer,x
.9d57					_TKNoTypeCharacter:
.9d57	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9d59	d0 09		bne $9d64			bne 	_TKNoArray
.9d5b	e8		inx				inx 								; skip the (
.9d5c	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9d5f	09 04		ora #$04			ora 	#$04
.9d61	8d 04 07	sta $0704			sta 	identTypeByte
.9d64					_TKNoArray:
.9d64	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9d67	20 01 9e	jsr $9e01			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9d6a	a0 99		ldy #$99			ldy 	#(KeywordSet0) >> 8
.9d6c	a9 d1		lda #$d1			lda 	#(KeywordSet0) & $FF
.9d6e	20 78 99	jsr $9978			jsr 	TokeniseSearchTable
.9d71	a2 00		ldx #$00			ldx 	#0
.9d73	b0 1f		bcs $9d94			bcs 	_TKFoundToken
.9d75	a0 9b		ldy #$9b			ldy 	#(KeywordSet1) >> 8
.9d77	a9 03		lda #$03			lda 	#(KeywordSet1) & $FF
.9d79	20 78 99	jsr $9978			jsr 	TokeniseSearchTable
.9d7c	a2 81		ldx #$81			ldx 	#$81
.9d7e	b0 14		bcs $9d94			bcs 	_TKFoundToken
.9d80	a0 9b		ldy #$9b			ldy 	#(KeywordSet2) >> 8
.9d82	a9 47		lda #$47			lda 	#(KeywordSet2) & $FF
.9d84	20 78 99	jsr $9978			jsr 	TokeniseSearchTable
.9d87	a2 82		ldx #$82			ldx 	#$82
.9d89	b0 09		bcs $9d94			bcs 	_TKFoundToken
.9d8b	20 91 9e	jsr $9e91			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9d8e	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9d91	4c b3 9c	jmp $9cb3			jmp 	_TKTokeniseLoop 			; and go round again.
.9d94					_TKFoundToken:
.9d94	48		pha				pha 								; save token
.9d95	8a		txa				txa 								; shift in X, is there one ?
.9d96	f0 03		beq $9d9b			beq 	_TKNoTShift
.9d98	20 85 9e	jsr $9e85			jsr 	TokeniseWriteByte 			; if so, write it out
.9d9b					_TKNoTShift:
.9d9b	68		pla				pla 								; restore and write token
.9d9c	20 85 9e	jsr $9e85			jsr 	TokeniseWriteByte
.9d9f	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9da2	4c b3 9c	jmp $9cb3			jmp 	_TKTokeniseLoop 			; and go round again.
.9da5					TokeniseString:
.9da5	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9da7	20 85 9e	jsr $9e85			jsr 	TokeniseWriteByte
.9daa	e8		inx				inx									; start of quoted string.
.9dab	da		phx				phx 								; push start of string on top
.9dac	ca		dex				dex
.9dad					_TSFindEnd:
.9dad	e8		inx				inx
.9dae	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; next character
.9db1	f0 04		beq $9db7			beq 	_TSEndOfString
.9db3	c9 22		cmp #$22			cmp 	#'"'
.9db5	d0 f6		bne $9dad			bne 	_TSFindEnd
.9db7					_TSEndOfString:
.9db7	7a		ply				ply  								; so now Y is first character, X is character after end.
.9db8	48		pha				pha 								; save terminating character
.9db9	20 c1 9d	jsr $9dc1			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9dbc	68		pla				pla 								; terminating character
.9dbd	f0 01		beq $9dc0			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9dbf	e8		inx				inx
.9dc0					_TSNotQuote:
.9dc0	60		rts				rts
.9dc1					TOWriteBlockXY:
.9dc1	86 36		stx $36				stx 	zTemp0 						; write end character
.9dc3	98		tya				tya
.9dc4	49 ff		eor #$ff			eor 	#$FF
.9dc6	38		sec				sec
.9dc7	65 36		adc $36				adc 	zTemp0
.9dc9	1a		inc a				inc 	a 							; one extra for NULL
.9dca	20 85 9e	jsr $9e85			jsr 	TokeniseWriteByte
.9dcd					_TOBlockLoop:
.9dcd	c4 36		cpy $36				cpy 	zTemp0
.9dcf	f0 09		beq $9dda			beq 	_TOBlockExit
.9dd1	b9 26 08	lda $0826,y			lda 	lineBuffer,y
.9dd4	20 85 9e	jsr $9e85			jsr 	TokeniseWriteByte
.9dd7	c8		iny				iny
.9dd8	80 f3		bra $9dcd			bra 	_TOBlockLoop
.9dda					_TOBlockExit:
.9dda	a9 00		lda #$00			lda 	#0
.9ddc	20 85 9e	jsr $9e85			jsr 	TokeniseWriteByte
.9ddf	60		rts				rts
.9de0					TokeniseHexConstant:
.9de0	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9de2	20 85 9e	jsr $9e85			jsr 	TokeniseWriteByte
.9de5	e8		inx				inx									; start of quoted string.
.9de6	da		phx				phx 								; push start of constant on top
.9de7	ca		dex				dex
.9de8					_THFindLoop:
.9de8	e8		inx				inx
.9de9	bd 26 08	lda $0826,x			lda 	lineBuffer,x
.9dec	c9 30		cmp #$30			cmp 	#"0"
.9dee	90 0c		bcc $9dfc			bcc 	_THFoundEnd
.9df0	c9 3a		cmp #$3a			cmp 	#"9"+1
.9df2	90 f4		bcc $9de8			bcc 	_THFindLoop
.9df4	c9 41		cmp #$41			cmp 	#"A"
.9df6	90 04		bcc $9dfc			bcc 	_THFoundEnd
.9df8	c9 47		cmp #$47			cmp 	#"F"+1
.9dfa	90 ec		bcc $9de8			bcc 	_THFindLoop
.9dfc					_THFoundEnd:
.9dfc	7a		ply				ply 								; restore start
.9dfd	20 c1 9d	jsr $9dc1			jsr 	TOWriteBlockXY 				; output the block
.9e00	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9e01					TokeniseCalculateHash:
.9e01	da		phx				phx
.9e02	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9e05	a9 00		lda #$00			lda 	#0
.9e07					_TCHLoop:
.9e07	18		clc				clc
.9e08	7d 26 08	adc $0826,x			adc 	lineBuffer,x
.9e0b	e8		inx				inx
.9e0c	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9e0f	d0 f6		bne $9e07			bne 	_TCHLoop
.9e11	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9e14	fa		plx				plx
.9e15	60		rts				rts
.9e16					FixLineBufferCase:
.9e16	a2 00		ldx #$00			ldx 	#0
.9e18					_FLBCLoop:
.9e18	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; get next character
.9e1b	f0 22		beq $9e3f			beq 	_FLBCExit 					; end of string.
.9e1d	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9e1f	f0 11		beq $9e32			beq 	_FLBCInQuotes
.9e21	e8		inx				inx
.9e22	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9e24	90 f2		bcc $9e18			bcc 	_FLBCLoop
.9e26	c9 7b		cmp #$7b			cmp 	#'z'+1
.9e28	b0 ee		bcs $9e18			bcs 	_FLBCLoop
.9e2a	38		sec				sec 								; make U/C
.9e2b	e9 20		sbc #$20			sbc 	#32
.9e2d	9d 25 08	sta $0825,x			sta	 	lineBuffer-1,x 				; write back
.9e30	80 e6		bra $9e18			bra 	_FLBCLoop
.9e32					_FLBCInQuotes:
.9e32	e8		inx				inx 								; advance
.9e33	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; get next
.9e36	f0 07		beq $9e3f			beq 	_FLBCExit 					; exit on EOS
.9e38	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9e3a	d0 f6		bne $9e32			bne 	_FLBCInQuotes
.9e3c	e8		inx				inx 								; skip over it
.9e3d	80 d9		bra $9e18			bra 	_FLBCLoop
.9e3f					_FLBCExit:
.9e3f	60		rts				rts
.9e40					TokeniseExtractLineNumber:
.9e40	ad 28 07	lda $0728			lda 	tokenLineNumber+1 			; push current value on stack
.9e43	48		pha				pha
.9e44	ad 27 07	lda $0727			lda 	tokenLineNumber
.9e47	48		pha				pha
.9e48	20 7e 9e	jsr $9e7e			jsr 	_TELNTimes2 				; line # x 4
.9e4b	20 7e 9e	jsr $9e7e			jsr 	_TELNTimes2 				; line # x 2
.9e4e	18		clc				clc 								; add stacked value
.9e4f	68		pla				pla
.9e50	6d 27 07	adc $0727			adc 	tokenLineNumber
.9e53	8d 27 07	sta $0727			sta 	tokenLineNumber
.9e56	68		pla				pla
.9e57	6d 28 07	adc $0728			adc 	tokenLineNumber+1
.9e5a	8d 28 07	sta $0728			sta 	tokenLineNumber+1 			; line # x 5
.9e5d	20 7e 9e	jsr $9e7e			jsr 	_TELNTimes2 				; line # x 10
.9e60	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; get and consume character
.9e63	e8		inx				inx
.9e64	29 0f		and #$0f			and 	#15 						; add to line #
.9e66	18		clc				clc
.9e67	6d 27 07	adc $0727			adc 	tokenLineNumber
.9e6a	8d 27 07	sta $0727			sta 	tokenLineNumber
.9e6d	90 03		bcc $9e72			bcc 	_TLENNoCarry
.9e6f	ee 28 07	inc $0728			inc 	tokenLineNumber+1
.9e72					_TLENNoCarry:
.9e72	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; more digits ?
.9e75	c9 30		cmp #$30			cmp 	#'0'
.9e77	90 04		bcc $9e7d			bcc 	_TLENExit
.9e79	c9 3a		cmp #$3a			cmp 	#'9'+1
.9e7b	90 c3		bcc $9e40			bcc 	TokeniseExtractLineNumber
.9e7d					_TLENExit:
.9e7d	60		rts				rts
.9e7e					_TELNTimes2:
.9e7e	0e 27 07	asl $0727			asl 	tokenLineNumber
.9e81	2e 28 07	rol $0728			rol 	tokenLineNumber+1
.9e84	60		rts				rts
.9e85					TokeniseWriteByte:
.9e85	da		phx				phx
.9e86	ae 26 07	ldx $0726			ldx 	tokenOffset 				; next slot to write to
.9e89	9d 26 07	sta $0726,x			sta 	tokenOffset,x 				; write byte out
.9e8c	ee 26 07	inc $0726			inc 	tokenOffset 				; advance slot.
.9e8f	fa		plx				plx
.9e90	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9e91					CheckCreateVariableRecord:
.9e91	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9e93	85 36		sta $36				sta 	0+zTemp0
.9e95	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9e97	85 37		sta $37				sta 	1+zTemp0
.9e99					_CCVSearch:
.9e99	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9e9b	f0 2c		beq $9ec9			beq 	_CCVFail
.9e9d	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9e9f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9ea1	cd 03 07	cmp $0703			cmp 	identHash
.9ea4	d0 16		bne $9ebc			bne 	_CCVNext
.9ea6	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9ea8	ae 00 07	ldx $0700			ldx 	identStart
.9eab					_CCVCompare:
.9eab	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9eae	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9eb0	e8		inx				inx 								; advance pointers
.9eb1	c8		iny				iny
.9eb2	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9eb3	d0 07		bne $9ebc			bne 	_CCVNext  					; didn't match go to next.
.9eb5	90 f4		bcc $9eab			bcc 	_CCVCompare 				; not finished yet.
.9eb7	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9eba	f0 41		beq $9efd			beq 	_CCVFound 					; yes, we were successful
.9ebc					_CCVNext:
.9ebc	18		clc				clc
.9ebd	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9ebf	65 36		adc $36				adc 	zTemp0
.9ec1	85 36		sta $36				sta 	zTemp0
.9ec3	90 d4		bcc $9e99			bcc 	_CCVSearch
.9ec5	e6 37		inc $37				inc 	zTemp0+1
.9ec7	80 d0		bra $9e99			bra 	_CCVSearch
.9ec9					_CCVFail:
.9ec9	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9ecb	ad 03 07	lda $0703			lda 	identHash
.9ece	91 36		sta ($36),y			sta 	(zTemp0),y
.9ed0	c8		iny				iny 								; offset 2 is the type byte
.9ed1	ad 04 07	lda $0704			lda 	identTypeByte
.9ed4	91 36		sta ($36),y			sta 	(zTemp0),y
.9ed6	c8		iny				iny
.9ed7					_CCVData:
.9ed7	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9ed9	91 36		sta ($36),y			sta 	(zTemp0),y
.9edb	c8		iny				iny
.9edc	c0 08		cpy #$08			cpy 	#8
.9ede	90 f7		bcc $9ed7			bcc 	_CCVData
.9ee0	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9ee3					_CCVCopyName:
.9ee3	bd 26 08	lda $0826,x			lda 	lineBuffer,x
.9ee6	91 36		sta ($36),y			sta 	(zTemp0),y
.9ee8	e8		inx				inx
.9ee9	c8		iny				iny
.9eea	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9eed	d0 f4		bne $9ee3			bne 	_CCVCopyName
.9eef	98		tya				tya 								; patch offset
.9ef0	92 36		sta ($36)			sta 	(zTemp0)
.9ef2	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9ef4	91 36		sta ($36),y			sta 	(zTemp0),y
.9ef6	88		dey				dey
.9ef7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9ef9	09 80		ora #$80			ora 	#$80
.9efb	91 36		sta ($36),y			sta 	(zTemp0),y
.9efd					_CCVFound:
.9efd	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9eff	38		sec				sec
.9f00	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9f02	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9f04	20 85 9e	jsr $9e85			jsr 	TokeniseWriteByte
.9f07	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9f09	20 85 9e	jsr $9e85			jsr 	TokeniseWriteByte
.9f0c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/extern.asm

.a83a					EXTPrintCharacter:
.a83a	48		pha				pha
.a83b	da		phx				phx
.a83c	5a		phy				phy
.a83d	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a840	7a		ply				ply
.a841	fa		plx				plx
.a842	68		pla				pla
.a843	60		rts				rts
.a844					EXTInputSingleCharacter:
.a844	da		phx				phx
.a845	5a		phy				phy
.a846					_EISCWait:
.a846	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a849	c9 00		cmp #$00			cmp 	#0
.a84b	f0 f9		beq $a846			beq 	_EISCWait
.a84d	7a		ply				ply
.a84e	fa		plx				plx
.a84f	60		rts				rts
.a850					EXTInputLine:
.a850	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a852					_ILLoop:
.a852	da		phx				phx 								; read character in
.a853	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a856	fa		plx				plx
.a857	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a859	f0 12		beq $a86d			beq 	_ILBackspace
.a85b	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a85d	f0 15		beq $a874			beq 	_ILExit
.a85f	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a861	90 ef		bcc $a852			bcc 	_ILLoop
.a863	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a865	f0 eb		beq $a852			beq 	_ILLoop
.a867	9d 26 08	sta $0826,x			sta 	lineBuffer,x 				; save it
.a86a	e8		inx				inx
.a86b	80 e5		bra $a852			bra 	_ILLoop
.a86d					_ILBackspace:
.a86d	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a86f	f0 e1		beq $a852			beq 	_ILLoop
.a871	ca		dex				dex 								; back one.
.a872	80 de		bra $a852			bra 	_ILLoop
.a874					_ILExit:
.a874	20 3a a8	jsr $a83a			jsr 	EXTPrintCharacter
.a877	9e 26 08	stz $0826,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a87a	60		rts				rts
.a87b					EXTBreakCheck:
.a87b	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/delete.asm

.a87e					MemoryDeleteLine:
.a87e	20 9d a8	jsr $a89d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a881	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a883	a8		tay				tay
.a884					_MDDLLoop:
.a884	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a886	92 30		sta ($30)			sta 	(codePtr)
.a888	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a88a	c5 3a		cmp $3a				cmp 	zTemp2
.a88c	d0 07		bne $a895			bne 	_MDLDLNext
.a88e	a5 31		lda $31				lda 	codePtr+1
.a890	c5 3b		cmp $3b				cmp 	zTemp2+1
.a892	d0 01		bne $a895			bne 	_MDLDLNext
.a894					_MDDLExit:
.a894	60		rts				rts
.a895					_MDLDLNext:
.a895	e6 30		inc $30				inc 	codePtr						; next byte
.a897	d0 eb		bne $a884			bne 	_MDDLLoop
.a899	e6 31		inc $31				inc 	codePtr+1
.a89b	80 e7		bra $a884			bra 	_MDDLLoop
.a89d					IMemoryFindEnd:
.a89d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a89f	85 3a		sta $3a				sta 	0+zTemp2
.a8a1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a8a3	85 3b		sta $3b				sta 	1+zTemp2
.a8a5					_MDLFELoop:
.a8a5	b2 3a		lda ($3a)			lda 	(zTemp2)
.a8a7	f0 0b		beq $a8b4			beq 	_MDLFEExit
.a8a9	18		clc				clc
.a8aa	65 3a		adc $3a				adc 	zTemp2
.a8ac	85 3a		sta $3a				sta 	zTemp2
.a8ae	90 f5		bcc $a8a5			bcc 	_MDLFELoop
.a8b0	e6 3b		inc $3b				inc 	zTemp2+1
.a8b2	80 f1		bra $a8a5			bra 	_MDLFELoop
.a8b4					_MDLFEExit:
.a8b4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/insert.asm

.a8b5					MemoryInsertLine:
.a8b5	08		php				php
.a8b6	20 9d a8	jsr $a89d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a8b9	28		plp				plp
.a8ba	90 08		bcc $a8c4			bcc 	_MDLIFound
.a8bc	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a8be	85 30		sta $30				sta 	codePtr
.a8c0	a5 3b		lda $3b				lda 	zTemp2+1
.a8c2	85 31		sta $31				sta 	codePtr+1
.a8c4					_MDLIFound:
.a8c4	ad 26 07	lda $0726			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a8c7	a8		tay				tay
.a8c8					_MDLIInsert:
.a8c8	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a8ca	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a8cc	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a8ce	c5 3a		cmp $3a				cmp 	zTemp2
.a8d0	d0 06		bne $a8d8			bne 	_MDLINext
.a8d2	a5 31		lda $31				lda 	codePtr+1
.a8d4	c5 3b		cmp $3b				cmp 	zTemp2+1
.a8d6	f0 0a		beq $a8e2			beq 	_MDLIHaveSpace
.a8d8					_MDLINext:
.a8d8	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a8da	d0 02		bne $a8de			bne 	_MDLINoBorrow
.a8dc	c6 3b		dec $3b				dec 	zTemp2+1
.a8de					_MDLINoBorrow:
.a8de	c6 3a		dec $3a				dec 	zTemp2
.a8e0	80 e6		bra $a8c8			bra 	_MDLIInsert
.a8e2					_MDLIHaveSpace:
.a8e2	ac 26 07	ldy $0726			ldy 	tokenOffset 				; bytes to copy
.a8e5	88		dey				dey 								; from offset-1 to 0
.a8e6					_MDLICopy:
.a8e6	b9 26 07	lda $0726,y			lda 	tokenOffset,y
.a8e9	91 30		sta ($30),y			sta 	(codePtr),y
.a8eb	88		dey				dey
.a8ec	10 f8		bpl $a8e6			bpl 	_MDLICopy
.a8ee	60		rts				rts
.a8ef					MDLAppendLine:
.a8ef	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a8f1	85 36		sta $36				sta 	zTemp0
.a8f3	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a8f5	85 38		sta $38				sta 	0+zTemp1
.a8f7	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a8f9	85 39		sta $39				sta 	1+zTemp1
.a8fb	b2 38		lda ($38)			lda 	(zTemp1)
.a8fd	d0 0a		bne $a909			bne 	_MDLANoInitialise
.a8ff	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a901	8d a9 08	sta $08a9			sta 	0+AppendPointer
.a904	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a906	8d aa 08	sta $08aa			sta 	1+AppendPointer
.a909					_MDLANoInitialise:
.a909	18		clc				clc
.a90a	ad a9 08	lda $08a9			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a90d	85 38		sta $38				sta 	zTemp1
.a90f	72 36		adc ($36)			adc 	(zTemp0)
.a911	8d a9 08	sta $08a9			sta 	AppendPointer
.a914	ad aa 08	lda $08aa			lda 	AppendPointer+1
.a917	85 39		sta $39				sta 	zTemp1+1
.a919	69 00		adc #$00			adc 	#0
.a91b	8d aa 08	sta $08aa			sta 	AppendPointer+1
.a91e	a0 00		ldy #$00			ldy 	#0
.a920					_MDLACopy:
.a920	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a922	91 38		sta ($38),y			sta 	(zTemp1),y
.a924	c8		iny				iny
.a925	98		tya				tya
.a926	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a928	d0 f6		bne $a920			bne 	_MDLACopy
.a92a	a9 00		lda #$00			lda 	#0 							; end of program.
.a92c	91 38		sta ($38),y			sta 	(zTemp1),y
.a92e	60		rts				rts
.08a9					AppendPointer:
>08a9							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9f0d					MemoryNew:
.9f0d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9f0f	85 30		sta $30				sta 	codePtr
.9f11	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9f13	85 31		sta $31				sta 	codePtr+1
.9f15	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9f17	92 30		sta ($30)			sta 	(codePtr)
.9f19	60		rts				rts
.9f1a					MemoryInline:
.9f1a	98		tya				tya 								; put address into stack,x
.9f1b	18		clc				clc
.9f1c	65 30		adc $30				adc 	codePtr
.9f1e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9f21	a5 31		lda $31				lda 	codePtr+1
.9f23	69 00		adc #$00			adc 	#0
.9f25	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9f28	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9f2b	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9f2e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/search.asm

.9f2f					MemorySearch:
.9f2f	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9f31	86 37		stx $37				stx 	zTemp0+1
.9f33	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9f35	85 30		sta $30				sta 	codePtr
.9f37	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9f39	85 31		sta $31				sta 	codePtr+1
.9f3b					_MTAXLoop:
.9f3b	b2 30		lda ($30)			lda 	(codePtr)
.9f3d	18		clc				clc
.9f3e	f0 21		beq $9f61			beq 	_MTAXExit 					; reached end, exit with CC.
.9f40	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9f42	b1 30		lda ($30),y			lda 	(codePtr),y
.9f44	38		sec				sec
.9f45	e5 36		sbc $36				sbc 	zTemp0
.9f47	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9f49	c8		iny				iny 								; do the MSB
.9f4a	b1 30		lda ($30),y			lda 	(codePtr),y
.9f4c	e5 37		sbc $37				sbc 	zTemp0+1
.9f4e	05 38		ora $38				ora 	zTemp1
.9f50	f0 0f		beq $9f61			beq 	_MTAXExit	 				; found
.9f52	b0 0d		bcs $9f61			bcs 	_MTAXExit 					; current < required exit
.9f54	18		clc				clc
.9f55	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9f57	65 30		adc $30				adc 	codePtr
.9f59	85 30		sta $30				sta 	codePtr
.9f5b	90 02		bcc $9f5f			bcc 	_CREExit
.9f5d	e6 31		inc $31				inc 	codePtr+1
.9f5f					_CREExit:
.9f5f	80 da		bra $9f3b			bra 	_MTAXLoop
.9f61					_MTAXExit:
.9f61	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
