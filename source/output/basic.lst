
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Oct  5 19:58:38 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					breakCheck:
>0713							.fill 	1
.0714					decimalPlaces:
>0714							.fill 	1
.0715					dbOffset:
>0715							.fill 	1
.0716					dataPointer:
>0716							.fill 	5
.071b					inDataStatement:
>071b							.fill 	1
.071c					tbOffset:
>071c							.fill 	1
.071d					AssemblerAddress:
>071d							.fill 	2
.071f					AssemblerControl:
>071f							.fill 	1
.0720					ParamStart:
>0720							.fill 	2
.0722					IsGroup1:
>0722							.fill 	1
.0723					BaseOpcode:
>0723							.fill 	1
.0724					ModeMask:
>0724							.fill 	1
.0725					tokenOffset:
>0725							.fill 	1
.0726					tokenLineNumber:
>0726							.fill 	2
.0728					tokenBuffer:
>0728							.fill 	253
.0825					lineBuffer:
>0825							.fill 	MaxLineSize+1
.0876					numberBuffer:
>0876							.fill 	34
.0898					decimalBuffer:
>0898							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_LOCAL                            = $aa; $aa LOCAL
=$ab					KWD_PRINT                            = $ab; $ab PRINT
=$ac					KWD_READ                             = $ac; $ac READ
=$ad					KWD_REM                              = $ad; $ad REM
=$ae					KWD_RETURN                           = $ae; $ae RETURN
=$af					KWD_TO                               = $af; $af TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 13		lda #$13			lda 	#(Prompt & $FF)
.8007	20 18 8d	jsr $8d18			jsr 	PrintStringXA
.800a	20 b0 88	jsr $88b0			jsr 	NewCommand 					; erase current program
.800d	20 d2 98	jsr $98d2			jsr 	BackloadProgram
.8010	4c 69 84	jmp $8469			jmp 	WarmStart
>8013	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>801b	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>802b	41 53 49 43 20 2a 2a 2a 0d 0d
>8035	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>803d	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>804d	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8053	42 75 69 6c 74 20 57 65			.text "Built Wednesday 05-Oct-2022. Build 131."
>805b	64 6e 65 73 64 61 79 20 30 35 2d 4f 63 74 2d 32
>806b	30 32 32 2e 20 42 75 69 6c 64 20 31 33 31 2e

;******  Return to file: ./common/aa.system/00start.asm

>807a	0d 0d 00					.byte 	13,13,0
>807d							.align 2

;******  Processing file: ./common/aa.system/../generated/vectors.dat

.807e					VectorSetPunc:
>807e	69 8e					.word	ShiftLeft                        ; $00 <<
>8080	63 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8082	59 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8084	5c a5					.word	SyntaxError                      ; $03 !!3
>8086	5c a5					.word	SyntaxError                      ; $04 ><
>8088	6d 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>808a	6c 8e					.word	ShiftRight                       ; $06 >>
>808c	5c a5					.word	SyntaxError                      ; $07 !!7
>808e	5c a5					.word	SyntaxError                      ; $08 !!8
>8090	5c a5					.word	SyntaxError                      ; $09 !!9
>8092	5c a5					.word	SyntaxError                      ; $0a !!10
>8094	5c a5					.word	SyntaxError                      ; $0b !!11
>8096	5c a5					.word	SyntaxError                      ; $0c !!12
>8098	5c a5					.word	SyntaxError                      ; $0d !!13
>809a	5c a5					.word	SyntaxError                      ; $0e !!14
>809c	5c a5					.word	SyntaxError                      ; $0f !!15
>809e	5c a5					.word	SyntaxError                      ; $10 @
>80a0	5c a5					.word	SyntaxError                      ; $11 !!17
>80a2	5c a5					.word	SyntaxError                      ; $12 !!18
>80a4	5c a5					.word	SyntaxError                      ; $13 [
>80a6	93 9f					.word	IntegerDivide                    ; $14 \
>80a8	5c a5					.word	SyntaxError                      ; $15 ]
>80aa	f2 8f					.word	EorInteger                       ; $16 ^
>80ac	5c a5					.word	SyntaxError                      ; $17 _
>80ae	5c a5					.word	SyntaxError                      ; $18 `
>80b0	5c a5					.word	SyntaxError                      ; $19 !!25
>80b2	5c a5					.word	SyntaxError                      ; $1a !!26
>80b4	5c a5					.word	SyntaxError                      ; $1b {
>80b6	ac 8f					.word	OraInteger                       ; $1c |
>80b8	5c a5					.word	SyntaxError                      ; $1d }
>80ba	5c a5					.word	SyntaxError                      ; $1e ~
>80bc	5c a5					.word	SyntaxError                      ; $1f [7m<7F>[m
>80be	5c a5					.word	SyntaxError                      ; $20
>80c0	38 90					.word	WordIndirect                     ; $21 !
>80c2	5c a5					.word	SyntaxError                      ; $22 "
>80c4	5c a5					.word	SyntaxError                      ; $23 #
>80c6	5c a5					.word	SyntaxError                      ; $24 $
>80c8	e0 9f					.word	IntegerModulus                   ; $25 %
>80ca	66 8f					.word	AndInteger                       ; $26 &
>80cc	5c a5					.word	SyntaxError                      ; $27 '
>80ce	5c a5					.word	SyntaxError                      ; $28 (
>80d0	5c a5					.word	SyntaxError                      ; $29 )
>80d2	55 a0					.word	MulInteger                       ; $2a *
>80d4	00 8f					.word	AddInteger                       ; $2b +
>80d6	5c a5					.word	SyntaxError                      ; $2c ,
>80d8	3b 8f					.word	SubInteger                       ; $2d -
>80da	5c a5					.word	SyntaxError                      ; $2e .
>80dc	ec a1					.word	FDivideCommand                   ; $2f /
>80de	5c a5					.word	SyntaxError                      ; $30 0
>80e0	5c a5					.word	SyntaxError                      ; $31 1
>80e2	5c a5					.word	SyntaxError                      ; $32 2
>80e4	5c a5					.word	SyntaxError                      ; $33 3
>80e6	5c a5					.word	SyntaxError                      ; $34 4
>80e8	5c a5					.word	SyntaxError                      ; $35 5
>80ea	5c a5					.word	SyntaxError                      ; $36 6
>80ec	5c a5					.word	SyntaxError                      ; $37 7
>80ee	5c a5					.word	SyntaxError                      ; $38 8
>80f0	5c a5					.word	SyntaxError                      ; $39 9
>80f2	5c a5					.word	SyntaxError                      ; $3a :
>80f4	5c a5					.word	SyntaxError                      ; $3b ;
>80f6	45 8d					.word	BinaryCompareLess                ; $3c <
>80f8	3b 8d					.word	BinaryCompareEqual               ; $3d =
>80fa	4f 8d					.word	BinaryCompareGreater             ; $3e >
>80fc	5f 90					.word	ByteIndirect                     ; $3f ?
.80fe					VectorSet0:
>80fe	68 8a					.word	EOLCommand                       ; $80 !0:EOF
>8100	75 8a					.word	Shift1Command                    ; $81 !1:SH1
>8102	7d 8a					.word	Shift2Command                    ; $82 !2:SH2
>8104	32 a3					.word	AbsUnary                         ; $83 ABS(
>8106	29 95					.word	AllocUnary                       ; $84 ALLOC(
>8108	42 a3					.word	AscUnary                         ; $85 ASC(
>810a	e4 95					.word	ChrUnary                         ; $86 CHR$(
>810c	37 8d					.word	UnaryFalse                       ; $87 FALSE
>810e	4f a3					.word	FracUnary                        ; $88 FRAC(
>8110	65 a3					.word	IntUnary                         ; $89 INT(
>8112	bb a3					.word	IsValUnary                       ; $8a ISVAL(
>8114	be 96					.word	Unary_Left                       ; $8b LEFT$(
>8116	77 a3					.word	LenUnary                         ; $8c LEN(
>8118	e8 96					.word	Unary_Mid                        ; $8d MID$(
>811a	81 95					.word	Unary_Not                        ; $8e NOT(
>811c	ce 96					.word	Unary_Right                      ; $8f RIGHT$(
>811e	97 95					.word	Unary_Rnd                        ; $90 RND(
>8120	91 a3					.word	SgnUnary                         ; $91 SGN(
>8122	f6 95					.word	SpcUnary                         ; $92 SPC(
>8124	11 96					.word	Unary_Str                        ; $93 STR$(
>8126	2b 8d					.word	UnaryTrue                        ; $94 TRUE
>8128	b1 a3					.word	ValUnary                         ; $95 VAL(
>812a	f3 85					.word	ForCommand                       ; $96 FOR
>812c	40 87					.word	IfCommand                        ; $97 IF
>812e	85 8a					.word	Unused1                          ; $98 PROC
>8130	a8 89					.word	Command_REPEAT                   ; $99 REPEAT
>8132	90 8c					.word	Command_WHILE                    ; $9a WHILE
>8134	69 87					.word	EndIf                            ; $9b ENDIF
>8136	6c 9f					.word	Command_ENDPROC                  ; $9c ENDPROC
>8138	ad 86					.word	NextCommand                      ; $9d NEXT
>813a	85 8a					.word	Unused4                          ; $9e THEN
>813c	b1 89					.word	Command_UNTIL                    ; $9f UNTIL
>813e	b1 8c					.word	Command_WEND                     ; $a0 WEND
>8140	c8 84					.word	CallCommand                      ; $a1 CALL
>8142	5c a5					.word	SyntaxError                      ; $a2 CLS
>8144	2b 85					.word	Command_Data                     ; $a3 DATA
>8146	33 85					.word	DimCommand                       ; $a4 DIM
>8148	85 8a					.word	Unused3                          ; $a5 DOWNTO
>814a	62 87					.word	ElseCode                         ; $a6 ELSE
>814c	06 87					.word	Command_GOSUB                    ; $a7 GOSUB
>814e	24 87					.word	GotoCommand                      ; $a8 GOTO
>8150	6a 87					.word	LetCommand                       ; $a9 LET
>8152	3e 88					.word	Command_LOCAL                    ; $aa LOCAL
>8154	ba 88					.word	Command_Print                    ; $ab PRINT
>8156	42 89					.word	Command_Read                     ; $ac READ
>8158	9b 89					.word	RemCommand                       ; $ad REM
>815a	16 87					.word	Command_RETURN                   ; $ae RETURN
>815c	85 8a					.word	Unused2                          ; $af TO
.815e					VectorSet1:
>815e	5c a5					.word	SyntaxError                      ; $80 !0:EOF
>8160	5c a5					.word	SyntaxError                      ; $81 !1:SH1
>8162	5c a5					.word	SyntaxError                      ; $82 !2:SH2
>8164	99 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8166	b8 84					.word	AssertCommand                    ; $84 ASSERT
>8168	d6 84					.word	ClearCommand                     ; $85 CLEAR
>816a	f0 85					.word	EndCommand                       ; $86 END
>816c	a3 87					.word	Command_List                     ; $87 LIST
>816e	b0 88					.word	NewCommand                       ; $88 NEW
>8170	ca 89					.word	Command_Restore                  ; $89 RESTORE
>8172	fc 89					.word	CommandRUN                       ; $8a RUN
>8174	88 8a					.word	StopCommand                      ; $8b STOP
.8176					VectorSet2:
>8176	5c a5					.word	SyntaxError                      ; $80 !0:EOF
>8178	5c a5					.word	SyntaxError                      ; $81 !1:SH1
>817a	5c a5					.word	SyntaxError                      ; $82 !2:SH2
>817c	1f a4					.word	Assemble_adc                     ; $83 ADC
>817e	17 a4					.word	Assemble_and                     ; $84 AND
>8180	33 a4					.word	Assemble_asl                     ; $85 ASL
>8182	9d a4					.word	Assemble_bcc                     ; $86 BCC
>8184	a1 a4					.word	Assemble_bcs                     ; $87 BCS
>8186	a9 a4					.word	Assemble_beq                     ; $88 BEQ
>8188	60 a4					.word	Assemble_bit                     ; $89 BIT
>818a	91 a4					.word	Assemble_bmi                     ; $8a BMI
>818c	a5 a4					.word	Assemble_bne                     ; $8b BNE
>818e	8d a4					.word	Assemble_bpl                     ; $8c BPL
>8190	ad a4					.word	Assemble_bra                     ; $8d BRA
>8192	b1 a4					.word	Assemble_brk                     ; $8e BRK
>8194	95 a4					.word	Assemble_bvc                     ; $8f BVC
>8196	99 a4					.word	Assemble_bvs                     ; $90 BVS
>8198	b9 a4					.word	Assemble_clc                     ; $91 CLC
>819a	0d a5					.word	Assemble_cld                     ; $92 CLD
>819c	cd a4					.word	Assemble_cli                     ; $93 CLI
>819e	fd a4					.word	Assemble_clv                     ; $94 CLV
>81a0	2b a4					.word	Assemble_cmp                     ; $95 CMP
>81a2	74 a4					.word	Assemble_cpx                     ; $96 CPX
>81a4	6f a4					.word	Assemble_cpy                     ; $97 CPY
>81a6	51 a4					.word	Assemble_dec                     ; $98 DEC
>81a8	09 a5					.word	Assemble_dex                     ; $99 DEX
>81aa	e5 a4					.word	Assemble_dey                     ; $9a DEY
>81ac	1b a4					.word	Assemble_eor                     ; $9b EOR
>81ae	56 a4					.word	Assemble_inc                     ; $9c INC
>81b0	15 a5					.word	Assemble_inx                     ; $9d INX
>81b2	05 a5					.word	Assemble_iny                     ; $9e INY
>81b4	88 a4					.word	Assemble_jmp                     ; $9f JMP
>81b6	83 a4					.word	Assemble_jsr                     ; $a0 JSR
>81b8	27 a4					.word	Assemble_lda                     ; $a1 LDA
>81ba	4c a4					.word	Assemble_ldx                     ; $a2 LDX
>81bc	6a a4					.word	Assemble_ldy                     ; $a3 LDY
>81be	3d a4					.word	Assemble_lsr                     ; $a4 LSR
>81c0	19 a5					.word	Assemble_nop                     ; $a5 NOP
>81c2	13 a4					.word	Assemble_ora                     ; $a6 ORA
>81c4	c9 a4					.word	Assemble_pha                     ; $a7 PHA
>81c6	b5 a4					.word	Assemble_php                     ; $a8 PHP
>81c8	11 a5					.word	Assemble_phx                     ; $a9 PHX
>81ca	d1 a4					.word	Assemble_phy                     ; $aa PHY
>81cc	d9 a4					.word	Assemble_pla                     ; $ab PLA
>81ce	bd a4					.word	Assemble_plp                     ; $ac PLP
>81d0	21 a5					.word	Assemble_plx                     ; $ad PLX
>81d2	e1 a4					.word	Assemble_ply                     ; $ae PLY
>81d4	38 a4					.word	Assemble_rol                     ; $af ROL
>81d6	42 a4					.word	Assemble_ror                     ; $b0 ROR
>81d8	c5 a4					.word	Assemble_rti                     ; $b1 RTI
>81da	d5 a4					.word	Assemble_rts                     ; $b2 RTS
>81dc	2f a4					.word	Assemble_sbc                     ; $b3 SBC
>81de	c1 a4					.word	Assemble_sec                     ; $b4 SEC
>81e0	1d a5					.word	Assemble_sed                     ; $b5 SED
>81e2	dd a4					.word	Assemble_sei                     ; $b6 SEI
>81e4	23 a4					.word	Assemble_sta                     ; $b7 STA
>81e6	47 a4					.word	Assemble_stx                     ; $b8 STX
>81e8	65 a4					.word	Assemble_sty                     ; $b9 STY
>81ea	5b a4					.word	Assemble_stz                     ; $ba STZ
>81ec	f9 a4					.word	Assemble_tax                     ; $bb TAX
>81ee	f5 a4					.word	Assemble_tay                     ; $bc TAY
>81f0	7e a4					.word	Assemble_trb                     ; $bd TRB
>81f2	79 a4					.word	Assemble_tsb                     ; $be TSB
>81f4	01 a5					.word	Assemble_tsx                     ; $bf TSX
>81f6	e9 a4					.word	Assemble_txa                     ; $c0 TXA
>81f8	f1 a4					.word	Assemble_txs                     ; $c1 TXS
>81fa	ed a4					.word	Assemble_tya                     ; $c2 TYA

;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.81fc					AssembleGroup1:
.81fc	a9 ff		lda #$ff			lda 	#$FF
.81fe	8d 24 07	sta $0724			sta 	ModeMask 					; initialise the mode mask - all for all
.8201	80 02		bra $8205			bra 	AsmGroup12
.8203					AssembleGroup2:
.8203	a5 00		lda $00				lda 	$00
.8205					AsmGroup12:
.8205	8d 22 07	sta $0722			sta 	IsGroup1 					; save the 'group 1' flag
.8208	68		pla				pla 								; pop the return address to access the information following.
.8209	fa		plx				plx
.820a	20 93 82	jsr $8293			jsr 	AccessParameters 			; get opcode and save as base
.820d	8d 23 07	sta $0723			sta 	BaseOpcode
.8210	ad 22 07	lda $0722			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8213	d0 08		bne $821d			bne 	_AG12HaveMask
.8215	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8217	20 9b 82	jsr $829b			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.821a	8d 24 07	sta $0724			sta 	ModeMask
.821d					_AG12HaveMask:
.821d	20 d6 83	jsr $83d6			jsr 	TypeAndCalculateOperand 	; get zero page type
.8220	da		phx				phx 								; save found address mode
.8221	20 ff 82	jsr $82ff			jsr 	AssembleModeX
.8224	fa		plx				plx  								; restore address mode
.8225	b0 0b		bcs $8232			bcs 	_AG12Exit
.8227	20 33 82	jsr $8233			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.822a	20 ff 82	jsr $82ff			jsr 	AssembleModeX
.822d	b0 03		bcs $8232			bcs 	_AG12Exit
.822f	4c 5c a5	jmp $a55c			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8232					_AG12Exit:
.8232	60		rts				rts
.8233					PromoteToAbsolute:
.8233	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8235	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8237	f0 19		beq $8252			beq 	_PTADo
.8239	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.823b	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.823d	f0 13		beq $8252			beq 	_PTADo
.823f	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8241	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8243	f0 0d		beq $8252			beq 	_PTADo
.8245	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8247	e0 d1		cpx #$d1			cpx 	#AM_IND
.8249	f0 07		beq $8252			beq 	_PTADo
.824b	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.824d	e0 c0		cpx #$c0			cpx 	#AM_INDX
.824f	f0 01		beq $8252			beq 	_PTADo
.8251	60		rts				rts
.8252					_PTADo:
.8252	aa		tax				tax
.8253	60		rts				rts
.8254					AssembleGroup3:
.8254	68		pla				pla 								; get parameters, which is just the opcode.
.8255	fa		plx				plx
.8256	20 93 82	jsr $8293			jsr 	AccessParameters 			; get and output opcode
.8259	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.825c	20 3a 84	jsr $843a			jsr 	CalculateOperand 			; get a 16 bit operand
.825f	ad 08 06	lda $0608			lda 	NSMantissa0 				; calculate the offset
.8262	38		sec				sec
.8263	ed 1d 07	sbc $071d			sbc 	AssemblerAddress
.8266	48		pha				pha 								; LSB in A
.8267	ad 10 06	lda $0610			lda 	NSMantissa1
.826a	ed 1e 07	sbc $071e			sbc 	AssemblerAddress+1
.826d	aa		tax				tax 								; MSB in X
.826e	68		pla				pla
.826f	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8270	69 7f		adc #$7f			adc 	#$7F
.8272	90 01		bcc $8275			bcc 	_AG3NoCarry
.8274	e8		inx				inx
.8275					_AG3NoCarry:
.8275	38		sec				sec 								; fix back and write out anyways.
.8276	e9 80		sbc #$80			sbc 	#$80
.8278	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.827b	e0 00		cpx #$00			cpx 	#0 							; was it in range
.827d	f0 0a		beq $8289			beq 	_AG3Exit
.827f	ad 1f 07	lda $071f			lda 	AssemblerControl 			; are we allowing bad values ?
.8282	29 01		and #$01			and 	#1
.8284	f0 03		beq $8289			beq 	_AG3Exit
.8286	4c 61 a5	jmp $a561			jmp 	RangeError 					; no, branch is out of range
.8289					_AG3Exit:
.8289	60		rts				rts
.828a					AssembleGroup4:
.828a	68		pla				pla 								; pop address
.828b	fa		plx				plx
.828c	20 93 82	jsr $8293			jsr 	AccessParameters 			; access and get first
.828f	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte 			; output it.
.8292	60		rts				rts
.8293					AccessParameters:
.8293	8d 20 07	sta $0720			sta 	ParamStart
.8296	8e 21 07	stx $0721			stx 	ParamStart+1
.8299	a9 01		lda #$01			lda 	#1
.829b					GetParameter:
.829b	5a		phy				phy
.829c	a8		tay				tay
.829d	ad 20 07	lda $0720			lda 	ParamStart
.82a0	85 36		sta $36				sta 	zTemp0
.82a2	ad 21 07	lda $0721			lda 	ParamStart+1
.82a5	85 37		sta $37				sta 	zTemp0+1
.82a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.82a9	7a		ply				ply
.82aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.82ab					AssemblerWriteByte:
.82ab	48		pha			pha
.82ac	ad 1f 07	lda $071f		lda 	AssemblerControl 				; check printing bytes ?
.82af	29 02		and #$02		and 	#2
.82b1	f0 1b		beq $82ce		beq 	_AWBNoPrint
.82b3	ad 1e 07	lda $071e		lda		AssemblerAddress+1 				; print address
.82b6	20 e9 82	jsr $82e9		jsr 	PrintHex
.82b9	ad 1d 07	lda $071d		lda		AssemblerAddress
.82bc	20 e9 82	jsr $82e9		jsr 	PrintHex
.82bf	a9 20		lda #$20		lda 	#' '
.82c1	20 ca a7	jsr $a7ca		jsr 	EXTPrintCharacter
.82c4	68		pla			pla 									; print byte
.82c5	48		pha			pha
.82c6	20 e9 82	jsr $82e9		jsr 	PrintHex
.82c9	a9 0d		lda #$0d		lda 	#13
.82cb	20 ca a7	jsr $a7ca		jsr 	EXTPrintCharacter
.82ce					_AWBNoPrint:
.82ce	ad 1d 07	lda $071d		lda		AssemblerAddress				; copy address to zTemp0
.82d1	85 36		sta $36			sta 	zTemp0
.82d3	ad 1e 07	lda $071e		lda		AssemblerAddress+1
.82d6	f0 0e		beq $82e6		beq 	_AWBRange
.82d8	85 37		sta $37			sta 	zTemp0+1
.82da	68		pla			pla 									; write byte out
.82db	92 36		sta ($36)		sta 	(zTemp0)
.82dd	ee 1d 07	inc $071d		inc 	AssemblerAddress 				; bump address
.82e0	d0 03		bne $82e5		bne 	_AWBNoCarry
.82e2	ee 1e 07	inc $071e		inc 	AssemblerAddress+1
.82e5					_AWBNoCarry:
.82e5	60		rts			rts
.82e6					_AWBRange:
.82e6	4c 61 a5	jmp $a561		jmp 	RangeError
.82e9					PrintHex:
.82e9	48		pha				pha
.82ea	4a		lsr a				lsr 	a
.82eb	4a		lsr a				lsr 	a
.82ec	4a		lsr a				lsr 	a
.82ed	4a		lsr a				lsr 	a
.82ee	20 f2 82	jsr $82f2			jsr 	_PrintNibble
.82f1	68		pla				pla
.82f2					_PrintNibble:
.82f2	29 0f		and #$0f			and 	#15
.82f4	c9 0a		cmp #$0a			cmp 	#10
.82f6	90 02		bcc $82fa			bcc 	_NoShift
.82f8	69 06		adc #$06			adc 	#6
.82fa					_NoShift:
.82fa	69 30		adc #$30			adc 	#48
.82fc	4c ca a7	jmp $a7ca			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.82ff					AssembleModeX:
.82ff	5a		phy				phy
.8300	ad 22 07	lda $0722			lda 	IsGroup1
.8303	f0 17		beq $831c			beq 	_AMXGroup2
.8305	8a		txa				txa 							; is it in group # 1
.8306	29 40		and #$40			and 	#AM_ISG1
.8308	f0 50		beq $835a			beq 	_AMXFail 				; no, give up.
.830a	8a		txa				txa 							; get back.
.830b	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.830d	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.830f	d0 22		bne $8333			bne 	_AMXHaveInfo
.8311	ad 23 07	lda $0723			lda 	BaseOpcode 				; cannot store immediate.
.8314	c9 81		cmp #$81			cmp 	#$81
.8316	f0 42		beq $835a			beq 	_AMXFail
.8318	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.831a	80 17		bra $8333			bra 	_AMXHaveInfo 			; odd design decision there.
.831c					_AMXGroup2:
.831c	8a		txa				txa 							; is it in group 2 ?
.831d	29 20		and #$20			and 	#AM_ISG2
.831f	f0 39		beq $835a			beq 	_AMXFail 				; no, give up.
.8321	8a		txa				txa 							; get the offset into Y
.8322	29 1f		and #$1f			and 	#$1F
.8324	4a		lsr a				lsr 	a 						; make it 0-7.
.8325	4a		lsr a				lsr  	a
.8326	a8		tay				tay
.8327	ad 24 07	lda $0724			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.832a					_AMXCheckOkay:
.832a	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.832b	88		dey				dey
.832c	10 fc		bpl $832a			bpl 	_AMXCheckOkay
.832e	90 2a		bcc $835a			bcc 	_AMXFail 				; not allowed.
.8330	8a		txa				txa  							; get mask back
.8331	29 1f		and #$1f			and 	#$1F
.8333					_AMXHaveInfo:
.8333	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8335	10 05		bpl $833c			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8337	ac 10 06	ldy $0610			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.833a	d0 1e		bne $835a			bne 	_AMXFail
.833c					_AMXAnySize:
.833c	18		clc				clc 							; add offset to the base opcode
.833d	6d 23 07	adc $0723			adc 	BaseOpcode
.8340					_AMXOutputCode:
.8340	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte 		; write the opcode out.
.8343	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8345	f0 10		beq $8357			beq 	_AMXExit
.8347	ad 08 06	lda $0608			lda 	NSMantissa0 				; write LSB operand
.834a	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.834d	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.834f	30 06		bmi $8357			bmi 	_AMXExit
.8351	ad 10 06	lda $0610			lda 	NSMantissa1 			; write MSB operand
.8354	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.8357					_AMXExit:
.8357	7a		ply				ply
.8358	38		sec				sec
.8359	60		rts				rts
.835a					_AMXFail:
.835a	a0 00		ldy #$00			ldy 	#0
.835c					_AMXCheckOddities:
.835c	8a		txa				txa
.835d	d9 85 83	cmp $8385,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8360	d0 16		bne $8378			bne 	_AMXCONext
.8362	b9 83 83	lda $8383,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8365	cd 23 07	cmp $0723			cmp 	BaseOpcode
.8368	d0 0e		bne $8378			bne 	_AMXCONext
.836a	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.836c	10 05		bpl $8373			bpl 	_AMXCONotZero
.836e	ad 10 06	lda $0610			lda 	NSMantissa1
.8371	d0 05		bne $8378			bne 	_AMXCONext
.8373					_AMXCONotZero:
.8373	b9 84 83	lda $8384,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8376	80 c8		bra $8340			bra 	_AMXOutputCode 			; and assemble it
.8378					_AMXCONext:
.8378	c8		iny				iny
.8379	c8		iny				iny
.837a	c8		iny				iny
.837b	b9 83 83	lda $8383,y			lda 	ExtraOpcode+0,y 		; end of table
.837e	d0 dc		bne $835c			bne 	_AMXCheckOddities
.8380					_AMXCOFail:
.8380	7a		ply				ply
.8381	18		clc				clc
.8382	60		rts				rts
.8383					ExtraOpcode:
>8383	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8386	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8389	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>838c	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>838f	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8392	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8395	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8398	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>839b	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>839e	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>83a1	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.83a2					LabelHere:
.83a2	c8		iny				iny 								; skip .
.83a3	a2 00		ldx #$00			ldx 	#0 							; get a term
.83a5	20 99 93	jsr $9399			jsr 	EvaluateTerm 				; get a term
.83a8	ad 00 06	lda $0600			lda 	NSStatus 					; needs to be an integer reference.
.83ab	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.83ad	d0 24		bne $83d3			bne 	_ALType
.83af	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.83b2	85 36		sta $36				sta 	zTemp0
.83b4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83b7	85 37		sta $37				sta 	zTemp0+1
.83b9	5a		phy				phy 								; copy address in.
.83ba	a0 01		ldy #$01			ldy 	#1
.83bc	ad 1d 07	lda $071d			lda	 	AssemblerAddress
.83bf	92 36		sta ($36)			sta 	(zTemp0)
.83c1	ad 1e 07	lda $071e			lda	 	AssemblerAddress+1
.83c4	91 36		sta ($36),y			sta 	(zTemp0),y
.83c6	c8		iny				iny
.83c7	a9 00		lda #$00			lda 	#0
.83c9	91 36		sta ($36),y			sta 	(zTemp0),y
.83cb	c8		iny				iny
.83cc	91 36		sta ($36),y			sta 	(zTemp0),y
.83ce	c8		iny				iny
.83cf	91 36		sta ($36),y			sta 	(zTemp0),y
.83d1	7a		ply				ply
.83d2	60		rts				rts
.83d3					_ALType:
.83d3	4c 66 a5	jmp $a566			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.83d6					TypeAndCalculateOperand:
.83d6	b1 30		lda ($30),y			lda 	(codePtr),y
.83d8	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.83da	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.83dc	f0 5b		beq $8439			beq 	_TACOExit
.83de	c9 80		cmp #$80			cmp 	#KWC_EOL
.83e0	f0 57		beq $8439			beq 	_TACOExit
.83e2	c8		iny				iny
.83e3	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.83e5	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.83e7	f0 51		beq $843a			beq 	CalculateOperand
.83e9	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.83eb	f0 1f		beq $840c			beq 	_TACOIndirect
.83ed	88		dey				dey 								; undo get of first character
.83ee	20 3a 84	jsr $843a			jsr 	CalculateOperand 			; get operand
.83f1	b1 30		lda ($30),y			lda 	(codePtr),y
.83f3	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.83f5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83f7	d0 40		bne $8439			bne 	_TACOExit
.83f9	c8		iny				iny
.83fa	20 f1 9e	jsr $9ef1			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.83fd	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.83ff	c9 58		cmp #$58			cmp 	#'X'
.8401	f0 36		beq $8439			beq 	_TACOExit
.8403	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8405	c9 59		cmp #$59			cmp 	#'Y'
.8407	f0 30		beq $8439			beq 	_TACOExit
.8409					_TACOSyntax:
.8409	4c 5c a5	jmp $a55c			jmp 	SyntaxError
.840c					_TACOIndirect:
.840c	20 3a 84	jsr $843a			jsr 	CalculateOperand 			; get the operand
.840f	b1 30		lda ($30),y			lda 	(codePtr),y
.8411	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8413	f0 17		beq $842c			beq 	_TACOIndX
.8415	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8418	b1 30		lda ($30),y			lda 	(codePtr),y
.841a	a2 d1		ldx #$d1			ldx 	#AM_IND
.841c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.841e	d0 19		bne $8439			bne 	_TACOExit
.8420	c8		iny				iny
.8421	20 f1 9e	jsr $9ef1			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8424	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8426	d0 e1		bne $8409			bne 	_TACOSyntax
.8428	a2 d0		ldx #$d0			ldx 	#AM_INDY
.842a	80 0d		bra $8439			bra 	_TACOExit
.842c					_TACOIndX:
.842c	c8		iny				iny
.842d	20 f1 9e	jsr $9ef1			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8430	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8432	d0 d5		bne $8409			bne 	_TACOSyntax
.8434	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket			; check )
.8437	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8439					_TACOExit:
.8439	60		rts				rts
.843a					CalculateOperand:
.843a	48		pha				pha
.843b	da		phx				phx
.843c	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.843e	20 9e 97	jsr $979e			jsr 	Evaluate16BitInteger
.8441	fa		plx				plx
.8442	68		pla				pla
.8443	60		rts				rts
.9ef1					TACOCheckXY:
.9ef1	b1 30		lda ($30),y			lda 	(codePtr),y
.9ef3	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.9ef5	c9 40		cmp #$40			cmp 	#$40
.9ef7	d0 21		bne $9f1a			bne 	_TCXYFail
.9ef9	b1 30		lda ($30),y			lda 	(codePtr),y
.9efb	18		clc				clc
.9efc	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9efe	85 37		sta $37				sta 	zTemp0+1
.9f00	c8		iny				iny
.9f01	b1 30		lda ($30),y			lda 	(codePtr),y
.9f03	c8		iny				iny
.9f04	85 36		sta $36				sta 	zTemp0
.9f06	5a		phy				phy 								; save position
.9f07	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.9f09	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f0b	d0 0c		bne $9f19			bne 	_TCXYPopFail
.9f0d	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.9f0f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f11	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.9f13	f0 08		beq $9f1d			beq 	_TCXYFound
.9f15	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.9f17	f0 04		beq $9f1d			beq 	_TCXYFound
.9f19					_TCXYPopFail:
.9f19	7a		ply				ply
.9f1a					_TCXYFail:
.9f1a	a9 00		lda #$00			lda 	#0
.9f1c	60		rts				rts
.9f1d					_TCXYFound:
.9f1d	7a		ply				ply 								; restore position
.9f1e	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.9f20	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8444					EditProgramCode:
.8444	ad 26 07	lda $0726			lda 	TokenLineNumber 			; find the line.
.8447	ae 27 07	ldx $0727			ldx 	TokenLineNumber+1
.844a	20 be 9e	jsr $9ebe			jsr 	MemorySearch
.844d	90 05		bcc $8454			bcc 	_EPCNoDelete 				; reached the end don't delete
.844f	d0 03		bne $8454			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8451	20 14 a8	jsr $a814			jsr 	MemoryDeleteLine 			; delete the line
.8454					_EPCNoDelete:
.8454	ad 28 07	lda $0728			lda 	TokenBuffer 				; buffer empty
.8457	c9 80		cmp #$80			cmp 	#KWC_EOL
.8459	f0 0d		beq $8468			beq 	_EPCNoInsert
.845b	ad 26 07	lda $0726			lda 	TokenLineNumber 			; find the line - it cannot exist.
.845e	ae 27 07	ldx $0727			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8461	20 be 9e	jsr $9ebe			jsr 	MemorySearch
.8464	18		clc				clc 								; insert at this point.
.8465	20 4b a8	jsr $a84b			jsr 	MemoryInsertLine 			; insert the line
.8468					_EPCNoInsert:
.8468	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8469					WarmStart:
.8469	a2 ff		ldx #$ff			ldx 	#$FF
.846b	9a		txs				txs
.846c	20 e0 a7	jsr $a7e0			jsr 	EXTInputLine 				; get line to lineBuffer
.846f	20 1d 9c	jsr $9c1d			jsr 	TokeniseLine 				; tokenise the line
.8472	ad 26 07	lda $0726			lda 	TokenLineNumber 			; line number ?
.8475	0d 27 07	ora $0727			ora 	TokenLineNumber+1
.8478	d0 17		bne $8491			bne 	_WSEditCode 				; if so,edit code.
.847a	9c 25 07	stz $0725			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.847d	a9 25		lda #$25			lda 	#((TokenOffset) & $FF)
.847f	85 30		sta $30				sta 	codePtr
.8481	a9 07		lda #$07			lda 	#((TokenOffset) >> 8)
.8483	85 31		sta $31				sta 	codePtr+1
.8485	ad 28 07	lda $0728			lda 	TokenBuffer 				; nothing to run
.8488	c9 80		cmp #$80			cmp 	#KWC_EOL
.848a	f0 dd		beq $8469			beq 	WarmStart
.848c	20 0e 8a	jsr $8a0e			jsr 	RUNCodePointerLine 			; execute that line.
.848f	80 d8		bra $8469			bra 	WarmStart
.8491					_WSEditCode:
.8491	20 44 84	jsr $8444			jsr 	EditProgramCode
.8494	20 d6 84	jsr $84d6			jsr 	ClearCommand
.8497	80 d0		bra $8469			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8499					AssembleCommand:
.8499	a2 00		ldx #$00			ldx 	#0
.849b	20 9e 97	jsr $979e			jsr 	Evaluate16BitInteger 		; start address
.849e	ad 08 06	lda $0608			lda 	NSMantissa0
.84a1	8d 1d 07	sta $071d			sta 	AssemblerAddress
.84a4	ad 10 06	lda $0610			lda 	NSMantissa1
.84a7	8d 1e 07	sta $071e			sta 	AssemblerAddress+1
.84aa	20 82 9f	jsr $9f82			jsr 	CheckComma
.84ad	20 aa 97	jsr $97aa			jsr 	Evaluate8BitInteger 		; options
.84b0	ad 08 06	lda $0608			lda 	NSMantissa0
.84b3	8d 1f 07	sta $071f			sta 	AssemblerControl
.84b6	60		rts				rts
.84b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.84b8					AssertCommand:
.84b8	a2 00		ldx #$00			ldx 	#0
.84ba	20 89 97	jsr $9789			jsr 	EvaluateInteger 			; the assert test
.84bd	20 42 98	jsr $9842			jsr 	NSMIsZero 					; exit if result is non zero.
.84c0	d0 05		bne $84c7			bne 	_ACExit
.84c2	a9 0a		lda #$0a		lda	#10
.84c4	4c bf 8c	jmp $8cbf		jmp	ErrorHandler
.84c7					_ACExit:
.84c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.84c8					CallCommand:
.84c8	a2 00		ldx #$00			ldx 	#0
.84ca	20 9e 97	jsr $979e			jsr 	Evaluate16BitInteger
.84cd	ad 10 06	lda $0610			lda 	NSMantissa1
.84d0	8d 09 06	sta $0609			sta 	NSMantissa0+1
.84d3	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.84d6					ClearCommand:
.84d6	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.84d8	85 36		sta $36				sta 	0+zTemp0
.84da	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.84dc	85 37		sta $37				sta 	1+zTemp0
.84de					_ClearZeroLoop:
.84de	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.84e0	f0 24		beq $8506			beq 	_ClearZeroEnd
.84e2	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.84e4	a9 00		lda #$00			lda 	#0
.84e6					_ClearOneVariable:
.84e6	91 36		sta ($36),y			sta 	(zTemp0),y
.84e8	c8		iny				iny
.84e9	c0 08		cpy #$08			cpy 	#8
.84eb	d0 f9		bne $84e6			bne 	_ClearOneVariable
.84ed	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.84ef	b1 36		lda ($36),y			lda 	(zTemp0),y
.84f1	c9 18		cmp #$18			cmp 	#NSTProcedure
.84f3	d0 04		bne $84f9			bne 	_ClearNotProcedure
.84f5	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.84f7	91 36		sta ($36),y			sta 	(zTemp0),y
.84f9					_ClearNotProcedure:
.84f9	18		clc				clc 								; go to the next variable
.84fa	b2 36		lda ($36)			lda 	(zTemp0)
.84fc	65 36		adc $36				adc 	zTemp0
.84fe	85 36		sta $36				sta 	zTemp0
.8500	90 dc		bcc $84de			bcc 	_ClearZeroLoop
.8502	e6 37		inc $37				inc 	zTemp0+1
.8504	80 d8		bra $84de			bra 	_ClearZeroLoop
.8506					_ClearZeroEnd:
.8506	18		clc				clc
.8507	a5 36		lda $36				lda 	zTemp0
.8509	69 01		adc #$01			adc 	#1
.850b	8d 0c 07	sta $070c			sta 	lowMemPtr
.850e	a5 37		lda $37				lda 	zTemp0+1
.8510	69 00		adc #$00			adc 	#0
.8512	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8515	20 c5 98	jsr $98c5			jsr 	StackReset
.8518	20 5c a7	jsr $a75c			jsr 	StringSystemInitialise
.851b	20 df 8b	jsr $8bdf			jsr 	ProcedureScan
.851e	20 ca 89	jsr $89ca			jsr 	Command_Restore
.8521	9c 1d 07	stz $071d			stz 	AssemblerAddress
.8524	9c 1e 07	stz $071e			stz 	AssemblerAddress+1
.8527	9c 1f 07	stz $071f			stz 	AssemblerControl
.852a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.852b					Command_Data:
.852b	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.852d	a2 80		ldx #$80			ldx 	#KWC_EOL
.852f	20 31 8c	jsr $8c31			jsr 	ScanForward
.8532	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8533					DimCommand:
.8533	b1 30		lda ($30),y			lda 	(codePtr),y
.8535	29 c0		and #$c0			and 	#$C0
.8537	c9 40		cmp #$40			cmp 	#$40
.8539	d0 7a		bne $85b5			bne 	_DCSyntax
.853b	b1 30		lda ($30),y			lda 	(codePtr),y
.853d	18		clc				clc
.853e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8540	85 3f		sta $3f				sta 	zaTemp+1
.8542	c8		iny				iny
.8543	b1 30		lda ($30),y			lda 	(codePtr),y
.8545	c8		iny				iny
.8546	85 3e		sta $3e				sta 	zaTemp
.8548	5a		phy				phy
.8549	a0 02		ldy #$02			ldy 	#2 						; read type byte
.854b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.854d	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.854f	c9 18		cmp #$18			cmp 	#NSTProcedure
.8551	f0 62		beq $85b5			beq 	_DCSyntax
.8553	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8555	29 04		and #$04			and 	#NSBIsArray
.8557	f0 64		beq $85bd			beq 	_DCType
.8559	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.855b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.855d	d0 59		bne $85b8			bne 	_DCRedefine
.855f	7a		ply				ply
.8560	20 c0 85	jsr $85c0			jsr 	_DCGetSize 				; get array size, check it.
.8563	5a		phy				phy
.8564	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8566	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8568	7a		ply				ply 							; is there a second (e.g. ,x)
.8569	b1 30		lda ($30),y			lda 	(codePtr),y
.856b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.856d	d0 0a		bne $8579			bne 	_DCOneDimension
.856f	c8		iny				iny 							; skip comma
.8570	20 c0 85	jsr $85c0			jsr 	_DCGetSize 				; get 2nd array size
.8573	5a		phy				phy
.8574	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8576	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8578	7a		ply				ply
.8579					_DCOneDimension:
.8579	5a		phy				phy 							; save position
.857a	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.857c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.857e	aa		tax				tax
.857f	c8		iny				iny
.8580	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8582	e8		inx				inx 							; bump them.
.8583	1a		inc a				inc 	a
.8584	20 fc a3	jsr $a3fc			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8587	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8589	29 e0		and #$e0			and 	#$E0
.858b	d0 23		bne $85b0			bne 	_DCSize
.858d	a0 02		ldy #$02			ldy 	#2 						; get base type
.858f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8591	20 ce 85	jsr $85ce			jsr 	ScaleByBaseType 		; scale by base type
.8594	a5 36		lda $36				lda 	zTemp0
.8596	a6 37		ldx $37				ldx 	zTemp0+1
.8598	20 48 95	jsr $9548			jsr 	AllocateXABytes 		; allocate memory
.859b	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.859d	91 3e		sta ($3e),y			sta 	(zaTemp),y
.859f	c8		iny				iny
.85a0	8a		txa				txa
.85a1	91 3e		sta ($3e),y			sta 	(zaTemp),y
.85a3	7a		ply				ply 							; get position back
.85a4	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket 		; check )
.85a7	b1 30		lda ($30),y			lda 	(codePtr),y
.85a9	c8		iny				iny 							; consume in case
.85aa	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.85ac	f0 85		beq $8533			beq 	DimCommand
.85ae	88		dey				dey 							; undo consume
.85af	60		rts				rts
.85b0					_DCSize:
.85b0	a9 16		lda #$16		lda	#22
.85b2	4c bf 8c	jmp $8cbf		jmp	ErrorHandler
.85b5					_DCSyntax:
.85b5	4c 5c a5	jmp $a55c			jmp 	SyntaxError
.85b8					_DCRedefine:
.85b8	a9 15		lda #$15		lda	#21
.85ba	4c bf 8c	jmp $8cbf		jmp	ErrorHandler
.85bd					_DCType:
.85bd	4c 66 a5	jmp $a566			jmp 	TypeError
.85c0					_DCGetSize:
.85c0	a2 00		ldx #$00			ldx 	#0 						; get first index.
.85c2	20 aa 97	jsr $97aa			jsr 	Evaluate8BitInteger 	; get array dimension
.85c5	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.85c7	f0 e7		beq $85b0			beq 	_DCSize
.85c9	c9 fe		cmp #$fe			cmp 	#254
.85cb	f0 e3		beq $85b0			beq 	_DCSize
.85cd	60		rts				rts
.85ce					ScaleByBaseType:
.85ce	29 10		and #$10			and 	#NSBIsString 			; is it string
.85d0	d0 19		bne $85eb			bne 	_SBBTString
.85d2	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.85d4	48		pha				pha
.85d5	a5 36		lda $36				lda 	zTemp0
.85d7	48		pha				pha
.85d8	06 36		asl $36				asl 	zTemp0 					; x 2
.85da	26 37		rol $37				rol 	zTemp0+1
.85dc	06 36		asl $36				asl 	zTemp0 					; x 4
.85de	26 37		rol $37				rol 	zTemp0+1
.85e0	68		pla				pla 							; add stacked value = x 5
.85e1	65 36		adc $36				adc 	zTemp0
.85e3	85 36		sta $36				sta 	zTemp0
.85e5	68		pla				pla
.85e6	65 37		adc $37				adc 	zTemp0+1
.85e8	85 37		sta $37				sta 	zTemp0+1
.85ea	60		rts				rts
.85eb					_SBBTString:
.85eb	06 36		asl $36				asl 	zTemp0
.85ed	26 37		rol $37				rol 	zTemp0+1
.85ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.85f0					EndCommand:
.85f0	4c 69 84	jmp $8469			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.85f3					ForCommand:
.85f3	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.85f5	20 65 98	jsr $9865			jsr 	StackOpen
.85f8	a2 00		ldx #$00			ldx 	#0
.85fa	20 99 93	jsr $9399			jsr 	EvaluateTerm
.85fd	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8600	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8602	d0 49		bne $864d			bne		_FCError
.8604	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8606	20 8a 9f	jsr $9f8a			jsr 	CheckNextA
.8609	e8		inx				inx
.860a	20 89 97	jsr $9789			jsr 	EvaluateInteger 			; <from> in +1
.860d	b1 30		lda ($30),y			lda 	(codePtr),y
.860f	c8		iny				iny 								; consume it
.8610	48		pha				pha 								; save on stack for later
.8611	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8613	f0 04		beq $8619			beq 	_FCNoSyntax
.8615	c9 af		cmp #$af			cmp 	#KWD_TO
.8617	d0 37		bne $8650			bne 	_FCSyntaxError
.8619					_FCNoSyntax:
.8619	e8		inx				inx
.861a	20 89 97	jsr $9789			jsr 	EvaluateInteger
.861d	20 a4 98	jsr $98a4			jsr 	STKSaveCodePosition 		; save loop back position
.8620	68		pla				pla 								; restore DOWNTO or TO
.8621	5a		phy				phy 								; save Y on the stack
.8622	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8624	f0 02		beq $8628			beq 	_FCNotDownTo
.8626	a9 02		lda #$02			lda 	#2
.8628					_FCNotDownTo:
.8628	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8629	a0 10		ldy #$10			ldy 	#16
.862b	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.862d	a0 06		ldy #$06			ldy 	#6
.862f	ad 08 06	lda $0608			lda 	NSMantissa0
.8632	91 34		sta ($34),y			sta 	(basicStack),y
.8634	ad 10 06	lda $0610			lda 	NSMantissa1
.8637	c8		iny				iny
.8638	91 34		sta ($34),y			sta 	(basicStack),y
.863a	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.863c	a2 01		ldx #$01			ldx 	#1
.863e	20 53 86	jsr $8653			jsr 	FCIntegerToStack
.8641	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8643	a2 02		ldx #$02			ldx 	#2
.8645	20 53 86	jsr $8653			jsr 	FCIntegerToStack
.8648	20 73 86	jsr $8673			jsr 	CopyIndexToReference
.864b	7a		ply				ply 								; restore position
.864c	60		rts				rts
.864d					_FCError:
.864d	4c 66 a5	jmp $a566			jmp 	TypeError
.8650					_FCSyntaxError:
.8650	4c 5c a5	jmp $a55c			jmp 	SyntaxError
.8653					FCIntegerToStack:
.8653	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.8656	10 03		bpl $865b			bpl	 	_FCNotNegative
.8658	20 c7 97	jsr $97c7			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.865b					_FCNotNegative:
.865b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.865e	91 34		sta ($34),y			sta 	(basicStack),y
.8660	c8		iny				iny
.8661	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8664	91 34		sta ($34),y			sta 	(basicStack),y
.8666	c8		iny				iny
.8667	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.866a	91 34		sta ($34),y			sta 	(basicStack),y
.866c	c8		iny				iny
.866d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8670	91 34		sta ($34),y			sta 	(basicStack),y
.8672	60		rts				rts
.8673					CopyIndexToReference:
.8673	5a		phy				phy
.8674	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8676	38		sec				sec 								; (because we copy from offset 8)
.8677	b1 34		lda ($34),y			lda 	(basicStack),y
.8679	e9 08		sbc #$08			sbc 	#8
.867b	85 36		sta $36				sta 	zTemp0
.867d	c8		iny				iny
.867e	b1 34		lda ($34),y			lda 	(basicStack),y
.8680	e9 00		sbc #$00			sbc 	#0
.8682	85 37		sta $37				sta 	zTemp0+1
.8684	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8686	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8688	b1 34		lda ($34),y			lda 	(basicStack),y
.868a	0a		asl a				asl 	a 							; into carry
.868b	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.868d	90 14		bcc $86a3			bcc 	_CITRNormal
.868f	38		sec				sec
.8690					_CITRNegative:
.8690	a9 00		lda #$00			lda 	#0
.8692	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8694	91 36		sta ($36),y			sta 	(zTemp0),y
.8696	c8		iny				iny
.8697	ca		dex				dex
.8698	d0 f6		bne $8690			bne 	_CITRNegative
.869a	88		dey				dey 								; look at MSB of mantissa
.869b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.869d	09 80		ora #$80			ora 	#$80
.869f	91 36		sta ($36),y			sta 	(zTemp0),y
.86a1	7a		ply				ply
.86a2	60		rts				rts
.86a3					_CITRNormal:
.86a3	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.86a5	91 36		sta ($36),y			sta 	(zTemp0),y
.86a7	c8		iny				iny
.86a8	ca		dex				dex
.86a9	d0 f8		bne $86a3			bne 	_CITRNormal
.86ab	7a		ply				ply 								; and exit.
.86ac	60		rts				rts
.86ad					NextCommand:
.86ad	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.86af	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.86b1	20 8c 98	jsr $988c			jsr 	StackCheckFrame
.86b4	5a		phy				phy
.86b5	a0 10		ldy #$10			ldy 	#16 						; get the step count
.86b7	b1 34		lda ($34),y			lda 	(basicStack),y
.86b9	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.86bb	30 02		bmi $86bf			bmi 	_NCStepNeg
.86bd	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.86bf					_NCStepNeg:
.86bf	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.86c1	a2 04		ldx #$04			ldx 	#4 							; count to bump
.86c3	18		clc				clc
.86c4					_NCBump:
.86c4	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.86c6	91 34		sta ($34),y			sta 	(basicStack),y
.86c8	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.86ca	c8		iny				iny 								; next byte
.86cb	ca		dex				dex 								; do four times
.86cc	d0 f6		bne $86c4			bne 	_NCBump
.86ce	20 73 86	jsr $8673			jsr		CopyIndexToReference		; copy it to the reference variable.
.86d1	a0 10		ldy #$10			ldy 	#16 						; get step count again
.86d3	b1 34		lda ($34),y			lda 	(basicStack),y
.86d5	0a		asl a				asl 	a 							; sign bit to carry
.86d6	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.86d8	85 38		sta $38				sta 	zTemp1
.86da	90 02		bcc $86de			bcc 	_NCCompRev 					; use if step is +ve
.86dc	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.86de					_NCCompRev:
.86de	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.86e0	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.86e2	85 39		sta $39				sta 	zTemp1+1
.86e4	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.86e6	38		sec				sec
.86e7					_NCCompare:
.86e7	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.86e9	b1 34		lda ($34),y			lda 	(basicStack),y
.86eb	a4 39		ldy $39				ldy 	zTemp1+1
.86ed	f1 34		sbc ($34),y			sbc 	(basicStack),y
.86ef	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.86f1	e6 39		inc $39				inc 	zTemp1+1
.86f3	ca		dex				dex 								; do it 4 times.
.86f4	d0 f1		bne $86e7			bne 	_NCCompare
.86f6	50 02		bvc $86fa			bvc 	_NCNoOverflow 				; convert to signed comparison
.86f8	49 80		eor #$80			eor 	#$80
.86fa					_NCNoOverflow:
.86fa	7a		ply				ply 								; restore Y position
.86fb	0a		asl a				asl 	a 							; is bit 7 set.
.86fc	90 04		bcc $8702			bcc 	_NCLoopback 				; if no , >= so loop back
.86fe	20 7e 98	jsr $987e			jsr 	StackClose 					; exit the loop
.8701	60		rts				rts
.8702					_NCLoopBack:
.8702	20 b5 98	jsr $98b5			jsr 	STKLoadCodePosition 		; loop back
.8705	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8706					Command_GOSUB:
.8706	a2 00		ldx #$00			ldx 	#0
.8708	20 9e 97	jsr $979e			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.870b	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.870d	20 65 98	jsr $9865			jsr 	StackOpen 					; create frame
.8710	20 a4 98	jsr $98a4			jsr 	STKSaveCodePosition 		; save current position
.8713	4c 29 87	jmp $8729			jmp 	GotoStackX
.8716					Command_RETURN:
.8716	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8718	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.871a	20 8c 98	jsr $988c			jsr 	StackCheckFrame
.871d	20 b5 98	jsr $98b5			jsr 	STKLoadCodePosition 		; restore code position
.8720	20 7e 98	jsr $987e			jsr 	StackClose
.8723	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8724					GotoCommand:
.8724	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8726	20 9e 97	jsr $979e			jsr 	Evaluate16BitInteger
.8729					GotoStackX:
.8729	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.872c	48		pha				pha 								; it is slightly inefficient, just in cases.
.872d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8730	fa		plx				plx
.8731	20 be 9e	jsr $9ebe			jsr 	MemorySearch 				; transfer to line number AX.
.8734	90 05		bcc $873b			bcc 	_GotoError 					; not found, off end.
.8736	d0 03		bne $873b			bne 	_GotoError 					; not found exactly
.8738	4c 07 8a	jmp $8a07			jmp 	RunNewLine 					; and go straight to new line code.
.873b					_GotoError:
.873b	a9 0d		lda #$0d		lda	#13
.873d	4c bf 8c	jmp $8cbf		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8740					IfCommand:
.8740	a2 00		ldx #$00			ldx 	#0 							; If what.
.8742	20 66 97	jsr $9766			jsr 	EvaluateNumber
.8745	b1 30		lda ($30),y			lda 	(codePtr),y
.8747	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8749	d0 0a		bne $8755			bne 	_IFStructured
.874b	c8		iny				iny 								; consume THEN
.874c	20 42 98	jsr $9842			jsr 	NSMIsZero 					; is it zero
.874f	f0 01		beq $8752			beq 	_IfFail 					; if fail, go to next line
.8751	60		rts				rts 								; if THEN just continue
.8752					_IfFail:
.8752	4c 68 8a	jmp $8a68			jmp 	EOLCommand
.8755					_IfStructured:
.8755	20 42 98	jsr $9842			jsr 	NSMIsZero 					; is it zero
.8758	d0 07		bne $8761			bne 	_IfExit 					; if not, then continue normally.
.875a	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.875c	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.875e	20 31 8c	jsr $8c31			jsr 	ScanForward 				; and run from there/
.8761					_IfExit:
.8761	60		rts				rts
.8762					ElseCode:
.8762	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8764	aa		tax				tax 								; so just go to the structure exit
.8765	20 31 8c	jsr $8c31			jsr 	ScanForward
.8768	60		rts				rts
.8769					EndIf:
.8769	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.876a					LetCommand:
.876a	a2 00		ldx #$00			ldx 	#0
.876c	ad b0 90	lda $90b0			lda 	PrecedenceLevel+"*"			; precedence > this
.876f	20 ca 90	jsr $90ca			jsr 	EvaluateExpressionAtPrecedence
.8772	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.8775	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8777	f0 0e		beq $8787			beq 	_LetGoProc 					; it's a procedure call.
.8779	a9 3d		lda #$3d			lda 	#"=" 						; check =
.877b	20 8a 9f	jsr $9f8a			jsr 	CheckNextA
.877e	e8		inx				inx 								; RHS
.877f	20 5d 97	jsr $975d			jsr 	EvaluateValue
.8782	ca		dex				dex
.8783	20 8a 87	jsr $878a			jsr 	AssignVariable
.8786	60		rts				rts
.8787					_LetGoProc:
.8787	4c 11 89	jmp $8911			jmp 	CallProcedure
.878a					AssignVariable:
.878a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.878d	48		pha				pha 								; save a copy
.878e	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8791	29 10		and #$10			and 	#NSBIsString
.8793	d0 0b		bne $87a0			bne 	_ASError
.8795	68		pla				pla 								; get back
.8796	29 10		and #$10			and 	#NSBIsString 				; check type
.8798	d0 03		bne $879d			bne 	_ASString
.879a	4c 05 91	jmp $9105			jmp 	AssignNumber
.879d					_ASString:
.879d	4c 73 91	jmp $9173			jmp 	AssignString
.87a0					_ASError:
.87a0	4c 66 a5	jmp $a566			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.87a3					Command_List:
.87a3	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.87a6	9c 14 06	stz $0614			stz 	NSMantissa1+4
.87a9	a9 ff		lda #$ff			lda 	#$FF
.87ab	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.87ae	8d 17 06	sta $0617			sta 	NSMantissa1+7
.87b1	b1 30		lda ($30),y			lda 	(codePtr),y
.87b3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87b5	f0 1e		beq $87d5			beq 	_CLSecond
.87b7	20 33 88	jsr $8833			jsr 	CLIsDigit 					; if not digit, list all
.87ba	b0 24		bcs $87e0			bcs 	_CLStart
.87bc	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.87be	20 9e 97	jsr $979e			jsr 	Evaluate16BitInteger
.87c1	b1 30		lda ($30),y			lda 	(codePtr),y
.87c3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87c5	f0 0e		beq $87d5			beq 	_CLSecond 					; if so go get it
.87c7	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.87ca	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.87cd	ad 14 06	lda $0614			lda 	NSMantissa1+4
.87d0	8d 17 06	sta $0617			sta 	NSMantissa1+7
.87d3	80 0b		bra $87e0			bra 	_CLStart
.87d5					_CLSecond:
.87d5	c8		iny				iny 								; consume comma
.87d6	20 33 88	jsr $8833			jsr 	CLIsDigit 					; digit found
.87d9	b0 05		bcs $87e0			bcs 	_CLStart 					; if not, continue listing
.87db	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.87dd	20 9e 97	jsr $979e			jsr 	Evaluate16BitInteger
.87e0					_CLStart
.87e0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.87e2	85 30		sta $30				sta 	codePtr
.87e4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.87e6	85 31		sta $31				sta 	codePtr+1
.87e8					_CLLoop:
.87e8	20 0b a8	jsr $a80b			jsr 	EXTBreakCheck 				; break check
.87eb	f0 30		beq $881d			beq 	_CLExit
.87ed	b2 30		lda ($30)			lda 	(codePtr)
.87ef	f0 2c		beq $881d			beq 	_CLExit
.87f1	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.87f3	20 20 88	jsr $8820			jsr 	CLCompareLineNo
.87f6	90 18		bcc $8810			bcc 	_CLNext
.87f8	a2 07		ldx #$07			ldx 	#7
.87fa	20 20 88	jsr $8820			jsr 	CLCompareLineNo
.87fd	f0 02		beq $8801			beq 	_CLDoThisOne
.87ff	b0 0f		bcs $8810			bcs 	_CLNext
.8801					_CLDoThisOne:
.8801	20 8d 8a	jsr $8a8d			jsr 	ListConvertLine 			; convert line into token Buffer
.8804	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.8806	a9 28		lda #$28			lda 	#(tokenBuffer & $FF)
.8808	20 18 8d	jsr $8d18			jsr 	PrintStringXA
.880b	a9 0d		lda #$0d			lda 	#13 						; new line
.880d	20 ca a7	jsr $a7ca			jsr 	EXTPrintCharacter
.8810					_CLNext:
.8810	18		clc				clc
.8811	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8813	65 30		adc $30				adc 	codePtr
.8815	85 30		sta $30				sta 	codePtr
.8817	90 02		bcc $881b			bcc 	_CREExit
.8819	e6 31		inc $31				inc 	codePtr+1
.881b					_CREExit:
.881b	80 cb		bra $87e8			bra 	_CLLoop
.881d					_CLExit:
.881d	4c 69 84	jmp $8469			jmp 	WarmStart
.8820					CLCompareLineNo:
.8820	38		sec				sec
.8821	a0 01		ldy #$01			ldy 	#1
.8823	b1 30		lda ($30),y			lda 	(codePtr),y
.8825	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8828	85 36		sta $36				sta 	zTemp0
.882a	c8		iny				iny
.882b	b1 30		lda ($30),y			lda 	(codePtr),y
.882d	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8830	05 36		ora $36				ora 	zTemp0
.8832	60		rts				rts
.8833					CLIsDigit:
.8833	b1 30		lda ($30),y			lda 	(codePtr),y
.8835	c9 30		cmp #$30			cmp 	#"0"
.8837	90 03		bcc $883c			bcc	 	_CLIDExitFalse
.8839	c9 3a		cmp #$3a			cmp 	#"9"+1
.883b	60		rts				rts
.883c					_CLIDExitFalse:
.883c	38		sec				sec
.883d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.883e					Command_LOCAL:
.883e	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8840	20 4c 88	jsr $884c			jsr 	LocaliseNextTerm 			; convert term to a local.
.8843	b1 30		lda ($30),y			lda 	(codePtr),y
.8845	c8		iny				iny
.8846	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8848	f0 f4		beq $883e			beq 	Command_LOCAL
.884a	88		dey				dey 								; unpick pre-get
.884b	60		rts				rts
.884c					LocaliseNextTerm:
.884c	20 99 93	jsr $9399			jsr 	EvaluateTerm 				; evaluate the term
.884f	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8852	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8854	f0 57		beq $88ad			beq		_LNTError
.8856	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8859	85 36		sta $36				sta 	zTemp0
.885b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.885e	85 37		sta $37				sta  	zTemp0+1
.8860	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8863	29 10		and #$10			and 	#NSBIsString
.8865	d0 22		bne $8889			bne 	_LNTPushString
.8867	5a		phy				phy
.8868	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.886a					_LNTPushNumLoop:
.886a	b1 36		lda ($36),y			lda		(zTemp0),y
.886c	20 4f 98	jsr $984f			jsr 	StackPushByte
.886f	a9 00		lda #$00			lda 	#0
.8871	91 36		sta ($36),y			sta 	(zTemp0),y
.8873	c8		iny				iny
.8874	c0 05		cpy #$05			cpy 	#5
.8876	d0 f2		bne $886a			bne 	_LNTPushNumLoop
.8878	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.887a	20 4f 98	jsr $984f			jsr 	StackPushByte
.887d	a5 37		lda $37				lda 	zTemp0+1
.887f	20 4f 98	jsr $984f			jsr 	StackPushByte
.8882	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8884	20 4f 98	jsr $984f			jsr 	StackPushByte
.8887	7a		ply				ply
.8888	60		rts				rts
.8889					_LNTPushString:
>8889	db						.byte 	$DB 						; causes a break in the emulator
.888a	5a		phy				phy
.888b	a0 00		ldy #$00			ldy 	#0 							; output string
.888d					_LNTPushStrLoop:
.888d	b1 36		lda ($36),y			lda 	(zTemp0),y
.888f	f0 06		beq $8897			beq 	_LNTStringOut
.8891	20 4f 98	jsr $984f			jsr 	StackPushByte
.8894	c8		iny				iny
.8895	80 f6		bra $888d			bra 	_LNTPushStrLoop
.8897					_LNTStringOut:
.8897	98		tya				tya									; output length
.8898	20 4f 98	jsr $984f			jsr 	StackPushByte
.889b	a9 00		lda #$00			lda 	#0 							; clear original string.
.889d	92 36		sta ($36)			sta 	(zTemp0)
.889f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.88a2	20 4f 98	jsr $984f			jsr 	StackPushByte
.88a5	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.88a8	20 4f 98	jsr $984f			jsr 	StackPushByte
.88ab	7a		ply				ply
.88ac	60		rts				rts
.88ad					_LNTError:
.88ad	4c 5c a5	jmp $a55c			jmp 	SyntaxError
.9f21					LocalPopValue:
.9f21	20 5c 98	jsr $985c			jsr 	StackPopByte
.9f24	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.9f26	d0 17		bne $9f3f			bne 	_LPVString
.9f28	20 5c 98	jsr $985c			jsr 	StackPopByte 				; address
.9f2b	85 37		sta $37				sta 	zTemp0+1
.9f2d	20 5c 98	jsr $985c			jsr 	StackPopByte
.9f30	85 36		sta $36				sta 	zTemp0
.9f32	5a		phy				phy
.9f33	a0 04		ldy #$04			ldy 	#4 							; copy back
.9f35					_LPVNumberCopy:
.9f35	20 5c 98	jsr $985c			jsr 	StackPopByte
.9f38	91 36		sta ($36),y			sta 	(zTemp0),y
.9f3a	88		dey				dey
.9f3b	10 f8		bpl $9f35			bpl 	_LPVNumberCopy
.9f3d	7a		ply				ply 								; and complete
.9f3e	60		rts				rts
.9f3f					_LPVString:
>9f3f	db						.byte 	$DB 						; causes a break in the emulator
.9f40	20 5c 98	jsr $985c			jsr 	StackPopByte 				; address of record => zTemp0
.9f43	85 37		sta $37				sta 	zTemp0+1
.9f45	20 5c 98	jsr $985c			jsr 	StackPopByte
.9f48	85 36		sta $36				sta 	zTemp0
.9f4a	da		phx				phx 								; save XY
.9f4b	5a		phy				phy
.9f4c	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.9f4e	85 38		sta $38				sta 	zTemp1
.9f50	a0 01		ldy #$01			ldy 	#1
.9f52	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f54	85 39		sta $39				sta 	zTemp1+1
.9f56	20 5c 98	jsr $985c			jsr 	StackPopByte 				; # to get => x
.9f59	aa		tax				tax
.9f5a	a0 00		ldy #$00			ldy 	#0 							; copy string out to target address (zTemp1)
.9f5c					_LPVStringCopy:
.9f5c	ca		dex				dex
.9f5d	30 06		bmi $9f65			bmi 	_LPVStringCopied
.9f5f	91 38		sta ($38),y			sta 	(zTemp1),y
.9f61	c8		iny				iny
.9f62	ca		dex				dex
.9f63	80 f7		bra $9f5c			bra 	_LPVStringCopy
.9f65					_LPVStringCopied:
.9f65	a9 00		lda #$00			lda 	#0 							; add NULL on end
.9f67	91 38		sta ($38),y			sta 	(zTemp1),y
.9f69	7a		ply				ply 								; restore YX and exit
.9f6a	fa		plx				plx
.9f6b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.88b0					NewCommand:
.88b0	20 9c 9e	jsr $9e9c			jsr 	MemoryNew
.88b3	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.88b6	20 d6 84	jsr $84d6			jsr 	ClearCommand 				; clear everything.
.88b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.88ba					Command_Print:
.88ba	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.88bb					_CPLoop:
.88bb	08		php				php 								; save last action flag
.88bc	b1 30		lda ($30),y			lda 	(codePtr),y
.88be	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.88c0	f0 46		beq $8908			beq 	_CPExit
.88c2	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.88c4	f0 42		beq $8908			beq 	_CPExit
.88c6	68		pla				pla 								; throw last action flag
.88c7	b1 30		lda ($30),y			lda 	(codePtr),y
.88c9	c8		iny				iny
.88ca	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.88cc	f0 37		beq $8905			beq 	_CPContinueWithSameLine
.88ce	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.88d0	f0 2e		beq $8900			beq 	_CPTab
.88d2	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.88d4	f0 26		beq $88fc			beq 	_CPNewLine
.88d6	88		dey				dey 								; undo the get.
.88d7	a2 00		ldx #$00			ldx 	#0
.88d9	20 5d 97	jsr $975d			jsr 	EvaluateValue 				; get a value into slot 0
.88dc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.88df	29 10		and #$10			and 	#NSBIsString
.88e1	f0 0b		beq $88ee			beq 	_CPNumber
.88e3	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.88e6	ad 08 06	lda $0608			lda 	NSMantissa0
.88e9	20 18 8d	jsr $8d18			jsr 	PrintStringXA
.88ec	80 cc		bra $88ba			bra 	Command_Print 				; loop round clearing carry so NL if end
.88ee					_CPNumber:
.88ee	a9 05		lda #$05			lda 	#5 							; maximum decimals
.88f0	20 33 96	jsr $9633			jsr 	ConvertNumberToString 		; convert to string
.88f3	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.88f5	a9 98		lda #$98			lda 	#DecimalBuffer & $FF
.88f7	20 18 8d	jsr $8d18			jsr 	PrintStringXA
.88fa	80 be		bra $88ba			bra 	Command_Print 				; loop round clearing carry so NL if end
.88fc					_CPNewLine:
.88fc	a9 0d		lda #$0d			lda 	#13
.88fe	80 02		bra $8902			bra 	_CPPrintChar
.8900					_CPTab:
.8900	a9 09		lda #$09			lda 	#9 							; print TAB
.8902					_CPPrintChar:
.8902	20 ca a7	jsr $a7ca			jsr 	EXTPrintCharacter
.8905					_CPContinueWithSameLine:
.8905	38		sec				sec 								; loop round with carry set, which
.8906	80 b3		bra $88bb			bra 	_CPLoop 					; will inhibit final CR
.8908					_CPExit:
.8908	28		plp				plp 								; get last action flag
.8909	b0 05		bcs $8910			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.890b	a9 0d		lda #$0d			lda 	#13 						; print new line
.890d	20 ca a7	jsr $a7ca			jsr 	EXTPrintCharacter
.8910					_CPExit2:
.8910	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.8911					CallProcedure:
.8911	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket
.8914	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8916	20 65 98	jsr $9865			jsr 	StackOpen
.8919	20 a4 98	jsr $98a4			jsr 	STKSaveCodePosition 		; save loop position
.891c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.891f	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8921	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8924	85 37		sta $37				sta 	zTemp0+1
.8926	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8928	b2 36		lda ($36)			lda 	(zTemp0)
.892a	85 30		sta $30				sta 	safePtr
.892c	b1 36		lda ($36),y			lda 	(zTemp0),y
.892e	85 31		sta $31				sta 	safePtr+1
.8930	c8		iny				iny
.8931	b1 36		lda ($36),y			lda 	(zTemp0),y
.8933	85 32		sta $32				sta 	safePtr+2
.8935	c8		iny				iny
.8936	b1 36		lda ($36),y			lda 	(zTemp0),y
.8938	85 33		sta $33				sta 	safePtr+3
.893a	c8		iny				iny 								; get Y offset -> Y
.893b	b1 36		lda ($36),y			lda 	(zTemp0),y
.893d	a8		tay				tay
.893e	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket 			; check )
.8941	60		rts				rts 								; and continue from here
.9f6c					Command_ENDPROC:
.9f6c	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9f6e	a2 14		ldx #$14			ldx 	#ERRID_PROC
.9f70	20 8c 98	jsr $988c			jsr 	StackCheckFrame
.9f73	20 b5 98	jsr $98b5			jsr 	STKLoadCodePosition 		; restore code position
.9f76	20 7e 98	jsr $987e			jsr 	StackClose
.9f79	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8942					Command_Read:
.8942	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8944	20 99 93	jsr $9399			jsr 	EvaluateTerm
.8947	bd 00 06	lda $0600,x			lda 	NSStatus,x
.894a	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.894c	f0 4a		beq $8998			beq 	_CRSyntax 					; check reference (bit 0)
.894e	20 e1 89	jsr $89e1			jsr 	SwapDataCodePtrs 			; swap code and data
.8951	ad 1b 07	lda $071b			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8954	d0 20		bne $8976			bne 	_CRContinueData
.8956					_CRKeepSearching:
.8956	a9 a3		lda #$a3			lda 	#KWD_DATA 					; scan for instruction
.8958	aa		tax				tax
.8959	20 31 8c	jsr $8c31			jsr 	ScanForward
.895c	c9 a3		cmp #$a3			cmp 	#KWD_DATA 					; found data ?
.895e	f0 16		beq $8976			beq 	_CRHaveData 				; found it
.8960	18		clc				clc
.8961	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8963	65 30		adc $30				adc 	codePtr
.8965	85 30		sta $30				sta 	codePtr
.8967	90 02		bcc $896b			bcc 	_CREExit
.8969	e6 31		inc $31				inc 	codePtr+1
.896b					_CREExit:
.896b	a0 03		ldy #$03			ldy 	#3 							; start of line.
.896d	b2 30		lda ($30)			lda 	(codePtr)
.896f	d0 e5		bne $8956			bne 	_CRKeepSearching
.8971	a9 0b		lda #$0b		lda	#11
.8973	4c bf 8c	jmp $8cbf		jmp	ErrorHandler
.8976					_CRHaveData:
.8976					_CRContinueData:
.8976	a2 01		ldx #$01			ldx 	#1
.8978	20 5d 97	jsr $975d			jsr 	EvaluateValue 				; evaluate value into slot # 1
.897b	ca		dex				dex
.897c	20 8a 87	jsr $878a			jsr		AssignVariable 				; do the assignment
.897f	9c 1b 07	stz $071b			stz 	inDataStatement 			; clear in data
.8982	b1 30		lda ($30),y			lda 	(codePtr),y
.8984	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8986	d0 04		bne $898c			bne 	_CRSwapBack
.8988	c8		iny				iny 								; consume comma
.8989	ee 1b 07	inc $071b			inc 	inDataStatement 			; set in data statement currently.
.898c					_CRSwapBack:
.898c	20 e1 89	jsr $89e1			jsr 	SwapDataCodePtrs			; swap them back.
.898f	b1 30		lda ($30),y			lda 	(codePtr),y
.8991	c8		iny				iny
.8992	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8994	f0 ac		beq $8942			beq 	Command_Read 				; if so go round again.
.8996	88		dey				dey 								; unpick get.
.8997	60		rts				rts
.8998					_CRSyntax:
.8998	4c 5c a5	jmp $a55c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.899b					RemCommand:
.899b	b1 30		lda ($30),y			lda 	(codePtr),y
.899d	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.899f	d0 06		bne $89a7			bne 	_RMExit
.89a1	c8		iny				iny
.89a2	98		tya				tya
.89a3	38		sec				sec
.89a4	71 30		adc ($30),y			adc 	(codePtr),y
.89a6	a8		tay				tay
.89a7					_RMExit:
.89a7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.89a8					Command_REPEAT:
.89a8	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.89aa	20 65 98	jsr $9865			jsr 	StackOpen
.89ad	20 a4 98	jsr $98a4			jsr 	STKSaveCodePosition 		; save loop position
.89b0	60		rts				rts
.89b1					Command_UNTIL:
.89b1	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.89b3	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.89b5	20 8c 98	jsr $988c			jsr 	StackCheckFrame
.89b8	a2 00		ldx #$00			ldx 	#0
.89ba	20 66 97	jsr $9766			jsr 	EvaluateNumber 				; work out the number
.89bd	20 42 98	jsr $9842			jsr 	NSMIsZero 					; check if zero
.89c0	f0 04		beq $89c6			beq 	_CULoopBack 				; if so keep looping
.89c2	20 7e 98	jsr $987e			jsr 	StackClose		 			; return
.89c5	60		rts				rts
.89c6					_CULoopBack:
.89c6	20 b5 98	jsr $98b5			jsr 	STKLoadCodePosition 		; loop back
.89c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.89ca					Command_Restore:
.89ca	20 e1 89	jsr $89e1			jsr 	SwapDataCodePtrs 			; swap code and data
.89cd	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89cf	85 30		sta $30				sta 	codePtr
.89d1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89d3	85 31		sta $31				sta 	codePtr+1
.89d5	20 e1 89	jsr $89e1			jsr 	SwapDataCodePtrs 			; put them back
.89d8	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.89da	8d 1a 07	sta $071a			sta 	dataPointer+4
.89dd	9c 1b 07	stz $071b			stz 	inDataStatement 			; not in data statement
.89e0	60		rts				rts
.89e1					SwapDataCodePtrs:
.89e1	da		phx				phx
.89e2	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.89e4					_SDCPLoop:
.89e4	b5 30		lda $30,x			lda 	safePtr,x
.89e6	48		pha				pha
.89e7	bd 16 07	lda $0716,x			lda 	dataPointer,x
.89ea	95 30		sta $30,x			sta 	safePtr,x
.89ec	68		pla				pla
.89ed	9d 16 07	sta $0716,x			sta 	dataPointer,x
.89f0	ca		dex				dex
.89f1	10 f1		bpl $89e4			bpl 	_SDCPLoop
.89f3	ad 1a 07	lda $071a			lda 	dataPointer+4 				; swap Y position over.
.89f6	8c 1a 07	sty $071a			sty 	dataPointer+4
.89f9	a8		tay				tay
.89fa	fa		plx				plx
.89fb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.89fc					CommandRUN:
.89fc	20 d6 84	jsr $84d6			jsr 	ClearCommand 				; clear variable/stacks/etc.
.89ff	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8a01	85 30		sta $30				sta 	codePtr
.8a03	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8a05	85 31		sta $31				sta 	codePtr+1
.8a07					RUNNewLine:
.8a07	b2 30		lda ($30)			lda 	(codePtr)
.8a09	f0 5a		beq $8a65			beq 	CRNoProgram         		; no then END.
.8a0b	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8a0d	9a		txs				txs
.8a0e					RUNCodePointerLine:
.8a0e	a0 02		ldy #$02			ldy 	#2 							; start of program
.8a10					_CRIncMainLoop:
.8a10	0e 13 07	asl $0713			asl 	breakCheck 					; clears 1 time in 8
.8a13	d0 05		bne $8a1a			bne 	_CRNoBreakCheck
.8a15	20 0b a8	jsr $a80b			jsr 	EXTBreakCheck 				; break check
.8a18	f0 46		beq $8a60			beq 	_CRBreak
.8a1a					_CRNoBreakCheck:
.8a1a	c8		iny				iny
.8a1b					_CRMainLoop:
.8a1b	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8a1e	b1 30		lda ($30),y			lda 	(codePtr),y
.8a20	10 10		bpl $8a32			bpl 	_CRNotKeyword
.8a22	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8a24	b0 04		bcs $8a2a			bcs 	_CRIsKeyword
.8a26	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8a28	b0 30		bcs $8a5a			bcs		_CRSyntaxError
.8a2a					_CRIsKeyword:
.8a2a	c8		iny				iny 								; consume command
.8a2b	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8a2c	aa		tax				tax 								; put in X for vector jump
.8a2d	20 5d 8a	jsr $8a5d			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a30	80 e9		bra $8a1b			bra 	_CRMainLoop 				; and loop round
.8a32					_CRNotKeyword:
.8a32	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a34	f0 da		beq $8a10			beq 	_CRIncMainLoop
.8a36	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a38	90 05		bcc $8a3f			bcc 	_CRNotVariable
.8a3a					_CRGoLet:
.8a3a	20 6a 87	jsr $876a			jsr 	LetCommand
.8a3d	80 dc		bra $8a1b			bra 	_CRMainLoop
.8a3f					_CRNotVariable:
.8a3f	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8a41	f0 f7		beq $8a3a			beq 	_CRGoLet
.8a43	c9 21		cmp #$21			cmp 	#KWD_PLING
.8a45	f0 f3		beq $8a3a			beq 	_CRGoLet
.8a47	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8a49	f0 09		beq $8a54			beq 	_CRGoRem
.8a4b	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8a4d	d0 0b		bne $8a5a			bne 	_CRSyntaxError
.8a4f	20 a2 83	jsr $83a2			jsr 	LabelHere
.8a52	80 c7		bra $8a1b			bra 	_CRMainLoop
.8a54					_CRGoRem:
.8a54	c8		iny				iny
.8a55	20 9b 89	jsr $899b			jsr 	RemCommand
.8a58	80 c1		bra $8a1b			bra 	_CRMainLoop
.8a5a					_CRSyntaxError:
.8a5a	4c 5c a5	jmp $a55c			jmp 	SyntaxError
.8a5d					_CRCallVector0:
.8a5d	7c fe 80	jmp ($80fe,x)			jmp 	(VectorSet0,x)
.8a60					_CRBreak:
.8a60	a9 01		lda #$01		lda	#1
.8a62	4c bf 8c	jmp $8cbf		jmp	ErrorHandler
.8a65					CRNoProgram:
.8a65	4c f0 85	jmp $85f0			jmp 	EndCommand
.8a68					EOLCommand:
.8a68	18		clc				clc
.8a69	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a6b	65 30		adc $30				adc 	codePtr
.8a6d	85 30		sta $30				sta 	codePtr
.8a6f	90 02		bcc $8a73			bcc 	_CREExit
.8a71	e6 31		inc $31				inc 	codePtr+1
.8a73					_CREExit:
.8a73	80 92		bra $8a07			bra 	RunNewLine
.8a75					Shift1Command:
.8a75	b1 30		lda ($30),y			lda 	(codePtr),y
.8a77	c8		iny				iny
.8a78	0a		asl a				asl 	a
.8a79	aa		tax				tax
.8a7a	7c 5e 81	jmp ($815e,x)			jmp 	(VectorSet1,x)
.8a7d					Shift2Command:
.8a7d	b1 30		lda ($30),y			lda 	(codePtr),y
.8a7f	c8		iny				iny
.8a80	0a		asl a				asl 	a
.8a81	aa		tax				tax
.8a82	7c 76 81	jmp ($8176,x)			jmp 	(VectorSet2,x)
.8a85					Unused1:
.8a85					Unused2:
.8a85					Unused3:
.8a85					Unused4:
.8a85	4c 5c a5	jmp $a55c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8a88					StopCommand:
.8a88	a9 08		lda #$08		lda	#8
.8a8a	4c bf 8c	jmp $8cbf		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8a8d					ListConvertLine:
.8a8d	9c 1c 07	stz $071c			stz 	tbOffset
.8a90	9c 28 07	stz $0728			stz 	tokenBuffer
.8a93	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.8a95	b1 30		lda ($30),y			lda 	(codePtr),y
.8a97	aa		tax				tax
.8a98	88		dey				dey
.8a99	b1 30		lda ($30),y			lda 	(codePtr),y
.8a9b	20 d6 a0	jsr $a0d6			jsr 	ConvertInt16
.8a9e	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8aa0	86 37		stx $37				stx 	zTemp0+1
.8aa2	a0 00		ldy #$00			ldy 	#0
.8aa4					_LCCopyNumber:
.8aa4	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aa6	20 a6 8b	jsr $8ba6			jsr 	LCLWrite
.8aa9	c8		iny				iny
.8aaa	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aac	d0 f6		bne $8aa4			bne 	_LCCopyNumber
.8aae					_LCPadOut:
.8aae	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.8ab0	20 a6 8b	jsr $8ba6			jsr 	LCLWrite
.8ab3	ad 1c 07	lda $071c			lda 	tbOffset
.8ab6	c9 06		cmp #$06			cmp 	#6
.8ab8	d0 f4		bne $8aae			bne 	_LCPadOut
.8aba	a0 03		ldy #$03			ldy 	#3 							; start position.
.8abc					_LCMainLoop:
.8abc	b1 30		lda ($30),y			lda 	(codePtr),y
.8abe	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8ac0	f0 17		beq $8ad9			beq 	_LCExit
.8ac2	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.8ac4	90 14		bcc $8ada			bcc 	_LCDoubles
.8ac6	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8ac8	90 20		bcc $8aea			bcc 	_LCShiftPunc
.8aca	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8acc	90 2b		bcc $8af9			bcc 	_LCPunctuation
.8ace	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8ad0	90 2d		bcc $8aff			bcc 	_LCIdentifiers
.8ad2	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8ad4	90 49		bcc $8b1f			bcc 	_LCTokens
.8ad6	4c 7a 8b	jmp $8b7a			jmp 	_LCData 					; 254-5 are data objects
.8ad9					_LCExit:
.8ad9	60		rts				rts
.8ada					_LCDoubles:
.8ada	48		pha				pha
.8adb	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8adc	29 02		and #$02			and 	#2
.8ade	09 3c		ora #$3c			ora 	#60 						; make < >
.8ae0	20 a6 8b	jsr $8ba6			jsr 	LCLWrite
.8ae3	68		pla				pla 								; restore, do lower bit
.8ae4	29 03		and #$03			and 	#3
.8ae6	09 3c		ora #$3c			ora 	#60
.8ae8	80 0f		bra $8af9			bra		_LCPunctuation 				; print, increment, loop
.8aea					_LCShiftPunc:
.8aea	aa		tax				tax 								; save in X
.8aeb	29 07		and #$07			and 	#7 							; lower 3 bits
.8aed	f0 02		beq $8af1			beq 	_LCNoAdd
.8aef	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.8af1					_LCNoAdd:
.8af1	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8af3	90 02		bcc $8af7			bcc 	_LCNoAdd2
.8af5	09 20		ora #$20			ora 	#32 						; adds $20
.8af7					_LCNoAdd2:
.8af7	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8af9					_LCPunctuation:
.8af9	c8		iny				iny 								; consume character
.8afa	20 a6 8b	jsr $8ba6			jsr 	LCLWrite 					; write it out.
.8afd	80 bd		bra $8abc			bra 	_LCMainLoop 				; go round again.
.8aff					_LCIdentifiers:
.8aff	18		clc				clc 								; convert to physical address
.8b00	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8b02	85 37		sta $37				sta 	zTemp0+1
.8b04	c8		iny				iny
.8b05	b1 30		lda ($30),y			lda 	(codePtr),y
.8b07	85 36		sta $36				sta 	zTemp0
.8b09	c8		iny				iny
.8b0a	5a		phy				phy 								; save position
.8b0b	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8b0d					_LCOutIdentifier:
.8b0d	c8		iny				iny
.8b0e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b10	29 7f		and #$7f			and 	#$7F
.8b12	20 d4 8b	jsr $8bd4			jsr 	LCLLowerCase
.8b15	20 a6 8b	jsr $8ba6			jsr 	LCLWrite
.8b18	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8b1a	10 f1		bpl $8b0d			bpl 	_LCOutIdentifier
.8b1c	7a		ply				ply 								; restore position
.8b1d	80 9d		bra $8abc			bra 	_LCMainLoop
.8b1f					_LCTokens:
.8b1f	aa		tax				tax 								; token in X
.8b20	a9 d6		lda #$d6			lda 	#((KeywordSet2) & $FF)
.8b22	85 36		sta $36				sta 	0+zTemp0
.8b24	a9 9a		lda #$9a			lda 	#((KeywordSet2) >> 8)
.8b26	85 37		sta $37				sta 	1+zTemp0
.8b28	e0 82		cpx #$82			cpx 	#$82
.8b2a	f0 16		beq $8b42			beq 	_LCUseShift
.8b2c	a9 92		lda #$92			lda 	#((KeywordSet1) & $FF)
.8b2e	85 36		sta $36				sta 	0+zTemp0
.8b30	a9 9a		lda #$9a			lda 	#((KeywordSet1) >> 8)
.8b32	85 37		sta $37				sta 	1+zTemp0
.8b34	e0 81		cpx #$81			cpx 	#$81
.8b36	f0 0a		beq $8b42			beq 	_LCUseShift
.8b38	a9 69		lda #$69			lda 	#((KeywordSet0) & $FF)
.8b3a	85 36		sta $36				sta 	0+zTemp0
.8b3c	a9 99		lda #$99			lda 	#((KeywordSet0) >> 8)
.8b3e	85 37		sta $37				sta 	1+zTemp0
.8b40	80 01		bra $8b43			bra 	_LCNoShift
.8b42					_LCUseShift:
.8b42	c8		iny				iny
.8b43					_LCNoShift:
.8b43	20 b5 8b	jsr $8bb5			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8b46	b1 30		lda ($30),y			lda 	(codePtr),y
.8b48	aa		tax				tax 								; into X
.8b49					_LCFindText:
.8b49	ca		dex				dex
.8b4a	10 0e		bpl $8b5a			bpl 	_LCFoundText 				; found text.
.8b4c	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8b4e	1a		inc a				inc 	a 							; one extra for size
.8b4f	38		sec				sec 								; one extra for checksum
.8b50	65 36		adc $36				adc 	zTemp0 						; go to next token
.8b52	85 36		sta $36				sta 	zTemp0
.8b54	90 f3		bcc $8b49			bcc 	_LCFindText
.8b56	e6 37		inc $37				inc 	zTemp0+1
.8b58	80 ef		bra $8b49			bra 	_LCFindText
.8b5a					_LCFoundText:
.8b5a	5a		phy				phy 								; save List position
.8b5b	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8b5d	aa		tax				tax
.8b5e	a0 02		ldy #$02			ldy 	#2
.8b60					_LCCopyToken:
.8b60	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b62	20 d4 8b	jsr $8bd4			jsr 	LCLLowerCase
.8b65	20 a6 8b	jsr $8ba6			jsr 	LCLWrite
.8b68	c8		iny				iny
.8b69	ca		dex				dex
.8b6a	d0 f4		bne $8b60			bne 	_LCCopyToken
.8b6c	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8b6e	f0 05		beq $8b75			beq 	_LCNoSpace
.8b70	a9 20		lda #$20			lda 	#' '
.8b72	20 a6 8b	jsr $8ba6			jsr 	LCLWrite
.8b75					_LCNoSpace:
.8b75	7a		ply				ply 								; restore position.
.8b76	c8		iny				iny 								; consume token
.8b77	4c bc 8a	jmp $8abc			jmp 	_LCMainLoop 				; and go around again.
.8b7a					_LCData:
.8b7a	48		pha				pha 								; save type $FE/$FF
.8b7b	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8b7d	c9 fe		cmp #$fe			cmp 	#$FE
.8b7f	f0 02		beq $8b83			beq 	_LCHaveOpener
.8b81	a2 22		ldx #$22			ldx 	#'"'
.8b83					_LCHaveOpener:
.8b83	8a		txa				txa 								; output prefix (# or ")
.8b84	20 a6 8b	jsr $8ba6			jsr 	LCLWrite
.8b87	c8		iny				iny 								; get count
.8b88	b1 30		lda ($30),y			lda 	(codePtr),y
.8b8a	aa		tax				tax
.8b8b	c8		iny				iny 								; point at first character
.8b8c					_LCOutData:
.8b8c	b1 30		lda ($30),y			lda 	(codePtr),y
.8b8e	c9 00		cmp #$00			cmp 	#0
.8b90	f0 03		beq $8b95			beq 	_LCNoPrint
.8b92	20 a6 8b	jsr $8ba6			jsr 	LCLWrite
.8b95					_LCNoPrint:
.8b95	c8		iny				iny
.8b96	ca		dex				dex
.8b97	d0 f3		bne $8b8c			bne 	_LCOutData
.8b99	68		pla				pla 								; closing " required ?
.8b9a	c9 ff		cmp #$ff			cmp 	#$FF
.8b9c	d0 05		bne $8ba3			bne 	_LCNoQuote
.8b9e	a9 22		lda #$22			lda 	#'"'
.8ba0	20 a6 8b	jsr $8ba6			jsr 	LCLWrite
.8ba3					_LCNoQuote:
.8ba3	4c bc 8a	jmp $8abc			jmp 	_LCMainLoop
.8ba6					LCLWrite:
.8ba6	da		phx				phx
.8ba7	ae 1c 07	ldx $071c			ldx 	tbOffset
.8baa	9d 28 07	sta $0728,x			sta 	tokenBuffer,x
.8bad	9e 29 07	stz $0729,x			stz 	tokenBuffer+1,x
.8bb0	ee 1c 07	inc $071c			inc 	tbOffset
.8bb3	fa		plx				plx
.8bb4	60		rts				rts
.8bb5					LCCheckSpaceRequired:
.8bb5	ae 1c 07	ldx $071c			ldx 	tbOffset
.8bb8	bd 27 07	lda $0727,x			lda 	tokenBuffer-1,x 			; previous character
.8bbb	20 d4 8b	jsr $8bd4			jsr 	LCLLowerCase 				; saves a little effort
.8bbe	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8bc0	90 11		bcc $8bd3			bcc 	_LCCSRExit
.8bc2	c9 3a		cmp #$3a			cmp 	#"9"+1
.8bc4	90 08		bcc $8bce			bcc 	_LCCSRSpace
.8bc6	c9 61		cmp #$61			cmp 	#"a"
.8bc8	90 09		bcc $8bd3			bcc 	_LCCSRExit
.8bca	c9 7b		cmp #$7b			cmp 	#"z"+1
.8bcc	b0 05		bcs $8bd3			bcs 	_LCCSRExit
.8bce					_LCCSRSpace:
.8bce	a9 20		lda #$20			lda 	#' '
.8bd0	20 a6 8b	jsr $8ba6			jsr 	LCLWrite
.8bd3					_LCCSRExit:
.8bd3	60		rts				rts
.8bd4					LCLLowerCase:
.8bd4	c9 41		cmp #$41			cmp 	#"A"
.8bd6	90 06		bcc $8bde			bcc 	_LCLLCOut
.8bd8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8bda	b0 02		bcs $8bde			bcs 	_LCLLCOut
.8bdc	69 20		adc #$20			adc 	#$20
.8bde					_LCLLCOut:
.8bde	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8bdf					ProcedureScan:
.8bdf	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8be1	85 30		sta $30				sta 	codePtr
.8be3	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8be5	85 31		sta $31				sta 	codePtr+1
.8be7					_PSLoop:
.8be7	b2 30		lda ($30)			lda 	(codePtr)
.8be9	f0 42		beq $8c2d			beq 	_PSExit
.8beb	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8bed	b1 30		lda ($30),y			lda 	(codePtr),y
.8bef	c9 98		cmp #$98			cmp 	#KWD_PROC
.8bf1	d0 2d		bne $8c20			bne 	_PSNext
.8bf3	c8		iny				iny 								; get the address of the record to zTemp0 and
.8bf4	b1 30		lda ($30),y			lda 	(codePtr),y
.8bf6	29 c0		and #$c0			and 	#$C0
.8bf8	c9 40		cmp #$40			cmp 	#$40
.8bfa	d0 32		bne $8c2e			bne 	_PSSyntax
.8bfc	b1 30		lda ($30),y			lda 	(codePtr),y
.8bfe	18		clc				clc
.8bff	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c01	85 37		sta $37				sta 	zTemp0+1
.8c03	c8		iny				iny 								; LSB
.8c04	b1 30		lda ($30),y			lda 	(codePtr),y
.8c06	85 36		sta $36				sta 	zTemp0
.8c08	c8		iny				iny 								; character after variable call.
.8c09	98		tya				tya 								; save Y offset at +7
.8c0a	a0 07		ldy #$07			ldy 	#7
.8c0c	91 36		sta ($36),y			sta 	(zTemp0),y
.8c0e	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8c10	a0 02		ldy #$02			ldy 	#2
.8c12	91 36		sta ($36),y			sta 	(zTemp0),y
.8c14	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8c16					_PSCopy:
.8c16	b5 30		lda $30,x			lda 	safePtr,x
.8c18	c8		iny				iny
.8c19	91 36		sta ($36),y			sta 	(zTemp0),y
.8c1b	e8		inx				inx
.8c1c	e0 04		cpx #$04			cpx 	#4
.8c1e	d0 f6		bne $8c16			bne 	_PSCopy
.8c20					_PSNext:
.8c20	18		clc				clc
.8c21	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c23	65 30		adc $30				adc 	codePtr
.8c25	85 30		sta $30				sta 	codePtr
.8c27	90 02		bcc $8c2b			bcc 	_CREExit
.8c29	e6 31		inc $31				inc 	codePtr+1
.8c2b					_CREExit:
.8c2b	80 ba		bra $8be7			bra 	_PSLoop
.8c2d					_PSExit:
.8c2d	60		rts				rts
.8c2e					_PSSyntax:
.8c2e	4c 5c a5	jmp $a55c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c31					ScanForward:
.8c31	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8c33	86 37		stx $37				stx 	zTemp0+1
.8c35	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c37					_ScanLoop:
.8c37	b1 30		lda ($30),y			lda 	(codePtr),y
.8c39	c8		iny				iny
.8c3a	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8c3c	d0 0e		bne $8c4c			bne 	_ScanGoNext
.8c3e	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8c40	f0 04		beq $8c46			beq 	_ScanMatch
.8c42	c5 37		cmp $37				cmp 	zTemp0+1
.8c44	d0 06		bne $8c4c			bne 	_ScanGoNext
.8c46					_ScanMatch:
.8c46	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8c48	d0 01		bne $8c4b			bne 	_ScanNotEndEOL
.8c4a	88		dey				dey
.8c4b					_ScanNotEndEOL:
.8c4b	60		rts				rts
.8c4c					_ScanGoNext:
.8c4c	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8c4e	90 e7		bcc $8c37			bcc 	_ScanLoop
.8c50	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8c52	90 18		bcc $8c6c			bcc 	_ScanSkipOne
.8c54	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8c56	b0 2f		bcs $8c87			bcs 	_ScanSkipData
.8c58	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8c5a	90 db		bcc $8c37			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8c5c	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8c5e	b0 d7		bcs $8c37			bcs 	_ScanLoop
.8c60	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8c62	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8c64	b0 d1		bcs $8c37			bcs 	_ScanLoop
.8c66	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8c68	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8c6a	80 cb		bra $8c37			bra 	_ScanLoop
.8c6c					_ScanSkipOne:
.8c6c	c8		iny				iny 								; consume the extra one.
.8c6d	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8c6f	d0 c6		bne $8c37			bne 	_ScanLoop
.8c71	18		clc				clc
.8c72	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c74	65 30		adc $30				adc 	codePtr
.8c76	85 30		sta $30				sta 	codePtr
.8c78	90 02		bcc $8c7c			bcc 	_CREExit
.8c7a	e6 31		inc $31				inc 	codePtr+1
.8c7c					_CREExit:
.8c7c	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8c7e	b2 30		lda ($30)			lda 	(codePtr)
.8c80	d0 b5		bne $8c37			bne 	_ScanLoop 					; if not zero, more to scan
.8c82	a9 13		lda #$13		lda	#19
.8c84	4c bf 8c	jmp $8cbf		jmp	ErrorHandler
.8c87					_ScanSkipData:
.8c87	88		dey				dey 								; point at data token
.8c88	c8		iny				iny
.8c89	98		tya				tya
.8c8a	38		sec				sec
.8c8b	71 30		adc ($30),y			adc 	(codePtr),y
.8c8d	a8		tay				tay
.8c8e	80 a7		bra $8c37			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8c90					Command_WHILE:
.8c90	5a		phy				phy 								; save position of the test
.8c91	a2 00		ldx #$00			ldx 	#0
.8c93	20 66 97	jsr $9766			jsr 	EvaluateNumber 				; work out the number
.8c96	20 42 98	jsr $9842			jsr 	NSMIsZero 					; check if zero
.8c99	f0 0e		beq $8ca9			beq 	_WHExitLoop 				; if so exit the loop
.8c9b	98		tya				tya 								; position *after* test.
.8c9c	7a		ply				ply 								; restore position before test, at WHILE
.8c9d	88		dey				dey
.8c9e	48		pha				pha 								; push after test on the stack
.8c9f	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8ca1	20 65 98	jsr $9865			jsr 	StackOpen
.8ca4	20 a4 98	jsr $98a4			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8ca7	7a		ply				ply 								; restore the position *after* the test
.8ca8	60		rts				rts
.8ca9					_WHExitLoop:
.8ca9	68		pla				pla 								; throw post loop position
.8caa	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8cac	aa		tax				tax
.8cad	20 31 8c	jsr $8c31			jsr 	ScanForward
.8cb0	60		rts				rts
.8cb1					Command_WEND:
.8cb1	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8cb3	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8cb5	20 8c 98	jsr $988c			jsr 	StackCheckFrame
.8cb8	20 b5 98	jsr $98b5			jsr 	STKLoadCodePosition 		; loop back
.8cbb	20 7e 98	jsr $987e			jsr 	StackClose		 			; erase the frame
.8cbe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9f7a					CheckRightBracket:
.9f7a	b1 30		lda ($30),y			lda 	(codePtr),y
.9f7c	c8		iny				iny
.9f7d	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9f7f	d0 0f		bne $9f90			bne 	CNAFail
.9f81	60		rts				rts
.9f82					CheckComma:
.9f82	b1 30		lda ($30),y			lda 	(codePtr),y
.9f84	c8		iny				iny
.9f85	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9f87	d0 07		bne $9f90			bne 	CNAFail
.9f89	60		rts				rts
.9f8a					CheckNextA:
.9f8a	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9f8c	d0 02		bne $9f90			bne 	CNAFail
.9f8e	c8		iny				iny 								; skip character
.9f8f	60		rts				rts 								; and exit
.9f90					CNAFail:
.9f90	4c 5c a5	jmp $a55c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8cbf					ErrorHandler:
.8cbf	a8		tay				tay 								; find the error text
.8cc0	f0 49		beq $8d0b			beq 	_EHEnd
.8cc2	a2 00		ldx #$00			ldx 	#0
.8cc4	a9 75		lda #$75			lda 	#((ErrorText) & $FF)
.8cc6	85 36		sta $36				sta 	0+zTemp0
.8cc8	a9 a5		lda #$a5			lda 	#((ErrorText) >> 8)
.8cca	85 37		sta $37				sta 	1+zTemp0
.8ccc					_EHFind:
.8ccc	88		dey				dey 								; found the error text ?
.8ccd	f0 0e		beq $8cdd			beq 	_EHFound
.8ccf					_EHFindZero:
.8ccf	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8cd1	e6 36		inc $36				inc 	zTemp0
.8cd3	d0 02		bne $8cd7			bne 	_EHFNoCarry
.8cd5	e6 37		inc $37				inc 	zTemp0+1
.8cd7					_EHFNoCarry:
.8cd7	c9 00		cmp #$00			cmp 	#0
.8cd9	d0 f4		bne $8ccf			bne 	_EHFindZero
.8cdb	80 ef		bra $8ccc			bra 	_EHFind
.8cdd					_EHFound:
.8cdd	a5 36		lda $36				lda 	zTemp0 						; print message
.8cdf	a6 37		ldx $37				ldx 	zTemp0+1
.8ce1	20 18 8d	jsr $8d18			jsr 	PrintStringXA
.8ce4	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8ce6	b1 30		lda ($30),y			lda 	(codePtr),y
.8ce8	d0 05		bne $8cef			bne 	_EHAtMsg
.8cea	c8		iny				iny
.8ceb	b1 30		lda ($30),y			lda 	(codePtr),y
.8ced	f0 17		beq $8d06			beq 	_EHCREnd
.8cef					_EHAtMsg:
.8cef	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8cf1	a9 0e		lda #$0e			lda 	#_AtMsg & $FF
.8cf3	20 18 8d	jsr $8d18			jsr 	PrintStringXA
.8cf6	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8cf8	b1 30		lda ($30),y			lda 	(codePtr),y
.8cfa	48		pha				pha
.8cfb	c8		iny				iny
.8cfc	b1 30		lda ($30),y			lda 	(codePtr),y
.8cfe	aa		tax				tax
.8cff	68		pla				pla
.8d00	20 d6 a0	jsr $a0d6			jsr 	ConvertInt16 				; convert XA to string
.8d03	20 18 8d	jsr $8d18			jsr 	PrintStringXA 				; and print it.
.8d06					_EHCREnd:
.8d06	a9 0d		lda #$0d			lda 	#13 						; new line
.8d08	20 ca a7	jsr $a7ca			jsr 	EXTPrintCharacter
.8d0b					_EHEnd:
.8d0b	4c 69 84	jmp $8469			jmp 	WarmStart
>8d0e	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8d16	20 00
.8d18					PrintStringXA:
.8d18	5a		phy				phy
.8d19	86 37		stx $37				stx 	zTemp0+1
.8d1b	85 36		sta $36				sta 	zTemp0
.8d1d	a0 00		ldy #$00			ldy 	#0
.8d1f					_PSXALoop:
.8d1f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d21	f0 06		beq $8d29			beq 	_PSXAExit
.8d23	20 ca a7	jsr $a7ca			jsr 	EXTPrintCharacter
.8d26	c8		iny				iny
.8d27	80 f6		bra $8d1f			bra 	_PSXALoop
.8d29					_PSXAExit:
.8d29	7a		ply				ply
.8d2a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8d2b					UnaryTrue:
.8d2b	fa		plx				plx
.8d2c					ReturnTrue:
.8d2c	a9 01		lda #$01			lda 	#1  						; set to 1
.8d2e	20 14 98	jsr $9814			jsr 	NSMSetByte
.8d31	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8d33	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d36	60		rts				rts
.8d37					UnaryFalse:
.8d37	fa		plx				plx
.8d38					ReturnFalse:
.8d38	4c 12 98	jmp $9812			jmp 	NSMSetZero 					; set it all to zero
.8d3b					BinaryCompareEqual:
.8d3b	fa		plx				plx
.8d3c	20 77 8d	jsr $8d77			jsr 	CompareBaseCode
.8d3f	c9 00		cmp #$00			cmp 	#0
.8d41	f0 e9		beq $8d2c			beq 	ReturnTrue
.8d43	80 f3		bra $8d38			bra 	ReturnFalse
.8d45					BinaryCompareLess:
.8d45	fa		plx				plx
.8d46	20 77 8d	jsr $8d77			jsr 	CompareBaseCode
.8d49	c9 ff		cmp #$ff			cmp 	#$FF
.8d4b	f0 df		beq $8d2c			beq 	ReturnTrue
.8d4d	80 e9		bra $8d38			bra 	ReturnFalse
.8d4f					BinaryCompareGreater:
.8d4f	fa		plx				plx
.8d50	20 77 8d	jsr $8d77			jsr 	CompareBaseCode
.8d53	c9 01		cmp #$01			cmp 	#1
.8d55	f0 d5		beq $8d2c			beq 	ReturnTrue
.8d57	80 df		bra $8d38			bra 	ReturnFalse
.8d59					BinaryCompareNotEqual:
.8d59	fa		plx				plx
.8d5a	20 77 8d	jsr $8d77			jsr 	CompareBaseCode
.8d5d	c9 00		cmp #$00			cmp 	#0
.8d5f	d0 cb		bne $8d2c			bne 	ReturnTrue
.8d61	80 d5		bra $8d38			bra 	ReturnFalse
.8d63					BinaryCompareLessEqual:
.8d63	fa		plx				plx
.8d64	20 77 8d	jsr $8d77			jsr 	CompareBaseCode
.8d67	c9 01		cmp #$01			cmp 	#1
.8d69	d0 c1		bne $8d2c			bne 	ReturnTrue
.8d6b	80 cb		bra $8d38			bra 	ReturnFalse
.8d6d					BinaryCompareGreaterEqual:
.8d6d	fa		plx				plx
.8d6e	20 77 8d	jsr $8d77			jsr 	CompareBaseCode
.8d71	c9 ff		cmp #$ff			cmp 	#$FF
.8d73	d0 b7		bne $8d2c			bne 	ReturnTrue
.8d75	80 c1		bra $8d38			bra 	ReturnFalse
.8d77					CompareBaseCode:
.8d77	20 d8 91	jsr $91d8			jsr 	DereferenceTopTwo 			; make both values if references.
.8d7a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8d7d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d80	29 10		and #$10			and 	#NSTString
.8d82	d0 40		bne $8dc4			bne 	_CBCString
.8d84	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8d87	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d8a	d0 3b		bne $8dc7			bne 	_CBCFloat
.8d8c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8d8f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d92	29 08		and #$08			and 	#NSTFloat
.8d94	d0 31		bne $8dc7			bne 	_CBCFloat
.8d96	20 ca 8d	jsr $8dca			jsr 	CompareFixMinusZero
.8d99	e8		inx				inx
.8d9a	20 ca 8d	jsr $8dca			jsr 	CompareFixMinusZero
.8d9d	ca		dex				dex
.8d9e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8da1	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8da4	10 0b		bpl $8db1			bpl 	_CDCSameSign
.8da6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8da9	30 16		bmi $8dc1			bmi 	_CBCLess 					; return $FF
.8dab					_CBCGreater:
.8dab	a9 01		lda #$01			lda 	#1
.8dad	60		rts				rts
.8dae					_CBCEqual:
.8dae	a9 00		lda #$00			lda 	#0
.8db0	60		rts				rts
.8db1					_CDCSameSign:
.8db1	20 da 8e	jsr $8eda			jsr 	SubTopTwoStack 				; unsigned subtract
.8db4	20 42 98	jsr $9842			jsr 	NSMIsZero 					; or the mantissa together
.8db7	f0 f5		beq $8dae			beq 	_CBCEqual 					; -0 == 0
.8db9	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8dbc	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8dbf	10 ea		bpl $8dab			bpl 	_CBCGreater
.8dc1					_CBCLess:
.8dc1	a9 ff		lda #$ff			lda 	#$FF
.8dc3	60		rts				rts
.8dc4					_CBCString:
.8dc4	4c 30 8e	jmp $8e30			jmp 	CompareStrings
.8dc7					_CBCFloat:
.8dc7	4c d2 a1	jmp $a1d2			jmp 	CompareFloat
.8dca					CompareFixMinusZero:
.8dca	20 42 98	jsr $9842			jsr 	NSMIsZero
.8dcd	d0 03		bne $8dd2			bne 	_CFXMZNotZero
.8dcf	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8dd2					_CFXMZNotZero:
.8dd2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8dd3					StringConcat:
.8dd3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8dd6	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8dd9	29 18		and #$18			and 	#NSBTypeMask
.8ddb	c9 10		cmp #$10			cmp 	#NSTString
.8ddd	d0 4e		bne $8e2d			bne		_SCType
.8ddf	64 38		stz $38				stz 	zTemp1 						; counting total length
.8de1	e8		inx				inx
.8de2	20 00 8e	jsr $8e00			jsr 	_SCSetupZ0 					; setup for second
.8de5	20 0b 8e	jsr $8e0b			jsr 	_SCLengthZ0 				; length for second
.8de8	ca		dex				dex
.8de9	20 00 8e	jsr $8e00			jsr 	_SCSetupZ0 					; setup for first
.8dec	20 0b 8e	jsr $8e0b			jsr 	_SCLengthZ0 				; length for first
.8def	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8df1	20 7d a7	jsr $a77d			jsr 	StringTempAllocate
.8df4	20 1e 8e	jsr $8e1e			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8df7	e8		inx				inx
.8df8	20 00 8e	jsr $8e00			jsr 	_SCSetupZ0 					; copy second out
.8dfb	20 1e 8e	jsr $8e1e			jsr 	_SCCopy
.8dfe	ca		dex				dex
.8dff	60		rts				rts
.8e00					_SCSetupZ0:
.8e00	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8e03	85 36		sta $36				sta 	zTemp0
.8e05	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8e08	85 37		sta $37				sta 	zTemp0+1
.8e0a	60		rts				rts
.8e0b					_SCLengthZ0:
.8e0b	5a		phy				phy
.8e0c	a0 00		ldy #$00			ldy 	#0
.8e0e					_SCLenLoop:
.8e0e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e10	f0 0a		beq $8e1c			beq 	_SCLExit
.8e12	c8		iny				iny
.8e13	e6 38		inc $38				inc 	zTemp1
.8e15	10 f7		bpl $8e0e			bpl		_SCLenLoop
.8e17	a9 09		lda #$09		lda	#9
.8e19	4c bf 8c	jmp $8cbf		jmp	ErrorHandler
.8e1c					_SCLExit:
.8e1c	7a		ply				ply
.8e1d	60		rts				rts
.8e1e					_SCCopy:
.8e1e	5a		phy				phy
.8e1f	a0 00		ldy #$00			ldy 	#0
.8e21					_SCCopyLoop:
.8e21	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e23	f0 06		beq $8e2b			beq 	_SCCExit
.8e25	20 bb a7	jsr $a7bb			jsr 	StringTempWrite
.8e28	c8		iny				iny
.8e29	80 f6		bra $8e21			bra 	_SCCopyLoop
.8e2b					_SCCExit:
.8e2b	7a		ply				ply
.8e2c	60		rts				rts
.8e2d					_SCType:
.8e2d	4c 66 a5	jmp $a566			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9f93					IntegerDivide:
.9f93	fa		plx				plx
.9f94	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9f97	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9f9a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9f9b	0a		asl a				asl 	a
.9f9c	10 05		bpl $9fa3			bpl 	_NotRef
.9f9e	48		pha				pha
.9f9f	20 d8 91	jsr $91d8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9fa2	68		pla				pla
.9fa3					_NotRef:
.9fa3	0a		asl a				asl 	a
.9fa4	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9fa6	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9fa9	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9fac	f0 03		beq $9fb1			beq 	_IntegerCode 				; if clear, then we have two integers
.9fae	4c 66 a5	jmp $a566			jmp 	TypeError 					; anything else, type mismatch.
.9fb1					_IntegerCode:
.9fb1	20 d3 9f	jsr $9fd3			jsr 	CheckDivideZero 			; do div zero check
.9fb4	20 0b a0	jsr $a00b			jsr 	Int32Divide 				; do the division
.9fb7	20 c8 a0	jsr $a0c8			jsr 	CalculateSign 				; calculate result sign
.9fba					NSMCopyPlusTwoToZero:
.9fba	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9fbd	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9fc0	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9fc3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9fc6	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9fc9	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9fcc	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9fcf	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9fd2	60		rts				rts
.9fd3					CheckDivideZero:
.9fd3	e8		inx				inx
.9fd4	20 42 98	jsr $9842			jsr 	NSMIsZero
.9fd7	f0 02		beq $9fdb			beq 	_CDVError
.9fd9	ca		dex				dex
.9fda	60		rts				rts
.9fdb					_CDVError:
.9fdb	a9 03		lda #$03		lda	#3
.9fdd	4c bf 8c	jmp $8cbf		jmp	ErrorHandler
.9fe0					IntegerModulus:
.9fe0	fa		plx				plx
.9fe1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9fe4	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9fe7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9fe8	0a		asl a				asl 	a
.9fe9	10 05		bpl $9ff0			bpl 	_NotRef
.9feb	48		pha				pha
.9fec	20 d8 91	jsr $91d8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9fef	68		pla				pla
.9ff0					_NotRef:
.9ff0	0a		asl a				asl 	a
.9ff1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ff3	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ff6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9ff9	f0 03		beq $9ffe			beq 	_IntegerCode 				; if clear, then we have two integers
.9ffb	4c 66 a5	jmp $a566			jmp 	TypeError 					; anything else, type mismatch.
.9ffe					_IntegerCode:
.9ffe	20 d3 9f	jsr $9fd3			jsr 	CheckDivideZero 			; do div zero check
.a001	20 0b a0	jsr $a00b			jsr 	Int32Divide 				; do the division
.a004	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a007	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.a00a	60		rts				rts
.a00b					Int32Divide:
.a00b	48		pha				pha 								; save AXY
.a00c	5a		phy				phy
.a00d	20 e9 97	jsr $97e9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a010	20 0e 98	jsr $980e			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a013	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a015					_I32DivideLoop:
.a015	e8		inx				inx
.a016	e8		inx				inx
.a017	20 27 98	jsr $9827			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a01a	ca		dex				dex
.a01b	ca		dex				dex
.a01c	20 28 98	jsr $9828			jsr 	NSMRotateLeft
.a01f	20 4b a0	jsr $a04b			jsr 	DivideCheckSubtract 		; check if subtract possible
.a022	90 03		bcc $a027			bcc 	_I32DivideNoCarryIn
.a024	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a027					_I32DivideNoCarryIn:
.a027	88		dey				dey 								; loop round till division completed.
.a028	d0 eb		bne $a015			bne 	_I32DivideLoop
.a02a	7a		ply				ply 								; restore AXY and exit
.a02b	68		pla				pla
.a02c	60		rts				rts
.a02d					Int32ShiftDivide:
.a02d	48		pha				pha 								; save AY
.a02e	5a		phy				phy
.a02f	e8		inx				inx 								; clear S[X+2]
.a030	e8		inx				inx
.a031	20 12 98	jsr $9812			jsr 	NSMSetZero
.a034	ca		dex				dex
.a035	ca		dex				dex
.a036	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a038					_I32SDLoop:
.a038	20 4b a0	jsr $a04b			jsr 	DivideCheckSubtract 		; check if subtract possible
.a03b	e8		inx				inx
.a03c	e8		inx				inx
.a03d	20 28 98	jsr $9828			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a040	ca		dex				dex
.a041	ca		dex				dex
.a042	20 28 98	jsr $9828			jsr 	NSMRotateLeft
.a045	88		dey				dey 	 							; do 31 times
.a046	d0 f0		bne $a038			bne 	_I32SDLoop
.a048	7a		ply				ply 								; restore AY and exit
.a049	68		pla				pla
.a04a	60		rts				rts
.a04b					DivideCheckSubtract:
.a04b	20 da 8e	jsr $8eda			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a04e	b0 04		bcs $a054			bcs 	_DCSExit 					; if carry set, then could do, exit
.a050	20 b4 8e	jsr $8eb4			jsr 	AddTopTwoStack 				; add it back in
.a053	18		clc				clc 								; and return False
.a054					_DCSExit:
.a054	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a055					MulInteger:
.a055	fa		plx				plx
.a056	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.a059	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a05c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a05d	0a		asl a				asl 	a
.a05e	10 05		bpl $a065			bpl 	_NotRef
.a060	48		pha				pha
.a061	20 d8 91	jsr $91d8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a064	68		pla				pla
.a065					_NotRef:
.a065	0a		asl a				asl 	a 							; put MSB of type into A:7
.a066	30 0b		bmi $a073			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a068	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a06b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.a06e	f0 06		beq $a076			beq 	_IntegerCode 				; if clear, then we have two integers
.a070	4c a9 a2	jmp $a2a9			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a073					_StringData:
.a073	4c 70 a5	jmp $a570			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a076					_IntegerCode:
.a076	20 83 a0	jsr $a083			jsr 	MultiplyShort
.a079	c9 00		cmp #$00			cmp 	#0
.a07b	f0 05		beq $a082			beq 	_MIExit
.a07d	a9 04		lda #$04		lda	#4
.a07f	4c bf 8c	jmp $8cbf		jmp	ErrorHandler
.a082					_MIExit:
.a082	60		rts				rts
.a083					MultiplyShort:
.a083	5a		phy				phy 								; save Y
.a084	20 e9 97	jsr $97e9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a087	20 0e 98	jsr $980e			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a08a	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a08c					_I32MLoop:
.a08c	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a08f	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.a092	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.a095	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.a098	f0 28		beq $a0c2			beq 	_I32MExit 					; exit if zero
.a09a	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a09d	29 01		and #$01			and 	#1
.a09f	f0 0e		beq $a0af			beq 	_I32MNoAdd
.a0a1	20 b4 8e	jsr $8eb4			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a0a4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a0a7	10 06		bpl $a0af			bpl 	_I32MNoAdd
.a0a9					_I32ShiftRight:
.a0a9	20 35 98	jsr $9835			jsr 	NSMShiftRight 				; shift S[X] right
.a0ac	c8		iny				iny 								; increment shift count
.a0ad	80 0a		bra $a0b9			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a0af					_I32MNoAdd:
.a0af	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a0b2	70 f5		bvs $a0a9			bvs 	_I32ShiftRight 				; instead.
.a0b4	e8		inx				inx
.a0b5	20 27 98	jsr $9827			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a0b8	ca		dex				dex
.a0b9					_I32MShiftUpper:
.a0b9	e8		inx				inx 								; shift S[X+2] right
.a0ba	e8		inx				inx
.a0bb	20 35 98	jsr $9835			jsr 	NSMShiftRight
.a0be	ca		dex				dex
.a0bf	ca		dex				dex
.a0c0	80 ca		bra $a08c			bra 	_I32MLoop 					; try again.
.a0c2					_I32MExit:
.a0c2	20 c8 a0	jsr $a0c8			jsr 	CalculateSign
.a0c5	98		tya				tya 								; shift in A
.a0c6	7a		ply				ply 								; restore Y and exit
.a0c7	60		rts				rts
.a0c8					CalculateSign:
.a0c8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a0cb	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.a0ce	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a0d1	0a		asl a				asl 	a 							; shift bit 7 into carry
.a0d2	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.a0d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8e30					CompareStrings:
.8e30	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8e33	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8e36	29 10		and #$10			and 	#NSBIsString
.8e38	f0 2c		beq $8e66			beq 	_CSTypeError
.8e3a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8e3d	85 36		sta $36				sta 	zTemp0
.8e3f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8e42	85 37		sta $37				sta 	zTemp0+1
.8e44	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8e47	85 38		sta $38				sta 	zTemp1
.8e49	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8e4c	85 39		sta $39				sta 	zTemp1+1
.8e4e	5a		phy				phy 								; save Y so we can access strings
.8e4f	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8e51					_CSLoop:
.8e51	c8		iny				iny
.8e52	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8e54	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8e56	d0 06		bne $8e5e			bne 	_CSDifferent
.8e58	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8e5a	d0 f5		bne $8e51			bne 	_CSLoop 					; still comparing
.8e5c					_CSExit:
.8e5c	7a		ply				ply 								; reached end, return zero in A from EOS
.8e5d	60		rts				rts
.8e5e					_CSDifferent:
.8e5e	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8e60	90 fa		bcc $8e5c			bcc		_CSExit
.8e62	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8e64	80 f6		bra $8e5c			bra 	_CSExit
.8e66					_CSTypeError:
.8e66	4c 66 a5	jmp $a566			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8e69					ShiftLeft:
.8e69	38		sec				sec
.8e6a	80 01		bra $8e6d			bra 	ShiftMain
.8e6c					ShiftRight:
.8e6c	18		clc				clc
.8e6d					ShiftMain:
.8e6d	fa		plx				plx 								; restore X
.8e6e	08		php				php 								; save direction
.8e6f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e72	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e75	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e76	0a		asl a				asl 	a
.8e77	10 05		bpl $8e7e			bpl 	_NotRef
.8e79	48		pha				pha
.8e7a	20 d8 91	jsr $91d8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e7d	68		pla				pla
.8e7e					_NotRef:
.8e7e	0a		asl a				asl 	a
.8e7f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e81	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e84	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e87	f0 03		beq $8e8c			beq 	_IntegerCode 				; if clear, then we have two integers
.8e89	4c 66 a5	jmp $a566			jmp 	TypeError 					; anything else, type mismatch.
.8e8c					_IntegerCode:
.8e8c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8e8f	29 e0		and #$e0			and 	#$E0
.8e91	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8e94	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8e97	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8e9a	d0 13		bne $8eaf			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8e9c					_SMLoop:
.8e9c	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8e9f	30 11		bmi $8eb2			bmi 	_SMExit 					; exit if done.
.8ea1	28		plp				plp 								; restore direcition setting
.8ea2	08		php				php
.8ea3	90 05		bcc $8eaa			bcc 	_SMRight
.8ea5	20 27 98	jsr $9827			jsr 	NSMShiftLeft 				; shift left if CS
.8ea8	80 f2		bra $8e9c			bra 	_SMLoop
.8eaa					_SMRight:
.8eaa	20 35 98	jsr $9835			jsr 	NSMShiftRight 				; shift right if CC
.8ead	80 ed		bra $8e9c			bra 	_SMLoop
.8eaf					_SMExit0:
.8eaf	20 12 98	jsr $9812			jsr 	NSMSetZero 					; return zero.
.8eb2					_SMExit:
.8eb2	28		plp				plp 								; throw direction
.8eb3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8eb4					AddTopTwoStack:
.8eb4	18		clc				clc
.8eb5	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8eb8	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8ebb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ebe	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8ec1	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8ec4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ec7	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8eca	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8ecd	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ed0	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8ed3	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8ed6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ed9	60		rts				rts
.8eda					SubTopTwoStack:
.8eda	38		sec				sec
.8edb	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8ede	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8ee1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ee4	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8ee7	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8eea	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8eed	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8ef0	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8ef3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ef6	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8ef9	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8efc	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8eff	60		rts				rts
.8f00					AddInteger:
.8f00	fa		plx				plx
.8f01	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f04	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f07	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f08	0a		asl a				asl 	a
.8f09	10 05		bpl $8f10			bpl 	_NotRef
.8f0b	48		pha				pha
.8f0c	20 d8 91	jsr $91d8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f0f	68		pla				pla
.8f10					_NotRef:
.8f10	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f11	30 0b		bmi $8f1e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f13	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f16	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f19	f0 06		beq $8f21			beq 	_IntegerCode 				; if clear, then we have two integers
.8f1b	4c 31 a1	jmp $a131			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8f1e					_StringData:
.8f1e	4c d3 8d	jmp $8dd3			jmp 	StringConcat							; at least one string - don't know both are strings.
.8f21					_IntegerCode:
.8f21					AddCode:
.8f21	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8f24	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8f27	10 8b		bpl $8eb4			bpl 	AddTopTwoStack
.8f29	20 da 8e	jsr $8eda			jsr 	SubTopTwoStack 				; do a physical subtraction
.8f2c	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8f2f	10 09		bpl $8f3a			bpl 	_AddExit
.8f31	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8f34	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f37	20 c7 97	jsr $97c7			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8f3a					_AddExit:
.8f3a	60		rts				rts
.8f3b					SubInteger:
.8f3b	fa		plx				plx
.8f3c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f3f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f42	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f43	0a		asl a				asl 	a
.8f44	10 05		bpl $8f4b			bpl 	_NotRef
.8f46	48		pha				pha
.8f47	20 d8 91	jsr $91d8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f4a	68		pla				pla
.8f4b					_NotRef:
.8f4b	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f4c	30 0b		bmi $8f59			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f4e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f51	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f54	f0 06		beq $8f5c			beq 	_IntegerCode 				; if clear, then we have two integers
.8f56	4c 36 a1	jmp $a136			jmp 	FloatingPointSub 							; otherwise at least one float.
.8f59					_StringData:
.8f59	4c 70 a5	jmp $a570			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8f5c					_IntegerCode:
.8f5c	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8f5f	49 80		eor #$80			eor 	#$80
.8f61	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8f64	80 bb		bra $8f21			bra 	AddCode 					; and do the same code as add.
.8f66					AndInteger:
.8f66	fa		plx				plx
.8f67	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f6a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f6d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f6e	0a		asl a				asl 	a
.8f6f	10 05		bpl $8f76			bpl 	_NotRef
.8f71	48		pha				pha
.8f72	20 d8 91	jsr $91d8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f75	68		pla				pla
.8f76					_NotRef:
.8f76	0a		asl a				asl 	a
.8f77	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f79	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f7c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f7f	f0 03		beq $8f84			beq 	_IntegerCode 				; if clear, then we have two integers
.8f81	4c 66 a5	jmp $a566			jmp 	TypeError 					; anything else, type mismatch.
.8f84					_IntegerCode:
.8f84	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8f87	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8f8a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f8d	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8f90	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8f93	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f96	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f99	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8f9c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f9f	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8fa2	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8fa5	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8fa8	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8fab	60		rts				rts
.8fac					OraInteger:
.8fac	fa		plx				plx
.8fad	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8fb0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fb3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8fb4	0a		asl a				asl 	a
.8fb5	10 05		bpl $8fbc			bpl 	_NotRef
.8fb7	48		pha				pha
.8fb8	20 d8 91	jsr $91d8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8fbb	68		pla				pla
.8fbc					_NotRef:
.8fbc	0a		asl a				asl 	a
.8fbd	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8fbf	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8fc2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8fc5	f0 03		beq $8fca			beq 	_IntegerCode 				; if clear, then we have two integers
.8fc7	4c 66 a5	jmp $a566			jmp 	TypeError 					; anything else, type mismatch.
.8fca					_IntegerCode:
.8fca	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8fcd	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8fd0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8fd3	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8fd6	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8fd9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8fdc	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8fdf	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8fe2	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8fe5	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8fe8	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8feb	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8fee	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8ff1	60		rts				rts
.8ff2					EorInteger:
.8ff2	fa		plx				plx
.8ff3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ff6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ff9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ffa	0a		asl a				asl 	a
.8ffb	10 05		bpl $9002			bpl 	_NotRef
.8ffd	48		pha				pha
.8ffe	20 d8 91	jsr $91d8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9001	68		pla				pla
.9002					_NotRef:
.9002	0a		asl a				asl 	a
.9003	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9005	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9008	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.900b	f0 03		beq $9010			beq 	_IntegerCode 				; if clear, then we have two integers
.900d	4c 66 a5	jmp $a566			jmp 	TypeError 					; anything else, type mismatch.
.9010					_IntegerCode:
.9010	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.9013	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.9016	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9019	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.901c	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.901f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9022	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.9025	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.9028	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.902b	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.902e	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.9031	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9034	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.9037	60		rts				rts
.9038					WordIndirect:
.9038	fa		plx				plx
.9039	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.903c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.903f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9040	0a		asl a				asl 	a
.9041	10 05		bpl $9048			bpl 	_NotRef
.9043	48		pha				pha
.9044	20 d8 91	jsr $91d8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9047	68		pla				pla
.9048					_NotRef:
.9048	0a		asl a				asl 	a
.9049	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.904b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.904e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9051	f0 03		beq $9056			beq 	_IntegerCode 				; if clear, then we have two integers
.9053	4c 66 a5	jmp $a566			jmp 	TypeError 					; anything else, type mismatch.
.9056					_IntegerCode:
.9056	20 21 8f	jsr $8f21			jsr 	AddCode 					; add the two values
.9059	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.905b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.905e	60		rts				rts
.905f					ByteIndirect:
.905f	fa		plx				plx
.9060	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9063	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9066	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9067	0a		asl a				asl 	a
.9068	10 05		bpl $906f			bpl 	_NotRef
.906a	48		pha				pha
.906b	20 d8 91	jsr $91d8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.906e	68		pla				pla
.906f					_NotRef:
.906f	0a		asl a				asl 	a
.9070	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9072	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9075	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9078	f0 03		beq $907d			beq 	_IntegerCode 				; if clear, then we have two integers
.907a	4c 66 a5	jmp $a566			jmp 	TypeError 					; anything else, type mismatch.
.907d					_IntegerCode:
.907d	20 21 8f	jsr $8f21			jsr 	AddCode 					; add the two values
.9080	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9082	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9085	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a0d6					ConvertInt16:
.a0d6	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.a0d9	8e 10 06	stx $0610			stx 	NSMantissa1
.a0dc	9c 18 06	stz $0618			stz 	NSMantissa2
.a0df	9c 20 06	stz $0620			stz 	NSMantissa3
.a0e2	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.a0e5	a2 00		ldx #$00			ldx 	#0 							; stack level
.a0e7	a9 0a		lda #$0a			lda 	#10 						; base
.a0e9	80 00		bra $a0eb			bra 	ConvertInt32
.a0eb					ConvertInt32:
.a0eb	5a		phy				phy
.a0ec	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a0ee	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.a0f1	10 08		bpl $a0fb			bpl 	_CI32NotNeg
.a0f3	48		pha				pha
.a0f4	a9 2d		lda #$2d			lda 	#'-'
.a0f6	99 76 08	sta $0876,y			sta 	NumberBuffer,y
.a0f9	c8		iny				iny
.a0fa	68		pla				pla
.a0fb					_CI32NotNeg:
.a0fb	20 09 a1	jsr $a109			jsr 	_CI32DivideConvert 			; recursive conversion
.a0fe	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a100	99 76 08	sta $0876,y			sta 	NumberBuffer,y
.a103	7a		ply				ply
.a104	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.a106	a9 76		lda #$76			lda 	#NumberBuffer & $FF
.a108	60		rts				rts
.a109					_CI32DivideConvert:
.a109	e8		inx				inx 								; write to next slot up
.a10a	20 14 98	jsr $9814			jsr 	NSMSetByte
.a10d	ca		dex				dex
.a10e	20 0b a0	jsr $a00b			jsr 	Int32Divide 				; divide
.a111	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.a114	48		pha				pha
.a115	20 ba 9f	jsr $9fba			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a118	20 42 98	jsr $9842			jsr 	NSMIsZero 					; is it zero ?
.a11b	f0 06		beq $a123			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a11d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a120	20 09 a1	jsr $a109			jsr 	_CI32DivideConvert 			; and recusrively call.
.a123					_CI32NoRecurse:
.a123	68		pla				pla 								; remainder
.a124	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a126	90 02		bcc $a12a			bcc 	_CI32NotHex
.a128	69 26		adc #$26			adc 	#6+32
.a12a					_CI32NotHex:
.a12a	69 30		adc #$30			adc 	#48
.a12c	99 76 08	sta $0876,y			sta 	NumberBuffer,y 				; write out and exit
.a12f	c8		iny				iny
.a130	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9086					PrecedenceLevel:
>9086	04					.byte	 4	; $00 <<
>9087	02					.byte	 2	; $01 <=
>9088	02					.byte	 2	; $02 <>
>9089	00					.byte	 0	; $03 !!3
>908a	00					.byte	 0	; $04 ><
>908b	02					.byte	 2	; $05 >=
>908c	04					.byte	 4	; $06 >>
>908d	00					.byte	 0	; $07 !!7
>908e	00					.byte	 0	; $08 !!8
>908f	00					.byte	 0	; $09 !!9
>9090	00					.byte	 0	; $0a !!10
>9091	00					.byte	 0	; $0b !!11
>9092	00					.byte	 0	; $0c !!12
>9093	00					.byte	 0	; $0d !!13
>9094	00					.byte	 0	; $0e !!14
>9095	00					.byte	 0	; $0f !!15
>9096	00					.byte	 0	; $10 @
>9097	00					.byte	 0	; $11 !!17
>9098	00					.byte	 0	; $12 !!18
>9099	00					.byte	 0	; $13 [
>909a	04					.byte	 4	; $14 \
>909b	00					.byte	 0	; $15 ]
>909c	01					.byte	 1	; $16 ^
>909d	00					.byte	 0	; $17 _
>909e	00					.byte	 0	; $18 `
>909f	00					.byte	 0	; $19 !!25
>90a0	00					.byte	 0	; $1a !!26
>90a1	00					.byte	 0	; $1b {
>90a2	01					.byte	 1	; $1c |
>90a3	00					.byte	 0	; $1d }
>90a4	00					.byte	 0	; $1e ~
>90a5	00					.byte	 0	; $1f [7m<7F>[m
>90a6	00					.byte	 0	; $20
>90a7	05					.byte	 5	; $21 !
>90a8	00					.byte	 0	; $22 "
>90a9	00					.byte	 0	; $23 #
>90aa	05					.byte	 5	; $24 $
>90ab	04					.byte	 4	; $25 %
>90ac	01					.byte	 1	; $26 &
>90ad	00					.byte	 0	; $27 '
>90ae	00					.byte	 0	; $28 (
>90af	00					.byte	 0	; $29 )
>90b0	04					.byte	 4	; $2a *
>90b1	03					.byte	 3	; $2b +
>90b2	00					.byte	 0	; $2c ,
>90b3	03					.byte	 3	; $2d -
>90b4	00					.byte	 0	; $2e .
>90b5	04					.byte	 4	; $2f /
>90b6	00					.byte	 0	; $30 0
>90b7	00					.byte	 0	; $31 1
>90b8	00					.byte	 0	; $32 2
>90b9	00					.byte	 0	; $33 3
>90ba	00					.byte	 0	; $34 4
>90bb	00					.byte	 0	; $35 5
>90bc	00					.byte	 0	; $36 6
>90bd	00					.byte	 0	; $37 7
>90be	00					.byte	 0	; $38 8
>90bf	00					.byte	 0	; $39 9
>90c0	00					.byte	 0	; $3a :
>90c1	00					.byte	 0	; $3b ;
>90c2	02					.byte	 2	; $3c <
>90c3	02					.byte	 2	; $3d =
>90c4	02					.byte	 2	; $3e >
>90c5	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.90c6					EvaluateExpressionAt0:
.90c6	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.90c8					EvaluateExpression:
.90c8	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.90ca					EvaluateExpressionAtPrecedence:
.90ca	48		pha				pha 								; save precedence level
.90cb	20 99 93	jsr $9399			jsr 	EvaluateTerm 				; evaluate term into level X.
.90ce	68		pla				pla 								; restore precedence level.
.90cf					_EXPRLoop:
.90cf	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.90d1	b1 30		lda ($30),y			lda 	(codePtr),y
.90d3	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.90d5	b0 25		bcs $90fc			bcs 	_EXPRExit
.90d7	da		phx				phx 								; read the operator precedence
.90d8	aa		tax				tax
.90d9	bd 86 90	lda $9086,x			lda 	PrecedenceLevel,x
.90dc	fa		plx				plx
.90dd	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.90df	f0 1b		beq $90fc			beq 	_EXPRExit
.90e1	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.90e3	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.90e5	c5 37		cmp $37				cmp 	zTemp0+1
.90e7	b0 13		bcs $90fc			bcs		_EXPRExit 					; if current >= operator exit
.90e9	48		pha				pha 								; save current precedence.
.90ea	b1 30		lda ($30),y			lda 	(codePtr),y
.90ec	c8		iny				iny
.90ed	48		pha				pha
.90ee	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.90f0	e8		inx				inx 								; work out the right hand side.
.90f1	20 ca 90	jsr $90ca			jsr 	EvaluateExpressionAtPrecedence
.90f4	ca		dex				dex
.90f5	68		pla				pla 								; get operator, call the code.
.90f6	20 ff 90	jsr $90ff			jsr 	_EXPRCaller
.90f9	68		pla				pla 								; restore precedence level
.90fa	80 d3		bra $90cf			bra 	_EXPRLoop 					; and go round.
.90fc					_EXPRExit:
.90fc	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.90fe	60		rts				rts
.90ff					_EXPRCaller:
.90ff	da		phx				phx 								; save on stack, first thing is to restore it
.9100	0a		asl a				asl 	a 							; double so can use vectors into X
.9101	aa		tax				tax
.9102	7c 7e 80	jmp ($807e,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a131					FloatingPointAdd:
.a131	20 d2 a2	jsr $a2d2			jsr 	FloatPrepare 				; prepare for floats
.a134	80 0b		bra $a141			bra 	FloatAdd
.a136					FloatingPointSub:
.a136	20 d2 a2	jsr $a2d2			jsr 	FloatPrepare 				; prepare for floats
.a139					FloatSubtract:
.a139	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.a13c	49 80		eor #$80			eor 	#$80
.a13e	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.a141					FloatAdd:
.a141	48		pha				pha
.a142	5a		phy				phy
.a143	20 e3 a2	jsr $a2e3			jsr 	NSNormalise 				; normalise S[X]
.a146	f0 54		beq $a19c			beq 	_FAReturn1
.a148	e8		inx				inx 								; normalise S[X+1]
.a149	20 e3 a2	jsr $a2e3			jsr 	NSNormalise
.a14c	ca		dex				dex
.a14d	c9 00		cmp #$00			cmp 	#0
.a14f	f0 6f		beq $a1c0			beq 	_FAExit 					; if so, just return A
.a151	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.a154	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.a157	f0 1b		beq $a174			beq 	_FAExponentsEqual
.a159	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.a15c	a8		tay				tay
.a15d	38		sec				sec 								; do a signed comparison of the exponents.
.a15e	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a161	50 02		bvc $a165			bvc 	_FANoSignedChange
.a163	49 80		eor #$80			eor 	#$80
.a165					_FANoSignedChange:
.a165	29 80		and #$80			and 	#$80
.a167	10 03		bpl $a16c			bpl 	_FAHaveMax
.a169	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.a16c					_FAHaveMax:
.a16c	20 c3 a1	jsr $a1c3			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a16f	e8		inx				inx
.a170	20 c3 a1	jsr $a1c3			jsr 	_FAShiftToExponent
.a173	ca		dex				dex
.a174					_FAExponentsEqual:
.a174	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.a177	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a17a	30 10		bmi $a18c			bmi 	_FADifferentSigns
.a17c	20 b4 8e	jsr $8eb4			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a17f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a182	10 3c		bpl $a1c0			bpl 	_FAExit 					; if no, we are done.
.a184	20 35 98	jsr $9835			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a187	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.a18a	80 34		bra $a1c0			bra 	_FAExit
.a18c					_FADifferentSigns:
.a18c	20 da 8e	jsr $8eda			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a18f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.a192	10 2c		bpl $a1c0			bpl 	_FAExit 					; if no, we are done.
.a194	20 be 97	jsr $97be			jsr 	NSMNegate 					; netate result
.a197	20 c7 97	jsr $97c7			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a19a	80 24		bra $a1c0			bra 	_FAExit
.a19c					_FAReturn1:
.a19c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.a19f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a1a2	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.a1a5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a1a8	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.a1ab	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a1ae	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.a1b1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a1b4	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.a1b7	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a1ba	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.a1bd	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a1c0					_FAExit:
.a1c0	7a		ply				ply
.a1c1	68		pla				pla
.a1c2	60		rts				rts
.a1c3					_FAShiftToExponent:
.a1c3					_FAShiftToExponent2:
.a1c3	98		tya				tya 								; compare Y to exponent
.a1c4	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a1c7	f0 08		beq $a1d1			beq 	_FASEExit 					; exit if so.
.a1c9	20 35 98	jsr $9835			jsr 	NSMShiftRight	 			; shift the mantissa right
.a1cc	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.a1cf	80 f2		bra $a1c3			bra 	_FAShiftToExponent2
.a1d1					_FASEExit:
.a1d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a1d2					CompareFloat:
.a1d2	20 39 a1	jsr $a139			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a1d5	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a1d8	29 f8		and #$f8			and 	#$F8
.a1da	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.a1dd	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.a1e0	f0 09		beq $a1eb			beq 	_FCExit 					; zero, so approximately identical
.a1e2	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a1e4	3c 00 06	bit $0600,x			bit 	NSStatus,x
.a1e7	10 02		bpl $a1eb			bpl 	_FCExit
.a1e9					_FCNegative:
.a1e9	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a1eb					_FCExit:
.a1eb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a1ec					FDivideCommand:
.a1ec	fa		plx				plx	 								; restore stack position
.a1ed	20 d2 a2	jsr $a2d2			jsr 	FloatPrepare 				; prepare for floats
.a1f0					FloatDivide:
.a1f0	48		pha				pha
.a1f1	e8		inx				inx
.a1f2	20 e3 a2	jsr $a2e3			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a1f5	ca		dex				dex
.a1f6	c9 00		cmp #$00			cmp 	#0
.a1f8	f0 20		beq $a21a			beq 	_FDZero
.a1fa	20 e3 a2	jsr $a2e3			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a1fd	f0 19		beq $a218			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a1ff	20 2d a0	jsr $a02d			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a202	20 ba 9f	jsr $9fba			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a205	20 e3 a2	jsr $a2e3			jsr		NSNormalise 				; renormalise
.a208	20 c8 a0	jsr $a0c8			jsr 	CalculateSign 				; calculate result sign
.a20b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.a20e	38		sec				sec
.a20f	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a212	38		sec				sec
.a213	e9 1e		sbc #$1e			sbc 	#30
.a215	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a218					_FDExit:
.a218	68		pla				pla
.a219	60		rts				rts
.a21a					_FDZero:
.a21a	a9 03		lda #$03		lda	#3
.a21c	4c bf 8c	jmp $8cbf		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a21f					FloatFractionalPart:
.a21f	5a		phy				phy
.a220	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.a223	29 7f		and #$7f			and 	#$7F
.a225	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a228	20 e3 a2	jsr $a2e3			jsr 	NSNormalise
.a22b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a22e	38		sec				sec
.a22f	e9 e0		sbc #$e0			sbc 	#$E0
.a231	90 31		bcc $a264			bcc 	_FFPExit 					; already fractional
.a233	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a235	b0 2a		bcs $a261			bcs 	_FFPZero
.a237	a8		tay				tay 								; put count to do in Y
.a238	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.a23b	20 66 a2	jsr $a266			jsr 	_FFPPartial
.a23e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a241	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.a244	20 66 a2	jsr $a266			jsr 	_FFPPartial
.a247	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a24a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a24d	20 66 a2	jsr $a266			jsr 	_FFPPartial
.a250	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a253	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a256	20 66 a2	jsr $a266			jsr 	_FFPPartial
.a259	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a25c	20 42 98	jsr $9842			jsr 	NSMIsZero 					; zeroed check.
.a25f	d0 03		bne $a264			bne 	_FFPExit
.a261					_FFPZero:
.a261	20 12 98	jsr $9812			jsr 	NSMSetZero
.a264					_FFPExit:
.a264	7a		ply				ply
.a265	60		rts				rts
.a266					_FFPPartial:
.a266	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a268	f0 17		beq $a281			beq 	_FFFPPExit
.a26a	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a26c	b0 0c		bcs $a27a			bcs 	_FFFPPWholeByte
.a26e	5a		phy				phy
.a26f					_FFFPPLeft:
.a26f	0a		asl a				asl 	a
.a270	88		dey				dey
.a271	d0 fc		bne $a26f			bne 	_FFFPPLeft
.a273	7a		ply				ply
.a274					_FFFPPRight:
.a274	4a		lsr a				lsr 	a
.a275	88		dey				dey
.a276	d0 fc		bne $a274			bne 	_FFFPPRight
.a278	80 07		bra $a281			bra 	_FFFPPExit
.a27a					_FFFPPWholeByte:
.a27a	98		tya				tya 								; subtract 8 from count
.a27b	38		sec				sec
.a27c	e9 08		sbc #$08			sbc 	#8
.a27e	a8		tay				tay
.a27f	a9 00		lda #$00			lda 	#0 							; and clear all
.a281					_FFFPPExit:
.a281	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a282					FloatIntegerPart:
.a282	48		pha				pha
.a283	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.a286	f0 1f		beq $a2a7			beq 	_FIPExit 					; if so do nothing
.a288	20 42 98	jsr $9842			jsr 	NSMIsZero 					; is it zero ?
.a28b	f0 17		beq $a2a4			beq 	_FIPZero 					; if so return zero.
.a28d	20 e3 a2	jsr $a2e3			jsr 	NSNormalise 				; normalise
.a290	f0 12		beq $a2a4			beq 	_FIPZero 					; normalised to zero, exit zero
.a292					_FIPShift:
.a292	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a295	10 08		bpl $a29f			bpl 	_FIPCheckZero
.a297	20 35 98	jsr $9835			jsr 	NSMShiftRight 				; shift mantissa right
.a29a	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.a29d	80 f3		bra $a292			bra 	_FIPShift
.a29f					_FIPCheckZero:
.a29f	20 42 98	jsr $9842			jsr 	NSMIsZero 					; avoid -0 problem
.a2a2	d0 03		bne $a2a7			bne 	_FIPExit 					; set to zero if mantissa zero.
.a2a4					_FIPZero:
.a2a4	20 12 98	jsr $9812			jsr 	NSMSetZero
.a2a7					_FIPExit:
.a2a7	68		pla				pla
.a2a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a2a9					FloatingPointMultiply:
.a2a9	20 d2 a2	jsr $a2d2			jsr 	FloatPrepare 				; prepare for floats
.a2ac					FloatMultiply:
.a2ac	48		pha				pha
.a2ad	20 e3 a2	jsr $a2e3			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a2b0	f0 1b		beq $a2cd			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a2b2	e8		inx				inx
.a2b3	20 e3 a2	jsr $a2e3			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a2b6	ca		dex				dex
.a2b7	c9 00		cmp #$00			cmp 	#0
.a2b9	f0 0f		beq $a2ca			beq 	_FDSetZero
.a2bb	20 83 a0	jsr $a083			jsr 	MultiplyShort 				; calculate the result.
.a2be	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a2c1	18		clc				clc
.a2c2	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.a2c5	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a2c8	80 03		bra $a2cd			bra 	_FDExit
.a2ca					_FDSetZero:
.a2ca	20 12 98	jsr $9812			jsr 	NSMSetZero 					; return 0
.a2cd					_FDExit:
.a2cd	20 e3 a2	jsr $a2e3			jsr 	NSNormalise 				; normalise the result
.a2d0	68		pla				pla
.a2d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a2d2					FloatPrepare:
.a2d2	20 d8 91	jsr $91d8			jsr 	DereferenceTopTwo 			; dereference the top two values
.a2d5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.a2d8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a2db	29 10		and #$10			and 	#NSBIsString
.a2dd	d0 01		bne $a2e0			bne 	_FDType
.a2df	60		rts				rts
.a2e0					_FDType:
.a2e0	4c 66 a5	jmp $a566			jmp 	TypeError
.a2e3					NSNormalise:
.a2e3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.a2e6	29 80		and #$80			and 	#$80
.a2e8	09 08		ora #$08			ora 	#NSTFloat
.a2ea	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a2ed	20 42 98	jsr $9842			jsr 	NSMIsZero 					; if zero exit
.a2f0	d0 09		bne $a2fb			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a2f2	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a2f5	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.a2f8	a9 00		lda #$00			lda 	#0 							; set Z flag
.a2fa	60		rts				rts
.a2fb					_NSNormaliseOptimise:
.a2fb	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a2fe	d0 22		bne $a322			bne 	_NSNormaliseLoop
.a300	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.a303	30 1d		bmi $a322			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a305	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a308	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a30b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a30e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a311	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a314	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.a317	bd 28 06	lda $0628,x			lda 	NSExponent,x
.a31a	38		sec				sec
.a31b	e9 08		sbc #$08			sbc 	#8
.a31d	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a320	80 d9		bra $a2fb			bra 	_NSNormaliseOptimise
.a322					_NSNormaliseLoop:
.a322	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a325	70 08		bvs $a32f			bvs 	_NSNExit 					; exit if so with Z flag clear
.a327	20 27 98	jsr $9827			jsr 	NSMShiftLeft 				; shift mantissa left
.a32a	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.a32d	80 f3		bra $a322			bra 	_NSNormaliseLoop
.a32f					_NSNExit:
.a32f	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a331	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9105					AssignNumber:
.9105	5a		phy				phy
.9106	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9109	85 36		sta $36				sta 	zTemp0
.910b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.910e	85 37		sta $37				sta 	zTemp0+1
.9110	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.9113	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9115	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9118	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.911a	c9 08		cmp #$08			cmp 	#NSTFloat
.911c	f0 2a		beq $9148			beq 	_ANFloat
.911e	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.9121	f0 05		beq $9128			beq		_ANNotFloat
.9123	e8		inx				inx
.9124	20 82 a2	jsr $a282			jsr 	FloatIntegerPart 			; make it an integer
.9127	ca		dex				dex
.9128					_ANNotFloat:
.9128	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.912b	29 03		and #$03			and 	#3
.912d	d0 05		bne $9134			bne 	_ANByteWord
.912f	20 54 91	jsr $9154			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9132	80 1e		bra $9152			bra 	_ANExit
.9134					_ANByteWord:
.9134	48		pha				pha 								; save count
.9135	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.9138	92 36		sta ($36)			sta 	(zTemp0)
.913a	68		pla				pla
.913b	c9 01		cmp #$01			cmp	 	#1
.913d	f0 13		beq $9152			beq 	_ANExit
.913f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.9142	a0 01		ldy #$01			ldy 	#1
.9144	91 36		sta ($36),y			sta 	(zTemp0),y
.9146	80 0a		bra $9152			bra 	_ANExit
.9148					_ANFloat:
.9148	20 54 91	jsr $9154			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.914b	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.914e	a0 04		ldy #$04			ldy 	#4
.9150	91 36		sta ($36),y			sta 	(zTemp0),y
.9152					_ANExit:
.9152	7a		ply				ply
.9153	60		rts				rts
.9154					_ANCopy4PackSign:
.9154	a0 03		ldy #$03			ldy 	#3
.9156	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.9159	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.915b	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.915e	91 36		sta ($36),y			sta 	(zTemp0),y
.9160	88		dey				dey
.9161	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9164	91 36		sta ($36),y			sta 	(zTemp0),y
.9166	88		dey				dey
.9167	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.916a	91 36		sta ($36),y			sta 	(zTemp0),y
.916c	88		dey				dey
.916d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9170	91 36		sta ($36),y			sta 	(zTemp0),y
.9172	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9173					AssignString:
.9173	5a		phy				phy
.9174	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9177	85 38		sta $38				sta 	zTemp1
.9179	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.917c	85 39		sta $39				sta 	zTemp1+1
.917e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9181	85 36		sta $36				sta 	zTemp0
.9183	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9186	85 37		sta $37				sta 	zTemp0+1
.9188	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.918a	b1 36		lda ($36),y			lda 	(zTemp0),y
.918c	f0 23		beq $91b1			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.918e	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.918f	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9191	e9 02		sbc #$02			sbc 	#2
.9193	85 3c		sta $3c				sta 	zsTemp
.9195	a0 01		ldy #$01			ldy 	#1
.9197	b1 36		lda ($36),y			lda 	(zTemp0),y
.9199	e9 00		sbc #$00			sbc 	#0
.919b	85 3d		sta $3d				sta 	zsTemp+1
.919d	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.919f					_ASGetLength:
.919f	c8		iny				iny
.91a0	b1 38		lda ($38),y			lda 	(zTemp1),y
.91a2	d0 fb		bne $919f			bne 	_ASGetLength
.91a4	98		tya				tya 								; is this length <= current length
.91a5	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.91a7	90 20		bcc $91c9			bcc 	_ASCopyString
.91a9	f0 1e		beq $91c9			beq 	_ASCopyString
.91ab	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.91ad	a0 01		ldy #$01			ldy 	#1
.91af	91 3c		sta ($3c),y			sta 	(zsTemp),y
.91b1					_ASNewStringRequired:
.91b1	e8		inx				inx 								; concrete the new string.
.91b2	20 02 a7	jsr $a702			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.91b5	ca		dex				dex
.91b6	18		clc				clc
.91b7	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.91ba	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.91bc	92 36		sta ($36)			sta 	(zTemp0)
.91be	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.91c1	69 00		adc #$00			adc 	#0
.91c3	a0 01		ldy #$01			ldy 	#1
.91c5	91 36		sta ($36),y			sta 	(zTemp0),y
.91c7	80 0d		bra $91d6			bra 	_ASExit
.91c9					_ASCopyString:
.91c9	a0 00		ldy #$00			ldy 	#0
.91cb					_ASCopyLoop:
.91cb	b1 38		lda ($38),y			lda 	(zTemp1),y
.91cd	c8		iny				iny
.91ce	c8		iny				iny
.91cf	91 3c		sta ($3c),y			sta 	(zsTemp),y
.91d1	88		dey				dey
.91d2	c9 00		cmp #$00			cmp 	#0
.91d4	d0 f5		bne $91cb			bne 	_ASCopyLoop
.91d6					_ASExit:
.91d6	7a		ply				ply
.91d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.91d8					DereferenceTopTwo:
.91d8	e8		inx				inx
.91d9	20 dd 91	jsr $91dd			jsr 	Dereference 				; deref x+1
.91dc	ca		dex				dex  								; falls through to deref x
.91dd					Dereference:
.91dd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.91e0	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.91e2	f0 57		beq $923b			beq 	_DRFExit 					; not a reference
.91e4	5a		phy				phy
.91e5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.91e8	85 36		sta $36				sta 	zTemp0
.91ea	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.91ed	85 37		sta $37				sta 	zTemp0+1
.91ef	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.91f2	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.91f4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.91f7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.91fa	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.91fc	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.91fe	f0 0f		beq $920f			beq 	_DRFDereferenceTwo
.9200	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9202	f0 39		beq $923d			beq 	_DRFFull
.9204	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9207	29 03		and #$03			and 	#3
.9209	f0 32		beq $923d			beq 	_DRFFull 					; the whole word
.920b	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.920d	f0 07		beq $9216			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.920f					_DRFDereferenceTwo:
.920f	a0 01		ldy #$01			ldy 	#1
.9211	b1 36		lda ($36),y			lda 	(zTemp0),y
.9213	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9216					_DRFClear23:
.9216	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9219	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.921c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.921f	29 18		and #$18			and 	#NSBTypeMask
.9221	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9224	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9226	d0 12		bne $923a			bne 	_DRFNotString
.9228	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.922b	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.922e	d0 0a		bne $923a			bne 	_DRFNotString
.9230	a9 3c		lda #$3c			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9232	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.9235	a9 92		lda #$92			lda 	#_DRFNullString >> 8
.9237	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.923a					_DRFNotString
.923a	7a		ply				ply 								; restore Y and exit
.923b					_DRFExit:
.923b	60		rts				rts
.923c					_DRFNullString:
>923c	00						.byte 	0
.923d					_DRFFull:
.923d	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.923f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9241	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9244	c8		iny				iny
.9245	b1 36		lda ($36),y			lda 	(zTemp0),y
.9247	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.924a	c8		iny				iny
.924b	b1 36		lda ($36),y			lda 	(zTemp0),y
.924d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9250	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.9253	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.9256	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9258	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.925b	f0 06		beq $9263			beq 	_DRFNoExponent
.925d	c8		iny				iny 								; if not, read the exponent as well.
.925e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9260	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9263					_DRFNoExponent:
.9263	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9266	10 0d		bpl $9275			bpl 	_DRFExit2 					; if not, then exit.
.9268	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.926a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.926d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.9270	09 80		ora #$80			ora 	#NSBIsNegative
.9272	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9275					_DRFExit2:
.9275	7a		ply				ply
.9276	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9277					EncodeNumberStart:
.9277	38		sec				sec
.9278	80 01		bra $927b			bra 	EncodeNumberContinue+1
.927a					EncodeNumberContinue:
.927a	18		clc				clc
.927b					EncodeNumber:
.927b	08		php				php 								; save reset.
.927c	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.927e	f0 12		beq $9292			beq 	_ENIsOkay
.9280	c9 30		cmp #$30			cmp 	#"0"
.9282	90 04		bcc $9288			bcc 	_ENBadNumber
.9284	c9 3a		cmp #$3a			cmp 	#"9"+1
.9286	90 0a		bcc $9292			bcc 	_ENIsOkay
.9288					_ENBadNumber:
.9288	28		plp				plp 								; throw saved reset
.9289	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.928c	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.928e	f0 7e		beq $930e			beq 	_ENConstructFinal
.9290					_ENFail:
.9290	18		clc				clc 								; not allowed
.9291	60		rts				rts
.9292					_ENIsOkay:
.9292	28		plp				plp 								; are we restarting
.9293	90 15		bcc $92aa			bcc 	_ENNoRestart
.9295					_ENStartEncode:
.9295	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9297	f0 0c		beq $92a5			beq 	_ENFirstDP
.9299	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.929b	20 14 98	jsr $9814			jsr 	NSMSetByte
.929e	a9 01		lda #$01			lda 	#ESTA_Low
.92a0					_ENExitChange:
.92a0	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.92a3	38		sec				sec
.92a4	60		rts				rts
.92a5					_ENFirstDP:
.92a5	20 12 98	jsr $9812			jsr 	NSMSetZero 					; clear integer part
.92a8	80 3f		bra $92e9			bra 	_ESTASwitchFloat			; go straight to float and exi
.92aa					_ENNoRestart:
.92aa	48		pha				pha 								; save on stack.
.92ab	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.92ae	c9 01		cmp #$01			cmp 	#ESTA_Low
.92b0	f0 09		beq $92bb			beq  	_ESTALowState
.92b2	c9 02		cmp #$02			cmp 	#ESTA_High
.92b4	f0 29		beq $92df			beq 	_ESTAHighState
.92b6	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.92b8	f0 3b		beq $92f5			beq 	_ESTADecimalState
>92ba	db						.byte 	$DB 						; causes a break in the emulator
.92bb					_ESTALowState:
.92bb	68		pla				pla 								; get value back
.92bc	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.92be	f0 29		beq $92e9			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.92c0	29 0f		and #$0f			and 	#15 						; make digit
.92c2	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.92c5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.92c8	0a		asl a				asl 	a
.92c9	0a		asl a				asl 	a
.92ca	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.92cd	0a		asl a				asl 	a
.92ce	6d 06 07	adc $0706			adc 	DigitTemp
.92d1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.92d4	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.92d6	90 05		bcc $92dd			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.92d8	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.92da	8d 05 07	sta $0705			sta 	EncodeState
.92dd					_ESTANoSwitch:
.92dd	38		sec				sec
.92de	60		rts				rts
.92df					_ESTAHighState:
.92df	68		pla				pla 								; get value back
.92e0	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.92e2	f0 05		beq $92e9			beq 	_ESTASwitchFloat
.92e4	20 48 93	jsr $9348			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.92e7	38		sec				sec
.92e8	60		rts				rts
.92e9					_ESTASwitchFloat:
.92e9	9c 07 07	stz $0707			stz 	DecimalCount
.92ec	e8		inx				inx 								; zero the decimal additive.
.92ed	20 12 98	jsr $9812			jsr 	NSMSetZero
.92f0	ca		dex				dex
.92f1	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.92f3	80 ab		bra $92a0			bra 	_ENExitChange
.92f5					_ESTADecimalState:
.92f5	68		pla				pla 								; digit.
.92f6	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.92f8	f0 96		beq $9290			beq 	_ENFail
.92fa	e8		inx				inx 								; put digit into fractional part of X+1
.92fb	20 48 93	jsr $9348			jsr 	ESTAShiftDigitIntoMantissa
.92fe	ca		dex				dex
.92ff	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.9302	ad 07 07	lda $0707			lda 	DecimalCount
.9305	c9 0b		cmp #$0b			cmp 	#11
.9307	f0 02		beq $930b			beq 	_ESTADSFail
.9309	38		sec				sec
.930a	60		rts				rts
.930b					_ESTADSFail:
.930b	4c 61 a5	jmp $a561			jmp 	RangeError
.930e					_ENConstructFinal:
.930e	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.9311	f0 33		beq $9346			beq 	_ENCFExit 					; no decimals
.9313	5a		phy				phy
.9314	0a		asl a				asl 	a 							; x 4 and CLC
.9315	0a		asl a				asl 	a
.9316	6d 07 07	adc $0707			adc 	DecimalCount
.9319	a8		tay				tay
.931a	b9 20 a5	lda $a520,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.931d	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9320	b9 21 a5	lda $a521,y			lda 	DecimalScalarTable-5+1,y
.9323	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9326	b9 22 a5	lda $a522,y			lda 	DecimalScalarTable-5+2,y
.9329	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.932c	b9 23 a5	lda $a523,y			lda 	DecimalScalarTable-5+3,y
.932f	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9332	b9 24 a5	lda $a524,y			lda 	DecimalScalarTable-5+4,y
.9335	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9338	a9 08		lda #$08			lda 	#NSTFloat
.933a	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.933d	7a		ply				ply
.933e	e8		inx				inx 								; multiply decimal const by decimal scalar
.933f	20 ac a2	jsr $a2ac			jsr 	FloatMultiply
.9342	ca		dex				dex
.9343	20 41 a1	jsr $a141			jsr 	FloatAdd 					; add to integer part.
.9346					_ENCFExit:
.9346	18		clc				clc 								; reject the digit.
.9347	60		rts				rts
.9348					ESTAShiftDigitIntoMantissa:
.9348	29 0f		and #$0f			and 	#15 						; save digit
.934a	48		pha				pha
.934b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.934e	48		pha				pha
.934f	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9352	48		pha				pha
.9353	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9356	48		pha				pha
.9357	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.935a	48		pha				pha
.935b	20 27 98	jsr $9827			jsr 	NSMShiftLeft 				; x 2
.935e	20 27 98	jsr $9827			jsr 	NSMShiftLeft 				; x 4
.9361	18		clc				clc 								; pop mantissa and add
.9362	68		pla				pla
.9363	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9366	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9369	68		pla				pla
.936a	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.936d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9370	68		pla				pla
.9371	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.9374	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9377	68		pla				pla
.9378	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.937b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.937e	20 27 98	jsr $9827			jsr 	NSMShiftLeft 				; x 10
.9381	68		pla				pla 								; add digit
.9382	18		clc				clc
.9383	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9386	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9389	90 0d		bcc $9398			bcc 	_ESTASDExit
.938b	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.938e	d0 08		bne $9398			bne 	_ESTASDExit
.9390	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.9393	d0 03		bne $9398			bne 	_ESTASDExit
.9395	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.9398					_ESTASDExit:
.9398	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9399					EvaluateTerm:
.9399	b1 30		lda ($30),y			lda 	(codePtr),y
.939b	30 18		bmi $93b5			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.939d	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.939f	b0 6f		bcs $9410			bcs 	_ETVariable
.93a1	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.93a3	90 6e		bcc $9413			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.93a5	c9 3a		cmp #$3a			cmp 	#'9'+1
.93a7	b0 6a		bcs $9413			bcs 	_ETPuncUnary
.93a9	20 77 92	jsr $9277			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.93ac					_ETNumber:
.93ac	c8		iny				iny 								; keep encoding until we have the numbers
.93ad	b1 30		lda ($30),y			lda 	(codePtr),y
.93af	20 7a 92	jsr $927a			jsr 	EncodeNumberContinue
.93b2	b0 f8		bcs $93ac			bcs 	_ETNumber 					; go back if accepted.
.93b4	60		rts				rts
.93b5					_ETCheckUnary:
.93b5	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.93b7	f0 41		beq $93fa			beq 	_ETString
.93b9	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.93bb	f0 12		beq $93cf			beq 	_ETHexConstant
.93bd	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.93bf	90 0b		bcc $93cc			bcc 	_ETSyntaxError
.93c1	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.93c3	b0 07		bcs $93cc			bcs 	_ETSyntaxError
.93c5	da		phx				phx 								; push X on the stack
.93c6	0a		asl a				asl 	a 							; put vector x 2 into X
.93c7	aa		tax				tax
.93c8	c8		iny				iny 								; consume unary function token
.93c9	7c fe 80	jmp ($80fe,x)			jmp 	(VectorSet0,x) 				; and do it.
.93cc					_ETSyntaxError:
.93cc	4c 5c a5	jmp $a55c			jmp 	SyntaxError
.93cf					_ETHexConstant:
.93cf	c8		iny				iny 								; skip #
.93d0	c8		iny				iny 								; skip count
.93d1	20 12 98	jsr $9812			jsr 	NSMSetZero 					; clear result
.93d4					_ETHLoop:
.93d4	b1 30		lda ($30),y			lda 	(codePtr),y
.93d6	c8		iny				iny 								; and consume
.93d7	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.93d9	f0 1e		beq $93f9			beq 	_ETHExit
.93db	48		pha				pha 								; save on stack.
.93dc	20 27 98	jsr $9827			jsr 	NSMShiftLeft 				; x 2
.93df	20 27 98	jsr $9827			jsr 	NSMShiftLeft 				; x 4
.93e2	20 27 98	jsr $9827			jsr 	NSMShiftLeft 				; x 8
.93e5	20 27 98	jsr $9827			jsr 	NSMShiftLeft 				; x 16
.93e8	68		pla				pla 								; ASCII
.93e9	c9 41		cmp #$41			cmp 	#'A'
.93eb	90 02		bcc $93ef			bcc 	_ETHNotChar
.93ed	e9 07		sbc #$07			sbc 	#7
.93ef					_ETHNotChar:
.93ef	29 0f		and #$0f			and 	#15 						; digit now
.93f1	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.93f4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.93f7	80 db		bra $93d4			bra 	_ETHLoop 					; go round.
.93f9					_ETHExit:
.93f9	60		rts				rts
.93fa					_ETString:
.93fa	c8		iny				iny 								; look at length
.93fb	b1 30		lda ($30),y			lda 	(codePtr),y
.93fd	48		pha				pha
.93fe	c8		iny				iny 								; first character
.93ff	20 a9 9e	jsr $9ea9			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9402	68		pla				pla 								; restore count and save
.9403	85 36		sta $36				sta 	zTemp0
.9405	98		tya				tya 								; add length to Y to skip it.
.9406	18		clc				clc
.9407	65 36		adc $36				adc 	zTemp0
.9409	a8		tay				tay
.940a	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.940c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.940f	60		rts				rts
.9410					_ETVariable:
.9410	4c 6a 94	jmp $946a			jmp 	VariableHandler
.9413					_ETPuncUnary:
.9413	c8		iny				iny 								; consume the unary character
.9414	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9416	f0 2d		beq $9445			beq 	_ETUnaryNegate
.9418	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.941a	f0 39		beq $9455			beq 	_ETDereference
.941c	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.941e	f0 43		beq $9463			beq 	_ETParenthesis
.9420	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9422	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9424	f0 06		beq $942c			beq 	_ETIndirection
.9426	e6 36		inc $36				inc 	zTemp0
.9428	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.942a	d0 a0		bne $93cc			bne 	_ETSyntaxError
.942c					_ETIndirection:
.942c	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.942e	1a		inc a				inc 	a
.942f	48		pha				pha
.9430	20 99 93	jsr $9399			jsr 	EvaluateTerm				; evaluate the term
.9433	20 dd 91	jsr $91dd			jsr 	Dereference 				; dereference it.
.9436	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.9439	d0 07		bne $9442			bne 	_ETTypeMismatch
.943b	68		pla				pla 								; indirection 1-2
.943c	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.943e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9441	60		rts				rts
.9442					_ETTypeMismatch:
.9442	4c 66 a5	jmp $a566			jmp 	TypeError
.9445					_ETUnaryNegate:
.9445	20 99 93	jsr $9399			jsr 	EvaluateTerm				; evaluate the term
.9448	20 dd 91	jsr $91dd			jsr 	Dereference 				; dereference it.
.944b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.944e	29 10		and #$10			and 	#NSTString
.9450	d0 f0		bne $9442			bne 	_ETTypeMismatch
.9452	4c be 97	jmp $97be			jmp 	NSMNegate  					; just toggles the sign bit.
.9455					_ETDereference:
.9455	20 99 93	jsr $9399			jsr 	EvaluateTerm				; evaluate the term
.9458	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.945b	29 20		and #$20			and 	#NSBIsReference
.945d	f0 e3		beq $9442			beq 	_ETTypeMismatch
.945f	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.9462	60		rts				rts
.9463					_ETParenthesis:
.9463	20 c8 90	jsr $90c8			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9466	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket 			; check for )
.9469	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.946a					VariableHandler:
.946a	b1 30		lda ($30),y			lda 	(codePtr),y
.946c	18		clc				clc
.946d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.946f	85 37		sta $37				sta 	zTemp0+1
.9471	c8		iny				iny
.9472	b1 30		lda ($30),y			lda 	(codePtr),y
.9474	85 36		sta $36				sta 	zTemp0
.9476	c8		iny				iny
.9477	18		clc				clc									; copy variable address+3 to mantissa
.9478	69 03		adc #$03			adc 	#3
.947a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.947d	a5 37		lda $37				lda 	zTemp0+1
.947f	69 00		adc #$00			adc 	#0
.9481	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9484	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9487	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.948a	9e 28 06	stz $0628,x			stz 	NSExponent,x
.948d	5a		phy				phy
.948e	a0 02		ldy #$02			ldy 	#2 							; read type
.9490	b1 36		lda ($36),y			lda 	(zTemp0),y
.9492	7a		ply				ply
.9493	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9495	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9497	9d 00 06	sta $0600,x			sta 	NSStatus,x
.949a	29 04		and #$04			and 	#NSBIsArray
.949c	d0 01		bne $949f			bne 	_VHArray
.949e	60		rts				rts
.949f					_VHArray:
.949f	e8		inx				inx
.94a0	20 aa 97	jsr $97aa			jsr 	Evaluate8BitInteger 		; get the 1st index.
.94a3	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.94a5	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.94a8	b1 30		lda ($30),y			lda 	(codePtr),y
.94aa	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.94ac	d0 06		bne $94b4			bne 	_VHNoSecondIndex
.94ae	c8		iny				iny 								; skip the comma
.94af	e8		inx				inx
.94b0	20 aa 97	jsr $97aa			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.94b3	ca		dex				dex
.94b4					_VHNoSecondIndex:
.94b4	ca		dex				dex 								; set X back.
.94b5	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket 			; and check the right bracket.
.94b8	5a		phy				phy 								; save position
.94b9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.94bc	85 3e		sta $3e				sta 	zaTemp
.94be	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.94c1	85 3f		sta $3f				sta 	zaTemp+1
.94c3	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.94c5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.94c7	f0 02		beq $94cb			beq 	_VHHas2Mask
.94c9	a9 ff		lda #$ff			lda 	#$FF
.94cb					_VHHas2Mask:
.94cb	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.94ce	f0 54		beq $9524			beq 	_VHBadIndex
.94d0	0a		asl a				asl 	a 							; carry will be set if a second index
.94d1	90 09		bcc $94dc			bcc 	_VHCheckFirstIndex
.94d3	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.94d5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.94d7	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.94da	90 48		bcc $9524			bcc 	_VHBadIndex
.94dc					_VHCheckFirstIndex:
.94dc	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.94de	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.94e0	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.94e3	90 3f		bcc $9524			bcc 	_VHBadIndex
.94e5	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.94e7	64 37		stz $37				stz 	zTemp0+1
.94e9	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.94ec	30 0f		bmi $94fd			bmi 	_VHNoMultiply
.94ee	da		phx				phx
.94ef	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.94f2	48		pha				pha
.94f3	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.94f5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.94f7	1a		inc a				inc 	a 							; add 1 for zero base
.94f8	fa		plx				plx
.94f9	20 fc a3	jsr $a3fc			jsr 	Multiply8x8 				; calculate -> Z0
.94fc	fa		plx				plx
.94fd					_VHNoMultiply:
.94fd	18		clc				clc
.94fe	a5 36		lda $36				lda 	zTemp0
.9500	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.9503	85 36		sta $36				sta 	zTemp0
.9505	a5 37		lda $37				lda 	zTemp0+1
.9507	69 00		adc #$00			adc 	#0
.9509	85 37		sta $37				sta 	zTemp0+1
.950b	bd 00 06	lda $0600,x			lda 	NSStatus,x
.950e	20 ce 85	jsr $85ce			jsr 	ScaleByBaseType
.9511	18		clc				clc
.9512	b2 3e		lda ($3e)			lda 	(zaTemp)
.9514	65 36		adc $36				adc 	zTemp0
.9516	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9519	a0 01		ldy #$01			ldy 	#1
.951b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.951d	65 37		adc $37				adc 	zTemp0+1
.951f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9522	7a		ply				ply 								; restore position
.9523	60		rts				rts
.9524					_VHBadIndex:
.9524	a9 17		lda #$17		lda	#23
.9526	4c bf 8c	jmp $8cbf		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a332					AbsUnary:
.a332	fa		plx				plx 								; restore stack pos
.a333	20 66 97	jsr $9766			jsr 	EvaluateNumber 				; get a float or int
.a336	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket
.a339	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.a33c	29 7f		and #$7f			and 	#$7F
.a33e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a341	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9529					AllocUnary:
.9529	fa		plx				plx 								; restore stack pos
.952a	20 9e 97	jsr $979e			jsr 	Evaluate16BitInteger		; get bytes required.
.952d	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket
.9530	da		phx				phx 								; save X/Y
.9531	5a		phy				phy
.9532	8a		txa				txa 								; copy X into Y
.9533	a8		tay				tay
.9534	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.9537	aa		tax				tax
.9538	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.953b	20 48 95	jsr $9548			jsr 	AllocateXABytes 			; allocate memory
.953e	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.9541	8a		txa				txa
.9542	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.9545	7a		ply				ply
.9546	fa		plx				plx
.9547	60		rts				rts
.9548					AllocateXABytes:
.9548	5a		phy				phy
.9549	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.954c	84 36		sty $36				sty 	zTemp0
.954e	5a		phy				phy
.954f	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.9552	84 37		sty $37				sty 	zTemp0+1
.9554	5a		phy				phy
.9555	18		clc				clc 								; add to low memory pointer
.9556	6d 0c 07	adc $070c			adc 	lowMemPtr
.9559	8d 0c 07	sta $070c			sta 	lowMemPtr
.955c	8a		txa				txa
.955d	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.9560	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.9563					_ClearMemory:
.9563	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.9566	c5 36		cmp $36				cmp 	zTemp0
.9568	d0 07		bne $9571			bne 	_CMClearNext
.956a	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.956d	c5 37		cmp $37				cmp 	zTemp0+1
.956f	f0 0c		beq $957d			beq 	_CMExit
.9571					_CMClearNext:
.9571	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9573	92 36		sta ($36)			sta 	(zTemp0)
.9575	e6 36		inc $36				inc 	zTemp0
.9577	d0 ea		bne $9563			bne 	_ClearMemory
.9579	e6 37		inc $37				inc		zTemp0+1
.957b	80 e6		bra $9563			bra 	_ClearMemory
.957d					_CMExit:
.957d	fa		plx				plx
.957e	68		pla				pla
.957f	7a		ply				ply
.9580	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a342					AscUnary:
.a342	fa		plx				plx 								; restore stack pos
.a343	20 71 97	jsr $9771			jsr 	EvaluateString 				; get a string
.a346	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a348	20 14 98	jsr $9814			jsr 	NSMSetByte
.a34b	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket
.a34e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a34f					FracUnary:
.a34f	fa		plx				plx 								; restore stack pos
.a350	20 66 97	jsr $9766			jsr 	EvaluateNumber 				; get a float or int
.a353	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket
.a356	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a359	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a35b	f0 04		beq $a361			beq 	_IUZero
.a35d	20 1f a2	jsr $a21f			jsr 	FloatFractionalPart
.a360	60		rts				rts
.a361					_IUZero:
.a361	20 12 98	jsr $9812			jsr 	NSMSetZero
.a364	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a365					IntUnary:
.a365	fa		plx				plx 								; restore stack pos
.a366	20 66 97	jsr $9766			jsr 	EvaluateNumber 				; get a float or int
.a369	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket
.a36c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a36f	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a371	f0 03		beq $a376			beq 	_IUExit
.a373	20 82 a2	jsr $a282			jsr 	FloatIntegerPart
.a376					_IUExit:
.a376	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a377					LenUnary:
.a377	fa		plx				plx 								; restore stack pos
.a378	20 71 97	jsr $9771			jsr 	EvaluateString 				; get a string
.a37b	5a		phy				phy
.a37c	a0 00		ldy #$00			ldy 	#0 							; find length
.a37e					_LenFind:
.a37e	b1 36		lda ($36),y			lda 	(zTemp0),y
.a380	f0 06		beq $a388			beq 	_LenExit
.a382	c8		iny				iny
.a383	d0 f9		bne $a37e			bne 	_LenFind
.a385	4c 61 a5	jmp $a561			jmp 	RangeError 					; string > 255
.a388					_LenExit:
.a388	98		tya				tya
.a389	20 14 98	jsr $9814			jsr 	NSMSetByte
.a38c	7a		ply				ply
.a38d	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket
.a390	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9581					Unary_Not:
.9581	fa		plx				plx
.9582	20 89 97	jsr $9789			jsr 	EvaluateInteger 			; get integer
.9585	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket
.9588	20 42 98	jsr $9842			jsr 	NSMIsZero 					; zero mantissa ?
.958b	f0 04		beq $9591			beq 	_NotZero
.958d	20 12 98	jsr $9812			jsr 	NSMSetZero
.9590	60		rts				rts
.9591					_NotZero:
.9591	4c 2c 8d	jmp $8d2c			jmp 	ReturnTrue
.9594					_UNBad:
.9594	4c 6b a5	jmp $a56b			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9597					Unary_Rnd:
.9597	20 66 97	jsr $9766			jsr 	EvaluateNumber 				; number to use.
.959a	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket 			; closing bracket
.959d	20 c6 95	jsr $95c6			jsr 	Random32Bit 				; generate a number.
.95a0	ad 08 07	lda $0708			lda 	RandomSeed+0
.95a3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.95a6	ad 09 07	lda $0709			lda 	RandomSeed+1
.95a9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.95ac	ad 0a 07	lda $070a			lda 	RandomSeed+2
.95af	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.95b2	ad 0b 07	lda $070b			lda 	RandomSeed+3
.95b5	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.95b7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.95ba	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.95bc	8d 28 06	sta $0628			sta 	NSExponent
.95bf	a9 08		lda #$08			lda 	#NSTFloat
.95c1	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>95c4	db						.byte 	$DB 						; causes a break in the emulator
.95c5	60		rts				rts
.95c6					Random32Bit:
.95c6	5a		phy				phy
.95c7	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.95c9	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.95cc	d0 03		bne $95d1			bne 	_Random1
.95ce	a8		tay				tay 								; if so do it 256 times
.95cf	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.95d1					_Random1:
.95d1	0a		asl a				asl 	a 							; LSFR RNG
.95d2	2e 09 07	rol $0709			rol 	RandomSeed+1
.95d5	2e 0a 07	rol $070a			rol 	RandomSeed+2
.95d8	2e 0b 07	rol $070b			rol 	RandomSeed+3
.95db	90 02		bcc $95df			bcc 	_Random2
.95dd	49 c5		eor #$c5			eor 	#$C5
.95df					_Random2:
.95df	88		dey				dey
.95e0	d0 ef		bne $95d1			bne 	_Random1
.95e2	7a		ply				ply
.95e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a391					SgnUnary:
.a391	fa		plx				plx 								; restore stack pos
.a392	20 66 97	jsr $9766			jsr 	EvaluateNumber 				; get a float or int
.a395	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket
.a398	20 42 98	jsr $9842			jsr 	NSMIsZero 					; if zero
.a39b	f0 10		beq $a3ad			beq 	_SGZero  					; return Int Zero
.a39d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.a3a0	48		pha				pha
.a3a1	a9 01		lda #$01			lda 	#1 							; set to 1
.a3a3	20 14 98	jsr $9814			jsr 	NSMSetByte
.a3a6	68		pla				pla
.a3a7	29 80		and #$80			and		#$80 						; copy the sign byte out
.a3a9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a3ac	60		rts				rts
.a3ad	20 12 98	jsr $9812	_SGZero:jsr 	NSMSetZero
.a3b0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a3b1					ValUnary:
.a3b1	fa		plx				plx 								; restore stack pos
.a3b2	20 c7 a3	jsr $a3c7			jsr 	ValMainCode 				; do the main val() code
.a3b5	b0 01		bcs $a3b8			bcs 	_VUError 					; couldn't convert
.a3b7	60		rts				rts
.a3b8					_VUError:
.a3b8	4c 66 a5	jmp $a566			jmp 	TypeError
.a3bb					IsValUnary:
.a3bb	fa		plx				plx 								; restore stack pos
.a3bc	20 c7 a3	jsr $a3c7			jsr 	ValMainCode 				; do the main val() code
.a3bf	b0 03		bcs $a3c4			bcs 	_VUBad
.a3c1	4c 2c 8d	jmp $8d2c			jmp 	ReturnTrue
.a3c4					_VUBad:
.a3c4	4c 38 8d	jmp $8d38			jmp 	ReturnFalse
.a3c7					ValMainCode:
.a3c7	20 71 97	jsr $9771			jsr 	EvaluateString 				; get a string
.a3ca	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket 			; check right bracket present
.a3cd	5a		phy				phy
.a3ce	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a3d0	f0 17		beq $a3e9			beq 	_VMCFail2
.a3d2	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a3d4	48		pha				pha 								; save first character
.a3d5	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a3d7	d0 01		bne $a3da			bne 	_VMCStart
.a3d9	c8		iny				iny 								; skip over -
.a3da					_VMCStart:
.a3da	38		sec				sec 								; initialise first time round.
.a3db					_VMCNext:
.a3db	c8		iny				iny 								; pre-increment
.a3dc	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a3de	f0 0c		beq $a3ec			beq 	_VMCSuccess 				; successful.
.a3e0	20 7b 92	jsr $927b			jsr 	EncodeNumber 				; send it to the number-builder
.a3e3	90 03		bcc $a3e8			bcc 	_VMCFail 					; if failed, give up.
.a3e5	18		clc				clc 								; next time round, countinue
.a3e6	80 f3		bra $a3db			bra 	_VMCNext
.a3e8					_VMCFail:
.a3e8	68		pla				pla
.a3e9					_VMCFail2:
.a3e9	7a		ply				ply
.a3ea	38		sec				sec
.a3eb	60		rts				rts
.a3ec					_VMCSuccess:
.a3ec	a9 00		lda #$00			lda 	#0 							; construct final
.a3ee	20 7b 92	jsr $927b			jsr 	EncodeNumber
.a3f1	68		pla				pla
.a3f2	c9 2d		cmp #$2d			cmp 	#"-"
.a3f4	d0 03		bne $a3f9			bne 	_VMCNotNegative
.a3f6	20 be 97	jsr $97be			jsr		NSMNegate
.a3f9					_VMCNotNegative:
.a3f9	7a		ply				ply
.a3fa	18		clc				clc
.a3fb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.95e4					ChrUnary:
.95e4	fa		plx				plx 								; restore stack pos
.95e5	20 aa 97	jsr $97aa			jsr 	Evaluate8BitInteger			; get value
.95e8	48		pha				pha
.95e9	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket
.95ec	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.95ee	20 7d a7	jsr $a77d			jsr 	StringTempAllocate
.95f1	68		pla				pla 								; write number to it
.95f2	20 bb a7	jsr $a7bb			jsr 	StringTempWrite
.95f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.95f6					SpcUnary:
.95f6	fa		plx				plx 								; restore stack pos
.95f7	20 aa 97	jsr $97aa			jsr 	Evaluate8BitInteger			; get value
.95fa	5a		phy				phy
.95fb	48		pha				pha 								; save count
.95fc	20 7d a7	jsr $a77d			jsr 	StringTempAllocate
.95ff	7a		ply				ply 								; to do count in Y
.9600					_SpcLoop:
.9600	c0 00		cpy #$00			cpy 	#0
.9602	f0 08		beq $960c			beq 	_SpcExit
.9604	a9 20		lda #$20			lda 	#32
.9606	20 bb a7	jsr $a7bb			jsr 	StringTempWrite
.9609	88		dey				dey
.960a	80 f4		bra $9600			bra 	_SPCLoop
.960c					_SpcExit:
.960c	7a		ply				ply
.960d	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket
.9610	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9611					Unary_Str:
.9611	fa		plx				plx
.9612	20 66 97	jsr $9766			jsr 	EvaluateNumber  			; get number
.9615	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket 			; closing bracket
.9618	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.961a	20 33 96	jsr $9633			jsr 	ConvertNumberToString 		; do the conversion.
.961d	a9 21		lda #$21			lda		#33 						; create buffer
.961f	20 7d a7	jsr $a77d			jsr 	StringTempAllocate 			; allocate memory
.9622	da		phx				phx
.9623	a2 00		ldx #$00			ldx 	#0
.9625					_USCopy:
.9625	bd 98 08	lda $0898,x			lda 	DecimalBuffer,x
.9628	20 bb a7	jsr $a7bb			jsr 	StringTempWrite
.962b	e8		inx				inx
.962c	bd 98 08	lda $0898,x			lda 	DecimalBuffer,x
.962f	d0 f4		bne $9625			bne 	_USCopy
.9631	fa		plx				plx
.9632	60		rts				rts
.9633					ConvertNumberToString:
.9633	5a		phy				phy 								; save code position
.9634	8d 14 07	sta $0714			sta 	DecimalPlaces	 			; save number of DPs.
.9637	9c 15 07	stz $0715			stz 	dbOffset 					; offset into decimal buffer = start.
.963a	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.963d	10 0a		bpl $9649			bpl 	_CNTSNotNegative
.963f	29 7f		and #$7f			and 	#$7F 						; make +ve
.9641	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9644	a9 2d		lda #$2d			lda 	#"-"
.9646	20 af 96	jsr $96af			jsr 	WriteDecimalBuffer
.9649					_CNTSNotNegative:
.9649	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.964c	f0 15		beq $9663			beq 	_CNTSNotFloat
.964e	e8		inx				inx 								; round up
.964f	a9 01		lda #$01			lda 	#1
.9651	20 14 98	jsr $9814			jsr 	NSMSetByte
.9654	ca		dex				dex
.9655	bd 28 06	lda $0628,x			lda		NSExponent,x
.9658	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.965b	a9 08		lda #$08			lda 	#NSTFloat
.965d	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.9660	20 41 a1	jsr $a141			jsr 	FloatAdd
.9663					_CNTSNotFloat:
.9663	20 91 96	jsr $9691			jsr 	MakePlusTwoString
.9666	20 1f a2	jsr $a21f			jsr 	FloatFractionalPart 		; get the fractional part
.9669	20 e3 a2	jsr $a2e3			jsr 	NSNormalise					; normalise , exit if zero
.966c	f0 21		beq $968f			beq 	_CNTSExit
.966e	a9 2e		lda #$2e			lda 	#"."
.9670	20 af 96	jsr $96af			jsr 	WriteDecimalBuffer 			; write decimal place
.9673					_CNTSDecimal:
.9673	ce 14 07	dec $0714			dec 	DecimalPlaces 				; done all the decimals
.9676	30 17		bmi $968f			bmi 	_CNTSExit
.9678	e8		inx				inx 								; x 10.0
.9679	a9 0a		lda #$0a			lda 	#10
.967b	20 14 98	jsr $9814			jsr 	NSMSetByte
.967e	a9 08		lda #$08			lda 	#NSTFloat
.9680	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9683	ca		dex				dex
.9684	20 ac a2	jsr $a2ac			jsr 	FloatMultiply
.9687	20 91 96	jsr $9691			jsr 	MakePlusTwoString
.968a	20 1f a2	jsr $a21f			jsr 	FloatFractionalPart 		; get the fractional part
.968d	80 e4		bra $9673			bra 	_CNTSDecimal 				; keep going.
.968f					_CNTSExit:
.968f	7a		ply				ply
.9690	60		rts				rts
.9691					MakePlusTwoString:
.9691	da		phx				phx
.9692	20 e9 97	jsr $97e9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9695	e8		inx				inx 								; access it
.9696	e8		inx				inx
.9697	20 82 a2	jsr $a282			jsr 	FloatIntegerPart 			; make it an integer
.969a	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.969c	20 eb a0	jsr $a0eb			jsr 	ConvertInt32
.969f	a2 00		ldx #$00			ldx	 	#0
.96a1					_MPTSCopy:
.96a1	bd 76 08	lda $0876,x			lda 	NumberBuffer,x
.96a4	20 af 96	jsr $96af			jsr 	WriteDecimalBuffer
.96a7	e8		inx				inx
.96a8	bd 76 08	lda $0876,x			lda 	NumberBuffer,x
.96ab	d0 f4		bne $96a1			bne 	_MPTSCopy
.96ad	fa		plx				plx
.96ae	60		rts				rts
.96af					WriteDecimalBuffer:
.96af	da		phx				phx
.96b0	ae 15 07	ldx $0715			ldx 	dbOffset
.96b3	9d 98 08	sta $0898,x			sta 	DecimalBuffer,x
.96b6	9e 99 08	stz $0899,x			stz 	DecimalBuffer+1,x
.96b9	ee 15 07	inc $0715			inc 	dbOffset
.96bc	fa		plx				plx
.96bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.96be					Unary_Left:
.96be	fa		plx				plx
.96bf	18		clc				clc 								; only one parameter
.96c0	20 35 97	jsr $9735			jsr 	SubstringInitial 			; set up.
.96c3	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.96c6	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.96c9	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.96cc	80 2c		bra $96fa			bra 	SubstringMain
.96ce					Unary_Right:
.96ce	fa		plx				plx
.96cf	18		clc				clc 								; only one parameter
.96d0	20 35 97	jsr $9735			jsr 	SubstringInitial 			; set up.
.96d3	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.96d6	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.96d9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.96dc	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.96df	b0 02		bcs $96e3			bcs 	_URNotUnderflow
.96e1	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.96e3					_URNotUnderFlow:
.96e3	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.96e6	80 12		bra $96fa			bra 	SubStringMain
.96e8					Unary_Mid:
.96e8	fa		plx				plx
.96e9	38		sec				sec 								; two parameters
.96ea	20 35 97	jsr $9735			jsr 	SubstringInitial 			; set up.
.96ed	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.96f0	f0 05		beq $96f7			beq 	_UMError
.96f2	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.96f5	80 03		bra $96fa			bra 	SubStringMain
.96f7					_UMError:
.96f7	4c 6b a5	jmp $a56b			jmp 	ArgumentError
.96fa					SubStringMain:
.96fa	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.96fd	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.9700	b0 2d		bcs $972f			bcs 	_SSMNull 					; if so, return an empty string.
.9702	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9705	f0 28		beq $972f			beq 	_SSMNull 					; return empty string.
.9707	18		clc				clc 								; add the offset +1 to the address and
.9708	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.970b	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.970e	85 36		sta $36				sta 	zTemp0
.9710	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.9713	69 00		adc #$00			adc 	#0
.9715	85 37		sta $37				sta 	zTemp0+1
.9717					_SSMNoCarry:
.9717	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.971a	20 7d a7	jsr $a77d			jsr 	StringTempAllocate 			; allocate that many characters
.971d	5a		phy				phy 								; save Y
.971e	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9720					_SSMCopy:
.9720	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9722	f0 09		beq $972d			beq 	_SSMEString 				; no more to copy
.9724	20 bb a7	jsr $a7bb			jsr 	StringTempWrite 			; and write it out.
.9727	c8		iny				iny
.9728	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.972b	d0 f3		bne $9720			bne 	_SSMCopy
.972d					_SSMEString:
.972d	7a		ply				ply
.972e					_SSMExit:
.972e	60		rts				rts
.972f					_SSMNull:
.972f	a9 00		lda #$00			lda 	#0
.9731	20 7d a7	jsr $a77d			jsr 	StringTempAllocate
.9734	60		rts				rts
.9735					SubstringInitial:
.9735	da		phx				phx 								; save initial stack position
.9736	08		php				php 								; save carry on stack indicating 2 parameters
.9737	20 71 97	jsr $9771			jsr 	EvaluateString 				; get a string
.973a	5a		phy				phy 								; calculate length to exponent.
.973b	a0 ff		ldy #$ff			ldy 	#$FF
.973d					_SIFindLength:
.973d	c8		iny				iny
.973e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9740	d0 fb		bne $973d			bne 	_SIFindLength
.9742	98		tya				tya
.9743	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9746	7a		ply				ply
.9747	e8		inx				inx
.9748	20 82 9f	jsr $9f82			jsr 	CheckComma 					; comma next
.974b	20 aa 97	jsr $97aa			jsr 	Evaluate8BitInteger 		; get next parameter
.974e	28		plp				plp 								; is it the last parameter ?
.974f	90 07		bcc $9758			bcc 	_SSIExit 					; if so, exit.
.9751	e8		inx				inx
.9752	20 82 9f	jsr $9f82			jsr 	CheckComma 					; comma next
.9755	20 aa 97	jsr $97aa			jsr 	Evaluate8BitInteger 		; get last parameter
.9758					_SSIExit:
.9758	fa		plx				plx
.9759	20 7a 9f	jsr $9f7a			jsr 	CheckRightBracket 			; check closing bracket
.975c	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.975d					EvaluateValue:
.975d	48		pha				pha
.975e	20 c8 90	jsr $90c8			jsr		EvaluateExpression 			; expression
.9761	20 dd 91	jsr $91dd			jsr 	Dereference					; derefernce it
.9764	68		pla				pla
.9765	60		rts				rts
.9766					EvaluateNumber:
.9766	20 5d 97	jsr $975d			jsr 	EvaluateValue 				; get a value
.9769	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.976c	29 10		and #$10			and 	#NSBIsString
.976e	d0 16		bne $9786			bne 	HelperTypeError
.9770	60		rts				rts
.9771					EvaluateString:
.9771	20 5d 97	jsr $975d			jsr 	EvaluateValue 				; get a value
.9774	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9777	29 10		and #$10			and 	#NSBIsString
.9779	f0 0b		beq $9786			beq 	HelperTypeError
.977b					CopyAddressToTemp0:
.977b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.977e	85 36		sta $36				sta 	zTemp0
.9780	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9783	85 37		sta $37				sta 	zTemp0+1
.9785	60		rts				rts
.9786					HelperTypeError:
.9786	4c 66 a5	jmp $a566			jmp 	TypeError
.9789					EvaluateInteger:
.9789	20 66 97	jsr $9766			jsr 	EvaluateNumber
.978c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.978f	d0 0a		bne $979b			bne 	HelperValueError 			; if not, it's a float.
.9791	60		rts				rts
.9792					EvaluateUnsignedInteger:
.9792	20 89 97	jsr $9789			jsr 	EvaluateInteger 			; check integer is +ve
.9795	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9798	30 01		bmi $979b			bmi 	HelperValueError
.979a	60		rts				rts
.979b					HelperValueError:
.979b	4c 6b a5	jmp $a56b			jmp 	ArgumentError
.979e					Evaluate16BitInteger:
.979e	20 92 97	jsr $9792			jsr	 	EvaluateUnsignedInteger		; get integer
.97a1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.97a4	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.97a7	d0 f2		bne $979b			bne 	HelperValueError
.97a9	60		rts				rts
.97aa					Evaluate8BitInteger:
.97aa	20 92 97	jsr $9792			jsr	 	EvaluateUnsignedInteger 	; get an integer
.97ad	d0 ec		bne $979b			bne 	HelperValueError
.97af	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.97b2	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.97b5	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.97b8	d0 e1		bne $979b			bne 	HelperValueError
.97ba	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.97bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a3fc					Multiply8x8:
.a3fc	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a3fd	85 36		sta $36			  	sta 	zTemp0
.a3ff	86 37		stx $37				stx 	zTemp0+1
.a401	a9 00		lda #$00			lda 	#0
.a403	a2 08		ldx #$08			ldx 	#8
.a405					_M88Loop:
.a405	90 03		bcc $a40a			bcc 	_M88NoAdd
.a407	18		clc				clc
.a408	65 37		adc $37				adc 	zTemp0+1
.a40a					_M88NoAdd:
.a40a	6a		ror a				ror 	a
.a40b	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a40d	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a40e	d0 f5		bne $a405			bne 	_M88Loop
.a410	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a412	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.97be					NSMNegate:
.97be	bd 00 06	lda $0600,x			lda 	NSStatus,x
.97c1	49 80		eor #$80			eor 	#NSBIsNegative
.97c3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.97c6	60		rts				rts
.97c7					NSMNegateMantissa:
.97c7	38		sec				sec
.97c8	a9 00		lda #$00			lda 	#0
.97ca	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.97cd	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.97d0	a9 00		lda #$00			lda 	#0
.97d2	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.97d5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.97d8	a9 00		lda #$00			lda 	#0
.97da	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.97dd	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.97e0	a9 00		lda #$00			lda 	#0
.97e2	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.97e5	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.97e8	60		rts				rts
.97e9					NSMShiftUpTwo:
.97e9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.97ec	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.97ef	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.97f2	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.97f5	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.97f8	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.97fb	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.97fe	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9801	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9804	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9807	bd 00 06	lda $0600,x			lda 	NSStatus,x
.980a	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.980d	60		rts				rts
.980e					NSMSetZeroMantissaOnly:
.980e	a9 00		lda #$00			lda 	#0
.9810	80 08		bra $981a			bra 	NSMSetMantissa
.9812					NSMSetZero:
.9812	a9 00		lda #$00			lda 	#0
.9814					NSMSetByte:
.9814	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9817	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.981a					NSMSetMantissa:
.981a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.981d	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.9820	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9823	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9826	60		rts				rts
.9827					NSMShiftLeft:
.9827	18		clc				clc
.9828					NSMRotateLeft:
.9828	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.982b	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.982e	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.9831	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.9834	60		rts				rts
.9835					NSMShiftRight:
.9835	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.9838	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.983b	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.983e	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.9841	60		rts				rts
.9842					NSMIsZero:
.9842	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9845	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.9848	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.984b	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.984e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a413					Assemble_ora:
.a413	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a416	01					.byte $01
.a417					Assemble_and:
.a417	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a41a	21					.byte $21
.a41b					Assemble_eor:
.a41b	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a41e	41					.byte $41
.a41f					Assemble_adc:
.a41f	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a422	61					.byte $61
.a423					Assemble_sta:
.a423	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a426	81					.byte $81
.a427					Assemble_lda:
.a427	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a42a	a1					.byte $a1
.a42b					Assemble_cmp:
.a42b	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a42e	c1					.byte $c1
.a42f					Assemble_sbc:
.a42f	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a432	e1					.byte $e1
.a433					Assemble_asl:
.a433	20 03 82	jsr $8203		jsr	AssembleGroup2
>a436	02					.byte $02
>a437	75					.byte $75
.a438					Assemble_rol:
.a438	20 03 82	jsr $8203		jsr	AssembleGroup2
>a43b	22					.byte $22
>a43c	75					.byte $75
.a43d					Assemble_lsr:
.a43d	20 03 82	jsr $8203		jsr	AssembleGroup2
>a440	42					.byte $42
>a441	75					.byte $75
.a442					Assemble_ror:
.a442	20 03 82	jsr $8203		jsr	AssembleGroup2
>a445	62					.byte $62
>a446	75					.byte $75
.a447					Assemble_stx:
.a447	20 03 82	jsr $8203		jsr	AssembleGroup2
>a44a	82					.byte $82
>a44b	50					.byte $50
.a44c					Assemble_ldx:
.a44c	20 03 82	jsr $8203		jsr	AssembleGroup2
>a44f	a2					.byte $a2
>a450	d0					.byte $d0
.a451					Assemble_dec:
.a451	20 03 82	jsr $8203		jsr	AssembleGroup2
>a454	c2					.byte $c2
>a455	55					.byte $55
.a456					Assemble_inc:
.a456	20 03 82	jsr $8203		jsr	AssembleGroup2
>a459	e2					.byte $e2
>a45a	55					.byte $55
.a45b					Assemble_stz:
.a45b	20 03 82	jsr $8203		jsr	AssembleGroup2
>a45e	60					.byte $60
>a45f	44					.byte $44
.a460					Assemble_bit:
.a460	20 03 82	jsr $8203		jsr	AssembleGroup2
>a463	20					.byte $20
>a464	55					.byte $55
.a465					Assemble_sty:
.a465	20 03 82	jsr $8203		jsr	AssembleGroup2
>a468	80					.byte $80
>a469	54					.byte $54
.a46a					Assemble_ldy:
.a46a	20 03 82	jsr $8203		jsr	AssembleGroup2
>a46d	a0					.byte $a0
>a46e	d5					.byte $d5
.a46f					Assemble_cpy:
.a46f	20 03 82	jsr $8203		jsr	AssembleGroup2
>a472	c0					.byte $c0
>a473	d4					.byte $d4
.a474					Assemble_cpx:
.a474	20 03 82	jsr $8203		jsr	AssembleGroup2
>a477	e0					.byte $e0
>a478	d0					.byte $d0
.a479					Assemble_tsb:
.a479	20 03 82	jsr $8203		jsr	AssembleGroup2
>a47c	00					.byte $00
>a47d	50					.byte $50
.a47e					Assemble_trb:
.a47e	20 03 82	jsr $8203		jsr	AssembleGroup2
>a481	10					.byte $10
>a482	50					.byte $50
.a483					Assemble_jsr:
.a483	20 03 82	jsr $8203		jsr	AssembleGroup2
>a486	14					.byte $14
>a487	10					.byte $10
.a488					Assemble_jmp:
.a488	20 03 82	jsr $8203		jsr	AssembleGroup2
>a48b	40					.byte $40
>a48c	10					.byte $10
.a48d					Assemble_bpl:
.a48d	20 54 82	jsr $8254		jsr	AssembleGroup3
>a490	10					.byte $10
.a491					Assemble_bmi:
.a491	20 54 82	jsr $8254		jsr	AssembleGroup3
>a494	30					.byte $30
.a495					Assemble_bvc:
.a495	20 54 82	jsr $8254		jsr	AssembleGroup3
>a498	50					.byte $50
.a499					Assemble_bvs:
.a499	20 54 82	jsr $8254		jsr	AssembleGroup3
>a49c	70					.byte $70
.a49d					Assemble_bcc:
.a49d	20 54 82	jsr $8254		jsr	AssembleGroup3
>a4a0	90					.byte $90
.a4a1					Assemble_bcs:
.a4a1	20 54 82	jsr $8254		jsr	AssembleGroup3
>a4a4	b0					.byte $b0
.a4a5					Assemble_bne:
.a4a5	20 54 82	jsr $8254		jsr	AssembleGroup3
>a4a8	d0					.byte $d0
.a4a9					Assemble_beq:
.a4a9	20 54 82	jsr $8254		jsr	AssembleGroup3
>a4ac	f0					.byte $f0
.a4ad					Assemble_bra:
.a4ad	20 54 82	jsr $8254		jsr	AssembleGroup3
>a4b0	80					.byte $80
.a4b1					Assemble_brk:
.a4b1	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4b4	00					.byte $00
.a4b5					Assemble_php:
.a4b5	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4b8	08					.byte $08
.a4b9					Assemble_clc:
.a4b9	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4bc	18					.byte $18
.a4bd					Assemble_plp:
.a4bd	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4c0	28					.byte $28
.a4c1					Assemble_sec:
.a4c1	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4c4	38					.byte $38
.a4c5					Assemble_rti:
.a4c5	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4c8	40					.byte $40
.a4c9					Assemble_pha:
.a4c9	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4cc	48					.byte $48
.a4cd					Assemble_cli:
.a4cd	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4d0	58					.byte $58
.a4d1					Assemble_phy:
.a4d1	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4d4	5a					.byte $5a
.a4d5					Assemble_rts:
.a4d5	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4d8	60					.byte $60
.a4d9					Assemble_pla:
.a4d9	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4dc	68					.byte $68
.a4dd					Assemble_sei:
.a4dd	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4e0	78					.byte $78
.a4e1					Assemble_ply:
.a4e1	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4e4	7a					.byte $7a
.a4e5					Assemble_dey:
.a4e5	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4e8	88					.byte $88
.a4e9					Assemble_txa:
.a4e9	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4ec	8a					.byte $8a
.a4ed					Assemble_tya:
.a4ed	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4f0	98					.byte $98
.a4f1					Assemble_txs:
.a4f1	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4f4	9a					.byte $9a
.a4f5					Assemble_tay:
.a4f5	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4f8	a8					.byte $a8
.a4f9					Assemble_tax:
.a4f9	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4fc	aa					.byte $aa
.a4fd					Assemble_clv:
.a4fd	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a500	b8					.byte $b8
.a501					Assemble_tsx:
.a501	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a504	ba					.byte $ba
.a505					Assemble_iny:
.a505	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a508	c8					.byte $c8
.a509					Assemble_dex:
.a509	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a50c	ca					.byte $ca
.a50d					Assemble_cld:
.a50d	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a510	d8					.byte $d8
.a511					Assemble_phx:
.a511	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a514	da					.byte $da
.a515					Assemble_inx:
.a515	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a518	e8					.byte $e8
.a519					Assemble_nop:
.a519	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a51c	ea					.byte $ea
.a51d					Assemble_sed:
.a51d	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a520	f8					.byte $f8
.a521					Assemble_plx:
.a521	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a524	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a525					DecimalScalarTable:
>a525	66 66 66 66				.dword $66666666 ; 0.1
>a529	de					.byte $de
>a52a	1f 85 eb 51				.dword $51eb851f ; 0.01
>a52e	db					.byte $db
>a52f	4c 37 89 41				.dword $4189374c ; 0.001
>a533	d8					.byte $d8
>a534	ac 8b db 68				.dword $68db8bac ; 0.0001
>a538	d4					.byte $d4
>a539	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a53d	d1					.byte $d1
>a53e	83 de 1b 43				.dword $431bde83 ; 1e-06
>a542	ce					.byte $ce
>a543	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a547	ca					.byte $ca
>a548	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a54c	c7					.byte $c7
>a54d	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a551	c4					.byte $c4
>a552	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a556	c0					.byte $c0
>a557	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a55b	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a55c					SyntaxError:
.a55c	a9 02		lda #$02		lda	#2
.a55e	4c bf 8c	jmp $8cbf		jmp	ErrorHandler
.a561					RangeError:
.a561	a9 04		lda #$04		lda	#4
.a563	4c bf 8c	jmp $8cbf		jmp	ErrorHandler
.a566					TypeError:
.a566	a9 05		lda #$05		lda	#5
.a568	4c bf 8c	jmp $8cbf		jmp	ErrorHandler
.a56b					ArgumentError:
.a56b	a9 07		lda #$07		lda	#7
.a56d	4c bf 8c	jmp $8cbf		jmp	ErrorHandler
.a570					NotDoneError:
.a570	a9 0c		lda #$0c		lda	#12
.a572	4c bf 8c	jmp $8cbf		jmp	ErrorHandler
.a575					ErrorText:
>a575	42 72 65 61 6b 00			.text	"Break",0
>a57b	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a583	72 72 6f 72 00
>a588	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a590	20 62 79 20 7a 65 72 6f 00
>a599	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a5a1	61 6e 67 65 00
>a5a6	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a5ae	6d 61 74 63 68 00
>a5b4	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a5bc	65 6d 6f 72 79 00
>a5c2	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a5ca	61 72 67 75 6d 65 6e 74 00
>a5d3	53 74 6f 70 00				.text	"Stop",0
>a5d8	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a5e0	6f 6f 20 6c 6f 6e 67 00
>a5e8	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a5f0	6e 20 66 61 69 6c 65 64 00
>a5f9	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a601	61 74 61 00
>a605	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a60d	65 6e 74 65 64 00
>a613	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a61b	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a627	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a62f	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a63c	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a644	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a651	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a659	68 6f 75 74 20 57 68 69 6c 65 00
>a664	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a66c	68 6f 75 74 20 46 6f 72 00
>a675	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a67d	61 63 6b 20 66 75 6c 6c 00
>a686	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a68e	75 63 74 75 72 65 00
>a695	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a69d	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a6aa	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a6b2	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a6c0	41 72 72 61 79 20 73 69			.text	"Array size",0
>a6c8	7a 65 00
>a6cb	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a6d3	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a6db	42 75 69 6c 74 20 57 65			.text "Built Wednesday 05-Oct-2022. Build 131."
>a6e3	64 6e 65 73 64 61 79 20 30 35 2d 4f 63 74 2d 32
>a6f3	30 32 32 2e 20 42 75 69 6c 64 20 31 33 31 2e

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.984f					StackPushByte:
.984f	48		pha				pha 								; save byte
.9850	a5 34		lda $34				lda 	BasicStack
.9852	d0 02		bne $9856			bne 	_SPBNoBorrow
.9854	c6 35		dec $35				dec 	BasicStack+1
.9856					_SPBNoBorrow:
.9856	c6 34		dec $34				dec 	BasicStack
.9858	68		pla				pla 								; get back and write
.9859	92 34		sta ($34)			sta 	(BasicStack)
.985b	60		rts				rts
.985c					StackPopByte:
.985c	b2 34		lda ($34)			lda 	(BasicStack)
.985e	e6 34		inc $34				inc 	BasicStack
.9860	d0 02		bne $9864			bne 	_SPBNoCarry
.9862	e6 35		inc $35				inc 	BasicStack+1
.9864					_SPBNoCarry:
.9864	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9865					StackOpen:
.9865	48		pha				pha 								; save frame byte
.9866	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9868	0a		asl a				asl 	a 							; claim twice this for storage
.9869	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.986b	38		sec				sec 								; so basically subtracting from
.986c	65 34		adc $34				adc 	basicStack 	 				; basicStack
.986e	85 34		sta $34				sta 	basicStack
.9870	b0 08		bcs $987a			bcs 	_SONoBorrow
.9872	c6 35		dec $35				dec 	basicStack+1
.9874	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9876	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9878	90 04		bcc $987e			bcc 	_SOMemory
.987a					_SONoBorrow:
.987a	68		pla				pla 								; get marker back and write at TOS
.987b	92 34		sta ($34)			sta 	(basicStack)
.987d	60		rts				rts
.987e					_SOMemory:
.987e							ERR_STACK
.987e					StackClose:
.987e	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9880	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9882	0a		asl a				asl 	a 							; claim twice this.
.9883	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9885	85 34		sta $34				sta 	basicStack
.9887	90 02		bcc $988b			bcc 	_SCExit
.9889	e6 35		inc $35				inc 	basicStack+1
.988b					_SCExit:
.988b	60		rts				rts
.988c					StackCheckFrame:
.988c	48		pha				pha
.988d					_StackRemoveLocals:
.988d	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.988f	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.9891	b0 05		bcs $9898			bcs 	_SCNoLocal
.9893	20 21 9f	jsr $9f21			jsr 	LocalPopValue
.9896	80 f5		bra $988d			bra 	_StackRemoveLocals
.9898					_SCNoLocal:
.9898	68		pla				pla
.9899	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.989b	29 f0		and #$f0			and 	#$F0 						; check type bits
.989d	d0 01		bne $98a0			bne 	_SCFError 					; different, we have structures mixed up
.989f	60		rts				rts
.98a0					_SCFError:
.98a0	8a		txa				txa 								; report error X
.98a1	4c bf 8c	jmp $8cbf			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.98a4					STKSaveCodePosition:
.98a4	5a		phy				phy
.98a5	98		tya				tya 								; save Y
.98a6	a0 05		ldy #$05			ldy 	#5
.98a8	91 34		sta ($34),y			sta 	(basicStack),y
.98aa	88		dey				dey 								; save Code Pointer
.98ab					_STKSaveLoop:
.98ab	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.98ae	91 34		sta ($34),y			sta 	(basicStack),y
.98b0	88		dey				dey
.98b1	d0 f8		bne $98ab			bne 	_STKSaveLoop
.98b3	7a		ply				ply
.98b4	60		rts				rts
.98b5					STKLoadCodePosition:
.98b5	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.98b7					_STKLoadLoop:
.98b7	b1 34		lda ($34),y			lda 	(basicStack),y
.98b9	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.98bc	c8		iny				iny
.98bd	c0 05		cpy #$05			cpy 	#5
.98bf	d0 f6		bne $98b7			bne 	_STKLoadLoop
.98c1	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.98c3	a8		tay				tay
.98c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.98c5					StackReset:
.98c5	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.98c7	85 34		sta $34				sta 	0+basicStack
.98c9	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.98cb	85 35		sta $35				sta 	1+basicStack
.98cd	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.98cf	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.98d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a702					StringConcrete:
.a702	5a		phy				phy 								; save position on stack
.a703	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a706	85 38		sta $38				sta 	zTemp1
.a708	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a70b	85 39		sta $39				sta 	zTemp1+1
.a70d	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a70f					_SALength:
.a70f	c8		iny				iny
.a710	b1 38		lda ($38),y			lda 	(zTemp1),y
.a712	d0 fb		bne $a70f			bne 	_SALength
.a714	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a716	b0 3f		bcs $a757			bcs 	_SALengthError
.a718	98		tya				tya 				 				; length of the new string
.a719	18		clc				clc
.a71a	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a71c	90 02		bcc $a720			bcc 	_SAHaveLength
.a71e	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a720					_SAHaveLength:
.a720	48		pha				pha 								; save length.
.a721	38		sec				sec
.a722	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a724	6d 0e 07	adc $070e			adc 	StringMemory
.a727	8d 0e 07	sta $070e			sta 	StringMemory
.a72a	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a72c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.a72f	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a731	6d 0f 07	adc $070f			adc 	StringMemory+1
.a734	8d 0f 07	sta $070f			sta 	StringMemory+1
.a737	85 3b		sta $3b				sta 	zTemp2+1
.a739	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a73c	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a73d	38		sec				sec
.a73e	e9 03		sbc #$03			sbc 	#3
.a740	92 3a		sta ($3a)			sta 	(zTemp2)
.a742	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a744	a0 01		ldy #$01			ldy 	#1
.a746	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a748					_SACopyNewString:
.a748	a0 00		ldy #$00			ldy 	#0
.a74a					_SACopyNSLoop:
.a74a	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a74c	c8		iny				iny 								; write two on in string storage
.a74d	c8		iny				iny
.a74e	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a750	88		dey				dey 								; this makes it one one.
.a751	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a753	d0 f5		bne $a74a			bne 	_SACopyNSLoop
.a755	7a		ply				ply
.a756	60		rts				rts
.a757					_SALengthError:
.a757	a9 09		lda #$09		lda	#9
.a759	4c bf 8c	jmp $8cbf		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a75c					StringSystemInitialise:
.a75c	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a75e	8d 0e 07	sta $070e			sta 	0+StringMemory
.a761	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a763	8d 0f 07	sta $070f			sta 	1+StringMemory
.a766	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a769	60		rts				rts
.a76a					StringSpaceInitialise:
.a76a	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a76c	8d 10 07	sta $0710			sta 	StringInitialised
.a76f	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a772	8d 11 07	sta $0711			sta 	StringTempPointer
.a775	ad 0f 07	lda $070f			lda 	StringMemory+1
.a778	3a		dec a				dec 	a
.a779	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a77c	60		rts				rts
.a77d					StringTempAllocate:
.a77d	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a77f	b0 35		bcs $a7b6			bcs 	_STALength
.a781	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a784	30 05		bmi $a78b			bmi 	_STAAllocate
.a786	48		pha				pha 								; save value to subtract.
.a787	20 6a a7	jsr $a76a			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a78a	68		pla				pla 								; restore it
.a78b					_STAAllocate:
.a78b	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a78d	18		clc				clc  								; deliberate allows one more
.a78e	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a791	8d 11 07	sta $0711			sta 	StringTempPointer
.a794	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a797	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a799	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a79c	69 ff		adc #$ff			adc 	#$FF
.a79e	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a7a1	85 3d		sta $3d				sta 	zsTemp+1
.a7a3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a7a6	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a7a9	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a7ac	a9 10		lda #$10			lda 	#NSTString
.a7ae	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a7b1	a9 00		lda #$00			lda 	#0 							; clear the target string
.a7b3	92 3c		sta ($3c)			sta 	(zsTemp)
.a7b5	60		rts				rts
.a7b6					_STALength:
.a7b6	a9 09		lda #$09		lda	#9
.a7b8	4c bf 8c	jmp $8cbf		jmp	ErrorHandler
.a7bb					StringTempWrite:
.a7bb	48		pha				pha
.a7bc	92 3c		sta ($3c)			sta 	(zsTemp)
.a7be	e6 3c		inc $3c				inc 	zsTemp
.a7c0	d0 02		bne $a7c4			bne 	_STWNoCarry
.a7c2	e6 3d		inc $3d				inc 	zsTemp+1
.a7c4					_STWNoCarry:
.a7c4	a9 00		lda #$00			lda 	#0
.a7c6	92 3c		sta ($3c)			sta 	(zsTemp)
.a7c8	68		pla				pla
.a7c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.98d2					BackloadProgram:
.98d2	a2 ff		ldx #$ff			ldx 	#$FF
.98d4	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.98d7	20 02 99	jsr $9902			jsr 	BLReadByte
.98da	30 1f		bmi $98fb			bmi 	_BPExit
.98dc					_BPCopy:
.98dc	e8		inx				inx  								; copy byte in
.98dd	9d 25 08	sta $0825,x			sta 	lineBuffer,x
.98e0	9e 26 08	stz $0826,x			stz 	lineBuffer+1,x
.98e3	20 02 99	jsr $9902			jsr 	BLReadByte 					; read next byte
.98e6	30 0a		bmi $98f2			bmi 	_BPEndLine 					; -ve = EOL
.98e8	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.98ea	d0 02		bne $98ee			bne 	_BPNotTab
.98ec	a9 20		lda #$20			lda 	#' '
.98ee					_BPNotTab:
.98ee	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.98f0	b0 ea		bcs $98dc			bcs 	_BPCopy
.98f2					_BPEndLine:
.98f2	20 1d 9c	jsr $9c1d			jsr 	TokeniseLine 				; tokenise the line.
.98f5	38		sec				sec 								; append not insert
.98f6	20 4b a8	jsr $a84b			jsr 	MemoryInsertLine 			; append to current program
.98f9	80 d7		bra $98d2			bra 	BackloadProgram
.98fb					_BPExit:
.98fb	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.98fe	20 d6 84	jsr $84d6			jsr 	ClearCommand 				; clear variables etc.
.9901	60		rts				rts
.9902					BLReadByte:
.9902					_BLLoad:
.9902	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9905	ee 03 99	inc $9903			inc 	_BLLoad+1
.9908	d0 03		bne $990d			bne 	_BLNoCarry
.990a	ee 04 99	inc $9904			inc 	_BLLoad+2
.990d					_BLNoCarry:
.990d	c9 00		cmp #$00			cmp 	#0
.990f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9910					TokeniseSearchTable:
.9910	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9912	85 36		sta $36				sta 	zTemp0
.9914	a0 00		ldy #$00			ldy 	#0
.9916	a9 80		lda #$80			lda 	#$80 						; token #
.9918	85 38		sta $38				sta 	zTemp1
.991a					_TSTLoop:
.991a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.991c	30 49		bmi $9967			bmi 	_TSTFail 					; -ve = end of table
.991e	f0 2e		beq $994e			beq 	_TSTNext 					; zero, check next it's a dummy
.9920	c8		iny				iny 								; get the hash
.9921	b1 36		lda ($36),y			lda 	(zTemp0),y
.9923	88		dey				dey
.9924	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.9927	d0 25		bne $994e			bne 	_TSTNext
.9929	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.992c	38		sec				sec
.992d	ed 00 07	sbc $0700			sbc 	identStart
.9930	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9932	d0 1a		bne $994e			bne 	_TSTNext
.9934	5a		phy				phy 								; save Y , we might fail
.9935	c8		iny				iny 								; point to text
.9936	c8		iny				iny
.9937	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.993a					_TSTCompareName:
.993a	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; compare text.
.993d	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.993f	d0 0c		bne $994d			bne 	_TSTNextPullY 				; fail, pullY and do next
.9941	e8		inx				inx
.9942	c8		iny				iny
.9943	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.9946	d0 f2		bne $993a			bne 	_TSTCompareName
.9948	7a		ply				ply 								; throw Y
.9949	a5 38		lda $38				lda 	zTemp1 						; get token #
.994b	38		sec				sec 								; return with CS = passed.
.994c	60		rts				rts
.994d					_TSTNextPullY:
.994d	7a		ply				ply 								; restore current, fall through.
.994e					_TSTNext:
.994e	e6 38		inc $38				inc 	zTemp1 						; token counter
.9950	98		tya				tya
.9951	18		clc				clc
.9952	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9954	1a		inc a				inc 	a 							; +1
.9955	1a		inc a				inc 	a 							; +2
.9956	a8		tay				tay
.9957	10 c1		bpl $991a			bpl 	_TSTLoop 					; if Y < $80 loop back
.9959	98		tya				tya 								; add Y to zTemp0 and reset Y
.995a	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.995c	18		clc				clc  								; but have tables > 255 bytes
.995d	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.995f	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9961	90 b7		bcc $991a			bcc 	_TSTLoop
.9963	e6 37		inc $37				inc 	zTemp0+1
.9965	80 b3		bra $991a			bra 	_TSTLoop
.9967					_TSTFail:
.9967	18		clc				clc
.9968	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9969					KeywordSet0:
>9969	00 65					.text	0,$65,""               ; $80 !0:EOF
>996b	00 58					.text	0,$58,""               ; $81 !1:SH1
>996d	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>996f	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9975	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>997d	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9983	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>998a	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9991	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9998	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>999e	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>99a6	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>99ae	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>99b4	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>99bb	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>99c1	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>99c9	28
>99ca	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>99d0	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>99d6	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>99dc	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>99e3	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>99e9	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>99ef	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>99f4	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>99f8	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>99fe	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>9a06	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>9a0d	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>9a14	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>9a1c	43
>9a1d	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>9a23	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>9a29	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>9a30	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>9a36	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>9a3c	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>9a41	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>9a47	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>9a4c	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>9a54	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>9a5a	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>9a61	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>9a67	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>9a6c	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $aa LOCAL
>9a73	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ab PRINT
>9a7a	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ac READ
>9a80	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ad REM
>9a85	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ae RETURN
>9a8d	02 a3 54 4f				.text	2,$a3,"TO"             ; $af TO
>9a91	ff					.text	$FF
.9a92					KeywordSet1:
>9a92	00 65					.text	0,$65,""               ; $80 !0:EOF
>9a94	00 58					.text	0,$58,""               ; $81 !1:SH1
>9a96	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9a98	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>9aa0	4c 45
>9aa2	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>9aaa	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>9ab1	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>9ab6	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>9abc	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>9ac1	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>9ac9	45
>9aca	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>9acf	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>9ad5	ff					.text	$FF
.9ad6					KeywordSet2:
>9ad6	00 65					.text	0,$65,""               ; $80 !0:EOF
>9ad8	00 58					.text	0,$58,""               ; $81 !1:SH1
>9ada	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9adc	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>9ae1	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>9ae6	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>9aeb	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>9af0	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>9af5	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>9afa	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>9aff	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>9b04	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>9b09	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>9b0e	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>9b13	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>9b18	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>9b1d	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>9b22	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>9b27	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>9b2c	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>9b31	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>9b36	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>9b3b	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9b40	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>9b45	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>9b4a	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9b4f	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>9b54	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>9b59	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>9b5e	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9b63	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>9b68	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>9b6d	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9b72	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9b77	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9b7c	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9b81	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9b86	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9b8b	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9b90	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9b95	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9b9a	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9b9f	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9ba4	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>9ba9	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>9bae	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9bb3	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9bb8	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9bbd	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9bc2	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9bc7	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>9bcc	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9bd1	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9bd6	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>9bdb	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>9be0	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>9be5	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b8 STX
>9bea	03 00 53 54 59				.text	3,$00,"STY"            ; $b9 STY
>9bef	03 01 53 54 5a				.text	3,$01,"STZ"            ; $ba STZ
>9bf4	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bb TAX
>9bf9	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bc TAY
>9bfe	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $bd TRB
>9c03	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $be TSB
>9c08	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $bf TSX
>9c0d	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c0 TXA
>9c12	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c1 TXS
>9c17	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c2 TYA
>9c1c	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9c1d					TokeniseLine:
.9c1d	20 a5 9d	jsr $9da5			jsr 	FixLineBufferCase 			; fix line case
.9c20	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9c22	8d 25 07	sta $0725			sta 	tokenOffset
.9c25	9c 26 07	stz $0726			stz 	tokenLineNumber
.9c28	9c 27 07	stz $0727			stz 	tokenLineNumber+1
.9c2b	a2 ff		ldx #$ff			ldx 	#$FF
.9c2d					_TKFindFirst:
.9c2d	e8		inx				inx
.9c2e	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9c31	f0 79		beq $9cac			beq 	_TKExit
.9c33	c9 20		cmp #$20			cmp 	#' '
.9c35	90 f6		bcc $9c2d			bcc 	_TKFindFirst
.9c37	c9 30		cmp #$30			cmp 	#'0'
.9c39	90 07		bcc $9c42			bcc 	_TKNoLineNumber
.9c3b	c9 3a		cmp #$3a			cmp 	#'9'+1
.9c3d	b0 03		bcs $9c42			bcs 	_TKNoLineNumber
.9c3f	20 cf 9d	jsr $9dcf			jsr 	TokeniseExtractLineNumber
.9c42					_TKNoLineNumber:
.9c42					_TKTokeniseLoop:
.9c42	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9c45	f0 65		beq $9cac			beq 	_TKExit
.9c47	e8		inx				inx
.9c48	c9 20		cmp #$20			cmp 	#' '
.9c4a	f0 f6		beq $9c42			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9c4c	ca		dex				dex 								; undo last get, A contains character, X is position.
.9c4d	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9c4f	f0 61		beq $9cb2			beq 	_TKTokeniseIdentifier
.9c51	c9 41		cmp #$41			cmp 	#'A'
.9c53	90 04		bcc $9c59			bcc 	_TKTokenisePunctuation
.9c55	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9c57	90 59		bcc $9cb2			bcc 	_TKTokeniseIdentifier
.9c59					_TKTokenisePunctuation:
.9c59	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9c5b	f0 27		beq $9c84			beq 	_TKString
.9c5d	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.9c5f	f0 28		beq $9c89			beq 	_TKHexConstant
.9c61	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9c63	f0 29		beq $9c8e			beq 	_TKCheckDouble
.9c65	c9 3e		cmp #$3e			cmp 	#'>'
.9c67	f0 25		beq $9c8e			beq 	_TKCheckDouble
.9c69					_TKStandardPunctuation:
.9c69	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get it back.
.9c6c	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9c6e	90 0e		bcc $9c7e			bcc 	_TKNoShift
.9c70	48		pha				pha 								; save
.9c71	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9c73	85 36		sta $36				sta 	zTemp0
.9c75	68		pla				pla
.9c76	29 20		and #$20			and 	#32 						; bit 5
.9c78	4a		lsr a				lsr 	a 							; shift into bit 3
.9c79	4a		lsr a				lsr 	a
.9c7a	05 36		ora $36				ora 	zTemp0
.9c7c	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9c7e					_TKNoShift:
.9c7e	20 14 9e	jsr $9e14			jsr 	TokeniseWriteByte 			; write the punctuation character
.9c81	e8		inx				inx 								; consume the character
.9c82	80 be		bra $9c42			bra 	_TKTokeniseLoop 			; and loop round again.
.9c84					_TKString:
.9c84	20 34 9d	jsr $9d34			jsr 	TokeniseString
.9c87	80 b9		bra $9c42			bra 	_TKTokeniseLoop
.9c89					_TKHexConstant:
.9c89	20 6f 9d	jsr $9d6f			jsr 	TokeniseHexConstant
.9c8c	80 b4		bra $9c42			bra 	_TKTokeniseLoop
.9c8e					_TKCheckDouble:
.9c8e	bd 26 08	lda $0826,x			lda 	lineBuffer+1,x 				; get next character
.9c91	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9c93	90 d4		bcc $9c69			bcc 	_TKStandardPunctuation
.9c95	c9 3f		cmp #$3f			cmp 	#'>'+1
.9c97	b0 d0		bcs $9c69			bcs 	_TKStandardPunctuation
.9c99	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9c9c	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9c9e	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9c9f	7d 26 08	adc $0826,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9ca2	38		sec				sec
.9ca3	e9 3c		sbc #$3c			sbc 	#'<'
.9ca5	20 14 9e	jsr $9e14			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9ca8	e8		inx				inx 								; consume both
.9ca9	e8		inx				inx
.9caa	80 96		bra $9c42			bra 	_TKTokeniseLoop
.9cac	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9cae	20 14 9e	jsr $9e14			jsr 	TokeniseWriteByte
.9cb1	60		rts				rts
.9cb2					_TKTokeniseIdentifier:
.9cb2	8e 00 07	stx $0700			stx 	identStart 					; save start
.9cb5	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9cb8					_TKCheckLoop:
.9cb8	e8		inx				inx 								; look at next, we know first is identifier.
.9cb9	bd 25 08	lda $0825,x			lda  	lineBuffer,x
.9cbc	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9cbe	f0 f8		beq $9cb8			beq 	_TKCheckLoop
.9cc0	c9 30		cmp #$30			cmp	 	#"0"
.9cc2	90 0c		bcc $9cd0			bcc 	_TKEndIdentifier
.9cc4	c9 3a		cmp #$3a			cmp 	#"9"+1
.9cc6	90 f0		bcc $9cb8			bcc 	_TKCheckLoop
.9cc8	c9 41		cmp #$41			cmp	 	#"A"
.9cca	90 04		bcc $9cd0			bcc 	_TKEndIdentifier
.9ccc	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9cce	90 e8		bcc $9cb8			bcc 	_TKCheckLoop
.9cd0					_TKEndIdentifier:
.9cd0	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9cd3	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9cd5	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9cd7	f0 06		beq $9cdf			beq 	_TKHasTypeCharacter
.9cd9	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9cdb	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9cdd	d0 07		bne $9ce6			bne 	_TKNoTypeCharacter
.9cdf					_TKHasTypeCharacter:
.9cdf	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9ce2	e8		inx				inx 								; read next
.9ce3	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9ce6					_TKNoTypeCharacter:
.9ce6	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9ce8	d0 09		bne $9cf3			bne 	_TKNoArray
.9cea	e8		inx				inx 								; skip the (
.9ceb	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9cee	09 04		ora #$04			ora 	#$04
.9cf0	8d 04 07	sta $0704			sta 	identTypeByte
.9cf3					_TKNoArray:
.9cf3	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9cf6	20 90 9d	jsr $9d90			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9cf9	a0 99		ldy #$99			ldy 	#(KeywordSet0) >> 8
.9cfb	a9 69		lda #$69			lda 	#(KeywordSet0) & $FF
.9cfd	20 10 99	jsr $9910			jsr 	TokeniseSearchTable
.9d00	a2 00		ldx #$00			ldx 	#0
.9d02	b0 1f		bcs $9d23			bcs 	_TKFoundToken
.9d04	a0 9a		ldy #$9a			ldy 	#(KeywordSet1) >> 8
.9d06	a9 92		lda #$92			lda 	#(KeywordSet1) & $FF
.9d08	20 10 99	jsr $9910			jsr 	TokeniseSearchTable
.9d0b	a2 81		ldx #$81			ldx 	#$81
.9d0d	b0 14		bcs $9d23			bcs 	_TKFoundToken
.9d0f	a0 9a		ldy #$9a			ldy 	#(KeywordSet2) >> 8
.9d11	a9 d6		lda #$d6			lda 	#(KeywordSet2) & $FF
.9d13	20 10 99	jsr $9910			jsr 	TokeniseSearchTable
.9d16	a2 82		ldx #$82			ldx 	#$82
.9d18	b0 09		bcs $9d23			bcs 	_TKFoundToken
.9d1a	20 20 9e	jsr $9e20			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9d1d	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9d20	4c 42 9c	jmp $9c42			jmp 	_TKTokeniseLoop 			; and go round again.
.9d23					_TKFoundToken:
.9d23	48		pha				pha 								; save token
.9d24	8a		txa				txa 								; shift in X, is there one ?
.9d25	f0 03		beq $9d2a			beq 	_TKNoTShift
.9d27	20 14 9e	jsr $9e14			jsr 	TokeniseWriteByte 			; if so, write it out
.9d2a					_TKNoTShift:
.9d2a	68		pla				pla 								; restore and write token
.9d2b	20 14 9e	jsr $9e14			jsr 	TokeniseWriteByte
.9d2e	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9d31	4c 42 9c	jmp $9c42			jmp 	_TKTokeniseLoop 			; and go round again.
.9d34					TokeniseString:
.9d34	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9d36	20 14 9e	jsr $9e14			jsr 	TokeniseWriteByte
.9d39	e8		inx				inx									; start of quoted string.
.9d3a	da		phx				phx 								; push start of string on top
.9d3b	ca		dex				dex
.9d3c					_TSFindEnd:
.9d3c	e8		inx				inx
.9d3d	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; next character
.9d40	f0 04		beq $9d46			beq 	_TSEndOfString
.9d42	c9 22		cmp #$22			cmp 	#'"'
.9d44	d0 f6		bne $9d3c			bne 	_TSFindEnd
.9d46					_TSEndOfString:
.9d46	7a		ply				ply  								; so now Y is first character, X is character after end.
.9d47	48		pha				pha 								; save terminating character
.9d48	20 50 9d	jsr $9d50			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9d4b	68		pla				pla 								; terminating character
.9d4c	f0 01		beq $9d4f			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9d4e	e8		inx				inx
.9d4f					_TSNotQuote:
.9d4f	60		rts				rts
.9d50					TOWriteBlockXY:
.9d50	86 36		stx $36				stx 	zTemp0 						; write end character
.9d52	98		tya				tya
.9d53	49 ff		eor #$ff			eor 	#$FF
.9d55	38		sec				sec
.9d56	65 36		adc $36				adc 	zTemp0
.9d58	1a		inc a				inc 	a 							; one extra for NULL
.9d59	20 14 9e	jsr $9e14			jsr 	TokeniseWriteByte
.9d5c					_TOBlockLoop:
.9d5c	c4 36		cpy $36				cpy 	zTemp0
.9d5e	f0 09		beq $9d69			beq 	_TOBlockExit
.9d60	b9 25 08	lda $0825,y			lda 	lineBuffer,y
.9d63	20 14 9e	jsr $9e14			jsr 	TokeniseWriteByte
.9d66	c8		iny				iny
.9d67	80 f3		bra $9d5c			bra 	_TOBlockLoop
.9d69					_TOBlockExit:
.9d69	a9 00		lda #$00			lda 	#0
.9d6b	20 14 9e	jsr $9e14			jsr 	TokeniseWriteByte
.9d6e	60		rts				rts
.9d6f					TokeniseHexConstant:
.9d6f	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9d71	20 14 9e	jsr $9e14			jsr 	TokeniseWriteByte
.9d74	e8		inx				inx									; start of quoted string.
.9d75	da		phx				phx 								; push start of constant on top
.9d76	ca		dex				dex
.9d77					_THFindLoop:
.9d77	e8		inx				inx
.9d78	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9d7b	c9 30		cmp #$30			cmp 	#"0"
.9d7d	90 0c		bcc $9d8b			bcc 	_THFoundEnd
.9d7f	c9 3a		cmp #$3a			cmp 	#"9"+1
.9d81	90 f4		bcc $9d77			bcc 	_THFindLoop
.9d83	c9 41		cmp #$41			cmp 	#"A"
.9d85	90 04		bcc $9d8b			bcc 	_THFoundEnd
.9d87	c9 47		cmp #$47			cmp 	#"F"+1
.9d89	90 ec		bcc $9d77			bcc 	_THFindLoop
.9d8b					_THFoundEnd:
.9d8b	7a		ply				ply 								; restore start
.9d8c	20 50 9d	jsr $9d50			jsr 	TOWriteBlockXY 				; output the block
.9d8f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9d90					TokeniseCalculateHash:
.9d90	da		phx				phx
.9d91	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9d94	a9 00		lda #$00			lda 	#0
.9d96					_TCHLoop:
.9d96	18		clc				clc
.9d97	7d 25 08	adc $0825,x			adc 	lineBuffer,x
.9d9a	e8		inx				inx
.9d9b	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9d9e	d0 f6		bne $9d96			bne 	_TCHLoop
.9da0	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9da3	fa		plx				plx
.9da4	60		rts				rts
.9da5					FixLineBufferCase:
.9da5	a2 00		ldx #$00			ldx 	#0
.9da7					_FLBCLoop:
.9da7	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get next character
.9daa	f0 22		beq $9dce			beq 	_FLBCExit 					; end of string.
.9dac	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9dae	f0 11		beq $9dc1			beq 	_FLBCInQuotes
.9db0	e8		inx				inx
.9db1	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9db3	90 f2		bcc $9da7			bcc 	_FLBCLoop
.9db5	c9 7b		cmp #$7b			cmp 	#'z'+1
.9db7	b0 ee		bcs $9da7			bcs 	_FLBCLoop
.9db9	38		sec				sec 								; make U/C
.9dba	e9 20		sbc #$20			sbc 	#32
.9dbc	9d 24 08	sta $0824,x			sta	 	lineBuffer-1,x 				; write back
.9dbf	80 e6		bra $9da7			bra 	_FLBCLoop
.9dc1					_FLBCInQuotes:
.9dc1	e8		inx				inx 								; advance
.9dc2	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get next
.9dc5	f0 07		beq $9dce			beq 	_FLBCExit 					; exit on EOS
.9dc7	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9dc9	d0 f6		bne $9dc1			bne 	_FLBCInQuotes
.9dcb	e8		inx				inx 								; skip over it
.9dcc	80 d9		bra $9da7			bra 	_FLBCLoop
.9dce					_FLBCExit:
.9dce	60		rts				rts
.9dcf					TokeniseExtractLineNumber:
.9dcf	ad 27 07	lda $0727			lda 	tokenLineNumber+1 			; push current value on stack
.9dd2	48		pha				pha
.9dd3	ad 26 07	lda $0726			lda 	tokenLineNumber
.9dd6	48		pha				pha
.9dd7	20 0d 9e	jsr $9e0d			jsr 	_TELNTimes2 				; line # x 4
.9dda	20 0d 9e	jsr $9e0d			jsr 	_TELNTimes2 				; line # x 2
.9ddd	18		clc				clc 								; add stacked value
.9dde	68		pla				pla
.9ddf	6d 26 07	adc $0726			adc 	tokenLineNumber
.9de2	8d 26 07	sta $0726			sta 	tokenLineNumber
.9de5	68		pla				pla
.9de6	6d 27 07	adc $0727			adc 	tokenLineNumber+1
.9de9	8d 27 07	sta $0727			sta 	tokenLineNumber+1 			; line # x 5
.9dec	20 0d 9e	jsr $9e0d			jsr 	_TELNTimes2 				; line # x 10
.9def	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get and consume character
.9df2	e8		inx				inx
.9df3	29 0f		and #$0f			and 	#15 						; add to line #
.9df5	18		clc				clc
.9df6	6d 26 07	adc $0726			adc 	tokenLineNumber
.9df9	8d 26 07	sta $0726			sta 	tokenLineNumber
.9dfc	90 03		bcc $9e01			bcc 	_TLENNoCarry
.9dfe	ee 27 07	inc $0727			inc 	tokenLineNumber+1
.9e01					_TLENNoCarry:
.9e01	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; more digits ?
.9e04	c9 30		cmp #$30			cmp 	#'0'
.9e06	90 04		bcc $9e0c			bcc 	_TLENExit
.9e08	c9 3a		cmp #$3a			cmp 	#'9'+1
.9e0a	90 c3		bcc $9dcf			bcc 	TokeniseExtractLineNumber
.9e0c					_TLENExit:
.9e0c	60		rts				rts
.9e0d					_TELNTimes2:
.9e0d	0e 26 07	asl $0726			asl 	tokenLineNumber
.9e10	2e 27 07	rol $0727			rol 	tokenLineNumber+1
.9e13	60		rts				rts
.9e14					TokeniseWriteByte:
.9e14	da		phx				phx
.9e15	ae 25 07	ldx $0725			ldx 	tokenOffset 				; next slot to write to
.9e18	9d 25 07	sta $0725,x			sta 	tokenOffset,x 				; write byte out
.9e1b	ee 25 07	inc $0725			inc 	tokenOffset 				; advance slot.
.9e1e	fa		plx				plx
.9e1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9e20					CheckCreateVariableRecord:
.9e20	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9e22	85 36		sta $36				sta 	0+zTemp0
.9e24	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9e26	85 37		sta $37				sta 	1+zTemp0
.9e28					_CCVSearch:
.9e28	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9e2a	f0 2c		beq $9e58			beq 	_CCVFail
.9e2c	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9e2e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9e30	cd 03 07	cmp $0703			cmp 	identHash
.9e33	d0 16		bne $9e4b			bne 	_CCVNext
.9e35	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9e37	ae 00 07	ldx $0700			ldx 	identStart
.9e3a					_CCVCompare:
.9e3a	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9e3d	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9e3f	e8		inx				inx 								; advance pointers
.9e40	c8		iny				iny
.9e41	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9e42	d0 07		bne $9e4b			bne 	_CCVNext  					; didn't match go to next.
.9e44	90 f4		bcc $9e3a			bcc 	_CCVCompare 				; not finished yet.
.9e46	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9e49	f0 41		beq $9e8c			beq 	_CCVFound 					; yes, we were successful
.9e4b					_CCVNext:
.9e4b	18		clc				clc
.9e4c	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9e4e	65 36		adc $36				adc 	zTemp0
.9e50	85 36		sta $36				sta 	zTemp0
.9e52	90 d4		bcc $9e28			bcc 	_CCVSearch
.9e54	e6 37		inc $37				inc 	zTemp0+1
.9e56	80 d0		bra $9e28			bra 	_CCVSearch
.9e58					_CCVFail:
.9e58	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9e5a	ad 03 07	lda $0703			lda 	identHash
.9e5d	91 36		sta ($36),y			sta 	(zTemp0),y
.9e5f	c8		iny				iny 								; offset 2 is the type byte
.9e60	ad 04 07	lda $0704			lda 	identTypeByte
.9e63	91 36		sta ($36),y			sta 	(zTemp0),y
.9e65	c8		iny				iny
.9e66					_CCVData:
.9e66	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9e68	91 36		sta ($36),y			sta 	(zTemp0),y
.9e6a	c8		iny				iny
.9e6b	c0 08		cpy #$08			cpy 	#8
.9e6d	90 f7		bcc $9e66			bcc 	_CCVData
.9e6f	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9e72					_CCVCopyName:
.9e72	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9e75	91 36		sta ($36),y			sta 	(zTemp0),y
.9e77	e8		inx				inx
.9e78	c8		iny				iny
.9e79	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9e7c	d0 f4		bne $9e72			bne 	_CCVCopyName
.9e7e	98		tya				tya 								; patch offset
.9e7f	92 36		sta ($36)			sta 	(zTemp0)
.9e81	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9e83	91 36		sta ($36),y			sta 	(zTemp0),y
.9e85	88		dey				dey
.9e86	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9e88	09 80		ora #$80			ora 	#$80
.9e8a	91 36		sta ($36),y			sta 	(zTemp0),y
.9e8c					_CCVFound:
.9e8c	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9e8e	38		sec				sec
.9e8f	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9e91	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9e93	20 14 9e	jsr $9e14			jsr 	TokeniseWriteByte
.9e96	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9e98	20 14 9e	jsr $9e14			jsr 	TokeniseWriteByte
.9e9b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/extern.asm

.a7ca					EXTPrintCharacter:
.a7ca	48		pha				pha
.a7cb	da		phx				phx
.a7cc	5a		phy				phy
.a7cd	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a7d0	7a		ply				ply
.a7d1	fa		plx				plx
.a7d2	68		pla				pla
.a7d3	60		rts				rts
.a7d4					EXTInputSingleCharacter:
.a7d4	da		phx				phx
.a7d5	5a		phy				phy
.a7d6					_EISCWait:
.a7d6	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a7d9	c9 00		cmp #$00			cmp 	#0
.a7db	f0 f9		beq $a7d6			beq 	_EISCWait
.a7dd	7a		ply				ply
.a7de	fa		plx				plx
.a7df	60		rts				rts
.a7e0					EXTInputLine:
.a7e0	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a7e2					_ILLoop:
.a7e2	da		phx				phx 								; read character in
.a7e3	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a7e6	fa		plx				plx
.a7e7	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a7e9	f0 12		beq $a7fd			beq 	_ILBackspace
.a7eb	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a7ed	f0 15		beq $a804			beq 	_ILExit
.a7ef	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a7f1	90 ef		bcc $a7e2			bcc 	_ILLoop
.a7f3	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a7f5	f0 eb		beq $a7e2			beq 	_ILLoop
.a7f7	9d 25 08	sta $0825,x			sta 	lineBuffer,x 				; save it
.a7fa	e8		inx				inx
.a7fb	80 e5		bra $a7e2			bra 	_ILLoop
.a7fd					_ILBackspace:
.a7fd	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a7ff	f0 e1		beq $a7e2			beq 	_ILLoop
.a801	ca		dex				dex 								; back one.
.a802	80 de		bra $a7e2			bra 	_ILLoop
.a804					_ILExit:
.a804	20 ca a7	jsr $a7ca			jsr 	EXTPrintCharacter
.a807	9e 25 08	stz $0825,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a80a	60		rts				rts
.a80b					EXTBreakCheck:
.a80b	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.a80e					MemoryPeek:
.a80e	b2 36		lda ($36)			lda 	(zTemp0)
.a810	60		rts				rts
.a811					MemoryPoke:
.a811	92 36		sta ($36)			sta 	(zTemp0)
.a813	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/delete.asm

.a814					MemoryDeleteLine:
.a814	20 33 a8	jsr $a833			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a817	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a819	a8		tay				tay
.a81a					_MDDLLoop:
.a81a	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a81c	92 30		sta ($30)			sta 	(codePtr)
.a81e	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a820	c5 3a		cmp $3a				cmp 	zTemp2
.a822	d0 07		bne $a82b			bne 	_MDLDLNext
.a824	a5 31		lda $31				lda 	codePtr+1
.a826	c5 3b		cmp $3b				cmp 	zTemp2+1
.a828	d0 01		bne $a82b			bne 	_MDLDLNext
.a82a					_MDDLExit:
.a82a	60		rts				rts
.a82b					_MDLDLNext:
.a82b	e6 30		inc $30				inc 	codePtr						; next byte
.a82d	d0 eb		bne $a81a			bne 	_MDDLLoop
.a82f	e6 31		inc $31				inc 	codePtr+1
.a831	80 e7		bra $a81a			bra 	_MDDLLoop
.a833					IMemoryFindEnd:
.a833	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a835	85 3a		sta $3a				sta 	0+zTemp2
.a837	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a839	85 3b		sta $3b				sta 	1+zTemp2
.a83b					_MDLFELoop:
.a83b	b2 3a		lda ($3a)			lda 	(zTemp2)
.a83d	f0 0b		beq $a84a			beq 	_MDLFEExit
.a83f	18		clc				clc
.a840	65 3a		adc $3a				adc 	zTemp2
.a842	85 3a		sta $3a				sta 	zTemp2
.a844	90 f5		bcc $a83b			bcc 	_MDLFELoop
.a846	e6 3b		inc $3b				inc 	zTemp2+1
.a848	80 f1		bra $a83b			bra 	_MDLFELoop
.a84a					_MDLFEExit:
.a84a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/insert.asm

.a84b					MemoryInsertLine:
.a84b	08		php				php
.a84c	20 33 a8	jsr $a833			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a84f	28		plp				plp
.a850	90 08		bcc $a85a			bcc 	_MDLIFound
.a852	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a854	85 30		sta $30				sta 	codePtr
.a856	a5 3b		lda $3b				lda 	zTemp2+1
.a858	85 31		sta $31				sta 	codePtr+1
.a85a					_MDLIFound:
.a85a	ad 25 07	lda $0725			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a85d	a8		tay				tay
.a85e					_MDLIInsert:
.a85e	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a860	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a862	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a864	c5 3a		cmp $3a				cmp 	zTemp2
.a866	d0 06		bne $a86e			bne 	_MDLINext
.a868	a5 31		lda $31				lda 	codePtr+1
.a86a	c5 3b		cmp $3b				cmp 	zTemp2+1
.a86c	f0 0a		beq $a878			beq 	_MDLIHaveSpace
.a86e					_MDLINext:
.a86e	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a870	d0 02		bne $a874			bne 	_MDLINoBorrow
.a872	c6 3b		dec $3b				dec 	zTemp2+1
.a874					_MDLINoBorrow:
.a874	c6 3a		dec $3a				dec 	zTemp2
.a876	80 e6		bra $a85e			bra 	_MDLIInsert
.a878					_MDLIHaveSpace:
.a878	ac 25 07	ldy $0725			ldy 	tokenOffset 				; bytes to copy
.a87b	88		dey				dey 								; from offset-1 to 0
.a87c					_MDLICopy:
.a87c	b9 25 07	lda $0725,y			lda 	tokenOffset,y
.a87f	91 30		sta ($30),y			sta 	(codePtr),y
.a881	88		dey				dey
.a882	10 f8		bpl $a87c			bpl 	_MDLICopy
.a884	60		rts				rts
.a885					MDLAppendLine:
.a885	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a887	85 36		sta $36				sta 	zTemp0
.a889	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a88b	85 38		sta $38				sta 	0+zTemp1
.a88d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a88f	85 39		sta $39				sta 	1+zTemp1
.a891	b2 38		lda ($38)			lda 	(zTemp1)
.a893	d0 0a		bne $a89f			bne 	_MDLANoInitialise
.a895	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a897	8d a8 08	sta $08a8			sta 	0+AppendPointer
.a89a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a89c	8d a9 08	sta $08a9			sta 	1+AppendPointer
.a89f					_MDLANoInitialise:
.a89f	18		clc				clc
.a8a0	ad a8 08	lda $08a8			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a8a3	85 38		sta $38				sta 	zTemp1
.a8a5	72 36		adc ($36)			adc 	(zTemp0)
.a8a7	8d a8 08	sta $08a8			sta 	AppendPointer
.a8aa	ad a9 08	lda $08a9			lda 	AppendPointer+1
.a8ad	85 39		sta $39				sta 	zTemp1+1
.a8af	69 00		adc #$00			adc 	#0
.a8b1	8d a9 08	sta $08a9			sta 	AppendPointer+1
.a8b4	a0 00		ldy #$00			ldy 	#0
.a8b6					_MDLACopy:
.a8b6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a8b8	91 38		sta ($38),y			sta 	(zTemp1),y
.a8ba	c8		iny				iny
.a8bb	98		tya				tya
.a8bc	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a8be	d0 f6		bne $a8b6			bne 	_MDLACopy
.a8c0	a9 00		lda #$00			lda 	#0 							; end of program.
.a8c2	91 38		sta ($38),y			sta 	(zTemp1),y
.a8c4	60		rts				rts
.08a8					AppendPointer:
>08a8							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9e9c					MemoryNew:
.9e9c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9e9e	85 30		sta $30				sta 	codePtr
.9ea0	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9ea2	85 31		sta $31				sta 	codePtr+1
.9ea4	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9ea6	92 30		sta ($30)			sta 	(codePtr)
.9ea8	60		rts				rts
.9ea9					MemoryInline:
.9ea9	98		tya				tya 								; put address into stack,x
.9eaa	18		clc				clc
.9eab	65 30		adc $30				adc 	codePtr
.9ead	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9eb0	a5 31		lda $31				lda 	codePtr+1
.9eb2	69 00		adc #$00			adc 	#0
.9eb4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9eb7	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9eba	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9ebd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/search.asm

.9ebe					MemorySearch:
.9ebe	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9ec0	86 37		stx $37				stx 	zTemp0+1
.9ec2	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9ec4	85 30		sta $30				sta 	codePtr
.9ec6	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9ec8	85 31		sta $31				sta 	codePtr+1
.9eca					_MTAXLoop:
.9eca	b2 30		lda ($30)			lda 	(codePtr)
.9ecc	18		clc				clc
.9ecd	f0 21		beq $9ef0			beq 	_MTAXExit 					; reached end, exit with CC.
.9ecf	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9ed1	b1 30		lda ($30),y			lda 	(codePtr),y
.9ed3	38		sec				sec
.9ed4	e5 36		sbc $36				sbc 	zTemp0
.9ed6	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9ed8	c8		iny				iny 								; do the MSB
.9ed9	b1 30		lda ($30),y			lda 	(codePtr),y
.9edb	e5 37		sbc $37				sbc 	zTemp0+1
.9edd	05 38		ora $38				ora 	zTemp1
.9edf	f0 0f		beq $9ef0			beq 	_MTAXExit	 				; found
.9ee1	b0 0d		bcs $9ef0			bcs 	_MTAXExit 					; current < required exit
.9ee3	18		clc				clc
.9ee4	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9ee6	65 30		adc $30				adc 	codePtr
.9ee8	85 30		sta $30				sta 	codePtr
.9eea	90 02		bcc $9eee			bcc 	_CREExit
.9eec	e6 31		inc $31				inc 	codePtr+1
.9eee					_CREExit:
.9eee	80 da		bra $9eca			bra 	_MTAXLoop
.9ef0					_MTAXExit:
.9ef0	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
