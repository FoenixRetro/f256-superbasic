
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Fri Nov 11 10:19:15 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					tokenOffset:
>04a7							.fill 	1
.04a8					tokenLineNumber:
>04a8							.fill 	2
.04aa					tokenBuffer:
>04aa							.fill 	253
.05a7					lineBuffer:
>05a7							.fill 	MaxLineSize+1
.05f8					numberBuffer:
>05f8							.fill 	34
.061a					decimalBuffer:
>061a							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 d9 b6	jsr $b6d9			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 22 9b	jsr $9b22			jsr 	PrintStringXA
.8014	20 ff 93	jsr $93ff			jsr 	NewCommand 					; erase current program
.8017	20 2a a8	jsr $a82a			jsr 	BackloadProgram
.801a	4c be 95	jmp $95be			jmp 	CommandRun
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 46 72			.text "Built Friday 04-Nov-2022. Build 2651."
>8065	69 64 61 79 20 30 34 2d 4e 6f 76 2d 32 30 32 32
>8075	2e 20 42 75 69 6c 64 20 32 36 35 31 2e

;******  Return to file: ./common/aa.system/00start.asm

>8082	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated=1
=0					GCMD_Initialise = 0*2
=2					GCMD_BitmapCtl = 1*2
=4					GCMD_SpriteCtl = 2*2
=6					GCMD_Clear = 3*2
=8					GCMD_Colour = 4*2
=10					GCMD_DrawFont = 5*2
=12					GCMD_DrawSprite = 6*2
=14					GCMD_SpriteUse = 7*2
=16					GCMD_SpriteImage = 8*2
=18					GCMD_SpriteCollide = 9*2
=32					GCMD_Move = 16*2
=34					GCMD_Line = 17*2
=36					GCMD_FrameRect = 18*2
=38					GCMD_FillRect = 19*2
=40					GCMD_FrameCircle = 20*2
=42					GCMD_FillCircle = 21*2
=48					GCMD_Plot = 24*2
=50					GCMD_SpriteMove = 25*2
=26					GRFirstFreeCode = 26
.8085					GRVectorTable:
>8085	b4 82					.word	GXInitialise             ; $00 Initialise
>8087	ce 82					.word	GXControlBitmap          ; $01 BitmapCtl
>8089	16 83					.word	GXControlSprite          ; $02 SpriteCtl
>808b	66 82					.word	GXClearBitmap            ; $03 Clear
>808d	a5 84					.word	GXSetColourMode          ; $04 Colour
>808f	6d 86					.word	GXFontHandler            ; $05 DrawFont
>8091	b5 86					.word	GXSpriteHandler          ; $06 DrawSprite
>8093	21 87					.word	GXSelect                 ; $07 SpriteUse
>8095	4a 87					.word	GXSelectImage            ; $08 SpriteImage
>8097	d1 88					.word	GXCollide                ; $09 SpriteCollide
>8099	18 81					.word	GRUndefined              ; $0a
>809b	18 81					.word	GRUndefined              ; $0b
>809d	18 81					.word	GRUndefined              ; $0c
>809f	18 81					.word	GRUndefined              ; $0d
>80a1	18 81					.word	GRUndefined              ; $0e
>80a3	18 81					.word	GRUndefined              ; $0f
>80a5	16 81					.word	GXMove                   ; $10 Move
>80a7	73 83					.word	GXLine                   ; $11 Line
>80a9	ee 84					.word	GXFrameRectangle         ; $12 FrameRect
>80ab	eb 84					.word	GXFillRectangle          ; $13 FillRect
>80ad	1d 81					.word	GXFrameCircle            ; $14 FrameCircle
>80af	19 81					.word	GXFillCircle             ; $15 FillCircle
>80b1	18 81					.word	GRUndefined              ; $16
>80b3	18 81					.word	GRUndefined              ; $17
>80b5	d3 84					.word	GXPlotPoint              ; $18 Plot
>80b7	e0 87					.word	GXMoveSprite             ; $19 SpriteMove
=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f8					gxPixelBuffer = numberBuffer
.062a					gxCurrentX:
>062a							.fill 	2
.062c					gxCurrentY:
>062c							.fill 	2
.062e					gxLastX:
>062e							.fill 	2
.0630					gxLastY:
>0630							.fill 	2
.0632					gxX0:
>0632							.fill 	2
.0634					gxY0:
>0634							.fill 	2
.0636					gxX1:
>0636							.fill 	2
.0638					gxY1:
>0638							.fill 	2
.063a					gxSpritesOn:
>063a							.fill 	1
.063b					gxBitmapsOn:
>063b							.fill 	1
.063c					gxBasePage:
>063c							.fill 	1
.063d					gxSpritePage:
>063d							.fill 	1
.063e					gxHeight:
>063e							.fill 	1
.063f					gxMode:
>063f							.fill 	1
.0640					gxColour:
>0640							.fill 	1
.0641					gxEORValue:
>0641							.fill 	1
.0642					gxANDValue:
>0642							.fill 	1
.0643					gxOriginalLUTValue:
>0643							.fill 	1
.0644					gsOffset:
>0644							.fill 	1
.0645					GSCurrentSpriteID:
>0645							.fill 	1
.0646					GSCurrentSpriteAddr:
>0646							.fill 	2
.0648					GXSpriteOffsetBase:
>0648							.fill 	2
.064a					GXSpriteLow:
>064a							.fill 	64
.068a					GXSpriteHigh:
>068a							.fill 	64
.80b9					GXGraphicDraw:
.80b9	c9 20		cmp #$20			cmp 	#GCMD_Move					; low instructions don't use coordinates
.80bb	b0 06		bcs $80c3			bcs 	_GDCoordinate
.80bd	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.80bf	84 37		sty $37				sty 	gxzTemp0+1
.80c1	80 4b		bra $810e			bra 	_GDExecuteA 				; and execute
.80c3					_GDCoordinate:
.80c3	48		pha				pha 								; save AXY
.80c4	da		phx				phx
.80c5	5a		phy				phy
.80c6	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.80c8					_GDCopy1:
.80c8	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.80cb	9d 2e 06	sta $062e,x			sta 	gxLastX,x
.80ce	ca		dex				dex
.80cf	10 f7		bpl $80c8			bpl 	_GDCopy1
.80d1	68		pla				pla 								; update Y
.80d2	8d 2c 06	sta $062c			sta 	gxCurrentY
.80d5	9c 2d 06	stz $062d			stz 	gxCurrentY+1
.80d8	68		pla				pla
.80d9	8d 2a 06	sta $062a			sta 	gxCurrentX
.80dc	68		pla				pla 								; get A (command+X.1) back
.80dd	48		pha				pha
.80de	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80e0	8d 2b 06	sta $062b			sta 	gxCurrentX+1
.80e3	68		pla				pla 								; get command back
.80e4	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.80e6	48		pha				pha 								; push back.
.80e7	c9 32		cmp #$32			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.80e9	f0 17		beq $8102			beq 	_GDCopyToWorkArea
.80eb	ad 2b 06	lda $062b			lda 	gxCurrentX+1 				; X < 256 X okay
.80ee	f0 07		beq $80f7			beq 	_GDCheckY
.80f0	ad 2a 06	lda $062a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.80f3	c9 40		cmp #$40			cmp 	#64
.80f5	b0 08		bcs $80ff			bcs 	_GDError1
.80f7					_GDCheckY:
.80f7	ad 2c 06	lda $062c			lda 	gxCurrentY 					; check Y < Height.
.80fa	cd 3e 06	cmp $063e			cmp 	gxHeight
.80fd	90 03		bcc $8102			bcc 	_GDCopyToWorkArea
.80ff					_GDError1:
.80ff	68		pla				pla
.8100					_GDError2:
.8100	38		sec				sec
.8101	60		rts				rts
.8102					_GDCopyToWorkArea:
.8102	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.8104					_GDCopy2:
.8104	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.8107	9d 32 06	sta $0632,x			sta 	gxX0,x
.810a	ca		dex				dex
.810b	10 f7		bpl $8104			bpl 	_GDCopy2
.810d	68		pla				pla 								; get command
.810e					_GDExecuteA:
.810e	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.8110	b0 ee		bcs $8100			bcs 	_GDError2
.8112	aa		tax				tax
.8113	7c 85 80	jmp ($8085,x)			jmp 	(GRVectorTable,x)
.8116					GXMove:
.8116	18		clc				clc
.8117	60		rts				rts
.8118					GRUndefined:
>8118	db						.byte 	$DB 						; causes a break in the emulator
.8119					GXFillCircle:
.8119	a9 ff		lda #$ff			lda 	#255
.811b	80 02		bra $811f			bra 	GXCircle
.811d					GXFrameCircle:
.811d	a9 00		lda #$00			lda 	#0
.811f					GXCircle:
.811f	8d cd 06	sta $06cd			sta 	gxIsFillMode					; save Fill flag
.8122	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.8125	f0 26		beq $814d			beq 	_GXCFail
.8127	20 78 89	jsr $8978			jsr 	GXSortXY 					; topleft/bottomright
.812a	20 50 88	jsr $8850			jsr 	GXOpenBitmap 				; start drawing
.812d	20 1f 82	jsr $821f			jsr 	GXCircleSetup 				; set up for drawing
.8130	9c ce 06	stz $06ce			stz 	gxYChanged
.8133					_GXCircleDraw:
.8133	ad cb 06	lda $06cb			lda 	gXCentre					; while x <= y
.8136	cd cc 06	cmp $06cc			cmp 	gYCentre
.8139	90 0a		bcc $8145			bcc 	_GXCircleContinue
.813b	d0 03		bne $8140			bne 	_GXNoLast
.813d	20 52 81	jsr $8152			jsr 	GXPlot1
.8140					_GXNoLast:
.8140	20 58 88	jsr $8858			jsr 	GXCloseBitmap 				; close the bitmap
.8143	18		clc				clc
.8144	60		rts				rts
.8145					_GXCircleContinue:
.8145	20 4f 81	jsr $814f			jsr 	GXPlot2 					; draw it
.8148	20 cc 81	jsr $81cc			jsr 	GXCircleMove 				; adjust the coordinates
.814b	80 e6		bra $8133			bra 	_GXCircleDraw
.814d					_GXCFail:
.814d	38		sec				sec
.814e	60		rts				rts
.814f					GXPlot2:
.814f	20 52 81	jsr $8152			jsr 	GXPlot1 						; plot and swap, fall through does twice
.8152					GXPlot1:
.8152	ad cc 06	lda $06cc			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.8155	f0 03		beq $815a			beq 	_GXPlot1Only
.8157	20 76 81	jsr $8176			jsr 	GXPlot0 						; plot and negate
.815a					_GXPlot1Only:
.815a	20 76 81	jsr $8176			jsr 	GXPlot0 						; twice, undoing negation
.815d	ad cb 06	lda $06cb			lda 	gXCentre 						; swap X and Y
.8160	ae cc 06	ldx $06cc			ldx	 	gYCentre
.8163	8d cc 06	sta $06cc			sta 	gYCentre
.8166	8e cb 06	stx $06cb			stx 	gXCentre
.8169	ad ce 06	lda $06ce			lda 	gxYChanged 						; toggle Y Changed flag
.816c	a9 ff		lda #$ff			lda 	#$FF
.816e	8d ce 06	sta $06ce			sta 	gxYChanged
.8171	60		rts				rts
.8172	20 76 81	jsr $8176			jsr 	GXPlot0 						; do once
.8175	60		rts				rts
.8176	ad cd 06	lda $06cd	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.8179	f0 05		beq $8180			beq 	_GXPlot0Always
.817b	ad ce 06	lda $06ce			lda 	gxYChanged						; fill mode, only draw if changed.
.817e	f0 2d		beq $81ad			beq 	GXPlot0Exit
.8180					_GXPlot0Always:
.8180	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.8182	ad cc 06	lda $06cc			lda 	gYCentre
.8185	20 ae 81	jsr $81ae			jsr 	GXSubCopy
.8188	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.818a	ad cb 06	lda $06cb			lda 	gXCentre
.818d	20 ae 81	jsr $81ae			jsr 	GXSubCopy
.8190	48		pha				pha 									; save last offset X
.8191	20 60 88	jsr $8860			jsr 	GXPositionCalc 					; calculate position/offset.
.8194	68		pla				pla
.8195	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8196	85 36		sta $36				sta 	gxzTemp0
.8198	64 37		stz $37				stz 	gxzTemp0+1
.819a	26 37		rol $37				rol 	gxzTemp0+1
.819c	ad cd 06	lda $06cd			lda 	gxIsFillMode
.819f	69 80		adc #$80			adc 	#128
.81a1	20 3e 85	jsr $853e			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.81a4	38		sec				sec 									; GY = -GY
.81a5	a9 00		lda #$00			lda 	#0
.81a7	ed cc 06	sbc $06cc			sbc 	gYCentre
.81aa	8d cc 06	sta $06cc			sta 	gYCentre
.81ad					GXPlot0Exit:
.81ad	60		rts				rts
.81ae					GXSubCopy:
.81ae	85 36		sta $36				sta 	gxzTemp0
.81b0	64 37		stz $37				stz 	gxzTemp0+1
.81b2	29 80		and #$80			and 	#$80
.81b4	f0 02		beq $81b8			beq 	_GXNoSx
.81b6	c6 37		dec $37				dec 	gxzTemp0+1
.81b8					_GXNoSx:
.81b8	38		sec				sec
.81b9	bd 36 06	lda $0636,x			lda 	gXX1,x
.81bc	e5 36		sbc $36				sbc 	gxzTemp0
.81be	9d 32 06	sta $0632,x			sta 	gXX0,x
.81c1	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.81c4	e5 37		sbc $37				sbc 	gxzTemp0+1
.81c6	9d 33 06	sta $0633,x			sta 	gXX0+1,x
.81c9	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81cb	60		rts				rts
.81cc					GXCircleMove:
.81cc	9c ce 06	stz $06ce			stz 	gxYChanged 					; clear Y changed flag
.81cf	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81d1	10 0d		bpl $81e0			bpl 	_GXEMPositive
.81d3	ee cb 06	inc $06cb			inc 	gXCentre 					; X++
.81d6	ad cb 06	lda $06cb			lda 	gXCentre
.81d9	20 ff 81	jsr $81ff			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81dc	a9 06		lda #$06			lda 	#6  						; and add 6
.81de	80 15		bra $81f5			bra 	_GXEMAddD
.81e0					_GXEMPositive:
.81e0	ee cb 06	inc $06cb			inc 	gXCentre					; X++
.81e3	ce cc 06	dec $06cc			dec 	gyCentre 					; Y--
.81e6	38		sec				sec 								; calculate X-Y
.81e7	ad cb 06	lda $06cb			lda 	gXCentre
.81ea	ed cc 06	sbc $06cc			sbc 	gYCentre
.81ed	20 ff 81	jsr $81ff			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81f0	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81f2	ce ce 06	dec $06ce			dec 	gxYChanged
.81f5					_GXEMAddD:
.81f5	18		clc				clc
.81f6	65 38		adc $38				adc 	gxzTemp1
.81f8	85 38		sta $38				sta 	gxzTemp1
.81fa	90 02		bcc $81fe			bcc 	_GXEMNoCarry
.81fc	e6 39		inc $39				inc 	gxzTemp1+1
.81fe					_GXEMNoCarry:
.81fe	60		rts				rts
.81ff					_GXAdd4TimesToD:
.81ff	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.8201	29 80		and #$80			and 	#$80
.8203	f0 02		beq $8207			beq 	_GXA4Unsigned
.8205	a9 ff		lda #$ff			lda 	#$FF
.8207					_GXA4Unsigned:
.8207	85 37		sta $37				sta 	gxzTemp0+1
.8209	06 36		asl $36				asl 	gxzTemp0  					; x 4
.820b	26 37		rol $37				rol 	gxzTemp0+1
.820d	06 36		asl $36				asl 	gxzTemp0
.820f	26 37		rol $37				rol 	gxzTemp0+1
.8211	18		clc				clc 								; add
.8212	a5 36		lda $36				lda		gxzTemp0
.8214	65 38		adc $38				adc 	gxzTemp1
.8216	85 38		sta $38				sta 	gxzTemp1
.8218	a5 37		lda $37				lda		gxzTemp0+1
.821a	65 39		adc $39				adc 	gxzTemp1+1
.821c	85 39		sta $39				sta 	gxzTemp1+1
.821e	60		rts				rts
.821f					GXCircleSetup:
.821f	38		sec				sec
.8220	ad 38 06	lda $0638			lda 	gxY1
.8223	ed 34 06	sbc $0634			sbc 	gxY0
.8226	4a		lsr a				lsr 	a
.8227	8d ca 06	sta $06ca			sta 	gxRadius
.822a	a2 00		ldx #$00			ldx 	#0
.822c	20 4e 82	jsr $824e			jsr 	_GXCalculateCentre
.822f	a2 02		ldx #$02			ldx 	#2
.8231	20 4e 82	jsr $824e			jsr 	_GXCalculateCentre
.8234	9c cb 06	stz $06cb			stz 	gXCentre
.8237	ad ca 06	lda $06ca			lda 	gxRadius
.823a	8d cc 06	sta $06cc			sta 	gYCentre
.823d	0a		asl a				asl 	a 							; R x 2
.823e	85 36		sta $36				sta 	gxzTemp0
.8240	38		sec				sec
.8241	a9 03		lda #$03			lda 	#3
.8243	e5 36		sbc $36				sbc 	gxzTemp0
.8245	85 38		sta $38				sta 	gxzTemp1
.8247	a9 00		lda #$00			lda 	#0
.8249	e9 00		sbc #$00			sbc 	#0
.824b	85 39		sta $39				sta 	gxzTemp1+1
.824d	60		rts				rts
.824e					_GXCalculateCentre:
.824e	38		sec				sec
.824f	bd 36 06	lda $0636,x			lda 	gxX1,x
.8252	7d 32 06	adc $0632,x			adc 	gXX0,x
.8255	9d 36 06	sta $0636,x			sta 	gXX1,x
.8258	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.825b	7d 33 06	adc $0633,x			adc 	gXX0+1,x
.825e	4a		lsr a				lsr 	a
.825f	9d 37 06	sta $0637,x			sta 	gXX1+1,x
.8262	7e 36 06	ror $0636,x			ror 	gXX1,x
.8265	60		rts				rts
.06ca					gxRadius:
>06ca							.fill 	1
.06cb					gXCentre:
>06cb							.fill 	1
.06cc					gYCentre:
>06cc							.fill 	1
.06cd					gxIsFillMode:
>06cd							.fill 	1
.06ce					gxYChanged:
>06ce							.fill  	1
=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8266					GXClearBitmap:
.8266	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP running.
.8269	f0 24		beq $828f			beq 	_GXCBFail
.826b	20 50 88	jsr $8850			jsr 	GXOpenBitmap 				; start access
.826e	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8270	ad 3e 06	lda $063e			lda 	gxHeight
.8273	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8275	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8277					_GXCalcLastPage:
.8277	98		tya				tya 								; add to base page
.8278	18		clc				clc
.8279	6d 3c 06	adc $063c			adc 	gxBasePage
.827c	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.827e					_GXClearAll:
.827e	20 91 82	jsr $8291			jsr 	_GXClearBlock 				; clear 8k block
.8281	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.8283	a5 0b		lda $0b				lda 	GXEditSlot
.8285	cd 3c 06	cmp $063c			cmp 	gxBasePage 					; until before base page
.8288	b0 f4		bcs $827e			bcs 	_GXClearAll
.828a	20 58 88	jsr $8858			jsr 	GXCloseBitmap	 			; stop access
.828d	18		clc				clc
.828e	60		rts				rts
.828f					_GXCBFail:
.828f	38		sec				sec
.8290	60		rts				rts
.8291					_GXClearBlock:
.8291	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8293	85 38		sta $38				sta 	0+gxzTemp1
.8295	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8297	85 39		sta $39				sta 	1+gxzTemp1
.8299					_GXCB0:
.8299	a5 36		lda $36				lda 	gxzTemp0
.829b	a0 00		ldy #$00			ldy 	#0
.829d					_GXCB1:
.829d	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829f	c8		iny				iny
.82a0	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a2	c8		iny				iny
.82a3	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a5	c8		iny				iny
.82a6	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a8	c8		iny				iny
.82a9	d0 f2		bne $829d			bne 	_GXCB1
.82ab	e6 39		inc $39				inc 	gxzTemp1+1
.82ad	a5 39		lda $39				lda 	gxzTemp1+1
.82af	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82b1	d0 e6		bne $8299			bne 	_GXCB0
.82b3	60		rts				rts
.82b4					GXInitialise:
.82b4	64 01		stz $01				stz 	1
.82b6	a9 01		lda #$01			lda 	#1
.82b8	8d 00 d0	sta $d000			sta 	$D000
.82bb	18		clc				clc
.82bc	9c 3a 06	stz $063a			stz 	GXSpritesOn
.82bf	9c 3b 06	stz $063b			stz 	GXBitmapsOn
.82c2	a2 0f		ldx #$0f			ldx 	#15
.82c4					_GXIClear:
.82c4	9e 2a 06	stz $062a,x			stz 	gxCurrentX,x
.82c7	ca		dex				dex
.82c8	10 fa		bpl $82c4			bpl 	_GXIClear
.82ca	20 65 83	jsr $8365			jsr 	GXClearSpriteStore
.82cd	60		rts				rts
.82ce					GXControlBitmap:
.82ce	64 01		stz $01				stz 	1
.82d0	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82d2	29 01		and #$01			and 	#1 							; set bitmap flag
.82d4	8d 3b 06	sta $063b			sta 	gxBitmapsOn
.82d7	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82d8	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82db	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82dd	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82df	90 02		bcc $82e3			bcc 	_CBNotOn
.82e1	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82e3					_CBNotOn:
.82e3	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82e6	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82e8	29 07		and #$07			and 	#7
.82ea	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82ed	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82ef	d0 02		bne $82f3			bne 	_CBNotDefault
.82f1	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82f3					_CBNotDefault:
.82f3	8d 3c 06	sta $063c			sta 	gxBasePage
.82f6	20 57 83	jsr $8357			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82f9	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82fb	8d 03 d1	sta $d103			sta 	$D103
.82fe	a5 36		lda $36				lda 	gxzTemp0
.8300	8d 02 d1	sta $d102			sta 	$D102
.8303	9c 01 d1	stz $d101			stz 	$D101
.8306	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.8308	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.830b	29 01		and #$01			and 	#1
.830d	f0 02		beq $8311			beq 	_CBHaveHeight
.830f	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8311					_CBHaveHeight
.8311	8e 3e 06	stx $063e			stx 	gxHeight
.8314	18		clc				clc
.8315	60		rts				rts
.8316					GXControlSprite:
.8316	64 01		stz $01				stz 	1
.8318	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.831a	29 01		and #$01			and 	#1 							; set sprites flag
.831c	8d 3a 06	sta $063a			sta 	gxSpritesOn
.831f	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8320	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.8323	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.8325	29 df		and #$df			and 	#$DF 						; clear sprite bit
.8327	90 02		bcc $832b			bcc 	_CSNotOn
.8329	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.832b					_CSNotOn:
.832b	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.832e	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8330	d0 02		bne $8334			bne 	_CSNotDefault
.8332	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.8334					_CSNotDefault:
.8334	8d 3d 06	sta $063d			sta 	gxSpritePage
.8337	20 57 83	jsr $8357			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.833a	a5 36		lda $36				lda 	zTemp0
.833c	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase
.833f	a5 37		lda $37				lda 	zTemp0+1
.8341	8d 49 06	sta $0649			sta 	GXSpriteOffsetBase+1
.8344	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.8346					_CSClear:
.8346	9e 00 d9	stz $d900,x			stz 	$D900,x
.8349	9e 00 da	stz $da00,x			stz 	$DA00,x
.834c	ca		dex				dex
.834d	d0 f7		bne $8346			bne 	_CSClear
.834f	9c 47 06	stz $0647			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.8352	20 65 83	jsr $8365			jsr 	GXClearSpriteStore
.8355	18		clc				clc
.8356	60		rts				rts
.8357					GXCalculateBaseAddress:
.8357	85 36		sta $36				sta 	gxzTemp0
.8359	64 37		stz $37				stz 	gxzTemp0+1
.835b	a9 05		lda #$05			lda 	#5
.835d					_GXShift:
.835d	06 36		asl $36				asl 	gxzTemp0
.835f	26 37		rol $37				rol 	gxzTemp0+1
.8361	3a		dec a				dec		a
.8362	d0 f9		bne $835d			bne 	_GXShift
.8364	60		rts				rts
.8365					GXClearSpriteStore:
.8365	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.8367					_GXCSSLoop:
.8367	9e 8a 06	stz $068a,x			stz 	GXSpriteHigh,x
.836a	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.836c	9d 4a 06	sta $064a,x			sta 	GXSpriteLow,x
.836f	ca		dex				dex
.8370	10 f5		bpl $8367			bpl 	_GXCSSLoop
.8372	60		rts				rts
.8373					GXLine:
.8373	ad 3b 06	lda $063b			lda 	GXBitmapsOn
.8376	f0 28		beq $83a0			beq 	_GXLFail
.8378	20 50 88	jsr $8850			jsr 	GXOpenBitmap
.837b	20 96 89	jsr $8996			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.837e	20 46 84	jsr $8446			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8381	20 60 88	jsr $8860			jsr 	GXPositionCalc 				; calculate position/offset.
.8384					_GXDrawLoop:
.8384	ac 44 06	ldy $0644			ldy 	gsOffset 					; draw the pixel
.8387	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.8389	2d 42 06	and $0642			and 	gxANDValue
.838c	4d 41 06	eor $0641			eor 	gxEORValue
.838f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8391	20 a2 83	jsr $83a2			jsr 	GXLineIsComplete 			; is the line complete ?
.8394	f0 05		beq $839b			beq 	_GXLExit
.8396	20 bd 83	jsr $83bd			jsr 	GXLineAdvance 				; code as per advance method
.8399	80 e9		bra $8384			bra 	_GXDrawLoop
.839b					_GXLExit:
.839b	20 58 88	jsr $8858			jsr 	GXCloseBitmap
.839e	18		clc				clc
.839f	60		rts				rts
.83a0					_GXLFail:
.83a0	38		sec				sec
.83a1	60		rts				rts
.83a2					GXLineIsComplete:
.83a2	ad d1 06	lda $06d1			lda 	GXIsDiffYLarger 			; is dy larger
.83a5	d0 0f		bne $83b6			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.83a7	ad 32 06	lda $0632			lda 	GXX0 						; compare X, LSB and MSB
.83aa	4d 36 06	eor $0636			eor 	GXX1
.83ad	d0 06		bne $83b5			bne 	_GXLICExit
.83af	ad 33 06	lda $0633			lda 	GXX0+1
.83b2	4d 37 06	eor $0637			eor 	GXX1+1
.83b5					_GXLICExit:
.83b5	60		rts				rts
.83b6					_GXLICCompareY:
.83b6	ad 38 06	lda $0638			lda 	GXY1
.83b9	4d 34 06	eor $0634			eor 	GXY0
.83bc	60		rts				rts
.83bd					GXLineAdvance:
.83bd	18		clc				clc 								; add adjust to position
.83be	ad d3 06	lda $06d3			lda 	GXPosition
.83c1	6d d4 06	adc $06d4			adc 	GXAdjust
.83c4	8d d3 06	sta $06d3			sta 	GXPosition
.83c7	9c d6 06	stz $06d6			stz 	GXAddSelect 				; clear add select flag
.83ca	b0 05		bcs $83d1			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83cc	cd d5 06	cmp $06d5			cmp 	GXTotal 					; if exceeded total
.83cf	90 0a		bcc $83db			bcc 	_GXLANoExtra
.83d1					_GXLAOverflow:
.83d1	ce d6 06	dec $06d6			dec 	GXAddSelect 				; set addselect to $FF
.83d4	38		sec				sec 								; subtract total and write back
.83d5	ed d5 06	sbc $06d5			sbc 	GXTotal
.83d8	8d d3 06	sta $06d3			sta 	GXPosition
.83db					_GXLANoExtra:
.83db	ad d1 06	lda $06d1			lda 	GXIsDiffYLarger
.83de	f0 0d		beq $83ed			beq 	_GXDXLarger
.83e0	20 3f 84	jsr $843f			jsr 	GXIncrementY
.83e3	ad d6 06	lda $06d6			lda 	GXAddSelect
.83e6	f0 10		beq $83f8			beq 	_GXLAExit
.83e8	20 f9 83	jsr $83f9			jsr 	GXAdjustX
.83eb	80 0b		bra $83f8			bra 	_GXLAExit
.83ed					_GXDXLarger:
.83ed	20 f9 83	jsr $83f9			jsr 	GXAdjustX
.83f0	ad d6 06	lda $06d6			lda 	GXAddSelect
.83f3	f0 03		beq $83f8			beq 	_GXLAExit
.83f5	20 3f 84	jsr $843f			jsr 	GXIncrementY
.83f8					_GXLAExit:
.83f8	60		rts				rts
.83f9					GXAdjustX:
.83f9	ad d2 06	lda $06d2			lda 	GXDXNegative
.83fc	10 25		bpl $8423			bpl 	_GXAXRight
.83fe	ad 32 06	lda $0632			lda 	GXX0
.8401	d0 03		bne $8406			bne 	_GXAXNoBorrow
.8403	ce 33 06	dec $0633			dec 	GXX0+1
.8406					_GXAXNoBorrow:
.8406	ce 32 06	dec $0632			dec 	GXX0
.8409	ce 44 06	dec $0644			dec 	gsOffset 					; pixel left
.840c	ad 44 06	lda $0644			lda 	gsOffset
.840f	c9 ff		cmp #$ff			cmp 	#$FF
.8411	d0 0f		bne $8422			bne 	_GXAYExit 					; underflow
.8413	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.8415	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.8417	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.8419	b0 07		bcs $8422			bcs 	_GXAYExit
.841b	18		clc				clc
.841c	69 20		adc #$20			adc 	#$20 						; fix up
.841e	85 3d		sta $3d				sta 	gxzScreen+1
.8420	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8422					_GXAYExit:
.8422	60		rts				rts
.8423					_GXAXRight:
.8423	ee 32 06	inc $0632			inc 	GXX0
.8426	d0 03		bne $842b			bne 	_GXAXNoCarry
.8428	ee 33 06	inc $0633			inc 	GXX0+1
.842b					_GXAXNoCarry:
.842b	ee 44 06	inc $0644			inc 	gsOffset 					; pixel right
.842e	d0 0e		bne $843e			bne 	_GXAXExit 					; if not overflowed, exit.
.8430	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8432	a5 3d		lda $3d				lda 	gxzScreen+1
.8434	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.8436	90 06		bcc $843e			bcc 	_GXAXExit
.8438	e9 20		sbc #$20			sbc 	#$20 						; fix up
.843a	85 3d		sta $3d				sta 	gxzScreen+1
.843c	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.843e					_GXAXExit:
.843e	60		rts				rts
.843f					GXIncrementY:
.843f	ee 34 06	inc $0634			inc 	GXY0
.8442	20 b6 88	jsr $88b6			jsr 	GXMovePositionDown
.8445	60		rts				rts
.8446					GXLineSetup:
.8446	ad 38 06	lda $0638			lda 	GXY1
.8449	38		sec				sec
.844a	ed 34 06	sbc $0634			sbc 	GXY0
.844d	4a		lsr a				lsr 	a
.844e	8d d0 06	sta $06d0			sta 	GXDiffY
.8451	9c d2 06	stz $06d2			stz 	GXDXNegative 				; clear -ve flag
.8454	38		sec				sec
.8455	ad 36 06	lda $0636			lda 	GXX1
.8458	ed 32 06	sbc $0632			sbc 	GXX0
.845b	8d cf 06	sta $06cf			sta 	GXDiffX
.845e	ad 37 06	lda $0637			lda 	GXX1+1 						; calculate MSB
.8461	ed 33 06	sbc $0633			sbc 	GXX0+1
.8464	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8465	6e cf 06	ror $06cf			ror 	GXDiffX
.8468	0a		asl a				asl 	a
.8469	10 0c		bpl $8477			bpl 	_GDXNotNegative
.846b	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.846d	38		sec				sec
.846e	ed cf 06	sbc $06cf			sbc 	GXDiffX
.8471	8d cf 06	sta $06cf			sta 	GXDiffX
.8474	ce d2 06	dec $06d2			dec 	GXDXNegative 				; -ve flag = $FF.
.8477					_GDXNotNegative:
.8477	9c d1 06	stz $06d1			stz 	GXIsDiffYLarger 			; clear larger flag
.847a	ad d0 06	lda $06d0			lda 	GXDiffY 					; set adjust and total.
.847d	8d d4 06	sta $06d4			sta 	GXAdjust
.8480	ad cf 06	lda $06cf			lda 	GXDiffX
.8483	8d d5 06	sta $06d5			sta 	GXTotal
.8486	ad d0 06	lda $06d0			lda 	GXDiffY 					; if dy > dx
.8489	cd cf 06	cmp $06cf			cmp 	GXDiffX
.848c	90 0f		bcc $849d			bcc 	_GDXNotLarger
.848e	ce d1 06	dec $06d1			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8491	ad cf 06	lda $06cf			lda 	GXDiffX 					; set adjust and total other way round
.8494	8d d4 06	sta $06d4			sta 	GXAdjust
.8497	ad d0 06	lda $06d0			lda 	GXDiffY
.849a	8d d5 06	sta $06d5			sta 	GXTotal
.849d					_GDXNotLarger:
.849d	ad d5 06	lda $06d5			lda 	GXTotal
.84a0	4a		lsr a				lsr 	a
.84a1	8d d3 06	sta $06d3			sta 	GXPosition
.84a4	60		rts				rts
.06cf					GXDiffX:
>06cf							.fill 	1
.06d0					GXDiffY:
>06d0							.fill 	1
.06d1					GXIsDiffYLarger:
>06d1							.fill 	1
.06d2					GXDXNegative:
>06d2							.fill 	1
.06d3					GXPosition:
>06d3							.fill 	1
.06d4					GXAdjust:
>06d4							.fill 	1
.06d5					GXTotal:
>06d5							.fill 	1
.06d6					GXAddSelect:
>06d6							.fill 	1
.84a5					GXSetColourMode:
.84a5	a6 36		ldx $36				ldx 	gxzTemp0
.84a7	8e 40 06	stx $0640			stx 	gxColour 								; set colour
.84aa	a5 37		lda $37				lda 	gxzTemp0+1 								;
.84ac	8d 3f 06	sta $063f			sta 	gxMode 									; set mode
.84af	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.84b1	9c 42 06	stz $0642			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.84b4	ae 40 06	ldx $0640			ldx 	gxColour
.84b7	8e 41 06	stx $0641			stx 	gxEORValue
.84ba	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84bc	90 03		bcc $84c1			bcc 	_GXSDCNotAndColour
.84be	8e 42 06	stx $0642			stx 	gxANDValue
.84c1					_GXSDCNotAndColour:
.84c1	d0 03		bne $84c6			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84c3	9c 41 06	stz $0641			stz 	gxEORValue
.84c6					_GXSDCNotAnd:
.84c6	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84c7	90 08		bcc $84d1			bcc 	_GXSDCNoFlip
.84c9	ad 42 06	lda $0642			lda	 	gxANDValue
.84cc	49 ff		eor #$ff			eor 	#$FF
.84ce	8d 42 06	sta $0642			sta 	gxANDValue
.84d1					_GXSDCNoFlip:
.84d1	18		clc				clc
.84d2	60		rts				rts
.84d3					GXPlotPoint:
.84d3	20 50 88	jsr $8850			jsr 	GXOpenBitmap 				; start drawing
.84d6	20 60 88	jsr $8860			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84d9	ac 44 06	ldy $0644			ldy 	gsOffset
.84dc	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84de	2d 42 06	and $0642			and 	gxANDValue
.84e1	4d 41 06	eor $0641			eor 	gxEORValue
.84e4	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84e6	20 58 88	jsr $8858			jsr 	GXCloseBitmap 				; stop drawing and exit
.84e9	18		clc				clc
.84ea	60		rts				rts
.84eb					GXFillRectangle:
.84eb	38		sec				sec
.84ec	80 01		bra $84ef			bra 	GXRectangle
.84ee					GXFrameRectangle:
.84ee	18		clc				clc
.84ef					GXRectangle:
.84ef	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.84f2	f0 35		beq $8529			beq 	_GXRFail
.84f4	08		php				php 								; save Fill flag (CS)
.84f5	20 50 88	jsr $8850			jsr 	GXOpenBitmap 				; start drawing
.84f8	20 78 89	jsr $8978			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84fb	20 60 88	jsr $8860			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84fe	38		sec				sec 								; sec = Draw line
.84ff	20 2b 85	jsr $852b			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.8502	ad 34 06	lda $0634			lda 	gxY0 						; reached end of rectangle ?
.8505	cd 38 06	cmp $0638			cmp 	gxY1
.8508	f0 19		beq $8523			beq 	_GXRectangleExit
.850a					_GXRectLoop:
.850a	20 b6 88	jsr $88b6			jsr 	GXMovePositionDown 			; down one.
.850d	ee 34 06	inc $0634			inc 	gxY0 						; change Y pos
.8510	ad 34 06	lda $0634			lda 	gxY0 						; reached last line
.8513	cd 38 06	cmp $0638			cmp 	gXY1
.8516	f0 07		beq $851f			beq 	_GXLastLine
.8518	28		plp				plp 								; get flag back
.8519	08		php				php
.851a	20 2b 85	jsr $852b			jsr 	GXDrawLineX1X0 				; draw horizontal line
.851d	80 eb		bra $850a			bra 	_GXRectLoop
.851f					_GXLastLine:
.851f	38		sec				sec
.8520	20 2b 85	jsr $852b			jsr 	GXDrawLineX1X0
.8523					_GXRectangleExit:
.8523	68		pla				pla 								; throw fill flag.
.8524	20 58 88	jsr $8858			jsr 	GXCloseBitmap 				; stop drawing and exit
.8527	18		clc				clc
.8528	60		rts				rts
.8529					_GXRFail:
.8529	38		sec				sec
.852a	60		rts				rts
.852b					GXDrawLineX1X0:
.852b	08		php				php 								; save solid/either-end
.852c	38		sec				sec
.852d	ad 36 06	lda $0636			lda		gXX1
.8530	ed 32 06	sbc $0632			sbc 	gXX0
.8533	85 36		sta $36				sta 	gxzTemp0
.8535	ad 37 06	lda $0637			lda 	gXX1+1
.8538	ed 33 06	sbc $0633			sbc 	gXX0+1
.853b	85 37		sta $37				sta 	gxzTemp0+1
.853d	28		plp				plp
.853e					GXDrawLineTemp0:
.853e	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.8540	48		pha				pha
.8541	a5 3d		lda $3d				lda 	gxzScreen+1
.8543	48		pha				pha
.8544	ad 44 06	lda $0644			lda 	gsOffset
.8547	48		pha				pha
.8548	a5 0b		lda $0b				lda 	GXEditSlot
.854a	48		pha				pha
.854b	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y offset
.854e	90 1e		bcc $856e			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8550					_GXDLTLine:
.8550	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8552	2d 42 06	and $0642			and 	gxANDValue
.8555	4d 41 06	eor $0641			eor 	gxEORValue
.8558	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.855a	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.855c	d0 04		bne $8562			bne 	_GXDLTNoBorrow
.855e	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8560	30 2e		bmi $8590			bmi 	_GXDLTExit
.8562					_GXDLTNoBorrow:
.8562	c6 36		dec $36				dec 	gxzTemp0
.8564	c8		iny				iny 								; next slot.
.8565	d0 e9		bne $8550			bne 	_GXDLTLine
.8567	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.8569	20 9e 85	jsr $859e			jsr 	GXDLTCheckWrap				; check for new page.
.856c	80 e2		bra $8550			bra 	_GXDLTLine
.856e					_GXDLTEndPoints:
.856e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8570	2d 42 06	and $0642			and 	gxANDValue
.8573	4d 41 06	eor $0641			eor 	gxEORValue
.8576	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8578	98		tya				tya 								; advance to right side
.8579	18		clc				clc
.857a	65 36		adc $36				adc 	gxzTemp0
.857c	a8		tay				tay
.857d	a5 3d		lda $3d				lda 	gxzScreen+1
.857f	65 37		adc $37				adc 	gxzTemp0+1
.8581	85 3d		sta $3d				sta 	gxzScreen+1
.8583	20 9e 85	jsr $859e			jsr 	GXDLTCheckWrap 			; fix up.
.8586	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.8588	2d 42 06	and $0642			and 	gxANDValue
.858b	4d 41 06	eor $0641			eor 	gxEORValue
.858e	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8590					_GXDLTExit:
.8590	68		pla				pla
.8591	85 0b		sta $0b				sta 	GXEditSlot
.8593	68		pla				pla
.8594	8d 44 06	sta $0644			sta 	gsOffset
.8597	68		pla				pla
.8598	85 3d		sta $3d				sta 	gxzScreen+1
.859a	68		pla				pla
.859b	85 3c		sta $3c				sta 	gxzScreen
.859d	60		rts				rts
.859e					GXDLTCheckWrap:
.859e	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.85a0	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.85a2	90 06		bcc $85aa			bcc 	_GXDLTCWExit
.85a4	e9 20		sbc #$20			sbc 	#$20 						; fix up
.85a6	85 3d		sta $3d				sta 	gxzScreen+1
.85a8	e6 0b		inc $0b				inc 	GXEditSlot
.85aa					_GXDLTCWExit:
.85aa	60		rts				rts
.85ab					GXDrawGraphicElement:
.85ab	8d d7 06	sta $06d7			sta 	gxSize 						; save size
.85ae	3a		dec a				dec 	a
.85af	8d d8 06	sta $06d8			sta 	gxMask 						; and mask
.85b2	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP on
.85b5	f0 67		beq $861e			beq 	_GXSLFail
.85b7	ad 34 06	lda $0634			lda 	gxY0 						; push Y on stack
.85ba	48		pha				pha
.85bb	8c da 06	sty $06da			sty 	gxAcquireVector+1 			; and acquisition vector
.85be	8e d9 06	stx $06d9			stx 	gxAcquireVector
.85c1	20 50 88	jsr $8850			jsr 	gxOpenBitmap 				; open the bitmap.
.85c4	ad dc 06	lda $06dc			lda 	gxUseMode 					; scale bits
.85c7	4a		lsr a				lsr 	a
.85c8	4a		lsr a				lsr 	a
.85c9	4a		lsr a				lsr 	a
.85ca	29 07		and #$07			and		#7
.85cc	1a		inc a				inc 	a
.85cd	8d db 06	sta $06db			sta 	gxScale
.85d0	64 38		stz $38				stz 	gxzTemp1					; start first line
.85d2					_GXGELoop:
.85d2	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85d4	2c dc 06	bit $06dc			bit 	gxUseMode 					; check for flip.
.85d7	10 06		bpl $85df			bpl		_GXNoVFlip
.85d9	ad d8 06	lda $06d8			lda 	gxMask
.85dc	38		sec				sec
.85dd	e5 38		sbc $38				sbc 	gxzTemp1
.85df					_GXNoVFlip:
.85df	aa		tax				tax 								; get the Xth line.
.85e0	20 20 86	jsr $8620			jsr 	_GXCallAcquire 				; get that data.
.85e3	ad db 06	lda $06db			lda 	gxScale 					; do scale identical copies of that line.
.85e6	85 39		sta $39				sta 	gxzTemp1+1
.85e8					_GXGELoop2:
.85e8	ad 34 06	lda $0634			lda 	gxY0 						; off screen
.85eb	cd 3e 06	cmp $063e			cmp 	gxHeight
.85ee	b0 10		bcs $8600			bcs 	_GXDGEExit
.85f0	20 23 86	jsr $8623			jsr 	GXRenderOneLine 			; render line
.85f3	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85f5	d0 f1		bne $85e8			bne 	_GXGELoop2
.85f7	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85f9	a5 38		lda $38				lda 	gxzTemp1
.85fb	cd d7 06	cmp $06d7			cmp 	gxSize
.85fe	d0 d2		bne $85d2			bne 	_GXGELoop
.8600					_GXDGEExit:
.8600	68		pla				pla 								; restore Y for next time
.8601	8d 34 06	sta $0634			sta 	gxY0
.8604	ae db 06	ldx $06db			ldx 	gxScale 					; get scale (1-8)
.8607					_GXShiftLeft:
.8607	18		clc				clc
.8608	ad d7 06	lda $06d7			lda 	gxSize
.860b	6d 32 06	adc $0632			adc 	gxX0
.860e	8d 32 06	sta $0632			sta 	gxX0
.8611	90 03		bcc $8616			bcc 	_GXSLNoCarry
.8613	ee 33 06	inc $0633			inc 	gxX0+1
.8616					_GXSLNoCarry:
.8616	ca		dex				dex
.8617	d0 ee		bne $8607			bne 	_GXShiftLeft
.8619	20 58 88	jsr $8858			jsr 	GXCloseBitmap
.861c	18		clc				clc
.861d	60		rts				rts
.861e					_GXSLFail:
.861e	38		sec				sec
.861f	60		rts				rts
.8620					_GXCallAcquire:
.8620	6c d9 06	jmp ($06d9)			jmp 	(gxAcquireVector)
.8623					GXRenderOneLine:
.8623	20 60 88	jsr $8860			jsr 	GXPositionCalc 				; calculate position/offset.
.8626	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y contains position.
.8629	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.862b					_GXROLLoop1:
.862b	ad db 06	lda $06db			lda 	gxScale 					; set to do 'scale' times
.862e	85 3b		sta $3b				sta 	gxzTemp2+1
.8630					_GXROLLoop2:
.8630	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8632	2c 3f 06	bit $063f			bit 	gxMode 						; check H Flip
.8635	50 06		bvc $863d			bvc 	_GXNoHFlip
.8637	ad d8 06	lda $06d8			lda 	gxMask
.863a	38		sec				sec
.863b	e5 3a		sbc $3a				sbc 	gxzTemp2
.863d					_GXNoHFlip:
.863d	aa		tax				tax 								; read from the pixel buffer
.863e	bd f8 05	lda $05f8,x			lda 	gxPixelBuffer,x
.8641	d0 07		bne $864a			bne 	_GXDraw 					; draw if non zero
.8643	ad dc 06	lda $06dc			lda 	gxUseMode 					; check to see if solid background
.8646	29 04		and #$04			and 	#4
.8648	f0 0a		beq $8654			beq 	_GXZeroPixel
.864a					_GXDraw:
.864a	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.864c	2d 42 06	and $0642			and 	gxANDValue
.864f	5d f8 05	eor $05f8,x			eor 	gxPixelBuffer,x
.8652	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8654					_GXZeroPixel:
.8654	c8		iny				iny 								; advance pointer
.8655	d0 05		bne $865c			bne 	_GXNoShift
.8657	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.8659	20 9e 85	jsr $859e			jsr 	GXDLTCheckWrap				; check for new page.
.865c					_GXNoShift:
.865c	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.865e	d0 d0		bne $8630			bne 	_GXROLLoop2
.8660	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8662	a5 3a		lda $3a				lda 	gxzTemp2
.8664	cd d7 06	cmp $06d7			cmp 	gxSize
.8667	d0 c2		bne $862b			bne 	_GXROLLoop1
.8669	ee 34 06	inc $0634			inc 	gxY0
.866c	60		rts				rts
.06d7					gxSize:
>06d7							.fill 	1
.06d8					gxMask:
>06d8							.fill 	1
.06d9					gxAcquireVector:
>06d9							.fill 	2
.06db					gxScale:
>06db							.fill 	1
.06dc					gxUseMode:
>06dc							.fill 	1
.866d					GXFontHandler:
.866d	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.866f	4d 3f 06	eor $063f			eor 	gxMode
.8672	8d dc 06	sta $06dc			sta 	gxUseMode
.8675	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8677	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.8679	26 37		rol $37				rol	 	gxzTemp0+1
.867b	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.867d	26 37		rol $37				rol	 	gxzTemp0+1
.867f	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8681	26 37		rol $37				rol	 	gxzTemp0+1
.8683	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8685	09 c0		ora #$c0			ora 	#$C0
.8687	85 37		sta $37				sta 	gxzTemp0+1
.8689	a9 08		lda #$08			lda 	#8 							; size 8x8
.868b	a2 93		ldx #$93			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.868d	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.868f	20 ab 85	jsr $85ab			jsr 	GXDrawGraphicElement
.8692	60		rts				rts
.8693					GXGetGraphicDataFont:
.8693	8a		txa				txa 								; X->Y
.8694	a8		tay				tay
.8695	a6 01		ldx $01				ldx 	1 							; preserve old value
.8697	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.8699	85 01		sta $01				sta 	1
.869b	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.869d	86 01		stx $01				stx 	1 							; put old value back.
.869f	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.86a1					_GXExpand:
.86a1	9e f8 05	stz $05f8,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.86a4	0a		asl a				asl 	a 							; shift bit 7 into C
.86a5	90 08		bcc $86af			bcc 	_GXNoPixel
.86a7	48		pha				pha 								; if set, set pixel buffer to current colour.
.86a8	ad 40 06	lda $0640			lda 	gxColour
.86ab	9d f8 05	sta $05f8,x			sta 	gxPixelBuffer,x
.86ae	68		pla				pla
.86af					_GXNoPixel:
.86af	e8		inx				inx 								; do the whole byte.
.86b0	e0 08		cpx #$08			cpx 	#8
.86b2	d0 ed		bne $86a1			bne 	_GXExpand
.86b4	60		rts				rts
.86b5					GXSpriteHandler:
.86b5	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.86b7	4d 3f 06	eor $063f			eor 	gxMode
.86ba	8d dc 06	sta $06dc			sta 	gxUseMode
.86bd	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86bf	da		phx				phx
.86c0	20 50 88	jsr $8850			jsr 	GXOpenBitmap 				; can access sprite information
.86c3	68		pla				pla
.86c4	20 31 89	jsr $8931			jsr 	GXFindSprite 				; get the sprite address
.86c7	08		php				php
.86c8	20 58 88	jsr $8858			jsr 	GXCloseBitmap
.86cb	28		plp				plp
.86cc	b0 0a		bcs $86d8			bcs		_GXSHExit 					; exit if find failed.
.86ce	ad dd 06	lda $06dd			lda 	GXSizePixels 				; return size
.86d1	a2 d9		ldx #$d9			ldx 	#GXSpriteAcquire & $FF
.86d3	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86d5	20 ab 85	jsr $85ab			jsr 	GXDrawGraphicElement
.86d8					_GXSHExit:
.86d8	60		rts				rts
.86d9					GXSpriteAcquire:
.86d9	ad 3d 06	lda $063d			lda 	GXSpritePage				; point to base page
.86dc	85 0b		sta $0b				sta 	GXEditSlot
.86de	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86e0	a9 00		lda #$00			lda 	#0
.86e2	ae de 06	ldx $06de			ldx 	GXSizeBits
.86e5					_GXTimesRowNumber:
.86e5	18		clc				clc
.86e6	65 36		adc $36				adc 	zTemp0
.86e8	ca		dex				dex
.86e9	10 fa		bpl $86e5			bpl 	_GXTimesRowNumber
.86eb	64 37		stz $37				stz 	gxzTemp0+1
.86ed	0a		asl a				asl 	a 							; row x 2,4,6,8
.86ee	26 37		rol $37				rol 	gxzTemp0+1
.86f0	0a		asl a				asl 	a 							; row x 4,8,12,16
.86f1	26 37		rol $37				rol 	gxzTemp0+1
.86f3	0a		asl a				asl 	a 							; row x 8,16,24,32
.86f4	26 37		rol $37				rol 	gxzTemp0+1
.86f6	85 36		sta $36				sta 	gxzTemp0
.86f8	18		clc				clc 								; add base address.
.86f9	a5 36		lda $36				lda 	gxzTemp0
.86fb	6d e0 06	adc $06e0			adc 	GXSpriteOffset
.86fe	85 36		sta $36				sta 	gxzTemp0
.8700	a5 37		lda $37				lda 	gxzTemp0+1
.8702	6d e1 06	adc $06e1			adc 	GXSpriteOffset+1
.8705					_GXSAFindPage:
.8705	c9 20		cmp #$20			cmp 	#$20 						; on this page
.8707	90 06		bcc $870f			bcc 	_GXSAFoundPage
.8709	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.870b	e6 0b		inc $0b				inc 	GXEditSlot
.870d	80 f6		bra $8705			bra 	_GXSAFindPage
.870f					_GXSAFoundPage:
.870f	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.8711	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.8713	a0 00		ldy #$00			ldy 	#0
.8715					_GXSACopyLoop:
.8715	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.8717	99 f8 05	sta $05f8,y			sta 	gxPixelBuffer,y
.871a	c8		iny				iny
.871b	cc dd 06	cpy $06dd			cpy 	GXSizePixels
.871e	d0 f5		bne $8715			bne 	_GXSACopyLoop
.8720	60		rts				rts
.8721					GXSelect:
.8721	ad 3a 06	lda $063a			lda 	gxSpritesOn
.8724	f0 22		beq $8748			beq 	_GXSFail
.8726	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8728	c9 40		cmp #$40			cmp 	#64
.872a	b0 1c		bcs $8748			bcs 	_GXSFail
.872c	8d 45 06	sta $0645			sta 	GSCurrentSpriteID
.872f	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.8731	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.8733	06 36		asl $36				asl 	gxzTemp0
.8735	06 36		asl $36				asl 	gxzTemp0
.8737	06 36		asl $36				asl 	gxzTemp0
.8739	2a		rol a				rol 	a
.873a	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.873c	8d 47 06	sta $0647			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.873f	85 37		sta $37				sta 	gxzTemp0+1
.8741	a5 36		lda $36				lda 	gxzTemp0
.8743	8d 46 06	sta $0646			sta 	GSCurrentSpriteAddr
.8746	18		clc				clc
.8747	60		rts				rts
.8748					_GXSFail:
.8748	38		sec				sec
.8749	60		rts				rts
.874a					GXSelectImage:
.874a	ad 3a 06	lda $063a			lda 	gxSpritesOn
.874d	f0 74		beq $87c3			beq 	_GXSIFail
.874f	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.8752	f0 6f		beq $87c3			beq 	_GXSIFail 					; (checking the MSB)
.8754	64 01		stz $01				stz 	1
.8756	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.8758	d0 6b		bne $87c5			bne 	_GXSIHide
.875a	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.875c	48		pha				pha
.875d	20 50 88	jsr $8850			jsr 	GXOpenBitmap
.8760	68		pla				pla
.8761	20 31 89	jsr $8931			jsr 	GXFindSprite
.8764	b0 5a		bcs $87c0			bcs 	_GXSICloseFail 				; no image
.8766	a0 01		ldy #$01			ldy 	#1
.8768	ad 46 06	lda $0646			lda 	GSCurrentSpriteAddr
.876b	85 36		sta $36				sta 	gxzTemp0
.876d	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr+1
.8770	85 37		sta $37				sta 	gxzTemp0+1
.8772	ad e0 06	lda $06e0			lda 	GXSpriteOffset
.8775	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8777	18		clc				clc
.8778	ad e1 06	lda $06e1			lda 	GXSpriteOffset+1
.877b	6d 48 06	adc $0648			adc 	GXSpriteOffsetBase
.877e	c8		iny				iny
.877f	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8781	ad 49 06	lda $0649			lda 	GXSpriteOffsetBase+1
.8784	69 00		adc #$00			adc 	#0
.8786	c8		iny				iny
.8787	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8789	ad de 06	lda $06de			lda 	GXSizeBits 					; get raw size
.878c	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.878e	2a		rol a				rol 	a 							; x 2
.878f	0a		asl a				asl 	a 							; x 4
.8790	0a		asl a				asl 	a 							; x 8
.8791	0a		asl a				asl 	a 							; x 16
.8792	0d df 06	ora $06df			ora 	GXSpriteLUT 				; Or with LUT
.8795	0a		asl a				asl 	a 							; 1 shift
.8796	09 01		ora #$01			ora 	#1 							; enable sprite.
.8798	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.879a	20 58 88	jsr $8858			jsr 	GXCloseBitmap
.879d	ae 45 06	ldx $0645			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.87a0	bd 8a 06	lda $068a,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.87a3	29 3f		and #$3f			and 	#$3F
.87a5	9d 8a 06	sta $068a,x			sta 	GXSpriteHigh,x
.87a8	ad de 06	lda $06de			lda 	GXSizeBits 					; get bit size
.87ab	6a		ror a				ror 	a 							; shift into bits 6/7
.87ac	6a		ror a				ror 	a
.87ad	6a		ror a				ror 	a
.87ae	29 c0		and #$c0			and 	#$C0
.87b0	1d 8a 06	ora $068a,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.87b3	9d 8a 06	sta $068a,x			sta 	GXSpriteHigh,x
.87b6	bd 4a 06	lda $064a,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.87b9	29 7f		and #$7f			and 	#$7F
.87bb	9d 4a 06	sta $064a,x			sta 	GXSpriteLow,x
.87be	18		clc				clc
.87bf	60		rts				rts
.87c0					_GXSICloseFail:
.87c0	20 58 88	jsr $8858			jsr 	GXCloseBitmap
.87c3					_GXSIFail:
.87c3	38		sec				sec
.87c4	60		rts				rts
.87c5					_GXSIHide:
.87c5	ad 46 06	lda $0646			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.87c8	85 36		sta $36				sta 	gxzTemp0
.87ca	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr+1
.87cd	85 37		sta $37				sta 	gxzTemp0+1
.87cf	a9 00		lda #$00			lda 	#0
.87d1	92 36		sta ($36)			sta 	(gxzTemp0)
.87d3	ae 45 06	ldx $0645			ldx 	GSCurrentSpriteID 			; get sprite ID
.87d6	bd 4a 06	lda $064a,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.87d9	09 80		ora #$80			ora 	#$80
.87db	9d 4a 06	sta $064a,x			sta 	GXSpriteLow,x
.87de	18		clc				clc
.87df	60		rts				rts
.87e0					GXMoveSprite:
.87e0	ad 3a 06	lda $063a			lda 	gxSpritesOn
.87e3	f0 65		beq $884a			beq 	_GXSIFail
.87e5	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.87e8	f0 60		beq $884a			beq 	_GXSIFail
.87ea	85 37		sta $37				sta 	gxzTemp0+1
.87ec	a0 04		ldy #$04			ldy 	#4
.87ee	ad 46 06	lda $0646			lda 	GSCurrentSpriteAddr
.87f1	85 36		sta $36				sta 	gxzTemp0
.87f3	ae 45 06	ldx $0645			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.87f6	bd 8a 06	lda $068a,x			lda 	GXSpriteHigh,x
.87f9	2a		rol a				rol 	a	 						; into bits 0,1.
.87fa	2a		rol a				rol 	a
.87fb	2a		rol a				rol 	a
.87fc	29 03		and #$03			and 	#3
.87fe	aa		tax				tax
.87ff	bd 4c 88	lda $884c,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.8802	48		pha				pha
.8803	18		clc				clc
.8804	6d 32 06	adc $0632			adc 	gxX0						; copy position.
.8807	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8809	c8		iny				iny
.880a	ad 33 06	lda $0633			lda 	gxX0+1
.880d	69 00		adc #$00			adc 	#0
.880f	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8811	c8		iny				iny
.8812	68		pla				pla
.8813	18		clc				clc
.8814	6d 34 06	adc $0634			adc 	gxY0
.8817	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8819	a9 00		lda #$00			lda 	#0
.881b	69 00		adc #$00			adc 	#0
.881d	c8		iny				iny
.881e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8820	4e 33 06	lsr $0633			lsr 	gxX0+1 						; divide X by 4
.8823	6e 32 06	ror $0632			ror 	gxX0
.8826	4e 32 06	lsr $0632			lsr 	gxX0
.8829	4e 34 06	lsr $0634			lsr 	gxY0 						; divide Y by 4
.882c	4e 34 06	lsr $0634			lsr 	gxY0
.882f	ae 45 06	ldx $0645			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.8832	bd 4a 06	lda $064a,x			lda 	GXSpriteLow,x
.8835	29 80		and #$80			and 	#$80
.8837	0d 32 06	ora $0632			ora 	gxX0
.883a	9d 4a 06	sta $064a,x			sta 	GXSpriteLow,x
.883d	bd 8a 06	lda $068a,x			lda 	GXSpriteHigh,x
.8840	29 c0		and #$c0			and 	#$C0
.8842	0d 34 06	ora $0634			ora 	gxY0
.8845	9d 8a 06	sta $068a,x			sta 	GXSpriteHigh,x
.8848	18		clc				clc
.8849	60		rts				rts
.884a					_GXSIFail:
.884a	38		sec				sec
.884b	60		rts				rts
.884c					_GXMSOffset:
>884c	1c						.byte 	32-8/2
>884d	18						.byte 	32-16/2
>884e	14						.byte 	32-24/2
>884f	10						.byte 	32-32/2
.8850					GXOpenBitmap:
.8850	78		sei				sei 								; no interrupts here
.8851	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.8853	8d 43 06	sta $0643			sta 	gxOriginalLUTValue
.8856	58		cli				cli
.8857	60		rts				rts
.8858					GXCloseBitmap:
.8858	78		sei				sei
.8859	ad 43 06	lda $0643			lda 	gxOriginalLUTValue 			; restore LUT slot value
.885c	85 0b		sta $0b				sta 	GXEditSlot
.885e	58		cli				cli
.885f	60		rts				rts
.8860					GXPositionCalc:
.8860	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.8862	48		pha				pha
.8863	ad 34 06	lda $0634			lda 	GXY0 						; gxzScreen = Y0
.8866	85 3c		sta $3c				sta 	gxzScreen
.8868	64 3d		stz $3d				stz 	gxzScreen+1
.886a	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.886c	26 3d		rol $3d				rol 	gxzScreen+1
.886e	06 3c		asl $3c				asl 	gxzScreen
.8870	26 3d		rol $3d				rol 	gxzScreen+1
.8872	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.8873	65 3c		adc $3c				adc 	gxzScreen
.8875	85 3c		sta $3c				sta 	gxzScreen
.8877	90 02		bcc $887b			bcc 	_GXPCNoCarry
.8879	e6 3d		inc $3d				inc 	gxzScreen+1
.887b					_GXPCNoCarry:
.887b	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.887d	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.887f	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.8881	85 36		sta $36				sta 	gxzTemp0
.8883	64 3d		stz $3d				stz 	gxzScreen+1
.8885	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8887					_GXPCMultiply32:
.8887	06 3c		asl $3c				asl 	gxzScreen
.8889	26 3d		rol $3d				rol 	gxzScreen+1
.888b	3a		dec a				dec 	a
.888c	d0 f9		bne $8887			bne 	_GXPCMultiply32
.888e	18		clc				clc
.888f	ad 32 06	lda $0632			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.8892	65 3c		adc $3c				adc 	gxzScreen
.8894	8d 44 06	sta $0644			sta 	gsOffset
.8897	ad 33 06	lda $0633			lda 	GXX0+1
.889a	65 3d		adc $3d				adc 	gxzScreen+1
.889c	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.889e	90 04		bcc $88a4			bcc 	_GXPCNoOverflow
.88a0	29 1f		and #$1f			and 	#$1F 						; fix it up
.88a2	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.88a4					_GXPCNoOverflow:
.88a4	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.88a6	85 3d		sta $3d				sta 	gxzScreen+1
.88a8	64 3c		stz $3c				stz 	gxzScreen
.88aa	18		clc				clc
.88ab	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.88ad	6d 3c 06	adc $063c			adc 	gxBasePage 					; by adding the base page
.88b0	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.88b2	68		pla				pla
.88b3	85 36		sta $36				sta 	gxzTemp0
.88b5	60		rts				rts
.88b6					GXMovePositionDown:
.88b6	18		clc				clc 								; add 320 to offset/temp+1
.88b7	ad 44 06	lda $0644			lda 	gsOffset
.88ba	69 40		adc #$40			adc 	#64
.88bc	8d 44 06	sta $0644			sta 	gsOffset
.88bf	a5 3d		lda $3d				lda 	gxzScreen+1
.88c1	69 01		adc #$01			adc 	#1
.88c3	85 3d		sta $3d				sta 	gxzScreen+1
.88c5	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.88c7	90 07		bcc $88d0			bcc 	_GXMPDExit
.88c9	38		sec				sec  								; next page
.88ca	e9 20		sbc #$20			sbc 	#$20
.88cc	85 3d		sta $3d				sta 	gxzScreen+1
.88ce	e6 0b		inc $0b				inc 	GXEditSlot
.88d0					_GXMPDExit:
.88d0	60		rts				rts
.88d1					GXCollide:
.88d1	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.88d3	aa		tax				tax
.88d4	05 37		ora $37				ora 	gxzTemp0+1
.88d6	29 c0		and #$c0			and 	#$C0
.88d8	38		sec				sec
.88d9	d0 53		bne $892e			bne 	_GXCollideFail 				; if either >= 64, fail.
.88db	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.88dd	b9 4a 06	lda $064a,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.88e0	1d 4a 06	ora $064a,x			ora 	GXSpriteLow,x
.88e3	30 48		bmi $892d			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.88e5	18		clc				clc 								; need to calculate sum of sizes.
.88e6	b9 8a 06	lda $068a,y			lda 	GXSpriteHigh,y
.88e9	7d 8a 06	adc $068a,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.88ec	29 c0		and #$c0			and 	#$C0 					 	; mask off
.88ee	6a		ror a				ror 	a 							; 5/6/7
.88ef	4a		lsr a				lsr 	a 							; 4/5/6
.88f0	4a		lsr a				lsr 	a 							; 3/4/5
.88f1	4a		lsr a				lsr 	a 							; 2/3/4
.88f2	18		clc				clc
.88f3	69 08		adc #$08			adc 	#$08
.88f5	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.88f6	4a		lsr a				lsr 	a
.88f7	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.88f9	b9 8a 06	lda $068a,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.88fc	29 3f		and #$3f			and 	#$3F
.88fe	85 39		sta $39				sta 	gxzTemp1+1
.8900	38		sec				sec
.8901	bd 8a 06	lda $068a,x			lda 	GXSpriteHigh,x
.8904	29 3f		and #$3f			and 	#$3F
.8906	e5 39		sbc $39				sbc 	gxzTemp1+1
.8908	b0 03		bcs $890d			bcs 	_GXCAbs1 					; calculate |y1-y0|
.890a	49 ff		eor #$ff			eor 	#$FF
.890c	1a		inc a				inc 	a
.890d					_GXCAbs1:
.890d	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.890f	b0 1c		bcs $892d			bcs 	_GXOkayFail
.8911	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.8913	38		sec				sec 								; calculate |x1-x0|
.8914	b9 4a 06	lda $064a,y			lda 	GXSpriteLow,y
.8917	fd 4a 06	sbc $064a,x			sbc 	GXSpriteLow,x
.891a	b0 03		bcs $891f			bcs 	_GXCAbs2
.891c	49 ff		eor #$ff			eor 	#$FF
.891e	1a		inc a				inc 	a
.891f					_GXCAbs2:
.891f	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.8921	b0 0a		bcs $892d			bcs 	_GXOkayFail
.8923	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.8925	90 02		bcc $8929			bcc 	_GXCHaveLowest
.8927	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.8929					_GXCHaveLowest:
.8929	0a		asl a				asl 	a 							; scale to allow for >> 2
.892a	0a		asl a				asl 	a
.892b	18		clc				clc
.892c	60		rts				rts
.892d					_GXOkayFail:
.892d	18		clc				clc
.892e					_GXCollideFail:
.892e	a9 ff		lda #$ff			lda 	#$FF
.8930	60		rts				rts
.8931					GXFindSprite:
.8931	aa		tax				tax
.8932	ad 3d 06	lda $063d			lda 	GXSpritePage 				; access the base page of the sprite
.8935	85 0b		sta $0b				sta 	GXEditSlot
.8937	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.893a	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.893d	f0 33		beq $8972			beq 	_GXFSFail
.893f	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.8942	8d e1 06	sta $06e1			sta 	GXSpriteOffset+1
.8945	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.8948	48		pha				pha 								; save twice
.8949	48		pha				pha
.894a	29 03		and #$03			and 	#3 							; get sprite size
.894c	8d de 06	sta $06de			sta 	GXSizeBits 					; save raw (0-3)
.894f	aa		tax				tax
.8950	bd 74 89	lda $8974,x			lda 	_GXFXSSTTable,x 			; read sprite size
.8953	8d dd 06	sta $06dd			sta 	GXSizePixels 					; save (8/16/24/32)
.8956	68		pla				pla 								; get LUT
.8957	4a		lsr a				lsr		a
.8958	4a		lsr a				lsr		a
.8959	29 03		and #$03			and 	#3
.895b	8d df 06	sta $06df			sta 	GXSpriteLUT
.895e	68		pla				pla 								; address, neeeds to be x 4
.895f	29 f0		and #$f0			and 	#$F0
.8961	8d e0 06	sta $06e0			sta 	GXSpriteOffset
.8964	0e e0 06	asl $06e0			asl 	GXSpriteOffset
.8967	2e e1 06	rol $06e1			rol 	GXSpriteOffset+1
.896a	0e e0 06	asl $06e0			asl 	GXSpriteOffset
.896d	2e e1 06	rol $06e1			rol 	GXSpriteOffset+1
.8970	18		clc				clc
.8971	60		rts				rts
.8972					_GXFSFail:
.8972	38		sec				sec
.8973	60		rts				rts
.8974					_GXFXSSTTable:
>8974	08 10 18 20					.byte 	8,16,24,32
.06dd					GXSizePixels:
>06dd							.fill 	1
.06de					GXSizeBits:
>06de							.fill 	1
.06df					GXSpriteLUT:
>06df							.fill 	1
.06e0					GXSpriteOffset:
>06e0							.fill 	2
.8978					GXSortXY:
.8978	20 96 89	jsr $8996			jsr 	GXSortY 					; will be sorted on Y now
.897b	ad 32 06	lda $0632			lda 	gxX0 						; compare X0 v X1
.897e	cd 36 06	cmp $0636			cmp 	gxX1
.8981	ad 33 06	lda $0633			lda 	gXX0+1
.8984	ed 37 06	sbc $0637			sbc 	gXX1+1
.8987	90 0c		bcc $8995			bcc 	_GXSXYExit 					; X0 < X1 exit
.8989	a2 00		ldx #$00			ldx 	#0 							; swap them over
.898b	a0 04		ldy #$04			ldy 	#4
.898d	20 aa 89	jsr $89aa			jsr 	GXSwapXY
.8990	e8		inx				inx
.8991	c8		iny				iny
.8992	20 aa 89	jsr $89aa			jsr 	GXSwapXY
.8995					_GXSXYExit:
.8995	60		rts				rts
.8996					GXSortY:
.8996	ad 34 06	lda $0634			lda 	gxY0 						; if Y0 >= Y1
.8999	cd 38 06	cmp $0638			cmp 	gxY1
.899c	90 0b		bcc $89a9			bcc 	_GXSYSorted
.899e	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.89a0	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.89a2					_GXSwap1:
.89a2	20 aa 89	jsr $89aa			jsr 	GXSwapXY
.89a5	88		dey				dey
.89a6	ca		dex				dex
.89a7	10 f9		bpl $89a2			bpl 	_GXSwap1
.89a9					_GXSYSorted:
.89a9	60		rts				rts
.89aa					GXSwapXY:
.89aa	bd 32 06	lda $0632,x			lda 	gxX0,x
.89ad	48		pha				pha
.89ae	b9 32 06	lda $0632,y			lda 	gxX0,y
.89b1	9d 32 06	sta $0632,x			sta 	gxX0,x
.89b4	68		pla				pla
.89b5	99 32 06	sta $0632,y			sta 	gxX0,y
.89b8	60		rts				rts

;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.89b9					AssembleGroup1:
.89b9	a9 ff		lda #$ff			lda 	#$FF
.89bb	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.89be	80 02		bra $89c2			bra 	AsmGroup12
.89c0					AssembleGroup2:
.89c0	a5 00		lda $00				lda 	$00
.89c2					AsmGroup12:
.89c2	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.89c5	68		pla				pla 								; pop the return address to access the information following.
.89c6	fa		plx				plx
.89c7	20 50 8a	jsr $8a50			jsr 	AccessParameters 			; get opcode and save as base
.89ca	8d a4 04	sta $04a4			sta 	BaseOpcode
.89cd	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.89d0	d0 08		bne $89da			bne 	_AG12HaveMask
.89d2	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.89d4	20 58 8a	jsr $8a58			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.89d7	8d a5 04	sta $04a5			sta 	ModeMask
.89da					_AG12HaveMask:
.89da	20 93 8b	jsr $8b93			jsr 	TypeAndCalculateOperand 	; get zero page type
.89dd	da		phx				phx 								; save found address mode
.89de	20 bc 8a	jsr $8abc			jsr 	AssembleModeX
.89e1	fa		plx				plx  								; restore address mode
.89e2	b0 0b		bcs $89ef			bcs 	_AG12Exit
.89e4	20 f0 89	jsr $89f0			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.89e7	20 bc 8a	jsr $8abc			jsr 	AssembleModeX
.89ea	b0 03		bcs $89ef			bcs 	_AG12Exit
.89ec	4c 35 b5	jmp $b535			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.89ef					_AG12Exit:
.89ef	60		rts				rts
.89f0					PromoteToAbsolute:
.89f0	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.89f2	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.89f4	f0 19		beq $8a0f			beq 	_PTADo
.89f6	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.89f8	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.89fa	f0 13		beq $8a0f			beq 	_PTADo
.89fc	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.89fe	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8a00	f0 0d		beq $8a0f			beq 	_PTADo
.8a02	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8a04	e0 d1		cpx #$d1			cpx 	#AM_IND
.8a06	f0 07		beq $8a0f			beq 	_PTADo
.8a08	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8a0a	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8a0c	f0 01		beq $8a0f			beq 	_PTADo
.8a0e	60		rts				rts
.8a0f					_PTADo:
.8a0f	aa		tax				tax
.8a10	60		rts				rts
.8a11					AssembleGroup3:
.8a11	68		pla				pla 								; get parameters, which is just the opcode.
.8a12	fa		plx				plx
.8a13	20 50 8a	jsr $8a50			jsr 	AccessParameters 			; get and output opcode
.8a16	20 68 8a	jsr $8a68			jsr 	AssemblerWriteByte
.8a19	20 f7 8b	jsr $8bf7			jsr 	CalculateOperand 			; get a 16 bit operand
.8a1c	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8a1f	38		sec				sec
.8a20	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8a23	48		pha				pha 								; LSB in A
.8a24	ad 10 04	lda $0410			lda 	NSMantissa1
.8a27	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8a2a	aa		tax				tax 								; MSB in X
.8a2b	68		pla				pla
.8a2c	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8a2d	69 7f		adc #$7f			adc 	#$7F
.8a2f	90 01		bcc $8a32			bcc 	_AG3NoCarry
.8a31	e8		inx				inx
.8a32					_AG3NoCarry:
.8a32	38		sec				sec 								; fix back and write out anyways.
.8a33	e9 80		sbc #$80			sbc 	#$80
.8a35	20 68 8a	jsr $8a68			jsr 	AssemblerWriteByte
.8a38	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8a3a	f0 0a		beq $8a46			beq 	_AG3Exit
.8a3c	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8a3f	29 01		and #$01			and 	#1
.8a41	f0 03		beq $8a46			beq 	_AG3Exit
.8a43	4c 3a b5	jmp $b53a			jmp 	RangeError 					; no, branch is out of range
.8a46					_AG3Exit:
.8a46	60		rts				rts
.8a47					AssembleGroup4:
.8a47	68		pla				pla 								; pop address
.8a48	fa		plx				plx
.8a49	20 50 8a	jsr $8a50			jsr 	AccessParameters 			; access and get first
.8a4c	20 68 8a	jsr $8a68			jsr 	AssemblerWriteByte 			; output it.
.8a4f	60		rts				rts
.8a50					AccessParameters:
.8a50	8d a1 04	sta $04a1			sta 	ParamStart
.8a53	8e a2 04	stx $04a2			stx 	ParamStart+1
.8a56	a9 01		lda #$01			lda 	#1
.8a58					GetParameter:
.8a58	5a		phy				phy
.8a59	a8		tay				tay
.8a5a	ad a1 04	lda $04a1			lda 	ParamStart
.8a5d	85 36		sta $36				sta 	zTemp0
.8a5f	ad a2 04	lda $04a2			lda 	ParamStart+1
.8a62	85 37		sta $37				sta 	zTemp0+1
.8a64	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a66	7a		ply				ply
.8a67	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8a68					AssemblerWriteByte:
.8a68	48		pha			pha
.8a69	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8a6c	29 02		and #$02		and 	#2
.8a6e	f0 1b		beq $8a8b		beq 	_AWBNoPrint
.8a70	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8a73	20 a6 8a	jsr $8aa6		jsr 	PrintHex
.8a76	ad 9e 04	lda $049e		lda		AssemblerAddress
.8a79	20 a6 8a	jsr $8aa6		jsr 	PrintHex
.8a7c	a9 20		lda #$20		lda 	#' '
.8a7e	20 ed b6	jsr $b6ed		jsr 	EXTPrintCharacter
.8a81	68		pla			pla 									; print byte
.8a82	48		pha			pha
.8a83	20 a6 8a	jsr $8aa6		jsr 	PrintHex
.8a86	a9 0d		lda #$0d		lda 	#13
.8a88	20 ed b6	jsr $b6ed		jsr 	EXTPrintCharacter
.8a8b					_AWBNoPrint:
.8a8b	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8a8e	85 36		sta $36			sta 	zTemp0
.8a90	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8a93	f0 0e		beq $8aa3		beq 	_AWBRange
.8a95	85 37		sta $37			sta 	zTemp0+1
.8a97	68		pla			pla 									; write byte out
.8a98	92 36		sta ($36)		sta 	(zTemp0)
.8a9a	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8a9d	d0 03		bne $8aa2		bne 	_AWBNoCarry
.8a9f	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8aa2					_AWBNoCarry:
.8aa2	60		rts			rts
.8aa3					_AWBRange:
.8aa3	4c 3a b5	jmp $b53a		jmp 	RangeError
.8aa6					PrintHex:
.8aa6	48		pha				pha
.8aa7	4a		lsr a				lsr 	a
.8aa8	4a		lsr a				lsr 	a
.8aa9	4a		lsr a				lsr 	a
.8aaa	4a		lsr a				lsr 	a
.8aab	20 af 8a	jsr $8aaf			jsr 	_PrintNibble
.8aae	68		pla				pla
.8aaf					_PrintNibble:
.8aaf	29 0f		and #$0f			and 	#15
.8ab1	c9 0a		cmp #$0a			cmp 	#10
.8ab3	90 02		bcc $8ab7			bcc 	_NoShift
.8ab5	69 06		adc #$06			adc 	#6
.8ab7					_NoShift:
.8ab7	69 30		adc #$30			adc 	#48
.8ab9	4c ed b6	jmp $b6ed			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8abc					AssembleModeX:
.8abc	5a		phy				phy
.8abd	ad a3 04	lda $04a3			lda 	IsGroup1
.8ac0	f0 17		beq $8ad9			beq 	_AMXGroup2
.8ac2	8a		txa				txa 							; is it in group # 1
.8ac3	29 40		and #$40			and 	#AM_ISG1
.8ac5	f0 50		beq $8b17			beq 	_AMXFail 				; no, give up.
.8ac7	8a		txa				txa 							; get back.
.8ac8	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8aca	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8acc	d0 22		bne $8af0			bne 	_AMXHaveInfo
.8ace	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8ad1	c9 81		cmp #$81			cmp 	#$81
.8ad3	f0 42		beq $8b17			beq 	_AMXFail
.8ad5	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8ad7	80 17		bra $8af0			bra 	_AMXHaveInfo 			; odd design decision there.
.8ad9					_AMXGroup2:
.8ad9	8a		txa				txa 							; is it in group 2 ?
.8ada	29 20		and #$20			and 	#AM_ISG2
.8adc	f0 39		beq $8b17			beq 	_AMXFail 				; no, give up.
.8ade	8a		txa				txa 							; get the offset into Y
.8adf	29 1f		and #$1f			and 	#$1F
.8ae1	4a		lsr a				lsr 	a 						; make it 0-7.
.8ae2	4a		lsr a				lsr  	a
.8ae3	a8		tay				tay
.8ae4	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8ae7					_AMXCheckOkay:
.8ae7	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8ae8	88		dey				dey
.8ae9	10 fc		bpl $8ae7			bpl 	_AMXCheckOkay
.8aeb	90 2a		bcc $8b17			bcc 	_AMXFail 				; not allowed.
.8aed	8a		txa				txa  							; get mask back
.8aee	29 1f		and #$1f			and 	#$1F
.8af0					_AMXHaveInfo:
.8af0	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8af2	10 05		bpl $8af9			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8af4	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8af7	d0 1e		bne $8b17			bne 	_AMXFail
.8af9					_AMXAnySize:
.8af9	18		clc				clc 							; add offset to the base opcode
.8afa	6d a4 04	adc $04a4			adc 	BaseOpcode
.8afd					_AMXOutputCode:
.8afd	20 68 8a	jsr $8a68			jsr 	AssemblerWriteByte 		; write the opcode out.
.8b00	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8b02	f0 10		beq $8b14			beq 	_AMXExit
.8b04	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8b07	20 68 8a	jsr $8a68			jsr 	AssemblerWriteByte
.8b0a	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8b0c	30 06		bmi $8b14			bmi 	_AMXExit
.8b0e	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8b11	20 68 8a	jsr $8a68			jsr 	AssemblerWriteByte
.8b14					_AMXExit:
.8b14	7a		ply				ply
.8b15	38		sec				sec
.8b16	60		rts				rts
.8b17					_AMXFail:
.8b17	a0 00		ldy #$00			ldy 	#0
.8b19					_AMXCheckOddities:
.8b19	8a		txa				txa
.8b1a	d9 42 8b	cmp $8b42,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8b1d	d0 16		bne $8b35			bne 	_AMXCONext
.8b1f	b9 40 8b	lda $8b40,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8b22	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8b25	d0 0e		bne $8b35			bne 	_AMXCONext
.8b27	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8b29	10 05		bpl $8b30			bpl 	_AMXCONotZero
.8b2b	ad 10 04	lda $0410			lda 	NSMantissa1
.8b2e	d0 05		bne $8b35			bne 	_AMXCONext
.8b30					_AMXCONotZero:
.8b30	b9 41 8b	lda $8b41,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8b33	80 c8		bra $8afd			bra 	_AMXOutputCode 			; and assemble it
.8b35					_AMXCONext:
.8b35	c8		iny				iny
.8b36	c8		iny				iny
.8b37	c8		iny				iny
.8b38	b9 40 8b	lda $8b40,y			lda 	ExtraOpcode+0,y 		; end of table
.8b3b	d0 dc		bne $8b19			bne 	_AMXCheckOddities
.8b3d					_AMXCOFail:
.8b3d	7a		ply				ply
.8b3e	18		clc				clc
.8b3f	60		rts				rts
.8b40					ExtraOpcode:
>8b40	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8b43	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8b46	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8b49	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8b4c	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8b4f	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8b52	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8b55	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8b58	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8b5b	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8b5e	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8b5f					LabelHere:
.8b5f	c8		iny				iny 								; skip .
.8b60	a2 00		ldx #$00			ldx 	#0 							; get a term
.8b62	20 ab a1	jsr $a1ab			jsr 	EvaluateTerm 				; get a term
.8b65	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8b68	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8b6a	d0 24		bne $8b90			bne 	_ALType
.8b6c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8b6f	85 36		sta $36				sta 	zTemp0
.8b71	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b74	85 37		sta $37				sta 	zTemp0+1
.8b76	5a		phy				phy 								; copy address in.
.8b77	a0 01		ldy #$01			ldy 	#1
.8b79	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8b7c	92 36		sta ($36)			sta 	(zTemp0)
.8b7e	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8b81	91 36		sta ($36),y			sta 	(zTemp0),y
.8b83	c8		iny				iny
.8b84	a9 00		lda #$00			lda 	#0
.8b86	91 36		sta ($36),y			sta 	(zTemp0),y
.8b88	c8		iny				iny
.8b89	91 36		sta ($36),y			sta 	(zTemp0),y
.8b8b	c8		iny				iny
.8b8c	91 36		sta ($36),y			sta 	(zTemp0),y
.8b8e	7a		ply				ply
.8b8f	60		rts				rts
.8b90					_ALType:
.8b90	4c 3f b5	jmp $b53f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8b93					TypeAndCalculateOperand:
.8b93	b1 30		lda ($30),y			lda 	(codePtr),y
.8b95	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8b97	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8b99	f0 5b		beq $8bf6			beq 	_TACOExit
.8b9b	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b9d	f0 57		beq $8bf6			beq 	_TACOExit
.8b9f	c8		iny				iny
.8ba0	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8ba2	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8ba4	f0 51		beq $8bf7			beq 	CalculateOperand
.8ba6	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8ba8	f0 1f		beq $8bc9			beq 	_TACOIndirect
.8baa	88		dey				dey 								; undo get of first character
.8bab	20 f7 8b	jsr $8bf7			jsr 	CalculateOperand 			; get operand
.8bae	b1 30		lda ($30),y			lda 	(codePtr),y
.8bb0	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8bb2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bb4	d0 40		bne $8bf6			bne 	_TACOExit
.8bb6	c8		iny				iny
.8bb7	20 be ae	jsr $aebe			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8bba	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8bbc	c9 58		cmp #$58			cmp 	#'X'
.8bbe	f0 36		beq $8bf6			beq 	_TACOExit
.8bc0	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8bc2	c9 59		cmp #$59			cmp 	#'Y'
.8bc4	f0 30		beq $8bf6			beq 	_TACOExit
.8bc6					_TACOSyntax:
.8bc6	4c 35 b5	jmp $b535			jmp 	SyntaxError
.8bc9					_TACOIndirect:
.8bc9	20 f7 8b	jsr $8bf7			jsr 	CalculateOperand 			; get the operand
.8bcc	b1 30		lda ($30),y			lda 	(codePtr),y
.8bce	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8bd0	f0 17		beq $8be9			beq 	_TACOIndX
.8bd2	20 47 af	jsr $af47			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8bd5	b1 30		lda ($30),y			lda 	(codePtr),y
.8bd7	a2 d1		ldx #$d1			ldx 	#AM_IND
.8bd9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8bdb	d0 19		bne $8bf6			bne 	_TACOExit
.8bdd	c8		iny				iny
.8bde	20 be ae	jsr $aebe			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8be1	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8be3	d0 e1		bne $8bc6			bne 	_TACOSyntax
.8be5	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8be7	80 0d		bra $8bf6			bra 	_TACOExit
.8be9					_TACOIndX:
.8be9	c8		iny				iny
.8bea	20 be ae	jsr $aebe			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8bed	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8bef	d0 d5		bne $8bc6			bne 	_TACOSyntax
.8bf1	20 47 af	jsr $af47			jsr 	CheckRightBracket			; check )
.8bf4	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8bf6					_TACOExit:
.8bf6	60		rts				rts
.8bf7					CalculateOperand:
.8bf7	48		pha				pha
.8bf8	da		phx				phx
.8bf9	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8bfb	20 7c a6	jsr $a67c			jsr 	Evaluate16BitInteger
.8bfe	fa		plx				plx
.8bff	68		pla				pla
.8c00	60		rts				rts
.aebe					TACOCheckXY:
.aebe	b1 30		lda ($30),y			lda 	(codePtr),y
.aec0	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.aec2	c9 40		cmp #$40			cmp 	#$40
.aec4	d0 21		bne $aee7			bne 	_TCXYFail
.aec6	b1 30		lda ($30),y			lda 	(codePtr),y
.aec8	18		clc				clc
.aec9	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.aecb	85 37		sta $37				sta 	zTemp0+1
.aecd	c8		iny				iny
.aece	b1 30		lda ($30),y			lda 	(codePtr),y
.aed0	c8		iny				iny
.aed1	85 36		sta $36				sta 	zTemp0
.aed3	5a		phy				phy 								; save position
.aed4	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.aed6	b1 36		lda ($36),y			lda 	(zTemp0),y
.aed8	d0 0c		bne $aee6			bne 	_TCXYPopFail
.aeda	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.aedc	b1 36		lda ($36),y			lda 	(zTemp0),y
.aede	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.aee0	f0 08		beq $aeea			beq 	_TCXYFound
.aee2	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.aee4	f0 04		beq $aeea			beq 	_TCXYFound
.aee6					_TCXYPopFail:
.aee6	7a		ply				ply
.aee7					_TCXYFail:
.aee7	a9 00		lda #$00			lda 	#0
.aee9	60		rts				rts
.aeea					_TCXYFound:
.aeea	7a		ply				ply 								; restore position
.aeeb	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.aeed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8c01					EditProgramCode:
.8c01	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line.
.8c04	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1
.8c07	20 63 a7	jsr $a763			jsr 	MemorySearch
.8c0a	90 05		bcc $8c11			bcc 	_EPCNoDelete 				; reached the end don't delete
.8c0c	d0 03		bne $8c11			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8c0e	20 78 b7	jsr $b778			jsr 	MemoryDeleteLine 			; delete the line
.8c11					_EPCNoDelete:
.8c11	ad aa 04	lda $04aa			lda 	TokenBuffer 				; buffer empty
.8c14	c9 80		cmp #$80			cmp 	#KWC_EOL
.8c16	f0 0d		beq $8c25			beq 	_EPCNoInsert
.8c18	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8c1b	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8c1e	20 63 a7	jsr $a763			jsr 	MemorySearch
.8c21	18		clc				clc 								; insert at this point.
.8c22	20 af b7	jsr $b7af			jsr 	MemoryInsertLine 			; insert the line
.8c25					_EPCNoInsert:
.8c25	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8c26					WarmStart:
.8c26	a2 ff		ldx #$ff			ldx 	#$FF
.8c28	9a		txs				txs
.8c29	20 03 b7	jsr $b703			jsr 	EXTInputLine 				; get line to lineBuffer
.8c2c	20 3f ac	jsr $ac3f			jsr 	TokeniseLine 				; tokenise the line
.8c2f	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; line number ?
.8c32	0d a9 04	ora $04a9			ora 	TokenLineNumber+1
.8c35	d0 17		bne $8c4e			bne 	_WSEditCode 				; if so,edit code.
.8c37	9c a7 04	stz $04a7			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8c3a	a9 a7		lda #$a7			lda 	#((TokenOffset) & $FF)
.8c3c	85 30		sta $30				sta 	codePtr
.8c3e	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8c40	85 31		sta $31				sta 	codePtr+1
.8c42	ad aa 04	lda $04aa			lda 	TokenBuffer 				; nothing to run
.8c45	c9 80		cmp #$80			cmp 	#KWC_EOL
.8c47	f0 dd		beq $8c26			beq 	WarmStart
.8c49	20 d0 95	jsr $95d0			jsr 	RUNCodePointerLine 			; execute that line.
.8c4c	80 d8		bra $8c26			bra 	WarmStart
.8c4e					_WSEditCode:
.8c4e	20 01 8c	jsr $8c01			jsr 	EditProgramCode
.8c51	20 bf 8c	jsr $8cbf			jsr 	ClearCommand
.8c54	80 d0		bra $8c26			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8c56					AssembleCommand:
.8c56	a2 00		ldx #$00			ldx 	#0
.8c58	20 7c a6	jsr $a67c			jsr 	Evaluate16BitInteger 		; start address
.8c5b	ad 08 04	lda $0408			lda 	NSMantissa0
.8c5e	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8c61	ad 10 04	lda $0410			lda 	NSMantissa1
.8c64	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8c67	20 4f af	jsr $af4f			jsr 	CheckComma
.8c6a	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger 		; options
.8c6d	ad 08 04	lda $0408			lda 	NSMantissa0
.8c70	8d a0 04	sta $04a0			sta 	AssemblerControl
.8c73	60		rts				rts
.8c74	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8c75					AssertCommand:
.8c75	a2 00		ldx #$00			ldx 	#0
.8c77	20 67 a6	jsr $a667			jsr 	EvaluateInteger 			; the assert test
.8c7a	20 34 a7	jsr $a734			jsr 	NSMIsZero 					; exit if result is non zero.
.8c7d	d0 05		bne $8c84			bne 	_ACExit
.8c7f	a9 0a		lda #$0a		lda	#10
.8c81	4c c9 9a	jmp $9ac9		jmp	ErrorHandler
.8c84					_ACExit:
.8c84	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8c85					CallCommand:
.8c85	a2 00		ldx #$00			ldx 	#0
.8c87	20 7c a6	jsr $a67c			jsr 	Evaluate16BitInteger
.8c8a					_CCClear
.8c8a	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8c8b	20 04 a7	jsr $a704			jsr 	NSMSetZero
.8c8e	e0 04		cpx #$04			cpx 	#4
.8c90	d0 f8		bne $8c8a			bne 	_CCClear
.8c92	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8c94					_CCCParam:
.8c94	b1 30		lda ($30),y			lda 	(codePtr),y
.8c96	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c98	d0 09		bne $8ca3			bne 	_CCCRun6502
.8c9a	c8		iny				iny 								; skip comma
.8c9b	e8		inx				inx	 								; next level
.8c9c	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8c9f	e0 03		cpx #$03			cpx 	#3
.8ca1	90 f1		bcc $8c94			bcc 	_CCCParam 					; done all 3 ?
.8ca3					_CCCRun6502:
.8ca3	5a		phy				phy 								; save position
.8ca4	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8ca7	85 37		sta $37				sta 	zTemp0+1
.8ca9	ad 08 04	lda $0408			lda 	NSMantissa0
.8cac	85 36		sta $36				sta 	zTemp0
.8cae	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8cb1	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8cb4	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8cb7	20 bc 8c	jsr $8cbc			jsr 	_CCCZTemp0 					; call zTemp0
.8cba	7a		ply				ply 								; restore position and exit
.8cbb	60		rts				rts
.8cbc					_CCCZTemp0:
.8cbc	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8cbf					ClearCommand:
.8cbf	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8cc1	85 36		sta $36				sta 	0+zTemp0
.8cc3	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8cc5	85 37		sta $37				sta 	1+zTemp0
.8cc7					_ClearZeroLoop:
.8cc7	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8cc9	f0 24		beq $8cef			beq 	_ClearZeroEnd
.8ccb	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8ccd	a9 00		lda #$00			lda 	#0
.8ccf					_ClearOneVariable:
.8ccf	91 36		sta ($36),y			sta 	(zTemp0),y
.8cd1	c8		iny				iny
.8cd2	c0 08		cpy #$08			cpy 	#8
.8cd4	d0 f9		bne $8ccf			bne 	_ClearOneVariable
.8cd6	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8cd8	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cda	c9 18		cmp #$18			cmp 	#NSTProcedure
.8cdc	d0 04		bne $8ce2			bne 	_ClearNotProcedure
.8cde	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8ce0	91 36		sta ($36),y			sta 	(zTemp0),y
.8ce2					_ClearNotProcedure:
.8ce2	18		clc				clc 								; go to the next variable
.8ce3	b2 36		lda ($36)			lda 	(zTemp0)
.8ce5	65 36		adc $36				adc 	zTemp0
.8ce7	85 36		sta $36				sta 	zTemp0
.8ce9	90 dc		bcc $8cc7			bcc 	_ClearZeroLoop
.8ceb	e6 37		inc $37				inc 	zTemp0+1
.8ced	80 d8		bra $8cc7			bra 	_ClearZeroLoop
.8cef					_ClearZeroEnd:
.8cef	18		clc				clc
.8cf0	a5 36		lda $36				lda 	zTemp0
.8cf2	69 01		adc #$01			adc 	#1
.8cf4	8d 8c 04	sta $048c			sta 	lowMemPtr
.8cf7	a5 37		lda $37				lda 	zTemp0+1
.8cf9	69 00		adc #$00			adc 	#0
.8cfb	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8cfe	20 1d a8	jsr $a81d			jsr 	StackReset
.8d01	20 92 b8	jsr $b892			jsr 	StringSystemInitialise
.8d04	20 d2 99	jsr $99d2			jsr 	ProcedureScan
.8d07	20 8c 95	jsr $958c			jsr 	Command_Restore
.8d0a	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8d0d	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8d10	9c a0 04	stz $04a0			stz 	AssemblerControl
.8d13	20 9e a3	jsr $a39e			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8d16	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/cls.asm

.8d17					ClearScreen:
.8d17	5a		phy				phy
.8d18	20 ea b6	jsr $b6ea			jsr 	EXTClearScreen
.8d1b	7a		ply				ply
.8d1c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8d1d					Command_Data:
.8d1d	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8d1f	a2 80		ldx #$80			ldx 	#KWC_EOL
.8d21	20 24 9a	jsr $9a24			jsr 	ScanForward
.8d24	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8d25					DimCommand:
.8d25	b1 30		lda ($30),y			lda 	(codePtr),y
.8d27	29 c0		and #$c0			and 	#$C0
.8d29	c9 40		cmp #$40			cmp 	#$40
.8d2b	d0 7a		bne $8da7			bne 	_DCSyntax
.8d2d	b1 30		lda ($30),y			lda 	(codePtr),y
.8d2f	18		clc				clc
.8d30	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8d32	85 3f		sta $3f				sta 	zaTemp+1
.8d34	c8		iny				iny
.8d35	b1 30		lda ($30),y			lda 	(codePtr),y
.8d37	c8		iny				iny
.8d38	85 3e		sta $3e				sta 	zaTemp
.8d3a	5a		phy				phy
.8d3b	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8d3d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d3f	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8d41	c9 18		cmp #$18			cmp 	#NSTProcedure
.8d43	f0 62		beq $8da7			beq 	_DCSyntax
.8d45	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8d47	29 04		and #$04			and 	#NSBIsArray
.8d49	f0 64		beq $8daf			beq 	_DCType
.8d4b	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8d4d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d4f	d0 59		bne $8daa			bne 	_DCRedefine
.8d51	7a		ply				ply
.8d52	20 b2 8d	jsr $8db2			jsr 	_DCGetSize 				; get array size, check it.
.8d55	5a		phy				phy
.8d56	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8d58	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8d5a	7a		ply				ply 							; is there a second (e.g. ,x)
.8d5b	b1 30		lda ($30),y			lda 	(codePtr),y
.8d5d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d5f	d0 0a		bne $8d6b			bne 	_DCOneDimension
.8d61	c8		iny				iny 							; skip comma
.8d62	20 b2 8d	jsr $8db2			jsr 	_DCGetSize 				; get 2nd array size
.8d65	5a		phy				phy
.8d66	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8d68	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d6a	7a		ply				ply
.8d6b					_DCOneDimension:
.8d6b	5a		phy				phy 							; save position
.8d6c	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8d6e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d70	aa		tax				tax
.8d71	c8		iny				iny
.8d72	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d74	e8		inx				inx 							; bump them.
.8d75	1a		inc a				inc 	a
.8d76	20 d1 b3	jsr $b3d1			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8d79	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8d7b	29 e0		and #$e0			and 	#$E0
.8d7d	d0 23		bne $8da2			bne 	_DCSize
.8d7f	a0 02		ldy #$02			ldy 	#2 						; get base type
.8d81	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d83	20 c0 8d	jsr $8dc0			jsr 	ScaleByBaseType 		; scale by base type
.8d86	a5 36		lda $36				lda 	zTemp0
.8d88	a6 37		ldx $37				ldx 	zTemp0+1
.8d8a	20 60 a3	jsr $a360			jsr 	AllocateXABytes 		; allocate memory
.8d8d	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8d8f	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d91	c8		iny				iny
.8d92	8a		txa				txa
.8d93	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d95	7a		ply				ply 							; get position back
.8d96	20 47 af	jsr $af47			jsr 	CheckRightBracket 		; check )
.8d99	b1 30		lda ($30),y			lda 	(codePtr),y
.8d9b	c8		iny				iny 							; consume in case
.8d9c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8d9e	f0 85		beq $8d25			beq 	DimCommand
.8da0	88		dey				dey 							; undo consume
.8da1	60		rts				rts
.8da2					_DCSize:
.8da2	a9 16		lda #$16		lda	#22
.8da4	4c c9 9a	jmp $9ac9		jmp	ErrorHandler
.8da7					_DCSyntax:
.8da7	4c 35 b5	jmp $b535			jmp 	SyntaxError
.8daa					_DCRedefine:
.8daa	a9 15		lda #$15		lda	#21
.8dac	4c c9 9a	jmp $9ac9		jmp	ErrorHandler
.8daf					_DCType:
.8daf	4c 3f b5	jmp $b53f			jmp 	TypeError
.8db2					_DCGetSize:
.8db2	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8db4	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger 	; get array dimension
.8db7	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8db9	f0 e7		beq $8da2			beq 	_DCSize
.8dbb	c9 fe		cmp #$fe			cmp 	#254
.8dbd	f0 e3		beq $8da2			beq 	_DCSize
.8dbf	60		rts				rts
.8dc0					ScaleByBaseType:
.8dc0	29 10		and #$10			and 	#NSBIsString 			; is it string
.8dc2	d0 19		bne $8ddd			bne 	_SBBTString
.8dc4	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8dc6	48		pha				pha
.8dc7	a5 36		lda $36				lda 	zTemp0
.8dc9	48		pha				pha
.8dca	06 36		asl $36				asl 	zTemp0 					; x 2
.8dcc	26 37		rol $37				rol 	zTemp0+1
.8dce	06 36		asl $36				asl 	zTemp0 					; x 4
.8dd0	26 37		rol $37				rol 	zTemp0+1
.8dd2	68		pla				pla 							; add stacked value = x 5
.8dd3	65 36		adc $36				adc 	zTemp0
.8dd5	85 36		sta $36				sta 	zTemp0
.8dd7	68		pla				pla
.8dd8	65 37		adc $37				adc 	zTemp0+1
.8dda	85 37		sta $37				sta 	zTemp0+1
.8ddc	60		rts				rts
.8ddd					_SBBTString:
.8ddd	06 36		asl $36				asl 	zTemp0
.8ddf	26 37		rol $37				rol 	zTemp0+1
.8de1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8de2					EndCommand:
.8de2	4c 26 8c	jmp $8c26			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.8de5					UnaryEvent:
.8de5	fa		plx				plx
.8de6	20 11 98	jsr $9811			jsr 	TimerToStackX 				; timer in +0
.8de9	e8		inx				inx  								; put reference into +1
.8dea	20 ab a1	jsr $a1ab			jsr 	EvaluateTerm
.8ded	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8df0	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8df2	d0 57		bne $8e4b			bne 	_UEType
.8df4	e8		inx				inx 								; put the step in +2
.8df5	20 4f af	jsr $af4f			jsr 	CheckComma
.8df8	20 7c a6	jsr $a67c			jsr 	Evaluate16BitInteger
.8dfb	20 47 af	jsr $af47			jsr 	CheckRightBracket
.8dfe	ca		dex				dex
.8dff	ca		dex				dex
.8e00	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.8e03	85 36		sta $36				sta 	zTemp0
.8e05	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.8e08	85 37		sta $37				sta 	zTemp0+1
.8e0a	5a		phy				phy
.8e0b	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8e0d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e0f	30 36		bmi $8e47			bmi 	_UEFalse 					; exit if signed.
.8e11	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8e13	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e16	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8e18	c8		iny				iny
.8e19	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e1c	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8e1e	c8		iny				iny
.8e1f	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e22	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8e24	90 21		bcc $8e47			bcc 	_UEFalse 					; no, return FALSE.
.8e26	18		clc				clc
.8e27	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8e29	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e2c	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8e2f	91 36		sta ($36),y			sta 	(zTemp0),y
.8e31	c8		iny				iny
.8e32	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e35	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8e38	91 36		sta ($36),y			sta 	(zTemp0),y
.8e3a	c8		iny				iny
.8e3b	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e3e	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.8e41	91 36		sta ($36),y			sta 	(zTemp0),y
.8e43	7a		ply				ply
.8e44	4c 36 9b	jmp $9b36			jmp 	ReturnTrue
.8e47					_UEFalse:
.8e47	7a		ply				ply 								; restore Y
.8e48	4c 42 9b	jmp $9b42			jmp 	ReturnFalse 				; and return False
.8e4b					_UEType:
.8e4b	4c 3f b5	jmp $b53f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8e4e					ForCommand:
.8e4e	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8e50	20 b8 a7	jsr $a7b8			jsr 	StackOpen
.8e53	a2 00		ldx #$00			ldx 	#0
.8e55	20 ab a1	jsr $a1ab			jsr 	EvaluateTerm
.8e58	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e5b	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8e5d	d0 49		bne $8ea8			bne		_FCError
.8e5f	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8e61	20 57 af	jsr $af57			jsr 	CheckNextA
.8e64	e8		inx				inx
.8e65	20 67 a6	jsr $a667			jsr 	EvaluateInteger 			; <from> in +1
.8e68	b1 30		lda ($30),y			lda 	(codePtr),y
.8e6a	c8		iny				iny 								; consume it
.8e6b	48		pha				pha 								; save on stack for later
.8e6c	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.8e6e	f0 04		beq $8e74			beq 	_FCNoSyntax
.8e70	c9 cb		cmp #$cb			cmp 	#KWD_TO
.8e72	d0 37		bne $8eab			bne 	_FCSyntaxError
.8e74					_FCNoSyntax:
.8e74	e8		inx				inx
.8e75	20 67 a6	jsr $a667			jsr 	EvaluateInteger
.8e78	20 fc a7	jsr $a7fc			jsr 	STKSaveCodePosition 		; save loop back position
.8e7b	68		pla				pla 								; restore DOWNTO or TO
.8e7c	5a		phy				phy 								; save Y on the stack
.8e7d	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8e7f	f0 02		beq $8e83			beq 	_FCNotDownTo
.8e81	a9 02		lda #$02			lda 	#2
.8e83					_FCNotDownTo:
.8e83	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8e84	a0 10		ldy #$10			ldy 	#16
.8e86	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8e88	a0 06		ldy #$06			ldy 	#6
.8e8a	ad 08 04	lda $0408			lda 	NSMantissa0
.8e8d	91 34		sta ($34),y			sta 	(basicStack),y
.8e8f	ad 10 04	lda $0410			lda 	NSMantissa1
.8e92	c8		iny				iny
.8e93	91 34		sta ($34),y			sta 	(basicStack),y
.8e95	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8e97	a2 01		ldx #$01			ldx 	#1
.8e99	20 ae 8e	jsr $8eae			jsr 	FCIntegerToStack
.8e9c	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8e9e	a2 02		ldx #$02			ldx 	#2
.8ea0	20 ae 8e	jsr $8eae			jsr 	FCIntegerToStack
.8ea3	20 ce 8e	jsr $8ece			jsr 	CopyIndexToReference
.8ea6	7a		ply				ply 								; restore position
.8ea7	60		rts				rts
.8ea8					_FCError:
.8ea8	4c 3f b5	jmp $b53f			jmp 	TypeError
.8eab					_FCSyntaxError:
.8eab	4c 35 b5	jmp $b535			jmp 	SyntaxError
.8eae					FCIntegerToStack:
.8eae	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8eb1	10 03		bpl $8eb6			bpl	 	_FCNotNegative
.8eb3	20 b9 a6	jsr $a6b9			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8eb6					_FCNotNegative:
.8eb6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8eb9	91 34		sta ($34),y			sta 	(basicStack),y
.8ebb	c8		iny				iny
.8ebc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ebf	91 34		sta ($34),y			sta 	(basicStack),y
.8ec1	c8		iny				iny
.8ec2	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8ec5	91 34		sta ($34),y			sta 	(basicStack),y
.8ec7	c8		iny				iny
.8ec8	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8ecb	91 34		sta ($34),y			sta 	(basicStack),y
.8ecd	60		rts				rts
.8ece					CopyIndexToReference:
.8ece	5a		phy				phy
.8ecf	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8ed1	38		sec				sec 								; (because we copy from offset 8)
.8ed2	b1 34		lda ($34),y			lda 	(basicStack),y
.8ed4	e9 08		sbc #$08			sbc 	#8
.8ed6	85 36		sta $36				sta 	zTemp0
.8ed8	c8		iny				iny
.8ed9	b1 34		lda ($34),y			lda 	(basicStack),y
.8edb	e9 00		sbc #$00			sbc 	#0
.8edd	85 37		sta $37				sta 	zTemp0+1
.8edf	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8ee1	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8ee3	b1 34		lda ($34),y			lda 	(basicStack),y
.8ee5	0a		asl a				asl 	a 							; into carry
.8ee6	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8ee8	90 14		bcc $8efe			bcc 	_CITRNormal
.8eea	38		sec				sec
.8eeb					_CITRNegative:
.8eeb	a9 00		lda #$00			lda 	#0
.8eed	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8eef	91 36		sta ($36),y			sta 	(zTemp0),y
.8ef1	c8		iny				iny
.8ef2	ca		dex				dex
.8ef3	d0 f6		bne $8eeb			bne 	_CITRNegative
.8ef5	88		dey				dey 								; look at MSB of mantissa
.8ef6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8ef8	09 80		ora #$80			ora 	#$80
.8efa	91 36		sta ($36),y			sta 	(zTemp0),y
.8efc	7a		ply				ply
.8efd	60		rts				rts
.8efe					_CITRNormal:
.8efe	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8f00	91 36		sta ($36),y			sta 	(zTemp0),y
.8f02	c8		iny				iny
.8f03	ca		dex				dex
.8f04	d0 f8		bne $8efe			bne 	_CITRNormal
.8f06	7a		ply				ply 								; and exit.
.8f07	60		rts				rts
.8f08					NextCommand:
.8f08	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8f0a	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8f0c	20 e4 a7	jsr $a7e4			jsr 	StackCheckFrame
.8f0f	5a		phy				phy
.8f10	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8f12	b1 34		lda ($34),y			lda 	(basicStack),y
.8f14	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8f16	30 02		bmi $8f1a			bmi 	_NCStepNeg
.8f18	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8f1a					_NCStepNeg:
.8f1a	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8f1c	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8f1e	18		clc				clc
.8f1f					_NCBump:
.8f1f	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8f21	91 34		sta ($34),y			sta 	(basicStack),y
.8f23	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8f25	c8		iny				iny 								; next byte
.8f26	ca		dex				dex 								; do four times
.8f27	d0 f6		bne $8f1f			bne 	_NCBump
.8f29	20 ce 8e	jsr $8ece			jsr		CopyIndexToReference		; copy it to the reference variable.
.8f2c	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8f2e	b1 34		lda ($34),y			lda 	(basicStack),y
.8f30	0a		asl a				asl 	a 							; sign bit to carry
.8f31	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8f33	85 38		sta $38				sta 	zTemp1
.8f35	90 02		bcc $8f39			bcc 	_NCCompRev 					; use if step is +ve
.8f37	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8f39					_NCCompRev:
.8f39	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8f3b	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8f3d	85 39		sta $39				sta 	zTemp1+1
.8f3f	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8f41	38		sec				sec
.8f42					_NCCompare:
.8f42	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8f44	b1 34		lda ($34),y			lda 	(basicStack),y
.8f46	a4 39		ldy $39				ldy 	zTemp1+1
.8f48	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8f4a	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8f4c	e6 39		inc $39				inc 	zTemp1+1
.8f4e	ca		dex				dex 								; do it 4 times.
.8f4f	d0 f1		bne $8f42			bne 	_NCCompare
.8f51	50 02		bvc $8f55			bvc 	_NCNoOverflow 				; convert to signed comparison
.8f53	49 80		eor #$80			eor 	#$80
.8f55					_NCNoOverflow:
.8f55	7a		ply				ply 								; restore Y position
.8f56	0a		asl a				asl 	a 							; is bit 7 set.
.8f57	90 04		bcc $8f5d			bcc 	_NCLoopback 				; if no , >= so loop back
.8f59	20 d6 a7	jsr $a7d6			jsr 	StackClose 					; exit the loop
.8f5c	60		rts				rts
.8f5d					_NCLoopBack:
.8f5d	20 0d a8	jsr $a80d			jsr 	STKLoadCodePosition 		; loop back
.8f60	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8f61					RectangleCommand:
.8f61	a9 24		lda #$24			lda 	#GCMD_FrameRect				; frame rectangle
.8f63	80 02		bra $8f67			bra 	ShapeDrawCmd
.8f65					CircleCommand:
.8f65	a9 28		lda #$28			lda 	#GCMD_FrameCircle 				; framed circle
.8f67					ShapeDrawCmd:
.8f67	20 f5 8f	jsr $8ff5			jsr 	RunGraphicsCommand
.8f6a					ShapeDraw:
.8f6a	0d e3 06	ora $06e3			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8f6d	4c e9 8f	jmp $8fe9			jmp 	ExecuteGraphicCommand	 	; and complete
.8f70					SpriteCommand:
.8f70	a2 00		ldx #$00			ldx 	#0
.8f72	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger 		; get image number.
.8f75	5a		phy				phy
.8f76	a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.8f78	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8f7b	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8f7d	b0 0d		bcs $8f8c			bcs 	_SCRange
.8f7f	a0 ff		ldy #$ff			ldy 	#255
.8f81	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.8f84	a9 32		lda #$32			lda 	#GCMD_SpriteMove
.8f86	7a		ply				ply
.8f87	20 f5 8f	jsr $8ff5			jsr 	RunGraphicsCommand
.8f8a	80 5d		bra $8fe9			bra 	ExecuteGraphicCommand
.8f8c					_SCRange:
.8f8c	4c 3a b5	jmp $b53a			jmp 	RangeError
.8f8f					ImageCommand:
.8f8f	a2 00		ldx #$00			ldx 	#0
.8f91	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger 		; get image number.
.8f94	20 f5 8f	jsr $8ff5			jsr 	RunGraphicsCommand
.8f97					ImageRunDraw:
.8f97	09 20		ora #$20			ora 	#GCMD_Move					; move cursor
.8f99	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.8f9c	ad e9 06	lda $06e9			lda 	gxDrawScale
.8f9f	0a		asl a				asl 	a
.8fa0	0a		asl a				asl 	a
.8fa1	0a		asl a				asl 	a
.8fa2	a8		tay				tay
.8fa3	a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.8fa5	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8fa8	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.8fab	60		rts				rts
.8fac					TextCommand:
.8fac	a2 00		ldx #$00			ldx 	#0
.8fae	20 4f a6	jsr $a64f			jsr 	EvaluateString 				; get text
.8fb1	20 f5 8f	jsr $8ff5			jsr 	RunGraphicsCommand
.8fb4					TextRunDraw:
.8fb4	09 20		ora #$20			ora 	#GCMD_Move 					; move cursor
.8fb6	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.8fb9	a0 00		ldy #$00			ldy 	#0
.8fbb					_IRDLoop:
.8fbb	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8fbe	85 37		sta $37				sta 	zTemp0+1
.8fc0	ad 08 04	lda $0408			lda 	NSMantissa0
.8fc3	85 36		sta $36				sta 	zTemp0
.8fc5	b1 36		lda ($36),y			lda 	(zTemp0),y
.8fc7	f0 13		beq $8fdc			beq 	_IRDExit
.8fc9	5a		phy				phy									; save string pos
.8fca	48		pha				pha 								; save char
.8fcb	ad e9 06	lda $06e9			lda 	gxDrawScale 				; get scale
.8fce	0a		asl a				asl 	a
.8fcf	0a		asl a				asl 	a
.8fd0	0a		asl a				asl 	a
.8fd1	a8		tay				tay
.8fd2	a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.8fd4	fa		plx				plx 								; char to draw
.8fd5	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.8fd8	7a		ply				ply 								; restore string pos
.8fd9	c8		iny				iny
.8fda	90 df		bcc $8fbb			bcc 	_IRDLoop 					; go back if no error.
.8fdc					_IRDExit:
.8fdc	60		rts				rts
.8fdd					PlotCommand:
.8fdd	a9 30		lda #$30			lda 	#GCMD_Plot 					; command ID to use
.8fdf	20 f5 8f	jsr $8ff5			jsr 	RunGraphicsCommand
.8fe2	80 05		bra $8fe9			bra 	ExecuteGraphicCommand
.8fe4					LineCommand:
.8fe4	a9 22		lda #$22			lda 	#GCMD_Line 						; command ID to use
.8fe6	20 f5 8f	jsr $8ff5			jsr 	RunGraphicsCommand
.8fe9					ExecuteGraphicCommand:
.8fe9	0d e2 06	ora $06e2			ora 	gxCommandID 				; make a full command
.8fec	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw 				; draw it and exit
.8fef	b0 01		bcs $8ff2			bcs 	_EGCError
.8ff1	60		rts				rts
.8ff2					_EGCError:
.8ff2	4c 35 b5	jmp $b535			jmp 	SyntaxError
.8ff5					RunGraphicsCommand:
.8ff5	8d e2 06	sta $06e2			sta 	gxCommandID					; save TODO graphics command.
.8ff8	68		pla				pla 								; pop handler address
.8ff9	fa		plx				plx
.8ffa	1a		inc a				inc 	a
.8ffb	d0 01		bne $8ffe			bne 	_RGINoCarry
.8ffd	e8		inx				inx
.8ffe					_RGINoCarry:
.8ffe	8d e7 06	sta $06e7			sta 	GXHandler
.9001	8e e8 06	stx $06e8			stx 	GXHandler+1
.9004					_RGICommandLoop:
.9004	b1 30		lda ($30),y			lda 	(codePtr),y
.9006	c8		iny				iny
.9007	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.9009	f0 53		beq $905e			beq 	_RGI_To
.900b	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.900d	f0 55		beq $9064			beq 	_RGI_Here
.900f	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.9011	f0 3d		beq $9050			beq 	_RGI_Exit
.9013	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9015	f0 39		beq $9050			beq 	_RGI_Exit
.9017	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.9019	f0 3e		beq $9059			beq 	_RGI_Frame
.901b	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.901d	f0 33		beq $9052			beq 	_RGI_Solid
.901f	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.9021	f0 4b		beq $906e			beq 	_RGI_By
.9023	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.9025	f0 17		beq $903e			beq 	_RGI_Move2
.9027	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.9029	f0 65		beq $9090			beq 	_RGI_Dim
.902b	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.902d	f0 78		beq $90a7			beq 	_RGI_Colour
.902f	c9 af		cmp #$af			cmp 	#KWD_COLOR
.9031	f0 74		beq $90a7			beq 	_RGI_Colour
.9033	ae e2 06	ldx $06e2			ldx 	gxCommandID
.9036	e0 32		cpx #$32			cpx 	#GCMD_SpriteMove 			; if not sprite
.9038	d0 03		bne $903d			bne 	_RGI_Move 					; move
.903a	4c d1 90	jmp $90d1			jmp		_RGI_SpriteInstructions
.903d					_RGI_Move:
.903d	88		dey				dey 								; unpick get.
.903e					_RGI_Move2:
.903e	20 f7 90	jsr $90f7			jsr 	GCGetCoordinatePair 		; move to here
.9041	20 1e 91	jsr $911e			jsr 	GCCopyPairToStore 			; save
.9044	5a		phy				phy
.9045	20 14 91	jsr $9114			jsr 	GCLoadAXY 					; load in
.9048	09 20		ora #$20			ora 	#GCMD_Move 					; move there
.904a	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.904d	7a		ply				ply
.904e	80 b4		bra $9004			bra 	_RGICommandLoop 			; and go round
.9050					_RGI_Exit:
.9050	88		dey				dey 								; unpick : / EOL
.9051	60		rts				rts
.9052					_RGI_Solid:
.9052	a9 02		lda #$02			lda 	#2
.9054	8d e3 06	sta $06e3			sta 	gxFillSolid
.9057	80 ab		bra $9004			bra 	_RGICommandLoop
.9059					_RGI_Frame:
.9059	9c e3 06	stz $06e3			stz 	gxFillSolid
.905c	80 a6		bra $9004			bra 	_RGICommandLoop
.905e					_RGI_To:
.905e	20 f7 90	jsr $90f7			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.9061	20 1e 91	jsr $911e			jsr 	GCCopyPairToStore
.9064					_RGI_Here:
.9064	5a		phy				phy
.9065	20 14 91	jsr $9114			jsr 	GCLoadAXY 					; load it into AXY
.9068	20 ce 90	jsr $90ce			jsr 	_RGICallHandler 			; go do whatever it is.
.906b	7a		ply				ply
.906c	80 96		bra $9004			bra 	_RGICommandLoop 			; and go round
.906e					_RGI_By:
.906e	20 04 91	jsr $9104			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.9071	18		clc				clc
.9072	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9075	6d e4 06	adc $06e4			adc 	gxxPos
.9078	8d e4 06	sta $06e4			sta 	gxXPos
.907b	ad 11 04	lda $0411			lda 	NSMantissa1+1
.907e	6d e5 06	adc $06e5			adc 	gxxPos+1
.9081	8d e5 06	sta $06e5			sta 	gxXPos+1
.9084	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9087	18		clc				clc
.9088	6d e6 06	adc $06e6			adc 	gxYPos
.908b	8d e6 06	sta $06e6			sta 	gxYPos
.908e	80 d4		bra $9064			bra 	_RGI_Here
.9090					_RGI_Dim:
.9090	a2 01		ldx #$01			ldx	 	#1
.9092	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger
.9095	ad 09 04	lda $0409			lda 	NSMantissa0+1
.9098	c9 00		cmp #$00			cmp 	#0
.909a	f0 2f		beq $90cb			beq 	_RGIRange
.909c	c9 09		cmp #$09			cmp 	#8+1
.909e	b0 2b		bcs $90cb			bcs		_RGIRange
.90a0	3a		dec a				dec 	a
.90a1	8d e9 06	sta $06e9			sta 	gxDrawScale
.90a4	4c 04 90	jmp $9004			jmp 	_RGICommandLoop
.90a7					_RGI_Colour:
.90a7	a2 01		ldx #$01			ldx 	#1 							; colour
.90a9	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger
.90ac	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.90ae	20 04 a7	jsr $a704			jsr 	NSMSetZero
.90b1	b1 30		lda ($30),y			lda 	(codePtr),y
.90b3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.90b5	d0 04		bne $90bb			bne 	_RGICDefaultMode
.90b7	c8		iny				iny
.90b8	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger
.90bb					_RGICDefaultMode:
.90bb	5a		phy				phy
.90bc	a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.90be	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.90c1	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.90c4	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.90c7	7a		ply				ply
.90c8	4c 04 90	jmp $9004			jmp 	_RGICommandLoop 			; and go round
.90cb					_RGIRange:
.90cb	4c 3a b5	jmp $b53a			jmp 	RangeError
.90ce					_RGICallHandler:
.90ce	6c e7 06	jmp ($06e7)			jmp 	(GXHandler)
.90d1					_RGI_SpriteInstructions:
.90d1	c9 be		cmp #$be			cmp 	#KWD_OFF
.90d3	f0 07		beq $90dc			beq 	_RGISpriteOff
.90d5	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.90d7	f0 13		beq $90ec			beq 	_RGISetImage
.90d9	4c 3d 90	jmp $903d			jmp 	_RGI_Move
.90dc					_RGISpriteOff:
.90dc	5a		phy				phy
.90dd	a0 01		ldy #$01			ldy 	#1
.90df	a2 00		ldx #$00			ldx 	#0
.90e1					_RGIDoCommandLoop:
.90e1	a9 10		lda #$10			lda 	#GCMD_SpriteImage
.90e3	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.90e6	7a		ply				ply
.90e7	b0 e2		bcs $90cb			bcs 	_RGIRange
.90e9	4c 04 90	jmp $9004			jmp 	_RGICommandLoop
.90ec					_RGISetImage:
.90ec	a2 01		ldx #$01			ldx 	#1
.90ee	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger
.90f1	5a		phy				phy
.90f2	aa		tax				tax
.90f3	a0 00		ldy #$00			ldy 	#0
.90f5	80 ea		bra $90e1			bra 	_RGIDoCommandLoop
.90f7					GCGetCoordinatePair:
.90f7	a2 01		ldx #$01			ldx 	#1
.90f9	20 7c a6	jsr $a67c			jsr 	Evaluate16BitInteger
.90fc	20 4f af	jsr $af4f			jsr 	CheckComma
.90ff	e8		inx				inx
.9100	20 7c a6	jsr $a67c			jsr 	Evaluate16BitInteger
.9103	60		rts				rts
.9104					GCSignedCoordinatePair:
.9104	a2 01		ldx #$01			ldx 	#1
.9106	20 88 a6	jsr $a688			jsr 	Evaluate16BitIntegerSigned
.9109	20 4f af	jsr $af4f			jsr 	CheckComma
.910c	e8		inx				inx
.910d	20 88 a6	jsr $a688			jsr 	Evaluate16BitIntegerSigned
.9110	60		rts				rts
.9111					_GCCPRange:
.9111	4c 3a b5	jmp $b53a			jmp 	RangeError
.9114					GCLoadAXY:
.9114	ad e5 06	lda $06e5			lda 	gxXPos+1
.9117	ae e4 06	ldx $06e4			ldx 	gxXPos
.911a	ac e6 06	ldy $06e6			ldy 	gxYPos
.911d	60		rts				rts
.911e					GCCopyPairToStore:
.911e	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9121	8d e4 06	sta $06e4			sta 	gxXPos
.9124	ad 11 04	lda $0411			lda 	NSMantissa1+1
.9127	8d e5 06	sta $06e5			sta 	gxXPos+1
.912a	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.912d	8d e6 06	sta $06e6			sta 	gxYPos
.9130	60		rts				rts
.06e2					gxCommandID:
>06e2							.fill 	1
.06e3					gxFillSolid:
>06e3							.fill 	1
.06e4					gxXPos:
>06e4							.fill 	2
.06e6					gxYPos:
>06e6							.fill 	1
.06e7					gxHandler:
>06e7							.fill 	2
.06e9					gxDrawScale:
>06e9							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.9131					BitmapCtrl:
.9131	b1 30		lda ($30),y			lda 	(codePtr),y
.9133	c8		iny				iny
.9134	a2 01		ldx #$01			ldx 	#1
.9136	c9 bf		cmp #$bf			cmp 	#KWD_ON
.9138	f0 11		beq $914b			beq 	BitmapSwitch
.913a	ca		dex				dex
.913b	c9 be		cmp #$be			cmp 	#KWD_OFF
.913d	f0 0c		beq $914b			beq 	BitmapSwitch
.913f	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger 		; get the colour
.9142	5a		phy				phy
.9143	aa		tax				tax
.9144	a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.9146	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.9149	7a		ply				ply
.914a	60		rts				rts
.914b					BitmapSwitch:
.914b	5a		phy				phy
.914c	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.914e	a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.9150	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.9153	a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.9155	a0 00		ldy #$00			ldy 	#0
.9157	a2 ff		ldx #$ff			ldx 	#$FF
.9159	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.915c	9c e3 06	stz $06e3			stz 	gxFillSolid
.915f	9c e4 06	stz $06e4			stz 	gxXPos
.9162	9c e5 06	stz $06e5			stz 	gxXPos+1
.9165	9c e6 06	stz $06e6			stz 	gxYPos
.9168	9c e9 06	stz $06e9			stz 	gxDrawScale
.916b	a9 20		lda #$20			lda 	#GCMD_Move 						; home cursor
.916d	a2 00		ldx #$00			ldx 	#0
.916f	a0 00		ldy #$00			ldy 	#0
.9171	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.9174	7a		ply				ply
.9175	60		rts				rts
.9176					SpritesCtrl:
.9176	b1 30		lda ($30),y			lda 	(codePtr),y
.9178	c8		iny				iny
.9179	a2 01		ldx #$01			ldx 	#1
.917b	c9 bf		cmp #$bf			cmp 	#KWD_ON
.917d	f0 08		beq $9187			beq 	SpriteSwitch
.917f	ca		dex				dex
.9180	c9 be		cmp #$be			cmp 	#KWD_OFF
.9182	f0 03		beq $9187			beq 	SpriteSwitch
.9184	4c 35 b5	jmp $b535			jmp 	SyntaxError
.9187					SpriteSwitch:
.9187	5a		phy				phy
.9188	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.918a	a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.918c	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.918f	7a		ply				ply
.9190	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.9191					GfxCommand:
.9191	a2 00		ldx #$00			ldx 	#0
.9193	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger 		; command
.9196	20 4f af	jsr $af4f			jsr 	CheckComma
.9199	e8		inx				inx
.919a	20 7c a6	jsr $a67c			jsr 	Evaluate16BitInteger 		; X
.919d	20 4f af	jsr $af4f			jsr 	CheckComma
.91a0	e8		inx				inx
.91a1	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger 		; Y
.91a4	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.91a7	4a		lsr a				lsr 	a
.91a8	d0 16		bne $91c0			bne 	_GfxError
.91aa	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.91ad	b0 11		bcs $91c0			bcs 	_GfxError 					; bit 7 should have been zero
.91af	5a		phy				phy 								; save pos
.91b0	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.91b3	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.91b6	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.91b9	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw
.91bc	b0 02		bcs $91c0			bcs 	_GfxError
.91be	7a		ply				ply 								; restore pos and exit.
.91bf	60		rts				rts
.91c0					_GfxError:
.91c0	4c 3a b5	jmp $b53a			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.91c3					Command_GOSUB:
.91c3	a2 00		ldx #$00			ldx 	#0
.91c5	20 7c a6	jsr $a67c			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.91c8	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.91ca	20 b8 a7	jsr $a7b8			jsr 	StackOpen 					; create frame
.91cd	20 fc a7	jsr $a7fc			jsr 	STKSaveCodePosition 		; save current position
.91d0	4c e6 91	jmp $91e6			jmp 	GotoStackX
.91d3					Command_RETURN:
.91d3	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.91d5	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.91d7	20 e4 a7	jsr $a7e4			jsr 	StackCheckFrame
.91da	20 0d a8	jsr $a80d			jsr 	STKLoadCodePosition 		; restore code position
.91dd	20 d6 a7	jsr $a7d6			jsr 	StackClose
.91e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.91e1					GotoCommand:
.91e1	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.91e3	20 7c a6	jsr $a67c			jsr 	Evaluate16BitInteger
.91e6					GotoStackX:
.91e6	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.91e9	48		pha				pha 								; it is slightly inefficient, just in cases.
.91ea	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.91ed	fa		plx				plx
.91ee	20 63 a7	jsr $a763			jsr 	MemorySearch 				; transfer to line number AX.
.91f1	90 05		bcc $91f8			bcc 	_GotoError 					; not found, off end.
.91f3	d0 03		bne $91f8			bne 	_GotoError 					; not found exactly
.91f5	4c c9 95	jmp $95c9			jmp 	RunNewLine 					; and go straight to new line code.
.91f8					_GotoError:
.91f8	a9 0d		lda #$0d		lda	#13
.91fa	4c c9 9a	jmp $9ac9		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/hit.asm

.91fd					UnaryHit:
.91fd	fa		plx				plx
.91fe	a9 36		lda #$36			lda 	#zTemp0
.9200	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger 		; get sprite number 0
.9203	20 4f af	jsr $af4f			jsr 	CheckComma
.9206	e8		inx				inx
.9207	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger 		; get sprite number 1
.920a	20 47 af	jsr $af47			jsr		CheckRightBracket
.920d	ca		dex				dex 								; fix back up again.
.920e	da		phx				phx 								; save X/Y
.920f	5a		phy				phy
.9210	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.9213	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9216	aa		tax				tax
.9217	a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.9219	20 b9 80	jsr $80b9			jsr 	GXGraphicDraw 				; calculate result
.921c	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.921d	7a		ply				ply 								; restore XY
.921e	fa		plx				plx
.921f	20 06 a7	jsr $a706			jsr 	NSMSetByte 					; return the hit result
.9222	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.9223					IfCommand:
.9223	a2 00		ldx #$00			ldx 	#0 							; If what.
.9225	20 44 a6	jsr $a644			jsr 	EvaluateNumber
.9228	b1 30		lda ($30),y			lda 	(codePtr),y
.922a	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.922c	d0 0a		bne $9238			bne 	_IFStructured
.922e	c8		iny				iny 								; consume THEN
.922f	20 34 a7	jsr $a734			jsr 	NSMIsZero 					; is it zero
.9232	f0 01		beq $9235			beq 	_IfFail 					; if fail, go to next line
.9234	60		rts				rts 								; if THEN just continue
.9235					_IfFail:
.9235	4c 2e 96	jmp $962e			jmp 	EOLCommand
.9238					_IfStructured:
.9238	20 34 a7	jsr $a734			jsr 	NSMIsZero 					; is it zero
.923b	d0 07		bne $9244			bne 	_IfExit 					; if not, then continue normally.
.923d	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.923f	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.9241	20 24 9a	jsr $9a24			jsr 	ScanForward 				; and run from there/
.9244					_IfExit:
.9244	60		rts				rts
.9245					ElseCode:
.9245	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.9247	aa		tax				tax 								; so just go to the structure exit
.9248	20 24 9a	jsr $9a24			jsr 	ScanForward
.924b	60		rts				rts
.924c					EndIf:
.924c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/joy.asm

.924d					UnaryJoyX:
.924d	18		clc				clc
.924e	80 01		bra $9251			bra 	JoyMain
.9250					UnaryJoyY:
.9250	38		sec				sec
.9251					JoyMain:
.9251	fa		plx				plx 								; get pos
.9252	08		php				php 								; save carry (set for Y)
.9253	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9256	20 47 af	jsr $af47			jsr 	CheckRightBracket
.9259	20 31 b7	jsr $b731			jsr 	EXTReadController 			; read the controller.
.925c	28		plp				plp
.925d	90 02		bcc $9261			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.925f	4a		lsr a				lsr 	a
.9260	4a		lsr a				lsr 	a
.9261					_JMNoShift:
.9261	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.9262	b0 0a		bcs $926e			bcs 	_JMIsRight
.9264	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.9265	b0 04		bcs $926b			bcs 	_JMIsLeft
.9267	20 04 a7	jsr $a704			jsr 	NSMSetZero 					; zero result
.926a	60		rts				rts
.926b					_JMIsLeft:
.926b	4c 36 9b	jmp $9b36			jmp 	ReturnTrue
.926e					_JMIsRight:
.926e	a9 01		lda #$01			lda 	#1
.9270	20 06 a7	jsr $a706			jsr 	NSMSetByte
.9273	60		rts				rts
.9274					UnaryJoyB:
.9274	fa		plx				plx 								; get pos
.9275	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9278	20 47 af	jsr $af47			jsr 	CheckRightBracket
.927b	20 31 b7	jsr $b731			jsr 	EXTReadController 			; read the controller.
.927e	4a		lsr a				lsr 	a
.927f	4a		lsr a				lsr 	a
.9280	4a		lsr a				lsr 	a
.9281	4a		lsr a				lsr 	a
.9282	29 01		and #$01			and 	#1
.9284	20 06 a7	jsr $a706			jsr 	NSMSetByte
.9287	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.9288					LetCommand:
.9288	a2 00		ldx #$00			ldx 	#0
.928a	b1 30		lda ($30),y			lda 	(codePtr),y
.928c	c9 10		cmp #$10			cmp 	#KWD_AT
.928e	d0 16		bne $92a6			bne 	_LCStandard
.9290	c8		iny				iny 								; skip equal
.9291	20 ab a1	jsr $a1ab			jsr 	EvaluateTerm 				; get a number
.9294	20 ef 9f	jsr $9fef			jsr 	Dereference 				; dereference it
.9297	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.929a	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.929c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.929f	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.92a1	d0 10		bne $92b3			bne 	_LCMain
.92a3	4c 3f b5	jmp $b53f			jmp 	TypeError 					; was a reference before.
.92a6					_LCStandard:
.92a6	ad c2 9e	lda $9ec2			lda 	PrecedenceLevel+"*"			; precedence > this
.92a9	20 dc 9e	jsr $9edc			jsr 	EvaluateExpressionAtPrecedence
.92ac	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.92af	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.92b1	f0 0e		beq $92c1			beq 	_LetGoProc 					; it's a procedure call.
.92b3					_LCMain:
.92b3	a9 3d		lda #$3d			lda 	#"=" 						; check =
.92b5	20 57 af	jsr $af57			jsr 	CheckNextA
.92b8	e8		inx				inx 								; RHS
.92b9	20 3b a6	jsr $a63b			jsr 	EvaluateValue
.92bc	ca		dex				dex
.92bd	20 c4 92	jsr $92c4			jsr 	AssignVariable
.92c0	60		rts				rts
.92c1					_LetGoProc:
.92c1	4c a4 94	jmp $94a4			jmp 	CallProcedure
.92c4					AssignVariable:
.92c4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.92c7	48		pha				pha 								; save a copy
.92c8	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.92cb	29 10		and #$10			and 	#NSBIsString
.92cd	d0 0b		bne $92da			bne 	_ASError
.92cf	68		pla				pla 								; get back
.92d0	29 10		and #$10			and 	#NSBIsString 				; check type
.92d2	d0 03		bne $92d7			bne 	_ASString
.92d4	4c 17 9f	jmp $9f17			jmp 	AssignNumber
.92d7					_ASString:
.92d7	4c 85 9f	jmp $9f85			jmp 	AssignString
.92da					_ASError:
.92da	4c 3f b5	jmp $b53f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.92dd					Command_List:
.92dd	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.92e0	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.92e3	9c 14 04	stz $0414			stz 	NSMantissa1+4
.92e6	a9 ff		lda #$ff			lda 	#$FF
.92e8	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.92eb	8d 17 04	sta $0417			sta 	NSMantissa1+7
.92ee	b1 30		lda ($30),y			lda 	(codePtr),y
.92f0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.92f2	f0 1e		beq $9312			beq 	_CLSecond
.92f4	20 70 93	jsr $9370			jsr 	CLIsDigit 					; if not digit, list all
.92f7	b0 24		bcs $931d			bcs 	_CLStart
.92f9	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.92fb	20 7c a6	jsr $a67c			jsr 	Evaluate16BitInteger
.92fe	b1 30		lda ($30),y			lda 	(codePtr),y
.9300	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9302	f0 0e		beq $9312			beq 	_CLSecond 					; if so go get it
.9304	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.9307	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.930a	ad 14 04	lda $0414			lda 	NSMantissa1+4
.930d	8d 17 04	sta $0417			sta 	NSMantissa1+7
.9310	80 0b		bra $931d			bra 	_CLStart
.9312					_CLSecond:
.9312	c8		iny				iny 								; consume comma
.9313	20 70 93	jsr $9370			jsr 	CLIsDigit 					; digit found
.9316	b0 05		bcs $931d			bcs 	_CLStart 					; if not, continue listing
.9318	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.931a	20 7c a6	jsr $a67c			jsr 	Evaluate16BitInteger
.931d					_CLStart
.931d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.931f	85 30		sta $30				sta 	codePtr
.9321	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9323	85 31		sta $31				sta 	codePtr+1
.9325					_CLLoop:
.9325	20 2e b7	jsr $b72e			jsr 	EXTBreakCheck 				; break check
.9328	f0 30		beq $935a			beq 	_CLExit
.932a	b2 30		lda ($30)			lda 	(codePtr)
.932c	f0 2c		beq $935a			beq 	_CLExit
.932e	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.9330	20 5d 93	jsr $935d			jsr 	CLCompareLineNo
.9333	90 18		bcc $934d			bcc 	_CLNext
.9335	a2 07		ldx #$07			ldx 	#7
.9337	20 5d 93	jsr $935d			jsr 	CLCompareLineNo
.933a	f0 02		beq $933e			beq 	_CLDoThisOne
.933c	b0 0f		bcs $934d			bcs 	_CLNext
.933e					_CLDoThisOne:
.933e	20 29 98	jsr $9829			jsr 	ListConvertLine 			; convert line into token Buffer
.9341	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9343	a9 aa		lda #$aa			lda 	#(tokenBuffer & $FF)
.9345	20 22 9b	jsr $9b22			jsr 	PrintStringXA
.9348	a9 0d		lda #$0d			lda 	#13 						; new line
.934a	20 ed b6	jsr $b6ed			jsr 	EXTPrintCharacter
.934d					_CLNext:
.934d	18		clc				clc
.934e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9350	65 30		adc $30				adc 	codePtr
.9352	85 30		sta $30				sta 	codePtr
.9354	90 02		bcc $9358			bcc 	_CREExit
.9356	e6 31		inc $31				inc 	codePtr+1
.9358					_CREExit:
.9358	80 cb		bra $9325			bra 	_CLLoop
.935a					_CLExit:
.935a	4c 26 8c	jmp $8c26			jmp 	WarmStart
.935d					CLCompareLineNo:
.935d	38		sec				sec
.935e	a0 01		ldy #$01			ldy 	#1
.9360	b1 30		lda ($30),y			lda 	(codePtr),y
.9362	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9365	85 36		sta $36				sta 	zTemp0
.9367	c8		iny				iny
.9368	b1 30		lda ($30),y			lda 	(codePtr),y
.936a	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.936d	05 36		ora $36				ora 	zTemp0
.936f	60		rts				rts
.9370					CLIsDigit:
.9370	b1 30		lda ($30),y			lda 	(codePtr),y
.9372	c9 30		cmp #$30			cmp 	#"0"
.9374	90 03		bcc $9379			bcc	 	_CLIDExitFalse
.9376	c9 3a		cmp #$3a			cmp 	#"9"+1
.9378	60		rts				rts
.9379					_CLIDExitFalse:
.9379	38		sec				sec
.937a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.937b					Command_LOCAL:
.937b	a2 00		ldx #$00			ldx 	#0 							; at level 0
.937d	20 89 93	jsr $9389			jsr 	LocaliseNextTerm 			; convert term to a local.
.9380	b1 30		lda ($30),y			lda 	(codePtr),y
.9382	c8		iny				iny
.9383	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9385	f0 f4		beq $937b			beq 	Command_LOCAL
.9387	88		dey				dey 								; unpick pre-get
.9388	60		rts				rts
.9389					LocaliseNextTerm:
.9389	20 ab a1	jsr $a1ab			jsr 	EvaluateTerm 				; evaluate the term
.938c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.938f	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.9391	f0 69		beq $93fc			beq		_LNTError
.9393	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.9396	85 36		sta $36				sta 	zTemp0
.9398	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.939b	85 37		sta $37				sta  	zTemp0+1
.939d	bd 00 04	lda $0400,x			lda 	NSStatus,x
.93a0	29 10		and #$10			and 	#NSBIsString
.93a2	d0 22		bne $93c6			bne 	_LNTPushString
.93a4	5a		phy				phy
.93a5	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.93a7					_LNTPushNumLoop:
.93a7	b1 36		lda ($36),y			lda		(zTemp0),y
.93a9	20 96 a7	jsr $a796			jsr 	StackPushByte
.93ac	a9 00		lda #$00			lda 	#0
.93ae	91 36		sta ($36),y			sta 	(zTemp0),y
.93b0	c8		iny				iny
.93b1	c0 05		cpy #$05			cpy 	#5
.93b3	d0 f2		bne $93a7			bne 	_LNTPushNumLoop
.93b5	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.93b7	20 96 a7	jsr $a796			jsr 	StackPushByte
.93ba	a5 37		lda $37				lda 	zTemp0+1
.93bc	20 96 a7	jsr $a796			jsr 	StackPushByte
.93bf	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.93c1	20 96 a7	jsr $a796			jsr 	StackPushByte
.93c4	7a		ply				ply
.93c5	60		rts				rts
.93c6					_LNTPushString:
.93c6	5a		phy				phy
.93c7	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.93c9	85 38		sta $38				sta 	zTemp1
.93cb	a0 01		ldy #$01			ldy 	#1
.93cd	b1 36		lda ($36),y			lda 	(zTemp0),y
.93cf	85 39		sta $39				sta 	zTemp1+1
.93d1	a0 00		ldy #$00			ldy 	#0 							; output string
.93d3	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.93d5	f0 0a		beq $93e1			beq 	_LNTStringOut
.93d7					_LNTPushStrLoop:
.93d7	b1 38		lda ($38),y			lda 	(zTemp1),y
.93d9	f0 06		beq $93e1			beq 	_LNTStringOut
.93db	20 96 a7	jsr $a796			jsr 	StackPushByte
.93de	c8		iny				iny
.93df	80 f6		bra $93d7			bra 	_LNTPushStrLoop
.93e1					_LNTStringOut:
.93e1	98		tya				tya									; output length
.93e2	20 96 a7	jsr $a796			jsr 	StackPushByte
.93e5	a9 00		lda #$00			lda 	#0 							; clear original string.
.93e7	92 38		sta ($38)			sta 	(zTemp1)
.93e9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.93ec	20 96 a7	jsr $a796			jsr 	StackPushByte
.93ef	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.93f2	20 96 a7	jsr $a796			jsr 	StackPushByte
.93f5	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.93f7	20 96 a7	jsr $a796			jsr 	StackPushByte
.93fa	7a		ply				ply
.93fb	60		rts				rts
.93fc					_LNTError:
.93fc	4c 35 b5	jmp $b535			jmp 	SyntaxError
.aeee					LocalPopValue:
.aeee	20 af a7	jsr $a7af			jsr 	StackPopByte
.aef1	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.aef3	d0 17		bne $af0c			bne 	_LPVString
.aef5	20 af a7	jsr $a7af			jsr 	StackPopByte 				; address
.aef8	85 37		sta $37				sta 	zTemp0+1
.aefa	20 af a7	jsr $a7af			jsr 	StackPopByte
.aefd	85 36		sta $36				sta 	zTemp0
.aeff	5a		phy				phy
.af00	a0 04		ldy #$04			ldy 	#4 							; copy back
.af02					_LPVNumberCopy:
.af02	20 af a7	jsr $a7af			jsr 	StackPopByte
.af05	91 36		sta ($36),y			sta 	(zTemp0),y
.af07	88		dey				dey
.af08	10 f8		bpl $af02			bpl 	_LPVNumberCopy
.af0a	7a		ply				ply 								; and complete
.af0b	60		rts				rts
.af0c					_LPVString:
.af0c	20 af a7	jsr $a7af			jsr 	StackPopByte 				; address of record => zTemp0
.af0f	85 37		sta $37				sta 	zTemp0+1
.af11	20 af a7	jsr $a7af			jsr 	StackPopByte
.af14	85 36		sta $36				sta 	zTemp0
.af16	5a		phy				phy
.af17	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.af19	85 38		sta $38				sta 	zTemp1
.af1b	a0 01		ldy #$01			ldy 	#1
.af1d	b1 36		lda ($36),y			lda 	(zTemp0),y
.af1f	85 39		sta $39				sta 	zTemp1+1
.af21	20 af a7	jsr $a7af			jsr 	StackPopByte 				; # to get => y
.af24	a8		tay				tay
.af25	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.af27	f0 0e		beq $af37			beq 	_LPVStringCopied
.af29	a9 00		lda #$00			lda 	#0 							; NULL on end
.af2b	91 38		sta ($38),y			sta 	(zTemp1),y
.af2d					_LPVStringCopy:
.af2d	88		dey				dey
.af2e	30 07		bmi $af37			bmi 	_LPVStringCopied
.af30	20 af a7	jsr $a7af			jsr 	StackPopByte
.af33	91 38		sta ($38),y			sta 	(zTemp1),y
.af35	80 f6		bra $af2d			bra 	_LPVStringCopy
.af37					_LPVStringCopied:
.af37	fa		plx				plx
.af38	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.93ff					NewCommand:
.93ff	20 41 a7	jsr $a741			jsr 	MemoryNew
.9402	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.9405	20 bf 8c	jsr $8cbf			jsr 	ClearCommand 				; clear everything.
.9408	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/palette.asm

.9409					PaletteCommand:
.9409	a2 00		ldx #$00			ldx 	#0
.940b	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger 		; colour
.940e	20 4f af	jsr $af4f			jsr 	CheckComma
.9411	e8		inx				inx
.9412	20 7c a6	jsr $a67c			jsr 	Evaluate16BitInteger 		; r
.9415	20 4f af	jsr $af4f			jsr 	CheckComma
.9418	e8		inx				inx
.9419	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger 		; g
.941c	20 4f af	jsr $af4f			jsr 	CheckComma
.941f	e8		inx				inx
.9420	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger 		; b
.9423	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.9426	85 36		sta $36				sta 	zTemp0
.9428	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.942a	85 37		sta $37				sta 	zTemp0+1
.942c	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.942e	26 37		rol $37				rol	 	zTemp0+1
.9430	06 36		asl $36				asl 	zTemp0
.9432	26 37		rol $37				rol	 	zTemp0+1
.9434	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.9436	85 01		sta $01				sta 	1
.9438	5a		phy				phy
.9439	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.943c	92 36		sta ($36)			sta 	(zTemp0)
.943e	a0 01		ldy #$01			ldy 	#1
.9440	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9443	91 36		sta ($36),y			sta 	(zTemp0),y
.9445	ad 09 04	lda $0409			lda 	NSMantissa0+1
.9448	c8		iny				iny
.9449	91 36		sta ($36),y			sta 	(zTemp0),y
.944b	7a		ply				ply
.944c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.944d					Command_Print:
.944d	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.944e					_CPLoop:
.944e	08		php				php 								; save last action flag
.944f	b1 30		lda ($30),y			lda 	(codePtr),y
.9451	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.9453	f0 46		beq $949b			beq 	_CPExit
.9455	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9457	f0 42		beq $949b			beq 	_CPExit
.9459	68		pla				pla 								; throw last action flag
.945a	b1 30		lda ($30),y			lda 	(codePtr),y
.945c	c8		iny				iny
.945d	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.945f	f0 37		beq $9498			beq 	_CPContinueWithSameLine
.9461	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.9463	f0 2e		beq $9493			beq 	_CPTab
.9465	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.9467	f0 26		beq $948f			beq 	_CPNewLine
.9469	88		dey				dey 								; undo the get.
.946a	a2 00		ldx #$00			ldx 	#0
.946c	20 3b a6	jsr $a63b			jsr 	EvaluateValue 				; get a value into slot 0
.946f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.9472	29 10		and #$10			and 	#NSBIsString
.9474	f0 0b		beq $9481			beq 	_CPNumber
.9476	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.9479	ad 08 04	lda $0408			lda 	NSMantissa0
.947c	20 22 9b	jsr $9b22			jsr 	PrintStringXA
.947f	80 cc		bra $944d			bra 	Command_Print 				; loop round clearing carry so NL if end
.9481					_CPNumber:
.9481	a9 05		lda #$05			lda 	#5 							; maximum decimals
.9483	20 11 a5	jsr $a511			jsr 	ConvertNumberToString 		; convert to string
.9486	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.9488	a9 1a		lda #$1a			lda 	#DecimalBuffer & $FF
.948a	20 22 9b	jsr $9b22			jsr 	PrintStringXA
.948d	80 be		bra $944d			bra 	Command_Print 				; loop round clearing carry so NL if end
.948f					_CPNewLine:
.948f	a9 0d		lda #$0d			lda 	#13
.9491	80 02		bra $9495			bra 	_CPPrintChar
.9493					_CPTab:
.9493	a9 09		lda #$09			lda 	#9 							; print TAB
.9495					_CPPrintChar:
.9495	20 ed b6	jsr $b6ed			jsr 	EXTPrintCharacter
.9498					_CPContinueWithSameLine:
.9498	38		sec				sec 								; loop round with carry set, which
.9499	80 b3		bra $944e			bra 	_CPLoop 					; will inhibit final CR
.949b					_CPExit:
.949b	28		plp				plp 								; get last action flag
.949c	b0 05		bcs $94a3			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.949e	a9 0d		lda #$0d			lda 	#13 						; print new line
.94a0	20 ed b6	jsr $b6ed			jsr 	EXTPrintCharacter
.94a3					_CPExit2:
.94a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.94a4					CallProcedure:
.94a4	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.94a6	b1 30		lda ($30),y			lda 	(codePtr),y
.94a8	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.94aa	f0 0c		beq $94b8			beq 	_CPEndParam
.94ac					_CPParamLoop:
.94ac	20 3b a6	jsr $a63b			jsr 	EvaluateValue 				; get parameter onto stack
.94af	e8		inx				inx 								; bump next stack
.94b0	b1 30		lda ($30),y			lda 	(codePtr),y
.94b2	c8		iny				iny
.94b3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.94b5	f0 f5		beq $94ac			beq 	_CPParamLoop
.94b7	88		dey				dey 								; unpick.
.94b8					_CPEndParam:
.94b8	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.94bb	c8		iny				iny									; skip right bracket
.94bc	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.94be	20 b8 a7	jsr $a7b8			jsr 	StackOpen
.94c1	20 fc a7	jsr $a7fc			jsr 	STKSaveCodePosition 		; save loop position
.94c4	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.94c7	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.94c9	ad 10 04	lda $0410			lda 	NSMantissa1
.94cc	85 37		sta $37				sta 	zTemp0+1
.94ce	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.94d0	b2 36		lda ($36)			lda 	(zTemp0)
.94d2	85 30		sta $30				sta 	safePtr
.94d4	b1 36		lda ($36),y			lda 	(zTemp0),y
.94d6	85 31		sta $31				sta 	safePtr+1
.94d8	c8		iny				iny
.94d9	b1 36		lda ($36),y			lda 	(zTemp0),y
.94db	85 32		sta $32				sta 	safePtr+2
.94dd	c8		iny				iny
.94de	b1 36		lda ($36),y			lda 	(zTemp0),y
.94e0	85 33		sta $33				sta 	safePtr+3
.94e2	c8		iny				iny 								; get Y offset -> Y
.94e3	b1 36		lda ($36),y			lda 	(zTemp0),y
.94e5	a8		tay				tay
.94e6	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.94e8	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.94eb	f0 13		beq $9500			beq 	_ParamExit 					; if so, exit.
.94ed					_ParamExtract:
.94ed	ca		dex				dex 								; put a local term on the level before
.94ee	20 89 93	jsr $9389			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.94f1	20 c4 92	jsr $92c4			jsr 	AssignVariable 				; assign stacked value to the variable.
.94f4	e8		inx				inx 								; advance to next parameter to do.
.94f5	e8		inx				inx
.94f6	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.94f9	f0 05		beq $9500			beq 	_ParamExit
.94fb	20 4f af	jsr $af4f			jsr 	CheckComma 					; comma seperating parameters
.94fe	80 ed		bra $94ed			bra 	_ParamExtract
.9500					_ParamExit:
.9500	20 47 af	jsr $af47			jsr 	CheckRightBracket 			; check )
.9503	60		rts				rts 								; and continue from here
.af39					Command_ENDPROC:
.af39	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.af3b	a2 14		ldx #$14			ldx 	#ERRID_PROC
.af3d	20 e4 a7	jsr $a7e4			jsr 	StackCheckFrame
.af40	20 0d a8	jsr $a80d			jsr 	STKLoadCodePosition 		; restore code position
.af43	20 d6 a7	jsr $a7d6			jsr 	StackClose
.af46	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.9504					Command_Read:
.9504	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.9506	20 ab a1	jsr $a1ab			jsr 	EvaluateTerm
.9509	bd 00 04	lda $0400,x			lda 	NSStatus,x
.950c	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.950e	f0 4a		beq $955a			beq 	_CRSyntax 					; check reference (bit 0)
.9510	20 a3 95	jsr $95a3			jsr 	SwapDataCodePtrs 			; swap code and data
.9513	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.9516	d0 20		bne $9538			bne 	_CRContinueData
.9518					_CRKeepSearching:
.9518	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.951a	aa		tax				tax
.951b	20 24 9a	jsr $9a24			jsr 	ScanForward
.951e	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.9520	f0 16		beq $9538			beq 	_CRHaveData 				; found it
.9522	18		clc				clc
.9523	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9525	65 30		adc $30				adc 	codePtr
.9527	85 30		sta $30				sta 	codePtr
.9529	90 02		bcc $952d			bcc 	_CREExit
.952b	e6 31		inc $31				inc 	codePtr+1
.952d					_CREExit:
.952d	a0 03		ldy #$03			ldy 	#3 							; start of line.
.952f	b2 30		lda ($30)			lda 	(codePtr)
.9531	d0 e5		bne $9518			bne 	_CRKeepSearching
.9533	a9 0b		lda #$0b		lda	#11
.9535	4c c9 9a	jmp $9ac9		jmp	ErrorHandler
.9538					_CRHaveData:
.9538					_CRContinueData:
.9538	a2 01		ldx #$01			ldx 	#1
.953a	20 3b a6	jsr $a63b			jsr 	EvaluateValue 				; evaluate value into slot # 1
.953d	ca		dex				dex
.953e	20 c4 92	jsr $92c4			jsr		AssignVariable 				; do the assignment
.9541	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.9544	b1 30		lda ($30),y			lda 	(codePtr),y
.9546	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.9548	d0 04		bne $954e			bne 	_CRSwapBack
.954a	c8		iny				iny 								; consume comma
.954b	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.954e					_CRSwapBack:
.954e	20 a3 95	jsr $95a3			jsr 	SwapDataCodePtrs			; swap them back.
.9551	b1 30		lda ($30),y			lda 	(codePtr),y
.9553	c8		iny				iny
.9554	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9556	f0 ac		beq $9504			beq 	Command_Read 				; if so go round again.
.9558	88		dey				dey 								; unpick get.
.9559	60		rts				rts
.955a					_CRSyntax:
.955a	4c 35 b5	jmp $b535			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.955d					RemCommand:
.955d	b1 30		lda ($30),y			lda 	(codePtr),y
.955f	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9561	d0 06		bne $9569			bne 	_RMExit
.9563	c8		iny				iny
.9564	98		tya				tya
.9565	38		sec				sec
.9566	71 30		adc ($30),y			adc 	(codePtr),y
.9568	a8		tay				tay
.9569					_RMExit:
.9569	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.956a					Command_REPEAT:
.956a	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.956c	20 b8 a7	jsr $a7b8			jsr 	StackOpen
.956f	20 fc a7	jsr $a7fc			jsr 	STKSaveCodePosition 		; save loop position
.9572	60		rts				rts
.9573					Command_UNTIL:
.9573	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9575	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9577	20 e4 a7	jsr $a7e4			jsr 	StackCheckFrame
.957a	a2 00		ldx #$00			ldx 	#0
.957c	20 44 a6	jsr $a644			jsr 	EvaluateNumber 				; work out the number
.957f	20 34 a7	jsr $a734			jsr 	NSMIsZero 					; check if zero
.9582	f0 04		beq $9588			beq 	_CULoopBack 				; if so keep looping
.9584	20 d6 a7	jsr $a7d6			jsr 	StackClose		 			; return
.9587	60		rts				rts
.9588					_CULoopBack:
.9588	20 0d a8	jsr $a80d			jsr 	STKLoadCodePosition 		; loop back
.958b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.958c					Command_Restore:
.958c	20 a3 95	jsr $95a3			jsr 	SwapDataCodePtrs 			; swap code and data
.958f	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9591	85 30		sta $30				sta 	codePtr
.9593	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9595	85 31		sta $31				sta 	codePtr+1
.9597	20 a3 95	jsr $95a3			jsr 	SwapDataCodePtrs 			; put them back
.959a	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.959c	8d 9b 04	sta $049b			sta 	dataPointer+4
.959f	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.95a2	60		rts				rts
.95a3					SwapDataCodePtrs:
.95a3	da		phx				phx
.95a4	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.95a6					_SDCPLoop:
.95a6	b5 30		lda $30,x			lda 	safePtr,x
.95a8	48		pha				pha
.95a9	bd 97 04	lda $0497,x			lda 	dataPointer,x
.95ac	95 30		sta $30,x			sta 	safePtr,x
.95ae	68		pla				pla
.95af	9d 97 04	sta $0497,x			sta 	dataPointer,x
.95b2	ca		dex				dex
.95b3	10 f1		bpl $95a6			bpl 	_SDCPLoop
.95b5	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.95b8	8c 9b 04	sty $049b			sty 	dataPointer+4
.95bb	a8		tay				tay
.95bc	fa		plx				plx
.95bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.95be					CommandRUN:
.95be	20 bf 8c	jsr $8cbf			jsr 	ClearCommand 				; clear variable/stacks/etc.
.95c1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.95c3	85 30		sta $30				sta 	codePtr
.95c5	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.95c7	85 31		sta $31				sta 	codePtr+1
.95c9					RUNNewLine:
.95c9	b2 30		lda ($30)			lda 	(codePtr)
.95cb	f0 5e		beq $962b			beq 	CRNoProgram         		; no then END.
.95cd	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.95cf	9a		txs				txs
.95d0					RUNCodePointerLine:
.95d0	a0 02		ldy #$02			ldy 	#2 							; start of program
.95d2					_CRIncMainLoop:
.95d2	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.95d5	d0 05		bne $95dc			bne 	_CRNoBreakCheck
.95d7	20 2e b7	jsr $b72e			jsr 	EXTBreakCheck 				; break check
.95da	f0 4a		beq $9626			beq 	_CRBreak
.95dc					_CRNoBreakCheck:
.95dc	c8		iny				iny
.95dd					_CRMainLoop:
.95dd	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.95e0	b1 30		lda ($30),y			lda 	(codePtr),y
.95e2	10 10		bpl $95f4			bpl 	_CRNotKeyword
.95e4	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.95e6	b0 04		bcs $95ec			bcs 	_CRIsKeyword
.95e8	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.95ea	b0 34		bcs $9620			bcs		_CRSyntaxError
.95ec					_CRIsKeyword:
.95ec	c8		iny				iny 								; consume command
.95ed	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.95ee	aa		tax				tax 								; put in X for vector jump
.95ef	20 23 96	jsr $9623			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.95f2	80 e9		bra $95dd			bra 	_CRMainLoop 				; and loop round
.95f4					_CRNotKeyword:
.95f4	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.95f6	f0 da		beq $95d2			beq 	_CRIncMainLoop
.95f8	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.95fa	90 05		bcc $9601			bcc 	_CRNotVariable
.95fc					_CRGoLet:
.95fc	20 88 92	jsr $9288			jsr 	LetCommand
.95ff	80 dc		bra $95dd			bra 	_CRMainLoop
.9601					_CRNotVariable:
.9601	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.9603	f0 f7		beq $95fc			beq 	_CRGoLet
.9605	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9607	f0 f3		beq $95fc			beq 	_CRGoLet
.9609	c9 21		cmp #$21			cmp 	#KWD_PLING
.960b	f0 ef		beq $95fc			beq 	_CRGoLet
.960d	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.960f	f0 09		beq $961a			beq 	_CRGoRem
.9611	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9613	d0 0b		bne $9620			bne 	_CRSyntaxError
.9615	20 5f 8b	jsr $8b5f			jsr 	LabelHere
.9618	80 c3		bra $95dd			bra 	_CRMainLoop
.961a					_CRGoRem:
.961a	c8		iny				iny
.961b	20 5d 95	jsr $955d			jsr 	RemCommand
.961e	80 bd		bra $95dd			bra 	_CRMainLoop
.9620					_CRSyntaxError:
.9620	4c 35 b5	jmp $b535			jmp 	SyntaxError
.9623					_CRCallVector0:
.9623	7c ce 96	jmp ($96ce,x)			jmp 	(VectorSet0,x)
.9626					_CRBreak:
.9626	a9 01		lda #$01		lda	#1
.9628	4c c9 9a	jmp $9ac9		jmp	ErrorHandler
.962b					CRNoProgram:
.962b	4c e2 8d	jmp $8de2			jmp 	EndCommand
.962e					EOLCommand:
.962e	18		clc				clc
.962f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9631	65 30		adc $30				adc 	codePtr
.9633	85 30		sta $30				sta 	codePtr
.9635	90 02		bcc $9639			bcc 	_CREExit
.9637	e6 31		inc $31				inc 	codePtr+1
.9639					_CREExit:
.9639	80 8e		bra $95c9			bra 	RunNewLine
.963b					Shift1Command:
.963b	b1 30		lda ($30),y			lda 	(codePtr),y
.963d	c8		iny				iny
.963e	0a		asl a				asl 	a
.963f	aa		tax				tax
.9640	7c 66 97	jmp ($9766,x)			jmp 	(VectorSet1,x)
.9643					Shift2Command:
.9643	b1 30		lda ($30),y			lda 	(codePtr),y
.9645	c8		iny				iny
.9646	0a		asl a				asl 	a
.9647	aa		tax				tax
.9648	7c 80 97	jmp ($9780,x)			jmp 	(VectorSet2,x)
.964b					Unused1:
.964b					Unused2:
.964b					Unused3:
.964b					Unused4:
.964b	4c 35 b5	jmp $b535			jmp 	SyntaxError
>964e							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.964e					VectorSetPunc:
>964e	73 9c					.word	ShiftLeft                        ; $00 <<
>9650	6d 9b					.word	BinaryCompareLessEqual           ; $01 <=
>9652	63 9b					.word	BinaryCompareNotEqual            ; $02 <>
>9654	35 b5					.word	SyntaxError                      ; $03 !!3
>9656	35 b5					.word	SyntaxError                      ; $04 ><
>9658	77 9b					.word	BinaryCompareGreaterEqual        ; $05 >=
>965a	76 9c					.word	ShiftRight                       ; $06 >>
>965c	35 b5					.word	SyntaxError                      ; $07 !!7
>965e	35 b5					.word	SyntaxError                      ; $08 !!8
>9660	35 b5					.word	SyntaxError                      ; $09 !!9
>9662	35 b5					.word	SyntaxError                      ; $0a !!10
>9664	35 b5					.word	SyntaxError                      ; $0b !!11
>9666	35 b5					.word	SyntaxError                      ; $0c !!12
>9668	35 b5					.word	SyntaxError                      ; $0d !!13
>966a	35 b5					.word	SyntaxError                      ; $0e !!14
>966c	35 b5					.word	SyntaxError                      ; $0f !!15
>966e	35 b5					.word	SyntaxError                      ; $10 @
>9670	35 b5					.word	SyntaxError                      ; $11 !!17
>9672	35 b5					.word	SyntaxError                      ; $12 !!18
>9674	35 b5					.word	SyntaxError                      ; $13 [
>9676	60 af					.word	IntegerDivide                    ; $14 \
>9678	35 b5					.word	SyntaxError                      ; $15 ]
>967a	04 9e					.word	EorInteger                       ; $16 ^
>967c	35 b5					.word	SyntaxError                      ; $17 _
>967e	35 b5					.word	SyntaxError                      ; $18 `
>9680	35 b5					.word	SyntaxError                      ; $19 !!25
>9682	35 b5					.word	SyntaxError                      ; $1a !!26
>9684	35 b5					.word	SyntaxError                      ; $1b {
>9686	be 9d					.word	OraInteger                       ; $1c |
>9688	35 b5					.word	SyntaxError                      ; $1d }
>968a	35 b5					.word	SyntaxError                      ; $1e ~
>968c	35 b5					.word	SyntaxError                      ; $1f [7m<7F>[m
>968e	35 b5					.word	SyntaxError                      ; $20
>9690	4a 9e					.word	WordIndirect                     ; $21 !
>9692	35 b5					.word	SyntaxError                      ; $22 "
>9694	35 b5					.word	SyntaxError                      ; $23 #
>9696	35 b5					.word	SyntaxError                      ; $24 $
>9698	ad af					.word	IntegerModulus                   ; $25 %
>969a	78 9d					.word	AndInteger                       ; $26 &
>969c	35 b5					.word	SyntaxError                      ; $27 '
>969e	35 b5					.word	SyntaxError                      ; $28 (
>96a0	35 b5					.word	SyntaxError                      ; $29 )
>96a2	22 b0					.word	MulInteger                       ; $2a *
>96a4	0a 9d					.word	AddInteger                       ; $2b +
>96a6	35 b5					.word	SyntaxError                      ; $2c ,
>96a8	4d 9d					.word	SubInteger                       ; $2d -
>96aa	35 b5					.word	SyntaxError                      ; $2e .
>96ac	c1 b1					.word	FDivideCommand                   ; $2f /
>96ae	35 b5					.word	SyntaxError                      ; $30 0
>96b0	35 b5					.word	SyntaxError                      ; $31 1
>96b2	35 b5					.word	SyntaxError                      ; $32 2
>96b4	35 b5					.word	SyntaxError                      ; $33 3
>96b6	35 b5					.word	SyntaxError                      ; $34 4
>96b8	35 b5					.word	SyntaxError                      ; $35 5
>96ba	35 b5					.word	SyntaxError                      ; $36 6
>96bc	35 b5					.word	SyntaxError                      ; $37 7
>96be	35 b5					.word	SyntaxError                      ; $38 8
>96c0	35 b5					.word	SyntaxError                      ; $39 9
>96c2	35 b5					.word	SyntaxError                      ; $3a :
>96c4	35 b5					.word	SyntaxError                      ; $3b ;
>96c6	4f 9b					.word	BinaryCompareLess                ; $3c <
>96c8	45 9b					.word	BinaryCompareEqual               ; $3d =
>96ca	59 9b					.word	BinaryCompareGreater             ; $3e >
>96cc	71 9e					.word	ByteIndirect                     ; $3f ?
.96ce					VectorSet0:
>96ce	2e 96					.word	EOLCommand                       ; $80 !0:EOF
>96d0	3b 96					.word	Shift1Command                    ; $81 !1:SH1
>96d2	43 96					.word	Shift2Command                    ; $82 !2:SH2
>96d4	07 b3					.word	AbsUnary                         ; $83 ABS(
>96d6	41 a3					.word	AllocUnary                       ; $84 ALLOC(
>96d8	17 b3					.word	AscUnary                         ; $85 ASC(
>96da	c2 a4					.word	ChrUnary                         ; $86 CHR$(
>96dc	e5 8d					.word	UnaryEvent                       ; $87 EVENT(
>96de	41 9b					.word	UnaryFalse                       ; $88 FALSE
>96e0	24 b3					.word	FracUnary                        ; $89 FRAC(
>96e2	fd 91					.word	UnaryHit                         ; $8a HIT(
>96e4	3a b3					.word	IntUnary                         ; $8b INT(
>96e6	90 b3					.word	IsValUnary                       ; $8c ISVAL(
>96e8	74 92					.word	UnaryJoyB                        ; $8d JOYB(
>96ea	4d 92					.word	UnaryJoyX                        ; $8e JOYX(
>96ec	50 92					.word	UnaryJoyY                        ; $8f JOYY(
>96ee	9c a5					.word	Unary_Left                       ; $90 LEFT$(
>96f0	4c b3					.word	LenUnary                         ; $91 LEN(
>96f2	b5 a3					.word	Unary_Max                        ; $92 MAX(
>96f4	c6 a5					.word	Unary_Mid                        ; $93 MID$(
>96f6	b1 a3					.word	Unary_Min                        ; $94 MIN(
>96f8	0c a4					.word	Unary_Not                        ; $95 NOT(
>96fa	22 a4					.word	Unary_Random                     ; $96 RANDOM(
>96fc	ac a5					.word	Unary_Right                      ; $97 RIGHT$(
>96fe	41 a4					.word	Unary_Rnd                        ; $98 RND(
>9700	66 b3					.word	SgnUnary                         ; $99 SGN(
>9702	d4 a4					.word	SpcUnary                         ; $9a SPC(
>9704	ef a4					.word	Unary_Str                        ; $9b STR$(
>9706	0d 98					.word	UnaryTimer                       ; $9c TIMER(
>9708	35 9b					.word	UnaryTrue                        ; $9d TRUE
>970a	86 b3					.word	ValUnary                         ; $9e VAL(
>970c	4e 8e					.word	ForCommand                       ; $9f FOR
>970e	23 92					.word	IfCommand                        ; $a0 IF
>9710	4b 96					.word	Unused1                          ; $a1 PROC
>9712	6a 95					.word	Command_REPEAT                   ; $a2 REPEAT
>9714	9a 9a					.word	Command_WHILE                    ; $a3 WHILE
>9716	4c 92					.word	EndIf                            ; $a4 ENDIF
>9718	39 af					.word	Command_ENDPROC                  ; $a5 ENDPROC
>971a	08 8f					.word	NextCommand                      ; $a6 NEXT
>971c	4b 96					.word	Unused4                          ; $a7 THEN
>971e	73 95					.word	Command_UNTIL                    ; $a8 UNTIL
>9720	bb 9a					.word	Command_WEND                     ; $a9 WEND
>9722	35 b5					.word	SyntaxError                      ; $aa BY
>9724	85 8c					.word	CallCommand                      ; $ab CALL
>9726	65 8f					.word	CircleCommand                    ; $ac CIRCLE
>9728	bf 8c					.word	ClearCommand                     ; $ad CLEAR
>972a	17 8d					.word	ClearScreen                      ; $ae CLS
>972c	35 b5					.word	SyntaxError                      ; $af COLOR
>972e	35 b5					.word	SyntaxError                      ; $b0 COLOUR
>9730	1d 8d					.word	Command_Data                     ; $b1 DATA
>9732	25 8d					.word	DimCommand                       ; $b2 DIM
>9734	4b 96					.word	Unused3                          ; $b3 DOWNTO
>9736	45 92					.word	ElseCode                         ; $b4 ELSE
>9738	35 b5					.word	SyntaxError                      ; $b5 FROM
>973a	91 91					.word	GfxCommand                       ; $b6 GFX
>973c	c3 91					.word	Command_GOSUB                    ; $b7 GOSUB
>973e	e1 91					.word	GotoCommand                      ; $b8 GOTO
>9740	35 b5					.word	SyntaxError                      ; $b9 HERE
>9742	8f 8f					.word	ImageCommand                     ; $ba IMAGE
>9744	88 92					.word	LetCommand                       ; $bb LET
>9746	e4 8f					.word	LineCommand                      ; $bc LINE
>9748	7b 93					.word	Command_LOCAL                    ; $bd LOCAL
>974a	35 b5					.word	SyntaxError                      ; $be OFF
>974c	35 b5					.word	SyntaxError                      ; $bf ON
>974e	35 b5					.word	SyntaxError                      ; $c0 OUTLINE
>9750	09 94					.word	PaletteCommand                   ; $c1 PALETTE
>9752	dd 8f					.word	PlotCommand                      ; $c2 PLOT
>9754	4d 94					.word	Command_Print                    ; $c3 PRINT
>9756	04 95					.word	Command_Read                     ; $c4 READ
>9758	61 8f					.word	RectangleCommand                 ; $c5 RECT
>975a	5d 95					.word	RemCommand                       ; $c6 REM
>975c	d3 91					.word	Command_RETURN                   ; $c7 RETURN
>975e	35 b5					.word	SyntaxError                      ; $c8 SOLID
>9760	70 8f					.word	SpriteCommand                    ; $c9 SPRITE
>9762	ac 8f					.word	TextCommand                      ; $ca TEXT
>9764	4b 96					.word	Unused2                          ; $cb TO
.9766					VectorSet1:
>9766	35 b5					.word	SyntaxError                      ; $80 !0:EOF
>9768	35 b5					.word	SyntaxError                      ; $81 !1:SH1
>976a	35 b5					.word	SyntaxError                      ; $82 !2:SH2
>976c	56 8c					.word	AssembleCommand                  ; $83 ASSEMBLE
>976e	75 8c					.word	AssertCommand                    ; $84 ASSERT
>9770	31 91					.word	BitmapCtrl                       ; $85 BITMAP
>9772	e2 8d					.word	EndCommand                       ; $86 END
>9774	dd 92					.word	Command_List                     ; $87 LIST
>9776	ff 93					.word	NewCommand                       ; $88 NEW
>9778	8c 95					.word	Command_Restore                  ; $89 RESTORE
>977a	be 95					.word	CommandRUN                       ; $8a RUN
>977c	76 91					.word	SpritesCtrl                      ; $8b SPRITES
>977e	08 98					.word	StopCommand                      ; $8c STOP
.9780					VectorSet2:
>9780	35 b5					.word	SyntaxError                      ; $80 !0:EOF
>9782	35 b5					.word	SyntaxError                      ; $81 !1:SH1
>9784	35 b5					.word	SyntaxError                      ; $82 !2:SH2
>9786	f4 b3					.word	Assemble_adc                     ; $83 ADC
>9788	ec b3					.word	Assemble_and                     ; $84 AND
>978a	08 b4					.word	Assemble_asl                     ; $85 ASL
>978c	72 b4					.word	Assemble_bcc                     ; $86 BCC
>978e	76 b4					.word	Assemble_bcs                     ; $87 BCS
>9790	7e b4					.word	Assemble_beq                     ; $88 BEQ
>9792	35 b4					.word	Assemble_bit                     ; $89 BIT
>9794	66 b4					.word	Assemble_bmi                     ; $8a BMI
>9796	7a b4					.word	Assemble_bne                     ; $8b BNE
>9798	62 b4					.word	Assemble_bpl                     ; $8c BPL
>979a	82 b4					.word	Assemble_bra                     ; $8d BRA
>979c	86 b4					.word	Assemble_brk                     ; $8e BRK
>979e	6a b4					.word	Assemble_bvc                     ; $8f BVC
>97a0	6e b4					.word	Assemble_bvs                     ; $90 BVS
>97a2	8e b4					.word	Assemble_clc                     ; $91 CLC
>97a4	e2 b4					.word	Assemble_cld                     ; $92 CLD
>97a6	a2 b4					.word	Assemble_cli                     ; $93 CLI
>97a8	d2 b4					.word	Assemble_clv                     ; $94 CLV
>97aa	00 b4					.word	Assemble_cmp                     ; $95 CMP
>97ac	49 b4					.word	Assemble_cpx                     ; $96 CPX
>97ae	44 b4					.word	Assemble_cpy                     ; $97 CPY
>97b0	26 b4					.word	Assemble_dec                     ; $98 DEC
>97b2	de b4					.word	Assemble_dex                     ; $99 DEX
>97b4	ba b4					.word	Assemble_dey                     ; $9a DEY
>97b6	f0 b3					.word	Assemble_eor                     ; $9b EOR
>97b8	2b b4					.word	Assemble_inc                     ; $9c INC
>97ba	ee b4					.word	Assemble_inx                     ; $9d INX
>97bc	da b4					.word	Assemble_iny                     ; $9e INY
>97be	5d b4					.word	Assemble_jmp                     ; $9f JMP
>97c0	58 b4					.word	Assemble_jsr                     ; $a0 JSR
>97c2	fc b3					.word	Assemble_lda                     ; $a1 LDA
>97c4	21 b4					.word	Assemble_ldx                     ; $a2 LDX
>97c6	3f b4					.word	Assemble_ldy                     ; $a3 LDY
>97c8	12 b4					.word	Assemble_lsr                     ; $a4 LSR
>97ca	f2 b4					.word	Assemble_nop                     ; $a5 NOP
>97cc	e8 b3					.word	Assemble_ora                     ; $a6 ORA
>97ce	9e b4					.word	Assemble_pha                     ; $a7 PHA
>97d0	8a b4					.word	Assemble_php                     ; $a8 PHP
>97d2	e6 b4					.word	Assemble_phx                     ; $a9 PHX
>97d4	a6 b4					.word	Assemble_phy                     ; $aa PHY
>97d6	ae b4					.word	Assemble_pla                     ; $ab PLA
>97d8	92 b4					.word	Assemble_plp                     ; $ac PLP
>97da	fa b4					.word	Assemble_plx                     ; $ad PLX
>97dc	b6 b4					.word	Assemble_ply                     ; $ae PLY
>97de	0d b4					.word	Assemble_rol                     ; $af ROL
>97e0	17 b4					.word	Assemble_ror                     ; $b0 ROR
>97e2	9a b4					.word	Assemble_rti                     ; $b1 RTI
>97e4	aa b4					.word	Assemble_rts                     ; $b2 RTS
>97e6	04 b4					.word	Assemble_sbc                     ; $b3 SBC
>97e8	96 b4					.word	Assemble_sec                     ; $b4 SEC
>97ea	f6 b4					.word	Assemble_sed                     ; $b5 SED
>97ec	b2 b4					.word	Assemble_sei                     ; $b6 SEI
>97ee	f8 b3					.word	Assemble_sta                     ; $b7 STA
>97f0	ea b4					.word	Assemble_stp                     ; $b8 STP
>97f2	1c b4					.word	Assemble_stx                     ; $b9 STX
>97f4	3a b4					.word	Assemble_sty                     ; $ba STY
>97f6	30 b4					.word	Assemble_stz                     ; $bb STZ
>97f8	ce b4					.word	Assemble_tax                     ; $bc TAX
>97fa	ca b4					.word	Assemble_tay                     ; $bd TAY
>97fc	53 b4					.word	Assemble_trb                     ; $be TRB
>97fe	4e b4					.word	Assemble_tsb                     ; $bf TSB
>9800	d6 b4					.word	Assemble_tsx                     ; $c0 TSX
>9802	be b4					.word	Assemble_txa                     ; $c1 TXA
>9804	c6 b4					.word	Assemble_txs                     ; $c2 TXS
>9806	c2 b4					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9808					StopCommand:
.9808	a9 08		lda #$08		lda	#8
.980a	4c c9 9a	jmp $9ac9		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.980d					UnaryTimer:
.980d	fa		plx				plx
.980e	20 47 af	jsr $af47			jsr 	CheckRightBracket
.9811					TimerToStackX:
.9811	20 04 a7	jsr $a704			jsr 	NSMSetZero 					; zero result
.9814	64 01		stz $01				stz 	1 							; access I/O
.9816	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.9819	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.981c	ad 5a d6	lda $d65a			lda 	$D65A
.981f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9822	ad 5b d6	lda $d65b			lda 	$D65B
.9825	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9828	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.9829					ListConvertLine:
.9829	9c 9d 04	stz $049d			stz 	tbOffset
.982c	9c aa 04	stz $04aa			stz 	tokenBuffer
.982f	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.9831	b1 30		lda ($30),y			lda 	(codePtr),y
.9833	aa		tax				tax
.9834	88		dey				dey
.9835	b1 30		lda ($30),y			lda 	(codePtr),y
.9837	20 a3 b0	jsr $b0a3			jsr 	ConvertInt16
.983a	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.983c	86 37		stx $37				stx 	zTemp0+1
.983e	a0 00		ldy #$00			ldy 	#0
.9840					_LCCopyNumber:
.9840	b1 36		lda ($36),y			lda 	(zTemp0),y
.9842	20 6e 99	jsr $996e			jsr 	LCLWrite
.9845	c8		iny				iny
.9846	b1 36		lda ($36),y			lda 	(zTemp0),y
.9848	d0 f6		bne $9840			bne 	_LCCopyNumber
.984a	20 87 9a	jsr $9a87			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.984d	48		pha				pha 								; save on stack
.984e	10 0c		bpl $985c			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.9850	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.9851	6d a6 04	adc $04a6			adc 	listIndent
.9854	8d a6 04	sta $04a6			sta 	listIndent
.9857	10 03		bpl $985c			bpl 	_LCNoAdjust
.9859	9c a6 04	stz $04a6			stz 	listIndent
.985c					_LCNoAdjust:
.985c	18		clc				clc		 							; work out actual indent.
.985d	ad a6 04	lda $04a6			lda 	listIndent
.9860	0a		asl a				asl 	a
.9861	69 06		adc #$06			adc 	#6
.9863	85 36		sta $36				sta 	zTemp0
.9865					_LCPadOut:
.9865	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9867	20 6e 99	jsr $996e			jsr 	LCLWrite
.986a	ad 9d 04	lda $049d			lda 	tbOffset
.986d	c5 36		cmp $36				cmp 	zTemp0
.986f	d0 f4		bne $9865			bne 	_LCPadOut
.9871	a0 03		ldy #$03			ldy 	#3 							; start position.
.9873					_LCMainLoop:
.9873	b1 30		lda ($30),y			lda 	(codePtr),y
.9875	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9877	f0 17		beq $9890			beq 	_LCExit
.9879	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.987b	90 1e		bcc $989b			bcc 	_LCDoubles
.987d	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.987f	90 2a		bcc $98ab			bcc 	_LCShiftPunc
.9881	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.9883	90 35		bcc $98ba			bcc 	_LCPunctuation
.9885	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9887	90 3e		bcc $98c7			bcc 	_LCIdentifiers
.9889	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.988b	90 5a		bcc $98e7			bcc 	_LCTokens
.988d	4c 42 99	jmp $9942			jmp 	_LCData 					; 254-5 are data objects
.9890					_LCExit:
.9890	68		pla				pla 								; get old indent adjust
.9891	30 07		bmi $989a			bmi 	_LCExit2
.9893	18		clc				clc 								; add to indent if +ve
.9894	6d a6 04	adc $04a6			adc 	listIndent
.9897	8d a6 04	sta $04a6			sta 	listIndent
.989a					_LCExit2:
.989a	60		rts				rts
.989b					_LCDoubles:
.989b	48		pha				pha
.989c	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.989d	29 02		and #$02			and 	#2
.989f	09 3c		ora #$3c			ora 	#60 						; make < >
.98a1	20 6e 99	jsr $996e			jsr 	LCLWrite
.98a4	68		pla				pla 								; restore, do lower bit
.98a5	29 03		and #$03			and 	#3
.98a7	09 3c		ora #$3c			ora 	#60
.98a9	80 0f		bra $98ba			bra		_LCPunctuation 				; print, increment, loop
.98ab					_LCShiftPunc:
.98ab	aa		tax				tax 								; save in X
.98ac	29 07		and #$07			and 	#7 							; lower 3 bits
.98ae	f0 02		beq $98b2			beq 	_LCNoAdd
.98b0	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.98b2					_LCNoAdd:
.98b2	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.98b4	90 02		bcc $98b8			bcc 	_LCNoAdd2
.98b6	09 20		ora #$20			ora 	#32 						; adds $20
.98b8					_LCNoAdd2:
.98b8	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.98ba					_LCPunctuation:
.98ba	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.98bc	d0 03		bne $98c1			bne 	_LCPContinue
.98be	20 7d 99	jsr $997d			jsr 	LCDeleteLastSpace
.98c1					_LCPContinue:
.98c1	c8		iny				iny 								; consume character
.98c2	20 6e 99	jsr $996e			jsr 	LCLWrite 					; write it out.
.98c5	80 ac		bra $9873			bra 	_LCMainLoop 				; go round again.
.98c7					_LCIdentifiers:
.98c7	18		clc				clc 								; convert to physical address
.98c8	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.98ca	85 37		sta $37				sta 	zTemp0+1
.98cc	c8		iny				iny
.98cd	b1 30		lda ($30),y			lda 	(codePtr),y
.98cf	85 36		sta $36				sta 	zTemp0
.98d1	c8		iny				iny
.98d2	5a		phy				phy 								; save position
.98d3	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.98d5					_LCOutIdentifier:
.98d5	c8		iny				iny
.98d6	b1 36		lda ($36),y			lda 	(zTemp0),y
.98d8	29 7f		and #$7f			and 	#$7F
.98da	20 bc 99	jsr $99bc			jsr 	LCLLowerCase
.98dd	20 6e 99	jsr $996e			jsr 	LCLWrite
.98e0	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.98e2	10 f1		bpl $98d5			bpl 	_LCOutIdentifier
.98e4	7a		ply				ply 								; restore position
.98e5	80 8c		bra $9873			bra 	_LCMainLoop
.98e7					_LCTokens:
.98e7	aa		tax				tax 								; token in X
.98e8	a9 f3		lda #$f3			lda 	#((KeywordSet2) & $FF)
.98ea	85 36		sta $36				sta 	0+zTemp0
.98ec	a9 aa		lda #$aa			lda 	#((KeywordSet2) >> 8)
.98ee	85 37		sta $37				sta 	1+zTemp0
.98f0	e0 82		cpx #$82			cpx 	#$82
.98f2	f0 16		beq $990a			beq 	_LCUseShift
.98f4	a9 a5		lda #$a5			lda 	#((KeywordSet1) & $FF)
.98f6	85 36		sta $36				sta 	0+zTemp0
.98f8	a9 aa		lda #$aa			lda 	#((KeywordSet1) >> 8)
.98fa	85 37		sta $37				sta 	1+zTemp0
.98fc	e0 81		cpx #$81			cpx 	#$81
.98fe	f0 0a		beq $990a			beq 	_LCUseShift
.9900	a9 c0		lda #$c0			lda 	#((KeywordSet0) & $FF)
.9902	85 36		sta $36				sta 	0+zTemp0
.9904	a9 a8		lda #$a8			lda 	#((KeywordSet0) >> 8)
.9906	85 37		sta $37				sta 	1+zTemp0
.9908	80 01		bra $990b			bra 	_LCNoShift
.990a					_LCUseShift:
.990a	c8		iny				iny
.990b					_LCNoShift:
.990b	20 91 99	jsr $9991			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.990e	b1 30		lda ($30),y			lda 	(codePtr),y
.9910	aa		tax				tax 								; into X
.9911					_LCFindText:
.9911	ca		dex				dex
.9912	10 0e		bpl $9922			bpl 	_LCFoundText 				; found text.
.9914	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.9916	1a		inc a				inc 	a 							; one extra for size
.9917	38		sec				sec 								; one extra for checksum
.9918	65 36		adc $36				adc 	zTemp0 						; go to next token
.991a	85 36		sta $36				sta 	zTemp0
.991c	90 f3		bcc $9911			bcc 	_LCFindText
.991e	e6 37		inc $37				inc 	zTemp0+1
.9920	80 ef		bra $9911			bra 	_LCFindText
.9922					_LCFoundText:
.9922	5a		phy				phy 								; save List position
.9923	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.9925	aa		tax				tax
.9926	a0 02		ldy #$02			ldy 	#2
.9928					_LCCopyToken:
.9928	b1 36		lda ($36),y			lda 	(zTemp0),y
.992a	20 bc 99	jsr $99bc			jsr 	LCLLowerCase
.992d	20 6e 99	jsr $996e			jsr 	LCLWrite
.9930	c8		iny				iny
.9931	ca		dex				dex
.9932	d0 f4		bne $9928			bne 	_LCCopyToken
.9934	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.9936	f0 05		beq $993d			beq 	_LCNoSpace
.9938	a9 20		lda #$20			lda 	#' '
.993a	20 6e 99	jsr $996e			jsr 	LCLWrite
.993d					_LCNoSpace:
.993d	7a		ply				ply 								; restore position.
.993e	c8		iny				iny 								; consume token
.993f	4c 73 98	jmp $9873			jmp 	_LCMainLoop 				; and go around again.
.9942					_LCData:
.9942	48		pha				pha 								; save type $FE/$FF
.9943	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9945	c9 fe		cmp #$fe			cmp 	#$FE
.9947	f0 02		beq $994b			beq 	_LCHaveOpener
.9949	a2 22		ldx #$22			ldx 	#'"'
.994b					_LCHaveOpener:
.994b	8a		txa				txa 								; output prefix (# or ")
.994c	20 6e 99	jsr $996e			jsr 	LCLWrite
.994f	c8		iny				iny 								; get count
.9950	b1 30		lda ($30),y			lda 	(codePtr),y
.9952	aa		tax				tax
.9953	c8		iny				iny 								; point at first character
.9954					_LCOutData:
.9954	b1 30		lda ($30),y			lda 	(codePtr),y
.9956	c9 00		cmp #$00			cmp 	#0
.9958	f0 03		beq $995d			beq 	_LCNoPrint
.995a	20 6e 99	jsr $996e			jsr 	LCLWrite
.995d					_LCNoPrint:
.995d	c8		iny				iny
.995e	ca		dex				dex
.995f	d0 f3		bne $9954			bne 	_LCOutData
.9961	68		pla				pla 								; closing " required ?
.9962	c9 ff		cmp #$ff			cmp 	#$FF
.9964	d0 05		bne $996b			bne 	_LCNoQuote
.9966	a9 22		lda #$22			lda 	#'"'
.9968	20 6e 99	jsr $996e			jsr 	LCLWrite
.996b					_LCNoQuote:
.996b	4c 73 98	jmp $9873			jmp 	_LCMainLoop
.996e					LCLWrite:
.996e	da		phx				phx
.996f	ae 9d 04	ldx $049d			ldx 	tbOffset
.9972	9d aa 04	sta $04aa,x			sta 	tokenBuffer,x
.9975	9e ab 04	stz $04ab,x			stz 	tokenBuffer+1,x
.9978	ee 9d 04	inc $049d			inc 	tbOffset
.997b	fa		plx				plx
.997c	60		rts				rts
.997d					LCDeleteLastSpace:
.997d	48		pha				pha
.997e	da		phx				phx
.997f	ae 9d 04	ldx $049d			ldx 	tbOffset
.9982	f0 0a		beq $998e			beq 	_LCDLSExit
.9984	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x
.9987	c9 20		cmp #$20			cmp 	#' '
.9989	d0 03		bne $998e			bne 	_LCDLSExit
.998b	ce 9d 04	dec $049d			dec 	tbOffset
.998e					_LCDLSExit:
.998e	fa		plx				plx
.998f	68		pla				pla
.9990	60		rts				rts
.9991					LCCheckSpaceRequired:
.9991	ae 9d 04	ldx $049d			ldx 	tbOffset
.9994	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x 			; previous character
.9997	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.9999	f0 1b		beq $99b6			beq 	_LCCSRSpace
.999b	c9 29		cmp #$29			cmp 	#')'
.999d	f0 17		beq $99b6			beq 	_LCCSRSpace
.999f	c9 23		cmp #$23			cmp 	#'#'
.99a1	f0 13		beq $99b6			beq 	_LCCSRSpace
.99a3	20 bc 99	jsr $99bc			jsr 	LCLLowerCase 				; saves a little effort
.99a6	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.99a8	90 11		bcc $99bb			bcc 	_LCCSRExit
.99aa	c9 3a		cmp #$3a			cmp 	#"9"+1
.99ac	90 08		bcc $99b6			bcc 	_LCCSRSpace
.99ae	c9 61		cmp #$61			cmp 	#"a"
.99b0	90 09		bcc $99bb			bcc 	_LCCSRExit
.99b2	c9 7b		cmp #$7b			cmp 	#"z"+1
.99b4	b0 05		bcs $99bb			bcs 	_LCCSRExit
.99b6					_LCCSRSpace:
.99b6	a9 20		lda #$20			lda 	#' '
.99b8	20 6e 99	jsr $996e			jsr 	LCLWrite
.99bb					_LCCSRExit:
.99bb	60		rts				rts
.99bc					LCLLowerCase:
.99bc	c9 41		cmp #$41			cmp 	#"A"
.99be	90 06		bcc $99c6			bcc 	_LCLLCOut
.99c0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.99c2	b0 02		bcs $99c6			bcs 	_LCLLCOut
.99c4	69 20		adc #$20			adc 	#$20
.99c6					_LCLLCOut:
.99c6	60		rts				rts
.99c7					LCLUpperCase:
.99c7	c9 61		cmp #$61			cmp 	#"a"
.99c9	90 06		bcc $99d1			bcc 	_LCLUCOut
.99cb	c9 7b		cmp #$7b			cmp 	#"z"+1
.99cd	b0 02		bcs $99d1			bcs 	_LCLUCOut
.99cf	e9 1f		sbc #$1f			sbc 	#$1F
.99d1					_LCLUCOut:
.99d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.99d2					ProcedureScan:
.99d2	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.99d4	85 30		sta $30				sta 	codePtr
.99d6	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.99d8	85 31		sta $31				sta 	codePtr+1
.99da					_PSLoop:
.99da	b2 30		lda ($30)			lda 	(codePtr)
.99dc	f0 42		beq $9a20			beq 	_PSExit
.99de	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.99e0	b1 30		lda ($30),y			lda 	(codePtr),y
.99e2	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.99e4	d0 2d		bne $9a13			bne 	_PSNext
.99e6	c8		iny				iny 								; get the address of the record to zTemp0 and
.99e7	b1 30		lda ($30),y			lda 	(codePtr),y
.99e9	29 c0		and #$c0			and 	#$C0
.99eb	c9 40		cmp #$40			cmp 	#$40
.99ed	d0 32		bne $9a21			bne 	_PSSyntax
.99ef	b1 30		lda ($30),y			lda 	(codePtr),y
.99f1	18		clc				clc
.99f2	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.99f4	85 37		sta $37				sta 	zTemp0+1
.99f6	c8		iny				iny 								; LSB
.99f7	b1 30		lda ($30),y			lda 	(codePtr),y
.99f9	85 36		sta $36				sta 	zTemp0
.99fb	c8		iny				iny 								; character after variable call.
.99fc	98		tya				tya 								; save Y offset at +7
.99fd	a0 07		ldy #$07			ldy 	#7
.99ff	91 36		sta ($36),y			sta 	(zTemp0),y
.9a01	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9a03	a0 02		ldy #$02			ldy 	#2
.9a05	91 36		sta ($36),y			sta 	(zTemp0),y
.9a07	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.9a09					_PSCopy:
.9a09	b5 30		lda $30,x			lda 	safePtr,x
.9a0b	c8		iny				iny
.9a0c	91 36		sta ($36),y			sta 	(zTemp0),y
.9a0e	e8		inx				inx
.9a0f	e0 04		cpx #$04			cpx 	#4
.9a11	d0 f6		bne $9a09			bne 	_PSCopy
.9a13					_PSNext:
.9a13	18		clc				clc
.9a14	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9a16	65 30		adc $30				adc 	codePtr
.9a18	85 30		sta $30				sta 	codePtr
.9a1a	90 02		bcc $9a1e			bcc 	_CREExit
.9a1c	e6 31		inc $31				inc 	codePtr+1
.9a1e					_CREExit:
.9a1e	80 ba		bra $99da			bra 	_PSLoop
.9a20					_PSExit:
.9a20	60		rts				rts
.9a21					_PSSyntax:
.9a21	4c 35 b5	jmp $b535			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9a24					ScanForward:
.9a24	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9a26	86 37		stx $37				stx 	zTemp0+1
.9a28	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9a2a					_ScanLoop:
.9a2a	b1 30		lda ($30),y			lda 	(codePtr),y
.9a2c	c8		iny				iny
.9a2d	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9a2f	d0 0e		bne $9a3f			bne 	_ScanGoNext
.9a31	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9a33	f0 04		beq $9a39			beq 	_ScanMatch
.9a35	c5 37		cmp $37				cmp 	zTemp0+1
.9a37	d0 06		bne $9a3f			bne 	_ScanGoNext
.9a39					_ScanMatch:
.9a39	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9a3b	d0 01		bne $9a3e			bne 	_ScanNotEndEOL
.9a3d	88		dey				dey
.9a3e					_ScanNotEndEOL:
.9a3e	60		rts				rts
.9a3f					_ScanGoNext:
.9a3f	20 44 9a	jsr $9a44			jsr  	ScanForwardOne
.9a42	80 e6		bra $9a2a			bra 	_ScanLoop
.9a44					ScanForwardOne:
.9a44	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9a46	90 3e		bcc $9a86			bcc 	_SFWExit
.9a48	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9a4a	90 18		bcc $9a64			bcc 	_ScanSkipOne
.9a4c	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9a4e	b0 2f		bcs $9a7f			bcs 	_ScanSkipData
.9a50	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9a52	90 32		bcc $9a86			bcc 	_SFWExit 					; if not, ordinary keywords.
.9a54	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.9a56	b0 2e		bcs $9a86			bcs 	_SFWExit
.9a58	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9a5a	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9a5c	b0 28		bcs $9a86			bcs 	_SFWExit
.9a5e	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9a60	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9a62	80 22		bra $9a86			bra 	_SFWExit
.9a64					_ScanSkipOne:
.9a64	c8		iny				iny 								; consume the extra one.
.9a65	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9a67	d0 1d		bne $9a86			bne 	_SFWExit
.9a69	18		clc				clc
.9a6a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9a6c	65 30		adc $30				adc 	codePtr
.9a6e	85 30		sta $30				sta 	codePtr
.9a70	90 02		bcc $9a74			bcc 	_CREExit
.9a72	e6 31		inc $31				inc 	codePtr+1
.9a74					_CREExit:
.9a74	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9a76	b2 30		lda ($30)			lda 	(codePtr)
.9a78	d0 0c		bne $9a86			bne 	_SFWExit 					; if not zero, more to scan
.9a7a	a9 13		lda #$13		lda	#19
.9a7c	4c c9 9a	jmp $9ac9		jmp	ErrorHandler
.9a7f					_ScanSkipData:
.9a7f	88		dey				dey 								; point at data token
.9a80	c8		iny				iny
.9a81	98		tya				tya
.9a82	38		sec				sec
.9a83	71 30		adc ($30),y			adc 	(codePtr),y
.9a85	a8		tay				tay
.9a86					_SFWExit:
.9a86	60		rts				rts
.9a87					ScanGetCurrentLineStep:
.9a87	64 38		stz $38				stz 	zTemp1
.9a89	a0 03		ldy #$03			ldy 	#3
.9a8b					_SGCLSLoop:
.9a8b	b1 30		lda ($30),y			lda 	(codePtr),y
.9a8d	c8		iny				iny
.9a8e	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9a90	f0 05		beq $9a97			beq 	_SGCLSExit
.9a92	20 44 9a	jsr $9a44			jsr 	ScanForwardOne
.9a95	80 f4		bra $9a8b			bra 	_SGCLSLoop
.9a97					_SGCLSExit:
.9a97	a5 38		lda $38				lda 	zTemp1
.9a99	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9a9a					Command_WHILE:
.9a9a	5a		phy				phy 								; save position of the test
.9a9b	a2 00		ldx #$00			ldx 	#0
.9a9d	20 44 a6	jsr $a644			jsr 	EvaluateNumber 				; work out the number
.9aa0	20 34 a7	jsr $a734			jsr 	NSMIsZero 					; check if zero
.9aa3	f0 0e		beq $9ab3			beq 	_WHExitLoop 				; if so exit the loop
.9aa5	98		tya				tya 								; position *after* test.
.9aa6	7a		ply				ply 								; restore position before test, at WHILE
.9aa7	88		dey				dey
.9aa8	48		pha				pha 								; push after test on the stack
.9aa9	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9aab	20 b8 a7	jsr $a7b8			jsr 	StackOpen
.9aae	20 fc a7	jsr $a7fc			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9ab1	7a		ply				ply 								; restore the position *after* the test
.9ab2	60		rts				rts
.9ab3					_WHExitLoop:
.9ab3	68		pla				pla 								; throw post loop position
.9ab4	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.9ab6	aa		tax				tax
.9ab7	20 24 9a	jsr $9a24			jsr 	ScanForward
.9aba	60		rts				rts
.9abb					Command_WEND:
.9abb	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9abd	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9abf	20 e4 a7	jsr $a7e4			jsr 	StackCheckFrame
.9ac2	20 0d a8	jsr $a80d			jsr 	STKLoadCodePosition 		; loop back
.9ac5	20 d6 a7	jsr $a7d6			jsr 	StackClose		 			; erase the frame
.9ac8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.af47					CheckRightBracket:
.af47	b1 30		lda ($30),y			lda 	(codePtr),y
.af49	c8		iny				iny
.af4a	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.af4c	d0 0f		bne $af5d			bne 	CNAFail
.af4e	60		rts				rts
.af4f					CheckComma:
.af4f	b1 30		lda ($30),y			lda 	(codePtr),y
.af51	c8		iny				iny
.af52	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.af54	d0 07		bne $af5d			bne 	CNAFail
.af56	60		rts				rts
.af57					CheckNextA:
.af57	d1 30		cmp ($30),y			cmp 	(codePtr),y
.af59	d0 02		bne $af5d			bne 	CNAFail
.af5b	c8		iny				iny 								; skip character
.af5c	60		rts				rts 								; and exit
.af5d					CNAFail:
.af5d	4c 35 b5	jmp $b535			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9ac9					ErrorHandler:
.9ac9	a8		tay				tay 								; find the error text
.9aca	f0 49		beq $9b15			beq 	_EHEnd
.9acc	a2 00		ldx #$00			ldx 	#0
.9ace	a9 4e		lda #$4e			lda 	#((ErrorText) & $FF)
.9ad0	85 36		sta $36				sta 	0+zTemp0
.9ad2	a9 b5		lda #$b5			lda 	#((ErrorText) >> 8)
.9ad4	85 37		sta $37				sta 	1+zTemp0
.9ad6					_EHFind:
.9ad6	88		dey				dey 								; found the error text ?
.9ad7	f0 0e		beq $9ae7			beq 	_EHFound
.9ad9					_EHFindZero:
.9ad9	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9adb	e6 36		inc $36				inc 	zTemp0
.9add	d0 02		bne $9ae1			bne 	_EHFNoCarry
.9adf	e6 37		inc $37				inc 	zTemp0+1
.9ae1					_EHFNoCarry:
.9ae1	c9 00		cmp #$00			cmp 	#0
.9ae3	d0 f4		bne $9ad9			bne 	_EHFindZero
.9ae5	80 ef		bra $9ad6			bra 	_EHFind
.9ae7					_EHFound:
.9ae7	a5 36		lda $36				lda 	zTemp0 						; print message
.9ae9	a6 37		ldx $37				ldx 	zTemp0+1
.9aeb	20 22 9b	jsr $9b22			jsr 	PrintStringXA
.9aee	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9af0	b1 30		lda ($30),y			lda 	(codePtr),y
.9af2	d0 05		bne $9af9			bne 	_EHAtMsg
.9af4	c8		iny				iny
.9af5	b1 30		lda ($30),y			lda 	(codePtr),y
.9af7	f0 17		beq $9b10			beq 	_EHCREnd
.9af9					_EHAtMsg:
.9af9	a2 9b		ldx #$9b			ldx 	#_AtMsg >> 8 				; print " at "
.9afb	a9 18		lda #$18			lda 	#_AtMsg & $FF
.9afd	20 22 9b	jsr $9b22			jsr 	PrintStringXA
.9b00	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9b02	b1 30		lda ($30),y			lda 	(codePtr),y
.9b04	48		pha				pha
.9b05	c8		iny				iny
.9b06	b1 30		lda ($30),y			lda 	(codePtr),y
.9b08	aa		tax				tax
.9b09	68		pla				pla
.9b0a	20 a3 b0	jsr $b0a3			jsr 	ConvertInt16 				; convert XA to string
.9b0d	20 22 9b	jsr $9b22			jsr 	PrintStringXA 				; and print it.
.9b10					_EHCREnd:
.9b10	a9 0d		lda #$0d			lda 	#13 						; new line
.9b12	20 ed b6	jsr $b6ed			jsr 	EXTPrintCharacter
.9b15					_EHEnd:
.9b15	4c 26 8c	jmp $8c26			jmp 	WarmStart
>9b18	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9b20	20 00
.9b22					PrintStringXA:
.9b22	5a		phy				phy
.9b23	86 37		stx $37				stx 	zTemp0+1
.9b25	85 36		sta $36				sta 	zTemp0
.9b27	a0 00		ldy #$00			ldy 	#0
.9b29					_PSXALoop:
.9b29	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b2b	f0 06		beq $9b33			beq 	_PSXAExit
.9b2d	20 ed b6	jsr $b6ed			jsr 	EXTPrintCharacter
.9b30	c8		iny				iny
.9b31	80 f6		bra $9b29			bra 	_PSXALoop
.9b33					_PSXAExit:
.9b33	7a		ply				ply
.9b34	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9b35					UnaryTrue:
.9b35	fa		plx				plx
.9b36					ReturnTrue:
.9b36	a9 01		lda #$01			lda 	#1  						; set to 1
.9b38	20 06 a7	jsr $a706			jsr 	NSMSetByte
.9b3b	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9b3d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b40	60		rts				rts
.9b41					UnaryFalse:
.9b41	fa		plx				plx
.9b42					ReturnFalse:
.9b42	4c 04 a7	jmp $a704			jmp 	NSMSetZero 					; set it all to zero
.9b45					BinaryCompareEqual:
.9b45	fa		plx				plx
.9b46	20 81 9b	jsr $9b81			jsr 	CompareBaseCode
.9b49	c9 00		cmp #$00			cmp 	#0
.9b4b	f0 e9		beq $9b36			beq 	ReturnTrue
.9b4d	80 f3		bra $9b42			bra 	ReturnFalse
.9b4f					BinaryCompareLess:
.9b4f	fa		plx				plx
.9b50	20 81 9b	jsr $9b81			jsr 	CompareBaseCode
.9b53	c9 ff		cmp #$ff			cmp 	#$FF
.9b55	f0 df		beq $9b36			beq 	ReturnTrue
.9b57	80 e9		bra $9b42			bra 	ReturnFalse
.9b59					BinaryCompareGreater:
.9b59	fa		plx				plx
.9b5a	20 81 9b	jsr $9b81			jsr 	CompareBaseCode
.9b5d	c9 01		cmp #$01			cmp 	#1
.9b5f	f0 d5		beq $9b36			beq 	ReturnTrue
.9b61	80 df		bra $9b42			bra 	ReturnFalse
.9b63					BinaryCompareNotEqual:
.9b63	fa		plx				plx
.9b64	20 81 9b	jsr $9b81			jsr 	CompareBaseCode
.9b67	c9 00		cmp #$00			cmp 	#0
.9b69	d0 cb		bne $9b36			bne 	ReturnTrue
.9b6b	80 d5		bra $9b42			bra 	ReturnFalse
.9b6d					BinaryCompareLessEqual:
.9b6d	fa		plx				plx
.9b6e	20 81 9b	jsr $9b81			jsr 	CompareBaseCode
.9b71	c9 01		cmp #$01			cmp 	#1
.9b73	d0 c1		bne $9b36			bne 	ReturnTrue
.9b75	80 cb		bra $9b42			bra 	ReturnFalse
.9b77					BinaryCompareGreaterEqual:
.9b77	fa		plx				plx
.9b78	20 81 9b	jsr $9b81			jsr 	CompareBaseCode
.9b7b	c9 ff		cmp #$ff			cmp 	#$FF
.9b7d	d0 b7		bne $9b36			bne 	ReturnTrue
.9b7f	80 c1		bra $9b42			bra 	ReturnFalse
.9b81					CompareBaseCode:
.9b81	20 ea 9f	jsr $9fea			jsr 	DereferenceTopTwo 			; make both values if references.
.9b84	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9b87	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b8a	29 10		and #$10			and 	#NSTString
.9b8c	d0 40		bne $9bce			bne 	_CBCString
.9b8e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9b91	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b94	d0 3b		bne $9bd1			bne 	_CBCFloat
.9b96	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9b99	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b9c	29 08		and #$08			and 	#NSTFloat
.9b9e	d0 31		bne $9bd1			bne 	_CBCFloat
.9ba0	20 d4 9b	jsr $9bd4			jsr 	CompareFixMinusZero
.9ba3	e8		inx				inx
.9ba4	20 d4 9b	jsr $9bd4			jsr 	CompareFixMinusZero
.9ba7	ca		dex				dex
.9ba8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9bab	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9bae	10 0b		bpl $9bbb			bpl 	_CDCSameSign
.9bb0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9bb3	30 16		bmi $9bcb			bmi 	_CBCLess 					; return $FF
.9bb5					_CBCGreater:
.9bb5	a9 01		lda #$01			lda 	#1
.9bb7	60		rts				rts
.9bb8					_CBCEqual:
.9bb8	a9 00		lda #$00			lda 	#0
.9bba	60		rts				rts
.9bbb					_CDCSameSign:
.9bbb	20 e4 9c	jsr $9ce4			jsr 	SubTopTwoStack 				; unsigned subtract
.9bbe	20 34 a7	jsr $a734			jsr 	NSMIsZero 					; or the mantissa together
.9bc1	f0 f5		beq $9bb8			beq 	_CBCEqual 					; -0 == 0
.9bc3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9bc6	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9bc9	10 ea		bpl $9bb5			bpl 	_CBCGreater
.9bcb					_CBCLess:
.9bcb	a9 ff		lda #$ff			lda 	#$FF
.9bcd	60		rts				rts
.9bce					_CBCString:
.9bce	4c 3a 9c	jmp $9c3a			jmp 	CompareStrings
.9bd1					_CBCFloat:
.9bd1	4c a7 b1	jmp $b1a7			jmp 	CompareFloat
.9bd4					CompareFixMinusZero:
.9bd4	20 34 a7	jsr $a734			jsr 	NSMIsZero
.9bd7	d0 03		bne $9bdc			bne 	_CFXMZNotZero
.9bd9	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9bdc					_CFXMZNotZero:
.9bdc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9bdd					StringConcat:
.9bdd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9be0	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9be3	29 18		and #$18			and 	#NSBTypeMask
.9be5	c9 10		cmp #$10			cmp 	#NSTString
.9be7	d0 4e		bne $9c37			bne		_SCType
.9be9	64 38		stz $38				stz 	zTemp1 						; counting total length
.9beb	e8		inx				inx
.9bec	20 0a 9c	jsr $9c0a			jsr 	_SCSetupZ0 					; setup for second
.9bef	20 15 9c	jsr $9c15			jsr 	_SCLengthZ0 				; length for second
.9bf2	ca		dex				dex
.9bf3	20 0a 9c	jsr $9c0a			jsr 	_SCSetupZ0 					; setup for first
.9bf6	20 15 9c	jsr $9c15			jsr 	_SCLengthZ0 				; length for first
.9bf9	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9bfb	20 b6 b8	jsr $b8b6			jsr 	StringTempAllocate
.9bfe	20 28 9c	jsr $9c28			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9c01	e8		inx				inx
.9c02	20 0a 9c	jsr $9c0a			jsr 	_SCSetupZ0 					; copy second out
.9c05	20 28 9c	jsr $9c28			jsr 	_SCCopy
.9c08	ca		dex				dex
.9c09	60		rts				rts
.9c0a					_SCSetupZ0:
.9c0a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9c0d	85 36		sta $36				sta 	zTemp0
.9c0f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c12	85 37		sta $37				sta 	zTemp0+1
.9c14	60		rts				rts
.9c15					_SCLengthZ0:
.9c15	5a		phy				phy
.9c16	a0 00		ldy #$00			ldy 	#0
.9c18					_SCLenLoop:
.9c18	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c1a	f0 0a		beq $9c26			beq 	_SCLExit
.9c1c	c8		iny				iny
.9c1d	e6 38		inc $38				inc 	zTemp1
.9c1f	10 f7		bpl $9c18			bpl		_SCLenLoop
.9c21	a9 09		lda #$09		lda	#9
.9c23	4c c9 9a	jmp $9ac9		jmp	ErrorHandler
.9c26					_SCLExit:
.9c26	7a		ply				ply
.9c27	60		rts				rts
.9c28					_SCCopy:
.9c28	5a		phy				phy
.9c29	a0 00		ldy #$00			ldy 	#0
.9c2b					_SCCopyLoop:
.9c2b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c2d	f0 06		beq $9c35			beq 	_SCCExit
.9c2f	20 f4 b8	jsr $b8f4			jsr 	StringTempWrite
.9c32	c8		iny				iny
.9c33	80 f6		bra $9c2b			bra 	_SCCopyLoop
.9c35					_SCCExit:
.9c35	7a		ply				ply
.9c36	60		rts				rts
.9c37					_SCType:
.9c37	4c 3f b5	jmp $b53f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.af60					IntegerDivide:
.af60	fa		plx				plx
.af61	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.af64	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.af67	0a		asl a				asl 	a 							; shift reference bit into sign bit
.af68	0a		asl a				asl 	a
.af69	10 05		bpl $af70			bpl 	_NotRef
.af6b	48		pha				pha
.af6c	20 ea 9f	jsr $9fea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.af6f	68		pla				pla
.af70					_NotRef:
.af70	0a		asl a				asl 	a
.af71	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.af73	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.af76	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.af79	f0 03		beq $af7e			beq 	_IntegerCode 				; if clear, then we have two integers
.af7b	4c 3f b5	jmp $b53f			jmp 	TypeError 					; anything else, type mismatch.
.af7e					_IntegerCode:
.af7e	20 a0 af	jsr $afa0			jsr 	CheckDivideZero 			; do div zero check
.af81	20 d8 af	jsr $afd8			jsr 	Int32Divide 				; do the division
.af84	20 95 b0	jsr $b095			jsr 	CalculateSign 				; calculate result sign
.af87					NSMCopyPlusTwoToZero:
.af87	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.af8a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.af8d	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.af90	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.af93	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.af96	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.af99	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.af9c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.af9f	60		rts				rts
.afa0					CheckDivideZero:
.afa0	e8		inx				inx
.afa1	20 34 a7	jsr $a734			jsr 	NSMIsZero
.afa4	f0 02		beq $afa8			beq 	_CDVError
.afa6	ca		dex				dex
.afa7	60		rts				rts
.afa8					_CDVError:
.afa8	a9 03		lda #$03		lda	#3
.afaa	4c c9 9a	jmp $9ac9		jmp	ErrorHandler
.afad					IntegerModulus:
.afad	fa		plx				plx
.afae	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.afb1	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.afb4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.afb5	0a		asl a				asl 	a
.afb6	10 05		bpl $afbd			bpl 	_NotRef
.afb8	48		pha				pha
.afb9	20 ea 9f	jsr $9fea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.afbc	68		pla				pla
.afbd					_NotRef:
.afbd	0a		asl a				asl 	a
.afbe	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.afc0	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.afc3	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.afc6	f0 03		beq $afcb			beq 	_IntegerCode 				; if clear, then we have two integers
.afc8	4c 3f b5	jmp $b53f			jmp 	TypeError 					; anything else, type mismatch.
.afcb					_IntegerCode:
.afcb					IntegerModulusNoCheck:
.afcb	20 a0 af	jsr $afa0			jsr 	CheckDivideZero 			; do div zero check
.afce	20 d8 af	jsr $afd8			jsr 	Int32Divide 				; do the division
.afd1	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.afd4	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.afd7	60		rts				rts
.afd8					Int32Divide:
.afd8	48		pha				pha 								; save AXY
.afd9	5a		phy				phy
.afda	20 db a6	jsr $a6db			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.afdd	20 00 a7	jsr $a700			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.afe0	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.afe2					_I32DivideLoop:
.afe2	e8		inx				inx
.afe3	e8		inx				inx
.afe4	20 19 a7	jsr $a719			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.afe7	ca		dex				dex
.afe8	ca		dex				dex
.afe9	20 1a a7	jsr $a71a			jsr 	NSMRotateLeft
.afec	20 18 b0	jsr $b018			jsr 	DivideCheckSubtract 		; check if subtract possible
.afef	90 03		bcc $aff4			bcc 	_I32DivideNoCarryIn
.aff1	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.aff4					_I32DivideNoCarryIn:
.aff4	88		dey				dey 								; loop round till division completed.
.aff5	d0 eb		bne $afe2			bne 	_I32DivideLoop
.aff7	7a		ply				ply 								; restore AXY and exit
.aff8	68		pla				pla
.aff9	60		rts				rts
.affa					Int32ShiftDivide:
.affa	48		pha				pha 								; save AY
.affb	5a		phy				phy
.affc	e8		inx				inx 								; clear S[X+2]
.affd	e8		inx				inx
.affe	20 04 a7	jsr $a704			jsr 	NSMSetZero
.b001	ca		dex				dex
.b002	ca		dex				dex
.b003	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.b005					_I32SDLoop:
.b005	20 18 b0	jsr $b018			jsr 	DivideCheckSubtract 		; check if subtract possible
.b008	e8		inx				inx
.b009	e8		inx				inx
.b00a	20 1a a7	jsr $a71a			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.b00d	ca		dex				dex
.b00e	ca		dex				dex
.b00f	20 1a a7	jsr $a71a			jsr 	NSMRotateLeft
.b012	88		dey				dey 	 							; do 31 times
.b013	d0 f0		bne $b005			bne 	_I32SDLoop
.b015	7a		ply				ply 								; restore AY and exit
.b016	68		pla				pla
.b017	60		rts				rts
.b018					DivideCheckSubtract:
.b018	20 e4 9c	jsr $9ce4			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.b01b	b0 04		bcs $b021			bcs 	_DCSExit 					; if carry set, then could do, exit
.b01d	20 be 9c	jsr $9cbe			jsr 	AddTopTwoStack 				; add it back in
.b020	18		clc				clc 								; and return False
.b021					_DCSExit:
.b021	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.b022					MulInteger:
.b022	fa		plx				plx
.b023	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.b026	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b029	0a		asl a				asl 	a 							; shift reference bit into sign bit
.b02a	0a		asl a				asl 	a
.b02b	10 05		bpl $b032			bpl 	_NotRef
.b02d	48		pha				pha
.b02e	20 ea 9f	jsr $9fea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.b031	68		pla				pla
.b032					_NotRef:
.b032	0a		asl a				asl 	a 							; put MSB of type into A:7
.b033	30 0b		bmi $b040			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.b035	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.b038	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.b03b	f0 06		beq $b043			beq 	_IntegerCode 				; if clear, then we have two integers
.b03d	4c 7e b2	jmp $b27e			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.b040					_StringData:
.b040	4c 49 b5	jmp $b549			jmp 	NotDoneError							; at least one string - don't know both are strings.
.b043					_IntegerCode:
.b043	20 50 b0	jsr $b050			jsr 	MultiplyShort
.b046	c9 00		cmp #$00			cmp 	#0
.b048	f0 05		beq $b04f			beq 	_MIExit
.b04a	a9 04		lda #$04		lda	#4
.b04c	4c c9 9a	jmp $9ac9		jmp	ErrorHandler
.b04f					_MIExit:
.b04f	60		rts				rts
.b050					MultiplyShort:
.b050	5a		phy				phy 								; save Y
.b051	20 db a6	jsr $a6db			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.b054	20 00 a7	jsr $a700			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.b057	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.b059					_I32MLoop:
.b059	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.b05c	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.b05f	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.b062	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.b065	f0 28		beq $b08f			beq 	_I32MExit 					; exit if zero
.b067	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.b06a	29 01		and #$01			and 	#1
.b06c	f0 0e		beq $b07c			beq 	_I32MNoAdd
.b06e	20 be 9c	jsr $9cbe			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.b071	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.b074	10 06		bpl $b07c			bpl 	_I32MNoAdd
.b076					_I32ShiftRight:
.b076	20 27 a7	jsr $a727			jsr 	NSMShiftRight 				; shift S[X] right
.b079	c8		iny				iny 								; increment shift count
.b07a	80 0a		bra $b086			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.b07c					_I32MNoAdd:
.b07c	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.b07f	70 f5		bvs $b076			bvs 	_I32ShiftRight 				; instead.
.b081	e8		inx				inx
.b082	20 19 a7	jsr $a719			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.b085	ca		dex				dex
.b086					_I32MShiftUpper:
.b086	e8		inx				inx 								; shift S[X+2] right
.b087	e8		inx				inx
.b088	20 27 a7	jsr $a727			jsr 	NSMShiftRight
.b08b	ca		dex				dex
.b08c	ca		dex				dex
.b08d	80 ca		bra $b059			bra 	_I32MLoop 					; try again.
.b08f					_I32MExit:
.b08f	20 95 b0	jsr $b095			jsr 	CalculateSign
.b092	98		tya				tya 								; shift in A
.b093	7a		ply				ply 								; restore Y and exit
.b094	60		rts				rts
.b095					CalculateSign:
.b095	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.b098	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.b09b	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.b09e	0a		asl a				asl 	a 							; shift bit 7 into carry
.b09f	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.b0a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9c3a					CompareStrings:
.9c3a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9c3d	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9c40	29 10		and #$10			and 	#NSBIsString
.9c42	f0 2c		beq $9c70			beq 	_CSTypeError
.9c44	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9c47	85 36		sta $36				sta 	zTemp0
.9c49	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c4c	85 37		sta $37				sta 	zTemp0+1
.9c4e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9c51	85 38		sta $38				sta 	zTemp1
.9c53	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9c56	85 39		sta $39				sta 	zTemp1+1
.9c58	5a		phy				phy 								; save Y so we can access strings
.9c59	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9c5b					_CSLoop:
.9c5b	c8		iny				iny
.9c5c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9c5e	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9c60	d0 06		bne $9c68			bne 	_CSDifferent
.9c62	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9c64	d0 f5		bne $9c5b			bne 	_CSLoop 					; still comparing
.9c66					_CSExit:
.9c66	7a		ply				ply 								; reached end, return zero in A from EOS
.9c67	60		rts				rts
.9c68					_CSDifferent:
.9c68	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9c6a	90 fa		bcc $9c66			bcc		_CSExit
.9c6c	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9c6e	80 f6		bra $9c66			bra 	_CSExit
.9c70					_CSTypeError:
.9c70	4c 3f b5	jmp $b53f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9c73					ShiftLeft:
.9c73	38		sec				sec
.9c74	80 01		bra $9c77			bra 	ShiftMain
.9c76					ShiftRight:
.9c76	18		clc				clc
.9c77					ShiftMain:
.9c77	fa		plx				plx 								; restore X
.9c78	08		php				php 								; save direction
.9c79	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c7c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c7f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c80	0a		asl a				asl 	a
.9c81	10 05		bpl $9c88			bpl 	_NotRef
.9c83	48		pha				pha
.9c84	20 ea 9f	jsr $9fea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c87	68		pla				pla
.9c88					_NotRef:
.9c88	0a		asl a				asl 	a
.9c89	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c8b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c8e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c91	f0 03		beq $9c96			beq 	_IntegerCode 				; if clear, then we have two integers
.9c93	4c 3f b5	jmp $b53f			jmp 	TypeError 					; anything else, type mismatch.
.9c96					_IntegerCode:
.9c96	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9c99	29 e0		and #$e0			and 	#$E0
.9c9b	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9c9e	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9ca1	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9ca4	d0 13		bne $9cb9			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9ca6					_SMLoop:
.9ca6	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9ca9	30 11		bmi $9cbc			bmi 	_SMExit 					; exit if done.
.9cab	28		plp				plp 								; restore direcition setting
.9cac	08		php				php
.9cad	90 05		bcc $9cb4			bcc 	_SMRight
.9caf	20 19 a7	jsr $a719			jsr 	NSMShiftLeft 				; shift left if CS
.9cb2	80 f2		bra $9ca6			bra 	_SMLoop
.9cb4					_SMRight:
.9cb4	20 27 a7	jsr $a727			jsr 	NSMShiftRight 				; shift right if CC
.9cb7	80 ed		bra $9ca6			bra 	_SMLoop
.9cb9					_SMExit0:
.9cb9	20 04 a7	jsr $a704			jsr 	NSMSetZero 					; return zero.
.9cbc					_SMExit:
.9cbc	28		plp				plp 								; throw direction
.9cbd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9cbe					AddTopTwoStack:
.9cbe	18		clc				clc
.9cbf	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9cc2	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9cc5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cc8	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9ccb	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9cce	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cd1	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9cd4	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9cd7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9cda	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9cdd	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9ce0	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9ce3	60		rts				rts
.9ce4					SubTopTwoStack:
.9ce4	38		sec				sec
.9ce5	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9ce8	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9ceb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cee	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9cf1	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9cf4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cf7	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9cfa	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9cfd	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9d00	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9d03	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9d06	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9d09	60		rts				rts
.9d0a					AddInteger:
.9d0a	fa		plx				plx
.9d0b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d0e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d11	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d12	0a		asl a				asl 	a
.9d13	10 05		bpl $9d1a			bpl 	_NotRef
.9d15	48		pha				pha
.9d16	20 ea 9f	jsr $9fea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d19	68		pla				pla
.9d1a					_NotRef:
.9d1a	0a		asl a				asl 	a 							; put MSB of type into A:7
.9d1b	30 0b		bmi $9d28			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9d1d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d20	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d23	f0 06		beq $9d2b			beq 	_IntegerCode 				; if clear, then we have two integers
.9d25	4c fe b0	jmp $b0fe			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9d28					_StringData:
.9d28	4c dd 9b	jmp $9bdd			jmp 	StringConcat							; at least one string - don't know both are strings.
.9d2b					_IntegerCode:
.9d2b					AddCode:
.9d2b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9d2e	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9d31	10 8b		bpl $9cbe			bpl 	AddTopTwoStack
.9d33	20 e4 9c	jsr $9ce4			jsr 	SubTopTwoStack 				; do a physical subtraction
.9d36	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9d39	10 09		bpl $9d44			bpl 	_AddExit
.9d3b	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9d3e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d41	20 b9 a6	jsr $a6b9			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9d44					_AddExit:
.9d44	20 34 a7	jsr $a734			jsr 	NSMIsZero 					; check for -0
.9d47	d0 03		bne $9d4c			bne 	_AddNonZero
.9d49	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9d4c					_AddNonZero:
.9d4c	60		rts				rts
.9d4d					SubInteger:
.9d4d	fa		plx				plx
.9d4e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d51	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d54	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d55	0a		asl a				asl 	a
.9d56	10 05		bpl $9d5d			bpl 	_NotRef
.9d58	48		pha				pha
.9d59	20 ea 9f	jsr $9fea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d5c	68		pla				pla
.9d5d					_NotRef:
.9d5d	0a		asl a				asl 	a 							; put MSB of type into A:7
.9d5e	30 0b		bmi $9d6b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9d60	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d63	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d66	f0 06		beq $9d6e			beq 	_IntegerCode 				; if clear, then we have two integers
.9d68	4c 03 b1	jmp $b103			jmp 	FloatingPointSub 							; otherwise at least one float.
.9d6b					_StringData:
.9d6b	4c 49 b5	jmp $b549			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9d6e					_IntegerCode:
.9d6e	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9d71	49 80		eor #$80			eor 	#$80
.9d73	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9d76	80 b3		bra $9d2b			bra 	AddCode 					; and do the same code as add.
.9d78					AndInteger:
.9d78	fa		plx				plx
.9d79	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d7c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d7f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d80	0a		asl a				asl 	a
.9d81	10 05		bpl $9d88			bpl 	_NotRef
.9d83	48		pha				pha
.9d84	20 ea 9f	jsr $9fea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d87	68		pla				pla
.9d88					_NotRef:
.9d88	0a		asl a				asl 	a
.9d89	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d8b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d8e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d91	f0 03		beq $9d96			beq 	_IntegerCode 				; if clear, then we have two integers
.9d93	4c 3f b5	jmp $b53f			jmp 	TypeError 					; anything else, type mismatch.
.9d96					_IntegerCode:
.9d96	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9d99	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9d9c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d9f	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9da2	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9da5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9da8	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9dab	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9dae	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9db1	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9db4	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9db7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dba	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9dbd	60		rts				rts
.9dbe					OraInteger:
.9dbe	fa		plx				plx
.9dbf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9dc2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9dc5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9dc6	0a		asl a				asl 	a
.9dc7	10 05		bpl $9dce			bpl 	_NotRef
.9dc9	48		pha				pha
.9dca	20 ea 9f	jsr $9fea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9dcd	68		pla				pla
.9dce					_NotRef:
.9dce	0a		asl a				asl 	a
.9dcf	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9dd1	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9dd4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9dd7	f0 03		beq $9ddc			beq 	_IntegerCode 				; if clear, then we have two integers
.9dd9	4c 3f b5	jmp $b53f			jmp 	TypeError 					; anything else, type mismatch.
.9ddc					_IntegerCode:
.9ddc	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9ddf	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9de2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9de5	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9de8	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9deb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dee	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9df1	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9df4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9df7	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9dfa	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9dfd	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e00	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9e03	60		rts				rts
.9e04					EorInteger:
.9e04	fa		plx				plx
.9e05	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9e08	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9e0b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e0c	0a		asl a				asl 	a
.9e0d	10 05		bpl $9e14			bpl 	_NotRef
.9e0f	48		pha				pha
.9e10	20 ea 9f	jsr $9fea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e13	68		pla				pla
.9e14					_NotRef:
.9e14	0a		asl a				asl 	a
.9e15	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e17	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e1a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9e1d	f0 03		beq $9e22			beq 	_IntegerCode 				; if clear, then we have two integers
.9e1f	4c 3f b5	jmp $b53f			jmp 	TypeError 					; anything else, type mismatch.
.9e22					_IntegerCode:
.9e22	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9e25	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9e28	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e2b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9e2e	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9e31	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e34	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9e37	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9e3a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e3d	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9e40	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9e43	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e46	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9e49	60		rts				rts
.9e4a					WordIndirect:
.9e4a	fa		plx				plx
.9e4b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9e4e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9e51	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e52	0a		asl a				asl 	a
.9e53	10 05		bpl $9e5a			bpl 	_NotRef
.9e55	48		pha				pha
.9e56	20 ea 9f	jsr $9fea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e59	68		pla				pla
.9e5a					_NotRef:
.9e5a	0a		asl a				asl 	a
.9e5b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e5d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e60	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9e63	f0 03		beq $9e68			beq 	_IntegerCode 				; if clear, then we have two integers
.9e65	4c 3f b5	jmp $b53f			jmp 	TypeError 					; anything else, type mismatch.
.9e68					_IntegerCode:
.9e68	20 2b 9d	jsr $9d2b			jsr 	AddCode 					; add the two values
.9e6b	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9e6d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e70	60		rts				rts
.9e71					ByteIndirect:
.9e71	fa		plx				plx
.9e72	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9e75	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9e78	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e79	0a		asl a				asl 	a
.9e7a	10 05		bpl $9e81			bpl 	_NotRef
.9e7c	48		pha				pha
.9e7d	20 ea 9f	jsr $9fea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e80	68		pla				pla
.9e81					_NotRef:
.9e81	0a		asl a				asl 	a
.9e82	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e84	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e87	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9e8a	f0 03		beq $9e8f			beq 	_IntegerCode 				; if clear, then we have two integers
.9e8c	4c 3f b5	jmp $b53f			jmp 	TypeError 					; anything else, type mismatch.
.9e8f					_IntegerCode:
.9e8f	20 2b 9d	jsr $9d2b			jsr 	AddCode 					; add the two values
.9e92	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9e94	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e97	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.b0a3					ConvertInt16:
.b0a3	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.b0a6	8e 10 04	stx $0410			stx 	NSMantissa1
.b0a9	9c 18 04	stz $0418			stz 	NSMantissa2
.b0ac	9c 20 04	stz $0420			stz 	NSMantissa3
.b0af	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.b0b2	a2 00		ldx #$00			ldx 	#0 							; stack level
.b0b4	a9 0a		lda #$0a			lda 	#10 						; base
.b0b6	80 00		bra $b0b8			bra 	ConvertInt32
.b0b8					ConvertInt32:
.b0b8	5a		phy				phy
.b0b9	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.b0bb	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.b0be	10 08		bpl $b0c8			bpl 	_CI32NotNeg
.b0c0	48		pha				pha
.b0c1	a9 2d		lda #$2d			lda 	#'-'
.b0c3	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.b0c6	c8		iny				iny
.b0c7	68		pla				pla
.b0c8					_CI32NotNeg:
.b0c8	20 d6 b0	jsr $b0d6			jsr 	_CI32DivideConvert 			; recursive conversion
.b0cb	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b0cd	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.b0d0	7a		ply				ply
.b0d1	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.b0d3	a9 f8		lda #$f8			lda 	#NumberBuffer & $FF
.b0d5	60		rts				rts
.b0d6					_CI32DivideConvert:
.b0d6	e8		inx				inx 								; write to next slot up
.b0d7	20 06 a7	jsr $a706			jsr 	NSMSetByte
.b0da	ca		dex				dex
.b0db	20 d8 af	jsr $afd8			jsr 	Int32Divide 				; divide
.b0de	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.b0e1	48		pha				pha
.b0e2	20 87 af	jsr $af87			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.b0e5	20 34 a7	jsr $a734			jsr 	NSMIsZero 					; is it zero ?
.b0e8	f0 06		beq $b0f0			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.b0ea	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.b0ed	20 d6 b0	jsr $b0d6			jsr 	_CI32DivideConvert 			; and recusrively call.
.b0f0					_CI32NoRecurse:
.b0f0	68		pla				pla 								; remainder
.b0f1	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.b0f3	90 02		bcc $b0f7			bcc 	_CI32NotHex
.b0f5	69 26		adc #$26			adc 	#6+32
.b0f7					_CI32NotHex:
.b0f7	69 30		adc #$30			adc 	#48
.b0f9	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y 				; write out and exit
.b0fc	c8		iny				iny
.b0fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9e98					PrecedenceLevel:
>9e98	04					.byte	 4	; $00 <<
>9e99	02					.byte	 2	; $01 <=
>9e9a	02					.byte	 2	; $02 <>
>9e9b	00					.byte	 0	; $03 !!3
>9e9c	00					.byte	 0	; $04 ><
>9e9d	02					.byte	 2	; $05 >=
>9e9e	04					.byte	 4	; $06 >>
>9e9f	00					.byte	 0	; $07 !!7
>9ea0	00					.byte	 0	; $08 !!8
>9ea1	00					.byte	 0	; $09 !!9
>9ea2	00					.byte	 0	; $0a !!10
>9ea3	00					.byte	 0	; $0b !!11
>9ea4	00					.byte	 0	; $0c !!12
>9ea5	00					.byte	 0	; $0d !!13
>9ea6	00					.byte	 0	; $0e !!14
>9ea7	00					.byte	 0	; $0f !!15
>9ea8	00					.byte	 0	; $10 @
>9ea9	00					.byte	 0	; $11 !!17
>9eaa	00					.byte	 0	; $12 !!18
>9eab	00					.byte	 0	; $13 [
>9eac	04					.byte	 4	; $14 \
>9ead	00					.byte	 0	; $15 ]
>9eae	01					.byte	 1	; $16 ^
>9eaf	00					.byte	 0	; $17 _
>9eb0	00					.byte	 0	; $18 `
>9eb1	00					.byte	 0	; $19 !!25
>9eb2	00					.byte	 0	; $1a !!26
>9eb3	00					.byte	 0	; $1b {
>9eb4	01					.byte	 1	; $1c |
>9eb5	00					.byte	 0	; $1d }
>9eb6	00					.byte	 0	; $1e ~
>9eb7	00					.byte	 0	; $1f [7m<7F>[m
>9eb8	00					.byte	 0	; $20
>9eb9	05					.byte	 5	; $21 !
>9eba	00					.byte	 0	; $22 "
>9ebb	00					.byte	 0	; $23 #
>9ebc	05					.byte	 5	; $24 $
>9ebd	04					.byte	 4	; $25 %
>9ebe	01					.byte	 1	; $26 &
>9ebf	00					.byte	 0	; $27 '
>9ec0	00					.byte	 0	; $28 (
>9ec1	00					.byte	 0	; $29 )
>9ec2	04					.byte	 4	; $2a *
>9ec3	03					.byte	 3	; $2b +
>9ec4	00					.byte	 0	; $2c ,
>9ec5	03					.byte	 3	; $2d -
>9ec6	00					.byte	 0	; $2e .
>9ec7	04					.byte	 4	; $2f /
>9ec8	00					.byte	 0	; $30 0
>9ec9	00					.byte	 0	; $31 1
>9eca	00					.byte	 0	; $32 2
>9ecb	00					.byte	 0	; $33 3
>9ecc	00					.byte	 0	; $34 4
>9ecd	00					.byte	 0	; $35 5
>9ece	00					.byte	 0	; $36 6
>9ecf	00					.byte	 0	; $37 7
>9ed0	00					.byte	 0	; $38 8
>9ed1	00					.byte	 0	; $39 9
>9ed2	00					.byte	 0	; $3a :
>9ed3	00					.byte	 0	; $3b ;
>9ed4	02					.byte	 2	; $3c <
>9ed5	02					.byte	 2	; $3d =
>9ed6	02					.byte	 2	; $3e >
>9ed7	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9ed8					EvaluateExpressionAt0:
.9ed8	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9eda					EvaluateExpression:
.9eda	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9edc					EvaluateExpressionAtPrecedence:
.9edc	48		pha				pha 								; save precedence level
.9edd	20 ab a1	jsr $a1ab			jsr 	EvaluateTerm 				; evaluate term into level X.
.9ee0	68		pla				pla 								; restore precedence level.
.9ee1					_EXPRLoop:
.9ee1	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9ee3	b1 30		lda ($30),y			lda 	(codePtr),y
.9ee5	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9ee7	b0 25		bcs $9f0e			bcs 	_EXPRExit
.9ee9	da		phx				phx 								; read the operator precedence
.9eea	aa		tax				tax
.9eeb	bd 98 9e	lda $9e98,x			lda 	PrecedenceLevel,x
.9eee	fa		plx				plx
.9eef	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9ef1	f0 1b		beq $9f0e			beq 	_EXPRExit
.9ef3	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9ef5	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9ef7	c5 37		cmp $37				cmp 	zTemp0+1
.9ef9	b0 13		bcs $9f0e			bcs		_EXPRExit 					; if current >= operator exit
.9efb	48		pha				pha 								; save current precedence.
.9efc	b1 30		lda ($30),y			lda 	(codePtr),y
.9efe	c8		iny				iny
.9eff	48		pha				pha
.9f00	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9f02	e8		inx				inx 								; work out the right hand side.
.9f03	20 dc 9e	jsr $9edc			jsr 	EvaluateExpressionAtPrecedence
.9f06	ca		dex				dex
.9f07	68		pla				pla 								; get operator, call the code.
.9f08	20 11 9f	jsr $9f11			jsr 	_EXPRCaller
.9f0b	68		pla				pla 								; restore precedence level
.9f0c	80 d3		bra $9ee1			bra 	_EXPRLoop 					; and go round.
.9f0e					_EXPRExit:
.9f0e	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9f10	60		rts				rts
.9f11					_EXPRCaller:
.9f11	da		phx				phx 								; save on stack, first thing is to restore it
.9f12	0a		asl a				asl 	a 							; double so can use vectors into X
.9f13	aa		tax				tax
.9f14	7c 4e 96	jmp ($964e,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.b0fe					FloatingPointAdd:
.b0fe	20 a7 b2	jsr $b2a7			jsr 	FloatPrepare 				; prepare for floats
.b101	80 0b		bra $b10e			bra 	FloatAdd
.b103					FloatingPointSub:
.b103	20 a7 b2	jsr $b2a7			jsr 	FloatPrepare 				; prepare for floats
.b106					FloatSubtract:
.b106	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.b109	49 80		eor #$80			eor 	#$80
.b10b	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.b10e					FloatAdd:
.b10e	48		pha				pha
.b10f	5a		phy				phy
.b110	20 b8 b2	jsr $b2b8			jsr 	NSNormalise 				; normalise S[X]
.b113	f0 5c		beq $b171			beq 	_FAReturn1
.b115	e8		inx				inx 								; normalise S[X+1]
.b116	20 b8 b2	jsr $b2b8			jsr 	NSNormalise
.b119	ca		dex				dex
.b11a	c9 00		cmp #$00			cmp 	#0
.b11c	f0 77		beq $b195			beq 	_FAExit 					; if so, just return A
.b11e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.b121	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.b124	f0 1b		beq $b141			beq 	_FAExponentsEqual
.b126	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.b129	a8		tay				tay
.b12a	38		sec				sec 								; do a signed comparison of the exponents.
.b12b	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b12e	50 02		bvc $b132			bvc 	_FANoSignedChange
.b130	49 80		eor #$80			eor 	#$80
.b132					_FANoSignedChange:
.b132	29 80		and #$80			and 	#$80
.b134	10 03		bpl $b139			bpl 	_FAHaveMax
.b136	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.b139					_FAHaveMax:
.b139	20 98 b1	jsr $b198			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.b13c	e8		inx				inx
.b13d	20 98 b1	jsr $b198			jsr 	_FAShiftToExponent
.b140	ca		dex				dex
.b141					_FAExponentsEqual:
.b141	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.b144	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.b147	30 10		bmi $b159			bmi 	_FADifferentSigns
.b149	20 be 9c	jsr $9cbe			jsr 	AddTopTwoStack 				; do the add of the mantissae
.b14c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.b14f	10 44		bpl $b195			bpl 	_FAExit 					; if no, we are done.
.b151	20 27 a7	jsr $a727			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.b154	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.b157	80 3c		bra $b195			bra 	_FAExit
.b159					_FADifferentSigns:
.b159	20 e4 9c	jsr $9ce4			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.b15c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.b15f	10 06		bpl $b167			bpl 	_FACheckZero 				; if no, check for -0
.b161	20 b0 a6	jsr $a6b0			jsr 	NSMNegate 					; netate result
.b164	20 b9 a6	jsr $a6b9			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.b167					_FACheckZero:
.b167	20 34 a7	jsr $a734			jsr 	NSMIsZero	 				; check for -0
.b16a	d0 29		bne $b195			bne 	_FAExit
.b16c	9e 00 04	stz $0400,x			stz 	NSStatus,x
.b16f	80 24		bra $b195			bra 	_FAExit
.b171					_FAReturn1:
.b171	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.b174	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b177	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.b17a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b17d	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.b180	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b183	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.b186	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b189	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.b18c	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b18f	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.b192	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b195					_FAExit:
.b195	7a		ply				ply
.b196	68		pla				pla
.b197	60		rts				rts
.b198					_FAShiftToExponent:
.b198					_FAShiftToExponent2:
.b198	98		tya				tya 								; compare Y to exponent
.b199	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.b19c	f0 08		beq $b1a6			beq 	_FASEExit 					; exit if so.
.b19e	20 27 a7	jsr $a727			jsr 	NSMShiftRight	 			; shift the mantissa right
.b1a1	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.b1a4	80 f2		bra $b198			bra 	_FAShiftToExponent2
.b1a6					_FASEExit:
.b1a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.b1a7					CompareFloat:
.b1a7	20 06 b1	jsr $b106			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.b1aa	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.b1ad	29 f8		and #$f8			and 	#$F8
.b1af	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.b1b2	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.b1b5	f0 09		beq $b1c0			beq 	_FCExit 					; zero, so approximately identical
.b1b7	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.b1b9	3c 00 04	bit $0400,x			bit 	NSStatus,x
.b1bc	10 02		bpl $b1c0			bpl 	_FCExit
.b1be					_FCNegative:
.b1be	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.b1c0					_FCExit:
.b1c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.b1c1					FDivideCommand:
.b1c1	fa		plx				plx	 								; restore stack position
.b1c2	20 a7 b2	jsr $b2a7			jsr 	FloatPrepare 				; prepare for floats
.b1c5					FloatDivide:
.b1c5	48		pha				pha
.b1c6	e8		inx				inx
.b1c7	20 b8 b2	jsr $b2b8			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b1ca	ca		dex				dex
.b1cb	c9 00		cmp #$00			cmp 	#0
.b1cd	f0 20		beq $b1ef			beq 	_FDZero
.b1cf	20 b8 b2	jsr $b2b8			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b1d2	f0 19		beq $b1ed			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b1d4	20 fa af	jsr $affa			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.b1d7	20 87 af	jsr $af87			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.b1da	20 b8 b2	jsr $b2b8			jsr		NSNormalise 				; renormalise
.b1dd	20 95 b0	jsr $b095			jsr 	CalculateSign 				; calculate result sign
.b1e0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.b1e3	38		sec				sec
.b1e4	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b1e7	38		sec				sec
.b1e8	e9 1e		sbc #$1e			sbc 	#30
.b1ea	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b1ed					_FDExit:
.b1ed	68		pla				pla
.b1ee	60		rts				rts
.b1ef					_FDZero:
.b1ef	a9 03		lda #$03		lda	#3
.b1f1	4c c9 9a	jmp $9ac9		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.b1f4					FloatFractionalPart:
.b1f4	5a		phy				phy
.b1f5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.b1f8	29 7f		and #$7f			and 	#$7F
.b1fa	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b1fd	20 b8 b2	jsr $b2b8			jsr 	NSNormalise
.b200	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.b203	38		sec				sec
.b204	e9 e0		sbc #$e0			sbc 	#$E0
.b206	90 31		bcc $b239			bcc 	_FFPExit 					; already fractional
.b208	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.b20a	b0 2a		bcs $b236			bcs 	_FFPZero
.b20c	a8		tay				tay 								; put count to do in Y
.b20d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.b210	20 3b b2	jsr $b23b			jsr 	_FFPPartial
.b213	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b216	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.b219	20 3b b2	jsr $b23b			jsr 	_FFPPartial
.b21c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b21f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b222	20 3b b2	jsr $b23b			jsr 	_FFPPartial
.b225	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b228	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b22b	20 3b b2	jsr $b23b			jsr 	_FFPPartial
.b22e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b231	20 34 a7	jsr $a734			jsr 	NSMIsZero 					; zeroed check.
.b234	d0 03		bne $b239			bne 	_FFPExit
.b236					_FFPZero:
.b236	20 04 a7	jsr $a704			jsr 	NSMSetZero
.b239					_FFPExit:
.b239	7a		ply				ply
.b23a	60		rts				rts
.b23b					_FFPPartial:
.b23b	c0 00		cpy #$00			cpy 	#0 							; no more to do
.b23d	f0 17		beq $b256			beq 	_FFFPPExit
.b23f	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.b241	b0 0c		bcs $b24f			bcs 	_FFFPPWholeByte
.b243	5a		phy				phy
.b244					_FFFPPLeft:
.b244	0a		asl a				asl 	a
.b245	88		dey				dey
.b246	d0 fc		bne $b244			bne 	_FFFPPLeft
.b248	7a		ply				ply
.b249					_FFFPPRight:
.b249	4a		lsr a				lsr 	a
.b24a	88		dey				dey
.b24b	d0 fc		bne $b249			bne 	_FFFPPRight
.b24d	80 07		bra $b256			bra 	_FFFPPExit
.b24f					_FFFPPWholeByte:
.b24f	98		tya				tya 								; subtract 8 from count
.b250	38		sec				sec
.b251	e9 08		sbc #$08			sbc 	#8
.b253	a8		tay				tay
.b254	a9 00		lda #$00			lda 	#0 							; and clear all
.b256					_FFFPPExit:
.b256	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.b257					FloatIntegerPart:
.b257	48		pha				pha
.b258	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.b25b	f0 1f		beq $b27c			beq 	_FIPExit 					; if so do nothing
.b25d	20 34 a7	jsr $a734			jsr 	NSMIsZero 					; is it zero ?
.b260	f0 17		beq $b279			beq 	_FIPZero 					; if so return zero.
.b262	20 b8 b2	jsr $b2b8			jsr 	NSNormalise 				; normalise
.b265	f0 12		beq $b279			beq 	_FIPZero 					; normalised to zero, exit zero
.b267					_FIPShift:
.b267	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.b26a	10 08		bpl $b274			bpl 	_FIPCheckZero
.b26c	20 27 a7	jsr $a727			jsr 	NSMShiftRight 				; shift mantissa right
.b26f	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.b272	80 f3		bra $b267			bra 	_FIPShift
.b274					_FIPCheckZero:
.b274	20 34 a7	jsr $a734			jsr 	NSMIsZero 					; avoid -0 problem
.b277	d0 03		bne $b27c			bne 	_FIPExit 					; set to zero if mantissa zero.
.b279					_FIPZero:
.b279	20 04 a7	jsr $a704			jsr 	NSMSetZero
.b27c					_FIPExit:
.b27c	68		pla				pla
.b27d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b27e					FloatingPointMultiply:
.b27e	20 a7 b2	jsr $b2a7			jsr 	FloatPrepare 				; prepare for floats
.b281					FloatMultiply:
.b281	48		pha				pha
.b282	20 b8 b2	jsr $b2b8			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b285	f0 1b		beq $b2a2			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b287	e8		inx				inx
.b288	20 b8 b2	jsr $b2b8			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b28b	ca		dex				dex
.b28c	c9 00		cmp #$00			cmp 	#0
.b28e	f0 0f		beq $b29f			beq 	_FDSetZero
.b290	20 50 b0	jsr $b050			jsr 	MultiplyShort 				; calculate the result.
.b293	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b296	18		clc				clc
.b297	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b29a	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b29d	80 03		bra $b2a2			bra 	_FDExit
.b29f					_FDSetZero:
.b29f	20 04 a7	jsr $a704			jsr 	NSMSetZero 					; return 0
.b2a2					_FDExit:
.b2a2	20 b8 b2	jsr $b2b8			jsr 	NSNormalise 				; normalise the result
.b2a5	68		pla				pla
.b2a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b2a7					FloatPrepare:
.b2a7	20 ea 9f	jsr $9fea			jsr 	DereferenceTopTwo 			; dereference the top two values
.b2aa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b2ad	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b2b0	29 10		and #$10			and 	#NSBIsString
.b2b2	d0 01		bne $b2b5			bne 	_FDType
.b2b4	60		rts				rts
.b2b5					_FDType:
.b2b5	4c 3f b5	jmp $b53f			jmp 	TypeError
.b2b8					NSNormalise:
.b2b8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b2bb	29 80		and #$80			and 	#$80
.b2bd	09 08		ora #$08			ora 	#NSTFloat
.b2bf	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b2c2	20 34 a7	jsr $a734			jsr 	NSMIsZero 					; if zero exit
.b2c5	d0 09		bne $b2d0			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b2c7	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b2ca	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b2cd	a9 00		lda #$00			lda 	#0 							; set Z flag
.b2cf	60		rts				rts
.b2d0					_NSNormaliseOptimise:
.b2d0	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b2d3	d0 22		bne $b2f7			bne 	_NSNormaliseLoop
.b2d5	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b2d8	30 1d		bmi $b2f7			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b2da	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b2dd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b2e0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b2e3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b2e6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b2e9	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b2ec	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b2ef	38		sec				sec
.b2f0	e9 08		sbc #$08			sbc 	#8
.b2f2	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b2f5	80 d9		bra $b2d0			bra 	_NSNormaliseOptimise
.b2f7					_NSNormaliseLoop:
.b2f7	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b2fa	70 08		bvs $b304			bvs 	_NSNExit 					; exit if so with Z flag clear
.b2fc	20 19 a7	jsr $a719			jsr 	NSMShiftLeft 				; shift mantissa left
.b2ff	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b302	80 f3		bra $b2f7			bra 	_NSNormaliseLoop
.b304					_NSNExit:
.b304	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b306	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9f17					AssignNumber:
.9f17	5a		phy				phy
.9f18	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9f1b	85 36		sta $36				sta 	zTemp0
.9f1d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f20	85 37		sta $37				sta 	zTemp0+1
.9f22	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9f25	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9f27	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f2a	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9f2c	c9 08		cmp #$08			cmp 	#NSTFloat
.9f2e	f0 2a		beq $9f5a			beq 	_ANFloat
.9f30	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9f33	f0 05		beq $9f3a			beq		_ANNotFloat
.9f35	e8		inx				inx
.9f36	20 57 b2	jsr $b257			jsr 	FloatIntegerPart 			; make it an integer
.9f39	ca		dex				dex
.9f3a					_ANNotFloat:
.9f3a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9f3d	29 03		and #$03			and 	#3
.9f3f	d0 05		bne $9f46			bne 	_ANByteWord
.9f41	20 66 9f	jsr $9f66			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9f44	80 1e		bra $9f64			bra 	_ANExit
.9f46					_ANByteWord:
.9f46	48		pha				pha 								; save count
.9f47	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9f4a	92 36		sta ($36)			sta 	(zTemp0)
.9f4c	68		pla				pla
.9f4d	c9 01		cmp #$01			cmp	 	#1
.9f4f	f0 13		beq $9f64			beq 	_ANExit
.9f51	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9f54	a0 01		ldy #$01			ldy 	#1
.9f56	91 36		sta ($36),y			sta 	(zTemp0),y
.9f58	80 0a		bra $9f64			bra 	_ANExit
.9f5a					_ANFloat:
.9f5a	20 66 9f	jsr $9f66			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9f5d	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9f60	a0 04		ldy #$04			ldy 	#4
.9f62	91 36		sta ($36),y			sta 	(zTemp0),y
.9f64					_ANExit:
.9f64	7a		ply				ply
.9f65	60		rts				rts
.9f66					_ANCopy4PackSign:
.9f66	a0 03		ldy #$03			ldy 	#3
.9f68	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9f6b	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9f6d	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9f70	91 36		sta ($36),y			sta 	(zTemp0),y
.9f72	88		dey				dey
.9f73	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9f76	91 36		sta ($36),y			sta 	(zTemp0),y
.9f78	88		dey				dey
.9f79	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9f7c	91 36		sta ($36),y			sta 	(zTemp0),y
.9f7e	88		dey				dey
.9f7f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9f82	91 36		sta ($36),y			sta 	(zTemp0),y
.9f84	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9f85					AssignString:
.9f85	5a		phy				phy
.9f86	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9f89	85 38		sta $38				sta 	zTemp1
.9f8b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9f8e	85 39		sta $39				sta 	zTemp1+1
.9f90	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9f93	85 36		sta $36				sta 	zTemp0
.9f95	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f98	85 37		sta $37				sta 	zTemp0+1
.9f9a	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9f9c	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f9e	f0 23		beq $9fc3			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9fa0	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9fa1	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9fa3	e9 02		sbc #$02			sbc 	#2
.9fa5	85 3c		sta $3c				sta 	zsTemp
.9fa7	a0 01		ldy #$01			ldy 	#1
.9fa9	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fab	e9 00		sbc #$00			sbc 	#0
.9fad	85 3d		sta $3d				sta 	zsTemp+1
.9faf	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9fb1					_ASGetLength:
.9fb1	c8		iny				iny
.9fb2	b1 38		lda ($38),y			lda 	(zTemp1),y
.9fb4	d0 fb		bne $9fb1			bne 	_ASGetLength
.9fb6	98		tya				tya 								; is this length <= current length
.9fb7	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9fb9	90 20		bcc $9fdb			bcc 	_ASCopyString
.9fbb	f0 1e		beq $9fdb			beq 	_ASCopyString
.9fbd	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9fbf	a0 01		ldy #$01			ldy 	#1
.9fc1	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9fc3					_ASNewStringRequired:
.9fc3	e8		inx				inx 								; concrete the new string.
.9fc4	20 35 b8	jsr $b835			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9fc7	ca		dex				dex
.9fc8	18		clc				clc
.9fc9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9fcc	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9fce	92 36		sta ($36)			sta 	(zTemp0)
.9fd0	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9fd3	69 00		adc #$00			adc 	#0
.9fd5	a0 01		ldy #$01			ldy 	#1
.9fd7	91 36		sta ($36),y			sta 	(zTemp0),y
.9fd9	80 0d		bra $9fe8			bra 	_ASExit
.9fdb					_ASCopyString:
.9fdb	a0 00		ldy #$00			ldy 	#0
.9fdd					_ASCopyLoop:
.9fdd	b1 38		lda ($38),y			lda 	(zTemp1),y
.9fdf	c8		iny				iny
.9fe0	c8		iny				iny
.9fe1	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9fe3	88		dey				dey
.9fe4	c9 00		cmp #$00			cmp 	#0
.9fe6	d0 f5		bne $9fdd			bne 	_ASCopyLoop
.9fe8					_ASExit:
.9fe8	7a		ply				ply
.9fe9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9fea					DereferenceTopTwo:
.9fea	e8		inx				inx
.9feb	20 ef 9f	jsr $9fef			jsr 	Dereference 				; deref x+1
.9fee	ca		dex				dex  								; falls through to deref x
.9fef					Dereference:
.9fef	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9ff2	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9ff4	f0 57		beq $a04d			beq 	_DRFExit 					; not a reference
.9ff6	5a		phy				phy
.9ff7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9ffa	85 36		sta $36				sta 	zTemp0
.9ffc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9fff	85 37		sta $37				sta 	zTemp0+1
.a001	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.a004	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.a006	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a009	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.a00c	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.a00e	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.a010	f0 0f		beq $a021			beq 	_DRFDereferenceTwo
.a012	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.a014	f0 39		beq $a04f			beq 	_DRFFull
.a016	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.a019	29 03		and #$03			and 	#3
.a01b	f0 32		beq $a04f			beq 	_DRFFull 					; the whole word
.a01d	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.a01f	f0 07		beq $a028			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.a021					_DRFDereferenceTwo:
.a021	a0 01		ldy #$01			ldy 	#1
.a023	b1 36		lda ($36),y			lda 	(zTemp0),y
.a025	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a028					_DRFClear23:
.a028	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.a02b	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a02e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.a031	29 18		and #$18			and 	#NSBTypeMask
.a033	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a036	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.a038	d0 12		bne $a04c			bne 	_DRFNotString
.a03a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.a03d	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a040	d0 0a		bne $a04c			bne 	_DRFNotString
.a042	a9 4e		lda #$4e			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.a044	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.a047	a9 a0		lda #$a0			lda 	#_DRFNullString >> 8
.a049	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.a04c					_DRFNotString
.a04c	7a		ply				ply 								; restore Y and exit
.a04d					_DRFExit:
.a04d	60		rts				rts
.a04e					_DRFNullString:
>a04e	00						.byte 	0
.a04f					_DRFFull:
.a04f	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.a051	b1 36		lda ($36),y			lda 	(zTemp0),y
.a053	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a056	c8		iny				iny
.a057	b1 36		lda ($36),y			lda 	(zTemp0),y
.a059	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a05c	c8		iny				iny
.a05d	b1 36		lda ($36),y			lda 	(zTemp0),y
.a05f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a062	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.a065	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.a068	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.a06a	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.a06d	f0 06		beq $a075			beq 	_DRFNoExponent
.a06f	c8		iny				iny 								; if not, read the exponent as well.
.a070	b1 36		lda ($36),y			lda 	(zTemp0),y
.a072	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a075					_DRFNoExponent:
.a075	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.a078	10 0d		bpl $a087			bpl 	_DRFExit2 					; if not, then exit.
.a07a	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.a07c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a07f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.a082	09 80		ora #$80			ora 	#NSBIsNegative
.a084	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a087					_DRFExit2:
.a087	7a		ply				ply
.a088	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.a089					EncodeNumberStart:
.a089	38		sec				sec
.a08a	80 01		bra $a08d			bra 	EncodeNumberContinue+1
.a08c					EncodeNumberContinue:
.a08c	18		clc				clc
.a08d					EncodeNumber:
.a08d	08		php				php 								; save reset.
.a08e	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.a090	f0 12		beq $a0a4			beq 	_ENIsOkay
.a092	c9 30		cmp #$30			cmp 	#"0"
.a094	90 04		bcc $a09a			bcc 	_ENBadNumber
.a096	c9 3a		cmp #$3a			cmp 	#"9"+1
.a098	90 0a		bcc $a0a4			bcc 	_ENIsOkay
.a09a					_ENBadNumber:
.a09a	28		plp				plp 								; throw saved reset
.a09b	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.a09e	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a0a0	f0 7e		beq $a120			beq 	_ENConstructFinal
.a0a2					_ENFail:
.a0a2	18		clc				clc 								; not allowed
.a0a3	60		rts				rts
.a0a4					_ENIsOkay:
.a0a4	28		plp				plp 								; are we restarting
.a0a5	90 15		bcc $a0bc			bcc 	_ENNoRestart
.a0a7					_ENStartEncode:
.a0a7	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.a0a9	f0 0c		beq $a0b7			beq 	_ENFirstDP
.a0ab	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.a0ad	20 06 a7	jsr $a706			jsr 	NSMSetByte
.a0b0	a9 01		lda #$01			lda 	#ESTA_Low
.a0b2					_ENExitChange:
.a0b2	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.a0b5	38		sec				sec
.a0b6	60		rts				rts
.a0b7					_ENFirstDP:
.a0b7	20 04 a7	jsr $a704			jsr 	NSMSetZero 					; clear integer part
.a0ba	80 3f		bra $a0fb			bra 	_ESTASwitchFloat			; go straight to float and exi
.a0bc					_ENNoRestart:
.a0bc	48		pha				pha 								; save on stack.
.a0bd	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.a0c0	c9 01		cmp #$01			cmp 	#ESTA_Low
.a0c2	f0 09		beq $a0cd			beq  	_ESTALowState
.a0c4	c9 02		cmp #$02			cmp 	#ESTA_High
.a0c6	f0 29		beq $a0f1			beq 	_ESTAHighState
.a0c8	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a0ca	f0 3b		beq $a107			beq 	_ESTADecimalState
>a0cc	db						.byte 	$DB 						; causes a break in the emulator
.a0cd					_ESTALowState:
.a0cd	68		pla				pla 								; get value back
.a0ce	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.a0d0	f0 29		beq $a0fb			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.a0d2	29 0f		and #$0f			and 	#15 						; make digit
.a0d4	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.a0d7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.a0da	0a		asl a				asl 	a
.a0db	0a		asl a				asl 	a
.a0dc	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a0df	0a		asl a				asl 	a
.a0e0	6d 86 04	adc $0486			adc 	DigitTemp
.a0e3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0e6	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.a0e8	90 05		bcc $a0ef			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.a0ea	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.a0ec	8d 85 04	sta $0485			sta 	EncodeState
.a0ef					_ESTANoSwitch:
.a0ef	38		sec				sec
.a0f0	60		rts				rts
.a0f1					_ESTAHighState:
.a0f1	68		pla				pla 								; get value back
.a0f2	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.a0f4	f0 05		beq $a0fb			beq 	_ESTASwitchFloat
.a0f6	20 5a a1	jsr $a15a			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.a0f9	38		sec				sec
.a0fa	60		rts				rts
.a0fb					_ESTASwitchFloat:
.a0fb	9c 87 04	stz $0487			stz 	DecimalCount
.a0fe	e8		inx				inx 								; zero the decimal additive.
.a0ff	20 04 a7	jsr $a704			jsr 	NSMSetZero
.a102	ca		dex				dex
.a103	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.a105	80 ab		bra $a0b2			bra 	_ENExitChange
.a107					_ESTADecimalState:
.a107	68		pla				pla 								; digit.
.a108	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.a10a	f0 96		beq $a0a2			beq 	_ENFail
.a10c	e8		inx				inx 								; put digit into fractional part of X+1
.a10d	20 5a a1	jsr $a15a			jsr 	ESTAShiftDigitIntoMantissa
.a110	ca		dex				dex
.a111	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.a114	ad 87 04	lda $0487			lda 	DecimalCount
.a117	c9 0b		cmp #$0b			cmp 	#11
.a119	f0 02		beq $a11d			beq 	_ESTADSFail
.a11b	38		sec				sec
.a11c	60		rts				rts
.a11d					_ESTADSFail:
.a11d	4c 3a b5	jmp $b53a			jmp 	RangeError
.a120					_ENConstructFinal:
.a120	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.a123	f0 33		beq $a158			beq 	_ENCFExit 					; no decimals
.a125	5a		phy				phy
.a126	0a		asl a				asl 	a 							; x 4 and CLC
.a127	0a		asl a				asl 	a
.a128	6d 87 04	adc $0487			adc 	DecimalCount
.a12b	a8		tay				tay
.a12c	b9 f9 b4	lda $b4f9,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.a12f	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a132	b9 fa b4	lda $b4fa,y			lda 	DecimalScalarTable-5+1,y
.a135	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a138	b9 fb b4	lda $b4fb,y			lda 	DecimalScalarTable-5+2,y
.a13b	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a13e	b9 fc b4	lda $b4fc,y			lda 	DecimalScalarTable-5+3,y
.a141	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a144	b9 fd b4	lda $b4fd,y			lda 	DecimalScalarTable-5+4,y
.a147	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a14a	a9 08		lda #$08			lda 	#NSTFloat
.a14c	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a14f	7a		ply				ply
.a150	e8		inx				inx 								; multiply decimal const by decimal scalar
.a151	20 81 b2	jsr $b281			jsr 	FloatMultiply
.a154	ca		dex				dex
.a155	20 0e b1	jsr $b10e			jsr 	FloatAdd 					; add to integer part.
.a158					_ENCFExit:
.a158	18		clc				clc 								; reject the digit.
.a159	60		rts				rts
.a15a					ESTAShiftDigitIntoMantissa:
.a15a	29 0f		and #$0f			and 	#15 						; save digit
.a15c	48		pha				pha
.a15d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a160	48		pha				pha
.a161	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a164	48		pha				pha
.a165	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a168	48		pha				pha
.a169	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a16c	48		pha				pha
.a16d	20 19 a7	jsr $a719			jsr 	NSMShiftLeft 				; x 2
.a170	20 19 a7	jsr $a719			jsr 	NSMShiftLeft 				; x 4
.a173	18		clc				clc 								; pop mantissa and add
.a174	68		pla				pla
.a175	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a178	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a17b	68		pla				pla
.a17c	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.a17f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a182	68		pla				pla
.a183	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.a186	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a189	68		pla				pla
.a18a	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.a18d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.a190	20 19 a7	jsr $a719			jsr 	NSMShiftLeft 				; x 10
.a193	68		pla				pla 								; add digit
.a194	18		clc				clc
.a195	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a198	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a19b	90 0d		bcc $a1aa			bcc 	_ESTASDExit
.a19d	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.a1a0	d0 08		bne $a1aa			bne 	_ESTASDExit
.a1a2	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.a1a5	d0 03		bne $a1aa			bne 	_ESTASDExit
.a1a7	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.a1aa					_ESTASDExit:
.a1aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a1ab					EvaluateTerm:
.a1ab	b1 30		lda ($30),y			lda 	(codePtr),y
.a1ad	30 18		bmi $a1c7			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a1af	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a1b1	b0 6f		bcs $a222			bcs 	_ETVariable
.a1b3	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a1b5	90 6e		bcc $a225			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a1b7	c9 3a		cmp #$3a			cmp 	#'9'+1
.a1b9	b0 6a		bcs $a225			bcs 	_ETPuncUnary
.a1bb	20 89 a0	jsr $a089			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a1be					_ETNumber:
.a1be	c8		iny				iny 								; keep encoding until we have the numbers
.a1bf	b1 30		lda ($30),y			lda 	(codePtr),y
.a1c1	20 8c a0	jsr $a08c			jsr 	EncodeNumberContinue
.a1c4	b0 f8		bcs $a1be			bcs 	_ETNumber 					; go back if accepted.
.a1c6	60		rts				rts
.a1c7					_ETCheckUnary:
.a1c7	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a1c9	f0 41		beq $a20c			beq 	_ETString
.a1cb	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a1cd	f0 12		beq $a1e1			beq 	_ETHexConstant
.a1cf	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a1d1	90 0b		bcc $a1de			bcc 	_ETSyntaxError
.a1d3	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.a1d5	b0 07		bcs $a1de			bcs 	_ETSyntaxError
.a1d7	da		phx				phx 								; push X on the stack
.a1d8	0a		asl a				asl 	a 							; put vector x 2 into X
.a1d9	aa		tax				tax
.a1da	c8		iny				iny 								; consume unary function token
.a1db	7c ce 96	jmp ($96ce,x)			jmp 	(VectorSet0,x) 				; and do it.
.a1de					_ETSyntaxError:
.a1de	4c 35 b5	jmp $b535			jmp 	SyntaxError
.a1e1					_ETHexConstant:
.a1e1	c8		iny				iny 								; skip #
.a1e2	c8		iny				iny 								; skip count
.a1e3	20 04 a7	jsr $a704			jsr 	NSMSetZero 					; clear result
.a1e6					_ETHLoop:
.a1e6	b1 30		lda ($30),y			lda 	(codePtr),y
.a1e8	c8		iny				iny 								; and consume
.a1e9	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a1eb	f0 1e		beq $a20b			beq 	_ETHExit
.a1ed	48		pha				pha 								; save on stack.
.a1ee	20 19 a7	jsr $a719			jsr 	NSMShiftLeft 				; x 2
.a1f1	20 19 a7	jsr $a719			jsr 	NSMShiftLeft 				; x 4
.a1f4	20 19 a7	jsr $a719			jsr 	NSMShiftLeft 				; x 8
.a1f7	20 19 a7	jsr $a719			jsr 	NSMShiftLeft 				; x 16
.a1fa	68		pla				pla 								; ASCII
.a1fb	c9 41		cmp #$41			cmp 	#'A'
.a1fd	90 02		bcc $a201			bcc 	_ETHNotChar
.a1ff	e9 07		sbc #$07			sbc 	#7
.a201					_ETHNotChar:
.a201	29 0f		and #$0f			and 	#15 						; digit now
.a203	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a206	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a209	80 db		bra $a1e6			bra 	_ETHLoop 					; go round.
.a20b					_ETHExit:
.a20b	60		rts				rts
.a20c					_ETString:
.a20c	c8		iny				iny 								; look at length
.a20d	b1 30		lda ($30),y			lda 	(codePtr),y
.a20f	48		pha				pha
.a210	c8		iny				iny 								; first character
.a211	20 4e a7	jsr $a74e			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a214	68		pla				pla 								; restore count and save
.a215	85 36		sta $36				sta 	zTemp0
.a217	98		tya				tya 								; add length to Y to skip it.
.a218	18		clc				clc
.a219	65 36		adc $36				adc 	zTemp0
.a21b	a8		tay				tay
.a21c	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a21e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a221	60		rts				rts
.a222					_ETVariable:
.a222	4c 7c a2	jmp $a27c			jmp 	VariableHandler
.a225					_ETPuncUnary:
.a225	c8		iny				iny 								; consume the unary character
.a226	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a228	f0 2d		beq $a257			beq 	_ETUnaryNegate
.a22a	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a22c	f0 39		beq $a267			beq 	_ETDereference
.a22e	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a230	f0 43		beq $a275			beq 	_ETParenthesis
.a232	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a234	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a236	f0 06		beq $a23e			beq 	_ETIndirection
.a238	e6 36		inc $36				inc 	zTemp0
.a23a	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a23c	d0 a0		bne $a1de			bne 	_ETSyntaxError
.a23e					_ETIndirection:
.a23e	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a240	1a		inc a				inc 	a
.a241	48		pha				pha
.a242	20 ab a1	jsr $a1ab			jsr 	EvaluateTerm				; evaluate the term
.a245	20 ef 9f	jsr $9fef			jsr 	Dereference 				; dereference it.
.a248	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a24b	d0 07		bne $a254			bne 	_ETTypeMismatch
.a24d	68		pla				pla 								; indirection 1-2
.a24e	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a250	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a253	60		rts				rts
.a254					_ETTypeMismatch:
.a254	4c 3f b5	jmp $b53f			jmp 	TypeError
.a257					_ETUnaryNegate:
.a257	20 ab a1	jsr $a1ab			jsr 	EvaluateTerm				; evaluate the term
.a25a	20 ef 9f	jsr $9fef			jsr 	Dereference 				; dereference it.
.a25d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a260	29 10		and #$10			and 	#NSTString
.a262	d0 f0		bne $a254			bne 	_ETTypeMismatch
.a264	4c b0 a6	jmp $a6b0			jmp 	NSMNegate  					; just toggles the sign bit.
.a267					_ETDereference:
.a267	20 ab a1	jsr $a1ab			jsr 	EvaluateTerm				; evaluate the term
.a26a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a26d	29 20		and #$20			and 	#NSBIsReference
.a26f	f0 e3		beq $a254			beq 	_ETTypeMismatch
.a271	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a274	60		rts				rts
.a275					_ETParenthesis:
.a275	20 da 9e	jsr $9eda			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a278	20 47 af	jsr $af47			jsr 	CheckRightBracket 			; check for )
.a27b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a27c					VariableHandler:
.a27c	b1 30		lda ($30),y			lda 	(codePtr),y
.a27e	18		clc				clc
.a27f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a281	85 37		sta $37				sta 	zTemp0+1
.a283	c8		iny				iny
.a284	b1 30		lda ($30),y			lda 	(codePtr),y
.a286	85 36		sta $36				sta 	zTemp0
.a288	c8		iny				iny
.a289	18		clc				clc									; copy variable address+3 to mantissa
.a28a	69 03		adc #$03			adc 	#3
.a28c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a28f	a5 37		lda $37				lda 	zTemp0+1
.a291	69 00		adc #$00			adc 	#0
.a293	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a296	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a299	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a29c	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a29f	5a		phy				phy
.a2a0	a0 02		ldy #$02			ldy 	#2 							; read type
.a2a2	b1 36		lda ($36),y			lda 	(zTemp0),y
.a2a4	7a		ply				ply
.a2a5	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a2a7	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a2a9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a2ac	29 04		and #$04			and 	#NSBIsArray
.a2ae	d0 01		bne $a2b1			bne 	_VHArray
.a2b0	60		rts				rts
.a2b1					_VHArray:
.a2b1	e8		inx				inx
.a2b2	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a2b5	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a2b7	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a2ba	b1 30		lda ($30),y			lda 	(codePtr),y
.a2bc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a2be	d0 06		bne $a2c6			bne 	_VHNoSecondIndex
.a2c0	c8		iny				iny 								; skip the comma
.a2c1	e8		inx				inx
.a2c2	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a2c5	ca		dex				dex
.a2c6					_VHNoSecondIndex:
.a2c6	ca		dex				dex 								; set X back.
.a2c7	20 47 af	jsr $af47			jsr 	CheckRightBracket 			; and check the right bracket.
.a2ca	5a		phy				phy 								; save position
.a2cb	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a2cd	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2cf	f0 6b		beq $a33c			beq 	_VHBadIndex
.a2d1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a2d4	85 3e		sta $3e				sta 	zaTemp
.a2d6	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a2d9	85 3f		sta $3f				sta 	zaTemp+1
.a2db	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a2dd	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2df	f0 02		beq $a2e3			beq 	_VHHas2Mask
.a2e1	a9 ff		lda #$ff			lda 	#$FF
.a2e3					_VHHas2Mask:
.a2e3	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a2e6	f0 54		beq $a33c			beq 	_VHBadIndex
.a2e8	0a		asl a				asl 	a 							; carry will be set if a second index
.a2e9	90 09		bcc $a2f4			bcc 	_VHCheckFirstIndex
.a2eb	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a2ed	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2ef	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a2f2	90 48		bcc $a33c			bcc 	_VHBadIndex
.a2f4					_VHCheckFirstIndex:
.a2f4	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a2f6	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2f8	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a2fb	90 3f		bcc $a33c			bcc 	_VHBadIndex
.a2fd	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a2ff	64 37		stz $37				stz 	zTemp0+1
.a301	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a304	30 0f		bmi $a315			bmi 	_VHNoMultiply
.a306	da		phx				phx
.a307	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a30a	48		pha				pha
.a30b	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a30d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a30f	1a		inc a				inc 	a 							; add 1 for zero base
.a310	fa		plx				plx
.a311	20 d1 b3	jsr $b3d1			jsr 	Multiply8x8 				; calculate -> Z0
.a314	fa		plx				plx
.a315					_VHNoMultiply:
.a315	18		clc				clc
.a316	a5 36		lda $36				lda 	zTemp0
.a318	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a31b	85 36		sta $36				sta 	zTemp0
.a31d	a5 37		lda $37				lda 	zTemp0+1
.a31f	69 00		adc #$00			adc 	#0
.a321	85 37		sta $37				sta 	zTemp0+1
.a323	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a326	20 c0 8d	jsr $8dc0			jsr 	ScaleByBaseType
.a329	18		clc				clc
.a32a	b2 3e		lda ($3e)			lda 	(zaTemp)
.a32c	65 36		adc $36				adc 	zTemp0
.a32e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a331	a0 01		ldy #$01			ldy 	#1
.a333	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a335	65 37		adc $37				adc 	zTemp0+1
.a337	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a33a	7a		ply				ply 								; restore position
.a33b	60		rts				rts
.a33c					_VHBadIndex:
.a33c	a9 17		lda #$17		lda	#23
.a33e	4c c9 9a	jmp $9ac9		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b307					AbsUnary:
.b307	fa		plx				plx 								; restore stack pos
.b308	20 44 a6	jsr $a644			jsr 	EvaluateNumber 				; get a float or int
.b30b	20 47 af	jsr $af47			jsr 	CheckRightBracket
.b30e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b311	29 7f		and #$7f			and 	#$7F
.b313	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b316	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a341					AllocUnary:
.a341	fa		plx				plx 								; restore stack pos
.a342	20 7c a6	jsr $a67c			jsr 	Evaluate16BitInteger		; get bytes required.
.a345	20 47 af	jsr $af47			jsr 	CheckRightBracket
.a348	da		phx				phx 								; save X/Y
.a349	5a		phy				phy
.a34a	8a		txa				txa 								; copy X into Y
.a34b	a8		tay				tay
.a34c	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a34f	aa		tax				tax
.a350	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a353	20 60 a3	jsr $a360			jsr 	AllocateXABytes 			; allocate memory
.a356	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a359	8a		txa				txa
.a35a	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a35d	7a		ply				ply
.a35e	fa		plx				plx
.a35f	60		rts				rts
.a360					AllocateXABytes:
.a360	5a		phy				phy
.a361	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a364	84 36		sty $36				sty 	zTemp0
.a366	5a		phy				phy
.a367	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a36a	84 37		sty $37				sty 	zTemp0+1
.a36c	5a		phy				phy
.a36d	18		clc				clc 								; add to low memory pointer
.a36e	6d 8c 04	adc $048c			adc 	lowMemPtr
.a371	8d 8c 04	sta $048c			sta 	lowMemPtr
.a374	8a		txa				txa
.a375	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a378	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a37b	b0 2f		bcs $a3ac			bcs 	CISSMemory
.a37d	20 9e a3	jsr $a39e			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a380					_ClearMemory:
.a380	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a383	c5 36		cmp $36				cmp 	zTemp0
.a385	d0 07		bne $a38e			bne 	_CMClearNext
.a387	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a38a	c5 37		cmp $37				cmp 	zTemp0+1
.a38c	f0 0c		beq $a39a			beq 	_CMExit
.a38e					_CMClearNext:
.a38e	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a390	92 36		sta ($36)			sta 	(zTemp0)
.a392	e6 36		inc $36				inc 	zTemp0
.a394	d0 ea		bne $a380			bne 	_ClearMemory
.a396	e6 37		inc $37				inc		zTemp0+1
.a398	80 e6		bra $a380			bra 	_ClearMemory
.a39a					_CMExit:
.a39a	fa		plx				plx
.a39b	68		pla				pla
.a39c	7a		ply				ply
.a39d	60		rts				rts
.a39e					CheckIdentifierStringSpace:
.a39e	48		pha				pha
.a39f	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a3a2	18		clc				clc
.a3a3	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a3a5	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a3a8	b0 02		bcs $a3ac			bcs 	CISSMemory
.a3aa	68		pla				pla
.a3ab	60		rts				rts
.a3ac					CISSMemory:
.a3ac	a9 06		lda #$06		lda	#6
.a3ae	4c c9 9a	jmp $9ac9		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b317					AscUnary:
.b317	fa		plx				plx 								; restore stack pos
.b318	20 4f a6	jsr $a64f			jsr 	EvaluateString 				; get a string
.b31b	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b31d	20 06 a7	jsr $a706			jsr 	NSMSetByte
.b320	20 47 af	jsr $af47			jsr 	CheckRightBracket
.b323	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b324					FracUnary:
.b324	fa		plx				plx 								; restore stack pos
.b325	20 44 a6	jsr $a644			jsr 	EvaluateNumber 				; get a float or int
.b328	20 47 af	jsr $af47			jsr 	CheckRightBracket
.b32b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b32e	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b330	f0 04		beq $b336			beq 	_IUZero
.b332	20 f4 b1	jsr $b1f4			jsr 	FloatFractionalPart
.b335	60		rts				rts
.b336					_IUZero:
.b336	20 04 a7	jsr $a704			jsr 	NSMSetZero
.b339	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b33a					IntUnary:
.b33a	fa		plx				plx 								; restore stack pos
.b33b	20 44 a6	jsr $a644			jsr 	EvaluateNumber 				; get a float or int
.b33e	20 47 af	jsr $af47			jsr 	CheckRightBracket
.b341	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b344	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b346	f0 03		beq $b34b			beq 	_IUExit
.b348	20 57 b2	jsr $b257			jsr 	FloatIntegerPart
.b34b					_IUExit:
.b34b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b34c					LenUnary:
.b34c	fa		plx				plx 								; restore stack pos
.b34d	20 4f a6	jsr $a64f			jsr 	EvaluateString 				; get a string
.b350	5a		phy				phy
.b351	a0 00		ldy #$00			ldy 	#0 							; find length
.b353					_LenFind:
.b353	b1 36		lda ($36),y			lda 	(zTemp0),y
.b355	f0 06		beq $b35d			beq 	_LenExit
.b357	c8		iny				iny
.b358	d0 f9		bne $b353			bne 	_LenFind
.b35a	4c 3a b5	jmp $b53a			jmp 	RangeError 					; string > 255
.b35d					_LenExit:
.b35d	98		tya				tya
.b35e	20 06 a7	jsr $a706			jsr 	NSMSetByte
.b361	7a		ply				ply
.b362	20 47 af	jsr $af47			jsr 	CheckRightBracket
.b365	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a3b1					Unary_Min:
.a3b1	a9 01		lda #$01			lda 	#1
.a3b3	80 02		bra $a3b7			bra 	UnaryMinMaxMain
.a3b5					Unary_Max:
.a3b5	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a3b7					UnaryMinMaxMain:
.a3b7	fa		plx				plx 								; get index on number stack
.a3b8	48		pha				pha 								; save comparator
.a3b9	20 3b a6	jsr $a63b			jsr 	EvaluateValue 				; get the first value.
.a3bc					_UMMMLoop:
.a3bc	b1 30		lda ($30),y			lda 	(codePtr),y
.a3be	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a3c0	f0 22		beq $a3e4			beq 	_UMMMDone
.a3c2	20 4f af	jsr $af4f			jsr 	CheckComma 					; must be a comma
.a3c5	e8		inx				inx
.a3c6	20 3b a6	jsr $a63b			jsr 	EvaluateValue
.a3c9	ca		dex				dex
.a3ca	20 db a6	jsr $a6db			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a3cd	e8		inx				inx
.a3ce	20 db a6	jsr $a6db			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a3d1	e8		inx				inx
.a3d2	20 81 9b	jsr $9b81			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a3d5	ca		dex				dex
.a3d6	ca		dex				dex
.a3d7	85 36		sta $36				sta 	zTemp0 						; save required result
.a3d9	68		pla				pla 								; get and save comparator
.a3da	48		pha				pha
.a3db	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a3dd	d0 dd		bne $a3bc			bne 	_UMMMLoop
.a3df	20 e7 a3	jsr $a3e7			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a3e2	80 d8		bra $a3bc			bra 	_UMMMLoop
.a3e4					_UMMMDone:
.a3e4	68		pla				pla 								; throw the comparator
.a3e5	c8		iny				iny 								; skip )
.a3e6	60		rts				rts
.a3e7					ExpCopyAboveDown:
.a3e7	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a3ea	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a3ed	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a3f0	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a3f3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a3f6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a3f9	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a3fc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a3ff	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a402	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a405	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a408	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a40b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a40c					Unary_Not:
.a40c	fa		plx				plx
.a40d	20 67 a6	jsr $a667			jsr 	EvaluateInteger 			; get integer
.a410	20 47 af	jsr $af47			jsr 	CheckRightBracket
.a413	20 34 a7	jsr $a734			jsr 	NSMIsZero 					; zero mantissa ?
.a416	f0 04		beq $a41c			beq 	_NotZero
.a418	20 04 a7	jsr $a704			jsr 	NSMSetZero
.a41b	60		rts				rts
.a41c					_NotZero:
.a41c	4c 36 9b	jmp $9b36			jmp 	ReturnTrue
.a41f					_UNBad:
.a41f	4c 44 b5	jmp $b544			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a422					Unary_Random:
.a422	fa		plx				plx
.a423	20 a1 a4	jsr $a4a1			jsr 	Random32Bit 				; get a random number
.a426	20 86 a4	jsr $a486			jsr 	URCopyToMantissa  			; put in mantissa
.a429	b1 30		lda ($30),y			lda 	(codePtr),y
.a42b	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a42d	f0 08		beq $a437			beq 	_URNoModulus
.a42f	e8		inx				inx
.a430	20 7c a6	jsr $a67c			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a433	ca		dex				dex
.a434	20 cb af	jsr $afcb			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a437					_URNoModulus:
.a437	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a43a	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a43d	20 47 af	jsr $af47			jsr 	CheckRightBracket
.a440	60		rts				rts
.a441					Unary_Rnd:
.a441	fa		plx				plx
.a442	20 44 a6	jsr $a644			jsr 	EvaluateNumber 				; number to use.
.a445	20 47 af	jsr $af47			jsr 	CheckRightBracket 			; closing bracket
.a448	20 34 a7	jsr $a734			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a44b	f0 2b		beq $a478			beq 	_URCopySeed
.a44d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a450	10 23		bpl $a475			bpl 	_URDontSeed
.a452	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a455	49 17		eor #$17			eor 	#$17
.a457	8d 88 04	sta $0488			sta 	RandomSeed+0
.a45a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a45d	49 a5		eor #$a5			eor 	#$A5
.a45f	8d 89 04	sta $0489			sta 	RandomSeed+1
.a462	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a465	49 c2		eor #$c2			eor 	#$C2
.a467	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a46a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a46d	49 9d		eor #$9d			eor 	#$9D
.a46f	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a472	20 a1 a4	jsr $a4a1			jsr 	Random32Bit
.a475					_URDontSeed:
.a475	20 a1 a4	jsr $a4a1			jsr 	Random32Bit 				; generate a number.
.a478					_URCopySeed:
.a478	20 86 a4	jsr $a486			jsr 	URCopyToMantissa 			; copy into mantissa
.a47b	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a47d	8d 28 04	sta $0428			sta 	NSExponent
.a480	a9 08		lda #$08			lda 	#NSTFloat
.a482	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a485	60		rts				rts
.a486					URCopyToMantissa:
.a486	ad 88 04	lda $0488			lda 	RandomSeed+0
.a489	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a48c	ad 89 04	lda $0489			lda 	RandomSeed+1
.a48f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a492	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a495	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a498	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a49b	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a49d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a4a0	60		rts				rts
.a4a1					Random32Bit:
.a4a1	5a		phy				phy
.a4a2	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a4a4	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a4a7	d0 03		bne $a4ac			bne 	_Random1
.a4a9	a8		tay				tay 								; if so do it 256 times
.a4aa	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a4ac					_Random1:
.a4ac	0a		asl a				asl 	a 							; LSFR RNG
.a4ad	2e 89 04	rol $0489			rol 	RandomSeed+1
.a4b0	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a4b3	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a4b6	90 02		bcc $a4ba			bcc 	_Random2
.a4b8	49 c5		eor #$c5			eor 	#$C5
.a4ba					_Random2:
.a4ba	88		dey				dey
.a4bb	d0 ef		bne $a4ac			bne 	_Random1
.a4bd	8d 88 04	sta $0488			sta 	RandomSeed+0
.a4c0	7a		ply				ply
.a4c1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b366					SgnUnary:
.b366	fa		plx				plx 								; restore stack pos
.b367	20 44 a6	jsr $a644			jsr 	EvaluateNumber 				; get a float or int
.b36a	20 47 af	jsr $af47			jsr 	CheckRightBracket
.b36d	20 34 a7	jsr $a734			jsr 	NSMIsZero 					; if zero
.b370	f0 10		beq $b382			beq 	_SGZero  					; return Int Zero
.b372	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b375	48		pha				pha
.b376	a9 01		lda #$01			lda 	#1 							; set to 1
.b378	20 06 a7	jsr $a706			jsr 	NSMSetByte
.b37b	68		pla				pla
.b37c	29 80		and #$80			and		#$80 						; copy the sign byte out
.b37e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b381	60		rts				rts
.b382	20 04 a7	jsr $a704	_SGZero:jsr 	NSMSetZero
.b385	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b386					ValUnary:
.b386	fa		plx				plx 								; restore stack pos
.b387	20 9c b3	jsr $b39c			jsr 	ValMainCode 				; do the main val() code
.b38a	b0 01		bcs $b38d			bcs 	_VUError 					; couldn't convert
.b38c	60		rts				rts
.b38d					_VUError:
.b38d	4c 3f b5	jmp $b53f			jmp 	TypeError
.b390					IsValUnary:
.b390	fa		plx				plx 								; restore stack pos
.b391	20 9c b3	jsr $b39c			jsr 	ValMainCode 				; do the main val() code
.b394	b0 03		bcs $b399			bcs 	_VUBad
.b396	4c 36 9b	jmp $9b36			jmp 	ReturnTrue
.b399					_VUBad:
.b399	4c 42 9b	jmp $9b42			jmp 	ReturnFalse
.b39c					ValMainCode:
.b39c	20 4f a6	jsr $a64f			jsr 	EvaluateString 				; get a string
.b39f	20 47 af	jsr $af47			jsr 	CheckRightBracket 			; check right bracket present
.b3a2	5a		phy				phy
.b3a3	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b3a5	f0 17		beq $b3be			beq 	_VMCFail2
.b3a7	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b3a9	48		pha				pha 								; save first character
.b3aa	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b3ac	d0 01		bne $b3af			bne 	_VMCStart
.b3ae	c8		iny				iny 								; skip over -
.b3af					_VMCStart:
.b3af	38		sec				sec 								; initialise first time round.
.b3b0					_VMCNext:
.b3b0	c8		iny				iny 								; pre-increment
.b3b1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b3b3	f0 0c		beq $b3c1			beq 	_VMCSuccess 				; successful.
.b3b5	20 8d a0	jsr $a08d			jsr 	EncodeNumber 				; send it to the number-builder
.b3b8	90 03		bcc $b3bd			bcc 	_VMCFail 					; if failed, give up.
.b3ba	18		clc				clc 								; next time round, countinue
.b3bb	80 f3		bra $b3b0			bra 	_VMCNext
.b3bd					_VMCFail:
.b3bd	68		pla				pla
.b3be					_VMCFail2:
.b3be	7a		ply				ply
.b3bf	38		sec				sec
.b3c0	60		rts				rts
.b3c1					_VMCSuccess:
.b3c1	a9 00		lda #$00			lda 	#0 							; construct final
.b3c3	20 8d a0	jsr $a08d			jsr 	EncodeNumber
.b3c6	68		pla				pla
.b3c7	c9 2d		cmp #$2d			cmp 	#"-"
.b3c9	d0 03		bne $b3ce			bne 	_VMCNotNegative
.b3cb	20 b0 a6	jsr $a6b0			jsr		NSMNegate
.b3ce					_VMCNotNegative:
.b3ce	7a		ply				ply
.b3cf	18		clc				clc
.b3d0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a4c2					ChrUnary:
.a4c2	fa		plx				plx 								; restore stack pos
.a4c3	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger			; get value
.a4c6	48		pha				pha
.a4c7	20 47 af	jsr $af47			jsr 	CheckRightBracket
.a4ca	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a4cc	20 b6 b8	jsr $b8b6			jsr 	StringTempAllocate
.a4cf	68		pla				pla 								; write number to it
.a4d0	20 f4 b8	jsr $b8f4			jsr 	StringTempWrite
.a4d3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a4d4					SpcUnary:
.a4d4	fa		plx				plx 								; restore stack pos
.a4d5	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger			; get value
.a4d8	5a		phy				phy
.a4d9	48		pha				pha 								; save count
.a4da	20 b6 b8	jsr $b8b6			jsr 	StringTempAllocate
.a4dd	7a		ply				ply 								; to do count in Y
.a4de					_SpcLoop:
.a4de	c0 00		cpy #$00			cpy 	#0
.a4e0	f0 08		beq $a4ea			beq 	_SpcExit
.a4e2	a9 20		lda #$20			lda 	#32
.a4e4	20 f4 b8	jsr $b8f4			jsr 	StringTempWrite
.a4e7	88		dey				dey
.a4e8	80 f4		bra $a4de			bra 	_SPCLoop
.a4ea					_SpcExit:
.a4ea	7a		ply				ply
.a4eb	20 47 af	jsr $af47			jsr 	CheckRightBracket
.a4ee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a4ef					Unary_Str:
.a4ef	fa		plx				plx
.a4f0	20 44 a6	jsr $a644			jsr 	EvaluateNumber  			; get number
.a4f3	20 47 af	jsr $af47			jsr 	CheckRightBracket 			; closing bracket
.a4f6	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a4f8	20 11 a5	jsr $a511			jsr 	ConvertNumberToString 		; do the conversion.
.a4fb	a9 21		lda #$21			lda		#33 						; create buffer
.a4fd	20 b6 b8	jsr $b8b6			jsr 	StringTempAllocate 			; allocate memory
.a500	da		phx				phx
.a501	a2 00		ldx #$00			ldx 	#0
.a503					_USCopy:
.a503	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a506	20 f4 b8	jsr $b8f4			jsr 	StringTempWrite
.a509	e8		inx				inx
.a50a	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a50d	d0 f4		bne $a503			bne 	_USCopy
.a50f	fa		plx				plx
.a510	60		rts				rts
.a511					ConvertNumberToString:
.a511	5a		phy				phy 								; save code position
.a512	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a515	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a518	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a51b	10 0a		bpl $a527			bpl 	_CNTSNotNegative
.a51d	29 7f		and #$7f			and 	#$7F 						; make +ve
.a51f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a522	a9 2d		lda #$2d			lda 	#"-"
.a524	20 8d a5	jsr $a58d			jsr 	WriteDecimalBuffer
.a527					_CNTSNotNegative:
.a527	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a52a	f0 15		beq $a541			beq 	_CNTSNotFloat
.a52c	e8		inx				inx 								; round up
.a52d	a9 01		lda #$01			lda 	#1
.a52f	20 06 a7	jsr $a706			jsr 	NSMSetByte
.a532	ca		dex				dex
.a533	bd 28 04	lda $0428,x			lda		NSExponent,x
.a536	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a539	a9 08		lda #$08			lda 	#NSTFloat
.a53b	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a53e	20 0e b1	jsr $b10e			jsr 	FloatAdd
.a541					_CNTSNotFloat:
.a541	20 6f a5	jsr $a56f			jsr 	MakePlusTwoString
.a544	20 f4 b1	jsr $b1f4			jsr 	FloatFractionalPart 		; get the fractional part
.a547	20 b8 b2	jsr $b2b8			jsr 	NSNormalise					; normalise , exit if zero
.a54a	f0 21		beq $a56d			beq 	_CNTSExit
.a54c	a9 2e		lda #$2e			lda 	#"."
.a54e	20 8d a5	jsr $a58d			jsr 	WriteDecimalBuffer 			; write decimal place
.a551					_CNTSDecimal:
.a551	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a554	30 17		bmi $a56d			bmi 	_CNTSExit
.a556	e8		inx				inx 								; x 10.0
.a557	a9 0a		lda #$0a			lda 	#10
.a559	20 06 a7	jsr $a706			jsr 	NSMSetByte
.a55c	a9 08		lda #$08			lda 	#NSTFloat
.a55e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a561	ca		dex				dex
.a562	20 81 b2	jsr $b281			jsr 	FloatMultiply
.a565	20 6f a5	jsr $a56f			jsr 	MakePlusTwoString
.a568	20 f4 b1	jsr $b1f4			jsr 	FloatFractionalPart 		; get the fractional part
.a56b	80 e4		bra $a551			bra 	_CNTSDecimal 				; keep going.
.a56d					_CNTSExit:
.a56d	7a		ply				ply
.a56e	60		rts				rts
.a56f					MakePlusTwoString:
.a56f	da		phx				phx
.a570	20 db a6	jsr $a6db			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a573	e8		inx				inx 								; access it
.a574	e8		inx				inx
.a575	20 57 b2	jsr $b257			jsr 	FloatIntegerPart 			; make it an integer
.a578	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a57a	20 b8 b0	jsr $b0b8			jsr 	ConvertInt32
.a57d	a2 00		ldx #$00			ldx	 	#0
.a57f					_MPTSCopy:
.a57f	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a582	20 8d a5	jsr $a58d			jsr 	WriteDecimalBuffer
.a585	e8		inx				inx
.a586	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a589	d0 f4		bne $a57f			bne 	_MPTSCopy
.a58b	fa		plx				plx
.a58c	60		rts				rts
.a58d					WriteDecimalBuffer:
.a58d	da		phx				phx
.a58e	ae 95 04	ldx $0495			ldx 	dbOffset
.a591	9d 1a 06	sta $061a,x			sta 	DecimalBuffer,x
.a594	9e 1b 06	stz $061b,x			stz 	DecimalBuffer+1,x
.a597	ee 95 04	inc $0495			inc 	dbOffset
.a59a	fa		plx				plx
.a59b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a59c					Unary_Left:
.a59c	fa		plx				plx
.a59d	18		clc				clc 								; only one parameter
.a59e	20 13 a6	jsr $a613			jsr 	SubstringInitial 			; set up.
.a5a1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a5a4	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a5a7	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a5aa	80 2c		bra $a5d8			bra 	SubstringMain
.a5ac					Unary_Right:
.a5ac	fa		plx				plx
.a5ad	18		clc				clc 								; only one parameter
.a5ae	20 13 a6	jsr $a613			jsr 	SubstringInitial 			; set up.
.a5b1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a5b4	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a5b7	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a5ba	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a5bd	b0 02		bcs $a5c1			bcs 	_URNotUnderflow
.a5bf	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a5c1					_URNotUnderFlow:
.a5c1	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a5c4	80 12		bra $a5d8			bra 	SubStringMain
.a5c6					Unary_Mid:
.a5c6	fa		plx				plx
.a5c7	38		sec				sec 								; two parameters
.a5c8	20 13 a6	jsr $a613			jsr 	SubstringInitial 			; set up.
.a5cb	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a5ce	f0 05		beq $a5d5			beq 	_UMError
.a5d0	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a5d3	80 03		bra $a5d8			bra 	SubStringMain
.a5d5					_UMError:
.a5d5	4c 44 b5	jmp $b544			jmp 	ArgumentError
.a5d8					SubStringMain:
.a5d8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a5db	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a5de	b0 2d		bcs $a60d			bcs 	_SSMNull 					; if so, return an empty string.
.a5e0	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a5e3	f0 28		beq $a60d			beq 	_SSMNull 					; return empty string.
.a5e5	18		clc				clc 								; add the offset +1 to the address and
.a5e6	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a5e9	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a5ec	85 36		sta $36				sta 	zTemp0
.a5ee	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a5f1	69 00		adc #$00			adc 	#0
.a5f3	85 37		sta $37				sta 	zTemp0+1
.a5f5					_SSMNoCarry:
.a5f5	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a5f8	20 b6 b8	jsr $b8b6			jsr 	StringTempAllocate 			; allocate that many characters
.a5fb	5a		phy				phy 								; save Y
.a5fc	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a5fe					_SSMCopy:
.a5fe	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a600	f0 09		beq $a60b			beq 	_SSMEString 				; no more to copy
.a602	20 f4 b8	jsr $b8f4			jsr 	StringTempWrite 			; and write it out.
.a605	c8		iny				iny
.a606	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a609	d0 f3		bne $a5fe			bne 	_SSMCopy
.a60b					_SSMEString:
.a60b	7a		ply				ply
.a60c					_SSMExit:
.a60c	60		rts				rts
.a60d					_SSMNull:
.a60d	a9 00		lda #$00			lda 	#0
.a60f	20 b6 b8	jsr $b8b6			jsr 	StringTempAllocate
.a612	60		rts				rts
.a613					SubstringInitial:
.a613	da		phx				phx 								; save initial stack position
.a614	08		php				php 								; save carry on stack indicating 2 parameters
.a615	20 4f a6	jsr $a64f			jsr 	EvaluateString 				; get a string
.a618	5a		phy				phy 								; calculate length to exponent.
.a619	a0 ff		ldy #$ff			ldy 	#$FF
.a61b					_SIFindLength:
.a61b	c8		iny				iny
.a61c	b1 36		lda ($36),y			lda 	(zTemp0),y
.a61e	d0 fb		bne $a61b			bne 	_SIFindLength
.a620	98		tya				tya
.a621	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a624	7a		ply				ply
.a625	e8		inx				inx
.a626	20 4f af	jsr $af4f			jsr 	CheckComma 					; comma next
.a629	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger 		; get next parameter
.a62c	28		plp				plp 								; is it the last parameter ?
.a62d	90 07		bcc $a636			bcc 	_SSIExit 					; if so, exit.
.a62f	e8		inx				inx
.a630	20 4f af	jsr $af4f			jsr 	CheckComma 					; comma next
.a633	20 9c a6	jsr $a69c			jsr 	Evaluate8BitInteger 		; get last parameter
.a636					_SSIExit:
.a636	fa		plx				plx
.a637	20 47 af	jsr $af47			jsr 	CheckRightBracket 			; check closing bracket
.a63a	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a63b					EvaluateValue:
.a63b	48		pha				pha
.a63c	20 da 9e	jsr $9eda			jsr		EvaluateExpression 			; expression
.a63f	20 ef 9f	jsr $9fef			jsr 	Dereference					; derefernce it
.a642	68		pla				pla
.a643	60		rts				rts
.a644					EvaluateNumber:
.a644	20 3b a6	jsr $a63b			jsr 	EvaluateValue 				; get a value
.a647	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a64a	29 10		and #$10			and 	#NSBIsString
.a64c	d0 16		bne $a664			bne 	HelperTypeError
.a64e	60		rts				rts
.a64f					EvaluateString:
.a64f	20 3b a6	jsr $a63b			jsr 	EvaluateValue 				; get a value
.a652	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a655	29 10		and #$10			and 	#NSBIsString
.a657	f0 0b		beq $a664			beq 	HelperTypeError
.a659					CopyAddressToTemp0:
.a659	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a65c	85 36		sta $36				sta 	zTemp0
.a65e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a661	85 37		sta $37				sta 	zTemp0+1
.a663	60		rts				rts
.a664					HelperTypeError:
.a664	4c 3f b5	jmp $b53f			jmp 	TypeError
.a667					EvaluateInteger:
.a667	20 44 a6	jsr $a644			jsr 	EvaluateNumber
.a66a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a66d	d0 0a		bne $a679			bne 	HelperValueError 			; if not, it's a float.
.a66f	60		rts				rts
.a670					EvaluateUnsignedInteger:
.a670	20 67 a6	jsr $a667			jsr 	EvaluateInteger 			; check integer is +ve
.a673	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a676	30 01		bmi $a679			bmi 	HelperValueError
.a678	60		rts				rts
.a679					HelperValueError:
.a679	4c 44 b5	jmp $b544			jmp 	ArgumentError
.a67c					Evaluate16BitInteger:
.a67c	20 70 a6	jsr $a670			jsr	 	EvaluateUnsignedInteger		; get integer
.a67f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a682	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a685	d0 f2		bne $a679			bne 	HelperValueError
.a687	60		rts				rts
.a688					Evaluate16BitIntegerSigned:
.a688	20 67 a6	jsr $a667			jsr	 	EvaluateInteger				; get integer
.a68b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a68e	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a691	d0 e6		bne $a679			bne 	HelperValueError
.a693	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a696	10 03		bpl $a69b			bpl 	_EISNotSigned
.a698	20 b9 a6	jsr $a6b9			jsr 	NSMNegateMantissa
.a69b					_EISNotSigned:
.a69b	60		rts				rts
.a69c					Evaluate8BitInteger:
.a69c	20 70 a6	jsr $a670			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a69f	d0 d8		bne $a679			bne 	HelperValueError
.a6a1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a6a4	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a6a7	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a6aa	d0 cd		bne $a679			bne 	HelperValueError
.a6ac	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a6af	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b3d1					Multiply8x8:
.b3d1	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b3d2	85 36		sta $36			  	sta 	zTemp0
.b3d4	86 37		stx $37				stx 	zTemp0+1
.b3d6	a9 00		lda #$00			lda 	#0
.b3d8	a2 08		ldx #$08			ldx 	#8
.b3da					_M88Loop:
.b3da	90 03		bcc $b3df			bcc 	_M88NoAdd
.b3dc	18		clc				clc
.b3dd	65 37		adc $37				adc 	zTemp0+1
.b3df					_M88NoAdd:
.b3df	6a		ror a				ror 	a
.b3e0	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b3e2	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b3e3	d0 f5		bne $b3da			bne 	_M88Loop
.b3e5	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b3e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a6b0					NSMNegate:
.a6b0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a6b3	49 80		eor #$80			eor 	#NSBIsNegative
.a6b5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a6b8	60		rts				rts
.a6b9					NSMNegateMantissa:
.a6b9	38		sec				sec
.a6ba	a9 00		lda #$00			lda 	#0
.a6bc	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a6bf	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a6c2	a9 00		lda #$00			lda 	#0
.a6c4	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a6c7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a6ca	a9 00		lda #$00			lda 	#0
.a6cc	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a6cf	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a6d2	a9 00		lda #$00			lda 	#0
.a6d4	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a6d7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a6da	60		rts				rts
.a6db					NSMShiftUpTwo:
.a6db	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a6de	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a6e1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a6e4	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a6e7	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a6ea	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a6ed	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a6f0	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a6f3	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a6f6	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a6f9	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a6fc	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a6ff	60		rts				rts
.a700					NSMSetZeroMantissaOnly:
.a700	a9 00		lda #$00			lda 	#0
.a702	80 08		bra $a70c			bra 	NSMSetMantissa
.a704					NSMSetZero:
.a704	a9 00		lda #$00			lda 	#0
.a706					NSMSetByte:
.a706	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a709	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a70c					NSMSetMantissa:
.a70c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a70f	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a712	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a715	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a718	60		rts				rts
.a719					NSMShiftLeft:
.a719	18		clc				clc
.a71a					NSMRotateLeft:
.a71a	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a71d	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a720	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a723	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a726	60		rts				rts
.a727					NSMShiftRight:
.a727	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a72a	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a72d	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a730	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a733	60		rts				rts
.a734					NSMIsZero:
.a734	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a737	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a73a	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a73d	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a740	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b3e8					Assemble_ora:
.b3e8	20 b9 89	jsr $89b9		jsr	AssembleGroup1
>b3eb	01					.byte $01
.b3ec					Assemble_and:
.b3ec	20 b9 89	jsr $89b9		jsr	AssembleGroup1
>b3ef	21					.byte $21
.b3f0					Assemble_eor:
.b3f0	20 b9 89	jsr $89b9		jsr	AssembleGroup1
>b3f3	41					.byte $41
.b3f4					Assemble_adc:
.b3f4	20 b9 89	jsr $89b9		jsr	AssembleGroup1
>b3f7	61					.byte $61
.b3f8					Assemble_sta:
.b3f8	20 b9 89	jsr $89b9		jsr	AssembleGroup1
>b3fb	81					.byte $81
.b3fc					Assemble_lda:
.b3fc	20 b9 89	jsr $89b9		jsr	AssembleGroup1
>b3ff	a1					.byte $a1
.b400					Assemble_cmp:
.b400	20 b9 89	jsr $89b9		jsr	AssembleGroup1
>b403	c1					.byte $c1
.b404					Assemble_sbc:
.b404	20 b9 89	jsr $89b9		jsr	AssembleGroup1
>b407	e1					.byte $e1
.b408					Assemble_asl:
.b408	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b40b	02					.byte $02
>b40c	75					.byte $75
.b40d					Assemble_rol:
.b40d	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b410	22					.byte $22
>b411	75					.byte $75
.b412					Assemble_lsr:
.b412	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b415	42					.byte $42
>b416	75					.byte $75
.b417					Assemble_ror:
.b417	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b41a	62					.byte $62
>b41b	75					.byte $75
.b41c					Assemble_stx:
.b41c	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b41f	82					.byte $82
>b420	50					.byte $50
.b421					Assemble_ldx:
.b421	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b424	a2					.byte $a2
>b425	d0					.byte $d0
.b426					Assemble_dec:
.b426	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b429	c2					.byte $c2
>b42a	55					.byte $55
.b42b					Assemble_inc:
.b42b	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b42e	e2					.byte $e2
>b42f	55					.byte $55
.b430					Assemble_stz:
.b430	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b433	60					.byte $60
>b434	44					.byte $44
.b435					Assemble_bit:
.b435	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b438	20					.byte $20
>b439	55					.byte $55
.b43a					Assemble_sty:
.b43a	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b43d	80					.byte $80
>b43e	54					.byte $54
.b43f					Assemble_ldy:
.b43f	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b442	a0					.byte $a0
>b443	d5					.byte $d5
.b444					Assemble_cpy:
.b444	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b447	c0					.byte $c0
>b448	d4					.byte $d4
.b449					Assemble_cpx:
.b449	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b44c	e0					.byte $e0
>b44d	d0					.byte $d0
.b44e					Assemble_tsb:
.b44e	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b451	00					.byte $00
>b452	50					.byte $50
.b453					Assemble_trb:
.b453	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b456	10					.byte $10
>b457	50					.byte $50
.b458					Assemble_jsr:
.b458	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b45b	14					.byte $14
>b45c	10					.byte $10
.b45d					Assemble_jmp:
.b45d	20 c0 89	jsr $89c0		jsr	AssembleGroup2
>b460	40					.byte $40
>b461	10					.byte $10
.b462					Assemble_bpl:
.b462	20 11 8a	jsr $8a11		jsr	AssembleGroup3
>b465	10					.byte $10
.b466					Assemble_bmi:
.b466	20 11 8a	jsr $8a11		jsr	AssembleGroup3
>b469	30					.byte $30
.b46a					Assemble_bvc:
.b46a	20 11 8a	jsr $8a11		jsr	AssembleGroup3
>b46d	50					.byte $50
.b46e					Assemble_bvs:
.b46e	20 11 8a	jsr $8a11		jsr	AssembleGroup3
>b471	70					.byte $70
.b472					Assemble_bcc:
.b472	20 11 8a	jsr $8a11		jsr	AssembleGroup3
>b475	90					.byte $90
.b476					Assemble_bcs:
.b476	20 11 8a	jsr $8a11		jsr	AssembleGroup3
>b479	b0					.byte $b0
.b47a					Assemble_bne:
.b47a	20 11 8a	jsr $8a11		jsr	AssembleGroup3
>b47d	d0					.byte $d0
.b47e					Assemble_beq:
.b47e	20 11 8a	jsr $8a11		jsr	AssembleGroup3
>b481	f0					.byte $f0
.b482					Assemble_bra:
.b482	20 11 8a	jsr $8a11		jsr	AssembleGroup3
>b485	80					.byte $80
.b486					Assemble_brk:
.b486	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b489	00					.byte $00
.b48a					Assemble_php:
.b48a	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b48d	08					.byte $08
.b48e					Assemble_clc:
.b48e	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b491	18					.byte $18
.b492					Assemble_plp:
.b492	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b495	28					.byte $28
.b496					Assemble_sec:
.b496	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b499	38					.byte $38
.b49a					Assemble_rti:
.b49a	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b49d	40					.byte $40
.b49e					Assemble_pha:
.b49e	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4a1	48					.byte $48
.b4a2					Assemble_cli:
.b4a2	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4a5	58					.byte $58
.b4a6					Assemble_phy:
.b4a6	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4a9	5a					.byte $5a
.b4aa					Assemble_rts:
.b4aa	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4ad	60					.byte $60
.b4ae					Assemble_pla:
.b4ae	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4b1	68					.byte $68
.b4b2					Assemble_sei:
.b4b2	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4b5	78					.byte $78
.b4b6					Assemble_ply:
.b4b6	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4b9	7a					.byte $7a
.b4ba					Assemble_dey:
.b4ba	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4bd	88					.byte $88
.b4be					Assemble_txa:
.b4be	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4c1	8a					.byte $8a
.b4c2					Assemble_tya:
.b4c2	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4c5	98					.byte $98
.b4c6					Assemble_txs:
.b4c6	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4c9	9a					.byte $9a
.b4ca					Assemble_tay:
.b4ca	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4cd	a8					.byte $a8
.b4ce					Assemble_tax:
.b4ce	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4d1	aa					.byte $aa
.b4d2					Assemble_clv:
.b4d2	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4d5	b8					.byte $b8
.b4d6					Assemble_tsx:
.b4d6	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4d9	ba					.byte $ba
.b4da					Assemble_iny:
.b4da	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4dd	c8					.byte $c8
.b4de					Assemble_dex:
.b4de	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4e1	ca					.byte $ca
.b4e2					Assemble_cld:
.b4e2	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4e5	d8					.byte $d8
.b4e6					Assemble_phx:
.b4e6	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4e9	da					.byte $da
.b4ea					Assemble_stp:
.b4ea	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4ed	db					.byte $db
.b4ee					Assemble_inx:
.b4ee	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4f1	e8					.byte $e8
.b4f2					Assemble_nop:
.b4f2	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4f5	ea					.byte $ea
.b4f6					Assemble_sed:
.b4f6	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4f9	f8					.byte $f8
.b4fa					Assemble_plx:
.b4fa	20 47 8a	jsr $8a47		jsr	AssembleGroup4
>b4fd	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b4fe					DecimalScalarTable:
>b4fe	66 66 66 66				.dword $66666666 ; 0.1
>b502	de					.byte $de
>b503	1f 85 eb 51				.dword $51eb851f ; 0.01
>b507	db					.byte $db
>b508	4c 37 89 41				.dword $4189374c ; 0.001
>b50c	d8					.byte $d8
>b50d	ac 8b db 68				.dword $68db8bac ; 0.0001
>b511	d4					.byte $d4
>b512	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b516	d1					.byte $d1
>b517	83 de 1b 43				.dword $431bde83 ; 1e-06
>b51b	ce					.byte $ce
>b51c	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b520	ca					.byte $ca
>b521	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b525	c7					.byte $c7
>b526	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b52a	c4					.byte $c4
>b52b	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b52f	c0					.byte $c0
>b530	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b534	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b535					SyntaxError:
.b535	a9 02		lda #$02		lda	#2
.b537	4c c9 9a	jmp $9ac9		jmp	ErrorHandler
.b53a					RangeError:
.b53a	a9 04		lda #$04		lda	#4
.b53c	4c c9 9a	jmp $9ac9		jmp	ErrorHandler
.b53f					TypeError:
.b53f	a9 05		lda #$05		lda	#5
.b541	4c c9 9a	jmp $9ac9		jmp	ErrorHandler
.b544					ArgumentError:
.b544	a9 07		lda #$07		lda	#7
.b546	4c c9 9a	jmp $9ac9		jmp	ErrorHandler
.b549					NotDoneError:
.b549	a9 0c		lda #$0c		lda	#12
.b54b	4c c9 9a	jmp $9ac9		jmp	ErrorHandler
.b54e					ErrorText:
>b54e	42 72 65 61 6b 00			.text	"Break",0
>b554	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b55c	72 72 6f 72 00
>b561	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b569	20 62 79 20 7a 65 72 6f 00
>b572	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b57a	61 6e 67 65 00
>b57f	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b587	6d 61 74 63 68 00
>b58d	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b595	65 6d 6f 72 79 00
>b59b	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b5a3	61 72 67 75 6d 65 6e 74 00
>b5ac	53 74 6f 70 00				.text	"Stop",0
>b5b1	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b5b9	6f 6f 20 6c 6f 6e 67 00
>b5c1	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b5c9	6e 20 66 61 69 6c 65 64 00
>b5d2	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b5da	61 74 61 00
>b5de	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b5e6	65 6e 74 65 64 00
>b5ec	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b5f4	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b600	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b608	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b615	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b61d	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b62a	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b632	68 6f 75 74 20 57 68 69 6c 65 00
>b63d	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b645	68 6f 75 74 20 46 6f 72 00
>b64e	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b656	61 63 6b 20 66 75 6c 6c 00
>b65f	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b667	75 63 74 75 72 65 00
>b66e	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b676	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b683	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b68b	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b699	41 72 72 61 79 20 73 69			.text	"Array size",0
>b6a1	7a 65 00
>b6a4	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b6ac	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b6b4	42 75 69 6c 74 20 46 72			.text "Built Friday 04-Nov-2022. Build 2651."
>b6bc	69 64 61 79 20 30 34 2d 4e 6f 76 2d 32 30 32 32
>b6cc	2e 20 42 75 69 6c 64 20 32 36 35 31 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b6d9					EXTInitialise:
.b6d9	64 01		stz $01				stz 	1 							; Access I/O
.b6db	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b6de	9c 08 d0	stz $d008			stz 	$D008
.b6e1	9c 09 d0	stz $d009			stz 	$D009
.b6e4	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.b6e6	8d 58 d6	sta $d658			sta 	$D658
.b6e9	60		rts				rts
.b6ea					EXTClearScreen:
.b6ea	4c ea ff	jmp $ffea			jmp 	$FFEA
.b6ed					EXTPrintCharacter:
.b6ed	48		pha				pha
.b6ee	da		phx				phx
.b6ef	5a		phy				phy
.b6f0	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b6f3	7a		ply				ply
.b6f4	fa		plx				plx
.b6f5	68		pla				pla
.b6f6	60		rts				rts
.b6f7					EXTInputSingleCharacter:
.b6f7	da		phx				phx
.b6f8	5a		phy				phy
.b6f9					_EISCWait:
.b6f9	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b6fc	c9 00		cmp #$00			cmp 	#0
.b6fe	f0 f9		beq $b6f9			beq 	_EISCWait
.b700	7a		ply				ply
.b701	fa		plx				plx
.b702	60		rts				rts
.b703					EXTInputLine:
.b703	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b705					_ILLoop:
.b705	da		phx				phx 								; read character in
.b706	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b709	fa		plx				plx
.b70a	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b70c	f0 12		beq $b720			beq 	_ILBackspace
.b70e	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b710	f0 15		beq $b727			beq 	_ILExit
.b712	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b714	90 ef		bcc $b705			bcc 	_ILLoop
.b716	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b718	f0 eb		beq $b705			beq 	_ILLoop
.b71a	9d a7 05	sta $05a7,x			sta 	lineBuffer,x 				; save it
.b71d	e8		inx				inx
.b71e	80 e5		bra $b705			bra 	_ILLoop
.b720					_ILBackspace:
.b720	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b722	f0 e1		beq $b705			beq 	_ILLoop
.b724	ca		dex				dex 								; back one.
.b725	80 de		bra $b705			bra 	_ILLoop
.b727					_ILExit:
.b727	20 ed b6	jsr $b6ed			jsr 	EXTPrintCharacter
.b72a	9e a7 05	stz $05a7,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b72d	60		rts				rts
.b72e					EXTBreakCheck:
.b72e	4c e1 ff	jmp $ffe1			jmp		$FFE1
.b731					EXTReadController:
.b731	da		phx				phx
.b732	a2 00		ldx #$00			ldx 	#0
.b734	a9 05		lda #$05			lda 	#(($2D) >> 3)
.b736	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b739	29 20		and #$20			and 	#($01 << (($2D) & 7))
.b73b	f0 04		beq $b741			beq 	_NoSet1
.b73d	8a		txa				txa
.b73e	09 01		ora #$01			ora 	#1
.b740	aa		tax				tax
.b741					_NoSet1:
.b741	a9 05		lda #$05			lda 	#(($2C) >> 3)
.b743	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b746	29 10		and #$10			and 	#($01 << (($2C) & 7))
.b748	f0 04		beq $b74e			beq 	_NoSet1
.b74a	8a		txa				txa
.b74b	09 02		ora #$02			ora 	#2
.b74d	aa		tax				tax
.b74e					_NoSet1:
.b74e	a9 06		lda #$06			lda 	#(($32) >> 3)
.b750	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b753	29 04		and #$04			and 	#($01 << (($32) & 7))
.b755	f0 04		beq $b75b			beq 	_NoSet1
.b757	8a		txa				txa
.b758	09 04		ora #$04			ora 	#4
.b75a	aa		tax				tax
.b75b					_NoSet1:
.b75b	a9 04		lda #$04			lda 	#(($25) >> 3)
.b75d	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b760	29 20		and #$20			and 	#($01 << (($25) & 7))
.b762	f0 04		beq $b768			beq 	_NoSet1
.b764	8a		txa				txa
.b765	09 08		ora #$08			ora 	#8
.b767	aa		tax				tax
.b768					_NoSet1:
.b768	a9 04		lda #$04			lda 	#(($26) >> 3)
.b76a	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b76d	29 40		and #$40			and 	#($01 << (($26) & 7))
.b76f	f0 04		beq $b775			beq 	_NoSet1
.b771	8a		txa				txa
.b772	09 10		ora #$10			ora 	#16
.b774	aa		tax				tax
.b775					_NoSet1:
.b775	8a		txa				txa
.b776	fa		plx				plx
.b777	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b778					MemoryDeleteLine:
.b778	20 97 b7	jsr $b797			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b77b	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b77d	a8		tay				tay
.b77e					_MDDLLoop:
.b77e	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b780	92 30		sta ($30)			sta 	(codePtr)
.b782	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b784	c5 3a		cmp $3a				cmp 	zTemp2
.b786	d0 07		bne $b78f			bne 	_MDLDLNext
.b788	a5 31		lda $31				lda 	codePtr+1
.b78a	c5 3b		cmp $3b				cmp 	zTemp2+1
.b78c	d0 01		bne $b78f			bne 	_MDLDLNext
.b78e					_MDDLExit:
.b78e	60		rts				rts
.b78f					_MDLDLNext:
.b78f	e6 30		inc $30				inc 	codePtr						; next byte
.b791	d0 eb		bne $b77e			bne 	_MDDLLoop
.b793	e6 31		inc $31				inc 	codePtr+1
.b795	80 e7		bra $b77e			bra 	_MDDLLoop
.b797					IMemoryFindEnd:
.b797	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b799	85 3a		sta $3a				sta 	0+zTemp2
.b79b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b79d	85 3b		sta $3b				sta 	1+zTemp2
.b79f					_MDLFELoop:
.b79f	b2 3a		lda ($3a)			lda 	(zTemp2)
.b7a1	f0 0b		beq $b7ae			beq 	_MDLFEExit
.b7a3	18		clc				clc
.b7a4	65 3a		adc $3a				adc 	zTemp2
.b7a6	85 3a		sta $3a				sta 	zTemp2
.b7a8	90 f5		bcc $b79f			bcc 	_MDLFELoop
.b7aa	e6 3b		inc $3b				inc 	zTemp2+1
.b7ac	80 f1		bra $b79f			bra 	_MDLFELoop
.b7ae					_MDLFEExit:
.b7ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b7af					MemoryInsertLine:
.b7af	08		php				php
.b7b0	20 97 b7	jsr $b797			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b7b3	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b7b5	1a		inc a				inc 	a
.b7b6	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b7b8	b0 36		bcs $b7f0			bcs 	_MDLIError
.b7ba	28		plp				plp
.b7bb	90 08		bcc $b7c5			bcc 	_MDLIFound
.b7bd	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b7bf	85 30		sta $30				sta 	codePtr
.b7c1	a5 3b		lda $3b				lda 	zTemp2+1
.b7c3	85 31		sta $31				sta 	codePtr+1
.b7c5					_MDLIFound:
.b7c5	ad a7 04	lda $04a7			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b7c8	a8		tay				tay
.b7c9					_MDLIInsert:
.b7c9	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b7cb	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b7cd	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b7cf	c5 3a		cmp $3a				cmp 	zTemp2
.b7d1	d0 06		bne $b7d9			bne 	_MDLINext
.b7d3	a5 31		lda $31				lda 	codePtr+1
.b7d5	c5 3b		cmp $3b				cmp 	zTemp2+1
.b7d7	f0 0a		beq $b7e3			beq 	_MDLIHaveSpace
.b7d9					_MDLINext:
.b7d9	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b7db	d0 02		bne $b7df			bne 	_MDLINoBorrow
.b7dd	c6 3b		dec $3b				dec 	zTemp2+1
.b7df					_MDLINoBorrow:
.b7df	c6 3a		dec $3a				dec 	zTemp2
.b7e1	80 e6		bra $b7c9			bra 	_MDLIInsert
.b7e3					_MDLIHaveSpace:
.b7e3	ac a7 04	ldy $04a7			ldy 	tokenOffset 				; bytes to copy
.b7e6	88		dey				dey 								; from offset-1 to 0
.b7e7					_MDLICopy:
.b7e7	b9 a7 04	lda $04a7,y			lda 	tokenOffset,y
.b7ea	91 30		sta ($30),y			sta 	(codePtr),y
.b7ec	88		dey				dey
.b7ed	10 f8		bpl $b7e7			bpl 	_MDLICopy
.b7ef	60		rts				rts
.b7f0					_MDLIError:
.b7f0	a9 06		lda #$06		lda	#6
.b7f2	4c c9 9a	jmp $9ac9		jmp	ErrorHandler
.b7f5					MDLAppendLine:
.b7f5	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b7f7	85 36		sta $36				sta 	zTemp0
.b7f9	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b7fb	85 38		sta $38				sta 	0+zTemp1
.b7fd	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b7ff	85 39		sta $39				sta 	1+zTemp1
.b801	b2 38		lda ($38)			lda 	(zTemp1)
.b803	d0 0a		bne $b80f			bne 	_MDLANoInitialise
.b805	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b807	8d ea 06	sta $06ea			sta 	0+AppendPointer
.b80a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b80c	8d eb 06	sta $06eb			sta 	1+AppendPointer
.b80f					_MDLANoInitialise:
.b80f	18		clc				clc
.b810	ad ea 06	lda $06ea			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b813	85 38		sta $38				sta 	zTemp1
.b815	72 36		adc ($36)			adc 	(zTemp0)
.b817	8d ea 06	sta $06ea			sta 	AppendPointer
.b81a	ad eb 06	lda $06eb			lda 	AppendPointer+1
.b81d	85 39		sta $39				sta 	zTemp1+1
.b81f	69 00		adc #$00			adc 	#0
.b821	8d eb 06	sta $06eb			sta 	AppendPointer+1
.b824	a0 00		ldy #$00			ldy 	#0
.b826					_MDLACopy:
.b826	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b828	91 38		sta ($38),y			sta 	(zTemp1),y
.b82a	c8		iny				iny
.b82b	98		tya				tya
.b82c	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b82e	d0 f6		bne $b826			bne 	_MDLACopy
.b830	a9 00		lda #$00			lda 	#0 							; end of program.
.b832	91 38		sta ($38),y			sta 	(zTemp1),y
.b834	60		rts				rts
.06ea					AppendPointer:
>06ea							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a741					MemoryNew:
.a741	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a743	85 30		sta $30				sta 	codePtr
.a745	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a747	85 31		sta $31				sta 	codePtr+1
.a749	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a74b	92 30		sta ($30)			sta 	(codePtr)
.a74d	60		rts				rts
.a74e					MemoryInline:
.a74e	98		tya				tya 								; put address into stack,x
.a74f	18		clc				clc
.a750	65 30		adc $30				adc 	codePtr
.a752	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a755	a5 31		lda $31				lda 	codePtr+1
.a757	69 00		adc #$00			adc 	#0
.a759	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a75c	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a75f	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a762	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a763					MemorySearch:
.a763	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a765	86 37		stx $37				stx 	zTemp0+1
.a767	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a769	85 30		sta $30				sta 	codePtr
.a76b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a76d	85 31		sta $31				sta 	codePtr+1
.a76f					_MTAXLoop:
.a76f	b2 30		lda ($30)			lda 	(codePtr)
.a771	18		clc				clc
.a772	f0 21		beq $a795			beq 	_MTAXExit 					; reached end, exit with CC.
.a774	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a776	b1 30		lda ($30),y			lda 	(codePtr),y
.a778	38		sec				sec
.a779	e5 36		sbc $36				sbc 	zTemp0
.a77b	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a77d	c8		iny				iny 								; do the MSB
.a77e	b1 30		lda ($30),y			lda 	(codePtr),y
.a780	e5 37		sbc $37				sbc 	zTemp0+1
.a782	05 38		ora $38				ora 	zTemp1
.a784	f0 0f		beq $a795			beq 	_MTAXExit	 				; found
.a786	b0 0d		bcs $a795			bcs 	_MTAXExit 					; current < required exit
.a788	18		clc				clc
.a789	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a78b	65 30		adc $30				adc 	codePtr
.a78d	85 30		sta $30				sta 	codePtr
.a78f	90 02		bcc $a793			bcc 	_CREExit
.a791	e6 31		inc $31				inc 	codePtr+1
.a793					_CREExit:
.a793	80 da		bra $a76f			bra 	_MTAXLoop
.a795					_MTAXExit:
.a795	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a796					StackPushByte:
.a796	48		pha				pha 								; save byte
.a797	a5 34		lda $34				lda 	BasicStack
.a799	d0 09		bne $a7a4			bne 	_SPBNoBorrow
.a79b	c6 35		dec $35				dec 	BasicStack+1
.a79d	48		pha				pha
.a79e	a5 35		lda $35				lda 	BasicStack+1
.a7a0	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a7a2	90 06		bcc $a7aa			bcc 	_SPBMemory
.a7a4					_SPBNoBorrow:
.a7a4	c6 34		dec $34				dec 	BasicStack
.a7a6	68		pla				pla 								; get back and write
.a7a7	92 34		sta ($34)			sta 	(BasicStack)
.a7a9	60		rts				rts
.a7aa					_SPBMemory:
.a7aa	a9 12		lda #$12		lda	#18
.a7ac	4c c9 9a	jmp $9ac9		jmp	ErrorHandler
.a7af					StackPopByte:
.a7af	b2 34		lda ($34)			lda 	(BasicStack)
.a7b1	e6 34		inc $34				inc 	BasicStack
.a7b3	d0 02		bne $a7b7			bne 	_SPBNoCarry
.a7b5	e6 35		inc $35				inc 	BasicStack+1
.a7b7					_SPBNoCarry:
.a7b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a7b8					StackOpen:
.a7b8	48		pha				pha 								; save frame byte
.a7b9	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a7bb	0a		asl a				asl 	a 							; claim twice this for storage
.a7bc	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a7be	38		sec				sec 								; so basically subtracting from
.a7bf	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a7c1	85 34		sta $34				sta 	basicStack
.a7c3	b0 08		bcs $a7cd			bcs 	_SONoBorrow
.a7c5	c6 35		dec $35				dec 	basicStack+1
.a7c7	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a7c9	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a7cb	90 04		bcc $a7d1			bcc 	_SOMemory
.a7cd					_SONoBorrow:
.a7cd	68		pla				pla 								; get marker back and write at TOS
.a7ce	92 34		sta ($34)			sta 	(basicStack)
.a7d0	60		rts				rts
.a7d1					_SOMemory:
.a7d1	a9 12		lda #$12		lda	#18
.a7d3	4c c9 9a	jmp $9ac9		jmp	ErrorHandler
.a7d6					StackClose:
.a7d6	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a7d8	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a7da	0a		asl a				asl 	a 							; claim twice this.
.a7db	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a7dd	85 34		sta $34				sta 	basicStack
.a7df	90 02		bcc $a7e3			bcc 	_SCExit
.a7e1	e6 35		inc $35				inc 	basicStack+1
.a7e3					_SCExit:
.a7e3	60		rts				rts
.a7e4					StackCheckFrame:
.a7e4	48		pha				pha
.a7e5					_StackRemoveLocals:
.a7e5	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a7e7	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a7e9	b0 05		bcs $a7f0			bcs 	_SCNoLocal
.a7eb	20 ee ae	jsr $aeee			jsr 	LocalPopValue
.a7ee	80 f5		bra $a7e5			bra 	_StackRemoveLocals
.a7f0					_SCNoLocal:
.a7f0	68		pla				pla
.a7f1	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a7f3	29 f0		and #$f0			and 	#$F0 						; check type bits
.a7f5	d0 01		bne $a7f8			bne 	_SCFError 					; different, we have structures mixed up
.a7f7	60		rts				rts
.a7f8					_SCFError:
.a7f8	8a		txa				txa 								; report error X
.a7f9	4c c9 9a	jmp $9ac9			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a7fc					STKSaveCodePosition:
.a7fc	5a		phy				phy
.a7fd	98		tya				tya 								; save Y
.a7fe	a0 05		ldy #$05			ldy 	#5
.a800	91 34		sta ($34),y			sta 	(basicStack),y
.a802	88		dey				dey 								; save Code Pointer
.a803					_STKSaveLoop:
.a803	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a806	91 34		sta ($34),y			sta 	(basicStack),y
.a808	88		dey				dey
.a809	d0 f8		bne $a803			bne 	_STKSaveLoop
.a80b	7a		ply				ply
.a80c	60		rts				rts
.a80d					STKLoadCodePosition:
.a80d	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a80f					_STKLoadLoop:
.a80f	b1 34		lda ($34),y			lda 	(basicStack),y
.a811	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a814	c8		iny				iny
.a815	c0 05		cpy #$05			cpy 	#5
.a817	d0 f6		bne $a80f			bne 	_STKLoadLoop
.a819	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a81b	a8		tay				tay
.a81c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a81d					StackReset:
.a81d	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a81f	85 34		sta $34				sta 	0+basicStack
.a821	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a823	85 35		sta $35				sta 	1+basicStack
.a825	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a827	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a829	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b835					StringConcrete:
.b835	5a		phy				phy 								; save position on stack
.b836	20 9e a3	jsr $a39e			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b839	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b83c	85 38		sta $38				sta 	zTemp1
.b83e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b841	85 39		sta $39				sta 	zTemp1+1
.b843	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b845					_SALength:
.b845	c8		iny				iny
.b846	b1 38		lda ($38),y			lda 	(zTemp1),y
.b848	d0 fb		bne $b845			bne 	_SALength
.b84a	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b84c	b0 3f		bcs $b88d			bcs 	_SALengthError
.b84e	98		tya				tya 				 				; length of the new string
.b84f	18		clc				clc
.b850	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b852	90 02		bcc $b856			bcc 	_SAHaveLength
.b854	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b856					_SAHaveLength:
.b856	48		pha				pha 								; save length.
.b857	38		sec				sec
.b858	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b85a	6d 8e 04	adc $048e			adc 	StringMemory
.b85d	8d 8e 04	sta $048e			sta 	StringMemory
.b860	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b862	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b865	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b867	6d 8f 04	adc $048f			adc 	StringMemory+1
.b86a	8d 8f 04	sta $048f			sta 	StringMemory+1
.b86d	85 3b		sta $3b				sta 	zTemp2+1
.b86f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b872	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b873	38		sec				sec
.b874	e9 03		sbc #$03			sbc 	#3
.b876	92 3a		sta ($3a)			sta 	(zTemp2)
.b878	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b87a	a0 01		ldy #$01			ldy 	#1
.b87c	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b87e					_SACopyNewString:
.b87e	a0 00		ldy #$00			ldy 	#0
.b880					_SACopyNSLoop:
.b880	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b882	c8		iny				iny 								; write two on in string storage
.b883	c8		iny				iny
.b884	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b886	88		dey				dey 								; this makes it one one.
.b887	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b889	d0 f5		bne $b880			bne 	_SACopyNSLoop
.b88b	7a		ply				ply
.b88c	60		rts				rts
.b88d					_SALengthError:
.b88d	a9 09		lda #$09		lda	#9
.b88f	4c c9 9a	jmp $9ac9		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b892					StringSystemInitialise:
.b892	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b894	8d 8e 04	sta $048e			sta 	0+StringMemory
.b897	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b899	8d 8f 04	sta $048f			sta 	1+StringMemory
.b89c	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b89f	60		rts				rts
.b8a0					StringSpaceInitialise:
.b8a0	20 9e a3	jsr $a39e			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b8a3	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b8a5	8d 90 04	sta $0490			sta 	StringInitialised
.b8a8	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b8ab	8d 91 04	sta $0491			sta 	StringTempPointer
.b8ae	ad 8f 04	lda $048f			lda 	StringMemory+1
.b8b1	3a		dec a				dec 	a
.b8b2	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b8b5	60		rts				rts
.b8b6					StringTempAllocate:
.b8b6	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b8b8	b0 35		bcs $b8ef			bcs 	_STALength
.b8ba	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b8bd	30 05		bmi $b8c4			bmi 	_STAAllocate
.b8bf	48		pha				pha 								; save value to subtract.
.b8c0	20 a0 b8	jsr $b8a0			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b8c3	68		pla				pla 								; restore it
.b8c4					_STAAllocate:
.b8c4	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b8c6	18		clc				clc  								; deliberate allows one more
.b8c7	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b8ca	8d 91 04	sta $0491			sta 	StringTempPointer
.b8cd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b8d0	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b8d2	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b8d5	69 ff		adc #$ff			adc 	#$FF
.b8d7	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b8da	85 3d		sta $3d				sta 	zsTemp+1
.b8dc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b8df	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b8e2	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b8e5	a9 10		lda #$10			lda 	#NSTString
.b8e7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b8ea	a9 00		lda #$00			lda 	#0 							; clear the target string
.b8ec	92 3c		sta ($3c)			sta 	(zsTemp)
.b8ee	60		rts				rts
.b8ef					_STALength:
.b8ef	a9 09		lda #$09		lda	#9
.b8f1	4c c9 9a	jmp $9ac9		jmp	ErrorHandler
.b8f4					StringTempWrite:
.b8f4	48		pha				pha
.b8f5	92 3c		sta ($3c)			sta 	(zsTemp)
.b8f7	e6 3c		inc $3c				inc 	zsTemp
.b8f9	d0 02		bne $b8fd			bne 	_STWNoCarry
.b8fb	e6 3d		inc $3d				inc 	zsTemp+1
.b8fd					_STWNoCarry:
.b8fd	a9 00		lda #$00			lda 	#0
.b8ff	92 3c		sta ($3c)			sta 	(zsTemp)
.b901	68		pla				pla
.b902	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a82a					BackloadProgram:
.a82a	a2 ff		ldx #$ff			ldx 	#$FF
.a82c	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.a82f	20 59 a8	jsr $a859			jsr 	BLReadByte
.a832	30 1e		bmi $a852			bmi 	_BPExit
.a834					_BPCopy:
.a834	e8		inx				inx  								; copy byte in
.a835	9d a7 05	sta $05a7,x			sta 	lineBuffer,x
.a838	9e a8 05	stz $05a8,x			stz 	lineBuffer+1,x
.a83b	20 59 a8	jsr $a859			jsr 	BLReadByte 					; read next byte
.a83e	30 0a		bmi $a84a			bmi 	_BPEndLine 					; -ve = EOL
.a840	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a842	d0 02		bne $a846			bne 	_BPNotTab
.a844	a9 20		lda #$20			lda 	#' '
.a846					_BPNotTab:
.a846	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a848	b0 ea		bcs $a834			bcs 	_BPCopy
.a84a					_BPEndLine:
.a84a	20 3f ac	jsr $ac3f			jsr 	TokeniseLine 				; tokenise the line.
.a84d	20 01 8c	jsr $8c01			jsr 	EditProgramCode
.a850	80 d8		bra $a82a			bra 	BackloadProgram
.a852					_BPExit:
.a852	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.a855	20 bf 8c	jsr $8cbf			jsr 	ClearCommand 				; clear variables etc.
.a858	60		rts				rts
.a859					BLReadByte:
.a859					_BLLoad:
.a859	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a85c	ee 5a a8	inc $a85a			inc 	_BLLoad+1
.a85f	d0 03		bne $a864			bne 	_BLNoCarry
.a861	ee 5b a8	inc $a85b			inc 	_BLLoad+2
.a864					_BLNoCarry:
.a864	c9 00		cmp #$00			cmp 	#0
.a866	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a867					TokeniseSearchTable:
.a867	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a869	85 36		sta $36				sta 	zTemp0
.a86b	a0 00		ldy #$00			ldy 	#0
.a86d	a9 80		lda #$80			lda 	#$80 						; token #
.a86f	85 38		sta $38				sta 	zTemp1
.a871					_TSTLoop:
.a871	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a873	30 49		bmi $a8be			bmi 	_TSTFail 					; -ve = end of table
.a875	f0 2e		beq $a8a5			beq 	_TSTNext 					; zero, check next it's a dummy
.a877	c8		iny				iny 								; get the hash
.a878	b1 36		lda ($36),y			lda 	(zTemp0),y
.a87a	88		dey				dey
.a87b	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a87e	d0 25		bne $a8a5			bne 	_TSTNext
.a880	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a883	38		sec				sec
.a884	ed 80 04	sbc $0480			sbc 	identStart
.a887	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a889	d0 1a		bne $a8a5			bne 	_TSTNext
.a88b	5a		phy				phy 								; save Y , we might fail
.a88c	c8		iny				iny 								; point to text
.a88d	c8		iny				iny
.a88e	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a891					_TSTCompareName:
.a891	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; compare text.
.a894	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a896	d0 0c		bne $a8a4			bne 	_TSTNextPullY 				; fail, pullY and do next
.a898	e8		inx				inx
.a899	c8		iny				iny
.a89a	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a89d	d0 f2		bne $a891			bne 	_TSTCompareName
.a89f	7a		ply				ply 								; throw Y
.a8a0	a5 38		lda $38				lda 	zTemp1 						; get token #
.a8a2	38		sec				sec 								; return with CS = passed.
.a8a3	60		rts				rts
.a8a4					_TSTNextPullY:
.a8a4	7a		ply				ply 								; restore current, fall through.
.a8a5					_TSTNext:
.a8a5	e6 38		inc $38				inc 	zTemp1 						; token counter
.a8a7	98		tya				tya
.a8a8	18		clc				clc
.a8a9	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a8ab	1a		inc a				inc 	a 							; +1
.a8ac	1a		inc a				inc 	a 							; +2
.a8ad	a8		tay				tay
.a8ae	10 c1		bpl $a871			bpl 	_TSTLoop 					; if Y < $80 loop back
.a8b0	98		tya				tya 								; add Y to zTemp0 and reset Y
.a8b1	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a8b3	18		clc				clc  								; but have tables > 255 bytes
.a8b4	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a8b6	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a8b8	90 b7		bcc $a871			bcc 	_TSTLoop
.a8ba	e6 37		inc $37				inc 	zTemp0+1
.a8bc	80 b3		bra $a871			bra 	_TSTLoop
.a8be					_TSTFail:
.a8be	18		clc				clc
.a8bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a8c0					KeywordSet0:
>a8c0	00 65					.text	0,$65,""               ; $80 !0:EOF
>a8c2	00 58					.text	0,$58,""               ; $81 !1:SH1
>a8c4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a8c6	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a8cc	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a8d4	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a8da	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a8e1	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a8e9	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a8f0	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a8f7	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>a8fd	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>a903	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>a90b	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>a912	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>a919	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>a920	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>a928	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>a92e	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>a934	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>a93b	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>a941	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>a947	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>a94f	28
>a950	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>a958	28
>a959	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>a95f	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>a965	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>a96b	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>a972	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>a97a	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>a980	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>a986	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>a98b	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>a98f	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>a995	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>a99d	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>a9a4	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>a9ab	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>a9b3	43
>a9b4	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>a9ba	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>a9c0	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>a9c7	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>a9cd	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>a9d1	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>a9d7	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>a9df	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>a9e6	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>a9eb	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>a9f2	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>a9fa	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>aa00	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>aa05	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>aa0d	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>aa13	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>aa19	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>aa1e	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>aa25	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>aa2b	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>aa31	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>aa38	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>aa3d	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>aa43	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>aa4a	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>aa4f	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>aa53	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>aa5b	45
>aa5c	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>aa64	45
>aa65	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>aa6b	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>aa72	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>aa78	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>aa7e	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>aa83	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>aa8b	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>aa92	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>aa9a	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>aaa0	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>aaa4	ff					.text	$FF
.aaa5					KeywordSet1:
>aaa5	00 65					.text	0,$65,""               ; $80 !0:EOF
>aaa7	00 58					.text	0,$58,""               ; $81 !1:SH1
>aaa9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>aaab	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>aab3	4c 45
>aab5	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>aabd	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>aac5	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>aaca	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>aad0	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>aad5	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>aadd	45
>aade	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>aae3	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>aaeb	53
>aaec	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>aaf2	ff					.text	$FF
.aaf3					KeywordSet2:
>aaf3	00 65					.text	0,$65,""               ; $80 !0:EOF
>aaf5	00 58					.text	0,$58,""               ; $81 !1:SH1
>aaf7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>aaf9	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>aafe	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>ab03	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>ab08	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>ab0d	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>ab12	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>ab17	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>ab1c	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>ab21	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>ab26	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>ab2b	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>ab30	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>ab35	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>ab3a	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>ab3f	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>ab44	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>ab49	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>ab4e	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>ab53	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>ab58	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>ab5d	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>ab62	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>ab67	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>ab6c	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>ab71	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>ab76	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>ab7b	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>ab80	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>ab85	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>ab8a	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>ab8f	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>ab94	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>ab99	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>ab9e	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>aba3	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>aba8	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>abad	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>abb2	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>abb7	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>abbc	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>abc1	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>abc6	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>abcb	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>abd0	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>abd5	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>abda	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>abdf	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>abe4	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>abe9	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>abee	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>abf3	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>abf8	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>abfd	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>ac02	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>ac07	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>ac0c	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>ac11	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>ac16	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>ac1b	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>ac20	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>ac25	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>ac2a	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>ac2f	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>ac34	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>ac39	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>ac3e	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.ac3f					TokeniseLine:
.ac3f	20 c7 ad	jsr $adc7			jsr 	FixLineBufferCase 			; fix line case
.ac42	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.ac44	8d a7 04	sta $04a7			sta 	tokenOffset
.ac47	9c a8 04	stz $04a8			stz 	tokenLineNumber
.ac4a	9c a9 04	stz $04a9			stz 	tokenLineNumber+1
.ac4d	a2 ff		ldx #$ff			ldx 	#$FF
.ac4f					_TKFindFirst:
.ac4f	e8		inx				inx
.ac50	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ac53	f0 79		beq $acce			beq 	_TKExit
.ac55	c9 20		cmp #$20			cmp 	#' '
.ac57	90 f6		bcc $ac4f			bcc 	_TKFindFirst
.ac59	c9 30		cmp #$30			cmp 	#'0'
.ac5b	90 07		bcc $ac64			bcc 	_TKNoLineNumber
.ac5d	c9 3a		cmp #$3a			cmp 	#'9'+1
.ac5f	b0 03		bcs $ac64			bcs 	_TKNoLineNumber
.ac61	20 f1 ad	jsr $adf1			jsr 	TokeniseExtractLineNumber
.ac64					_TKNoLineNumber:
.ac64					_TKTokeniseLoop:
.ac64	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.ac67	f0 65		beq $acce			beq 	_TKExit
.ac69	e8		inx				inx
.ac6a	c9 20		cmp #$20			cmp 	#' '
.ac6c	f0 f6		beq $ac64			beq 	_TKTokeniseLoop 			; keep looping if space found.
.ac6e	ca		dex				dex 								; undo last get, A contains character, X is position.
.ac6f	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.ac71	f0 61		beq $acd4			beq 	_TKTokeniseIdentifier
.ac73	c9 41		cmp #$41			cmp 	#'A'
.ac75	90 04		bcc $ac7b			bcc 	_TKTokenisePunctuation
.ac77	c9 5b		cmp #$5b			cmp 	#'Z'+1
.ac79	90 59		bcc $acd4			bcc 	_TKTokeniseIdentifier
.ac7b					_TKTokenisePunctuation:
.ac7b	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.ac7d	f0 27		beq $aca6			beq 	_TKString
.ac7f	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.ac81	f0 28		beq $acab			beq 	_TKHexConstant
.ac83	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.ac85	f0 29		beq $acb0			beq 	_TKCheckDouble
.ac87	c9 3e		cmp #$3e			cmp 	#'>'
.ac89	f0 25		beq $acb0			beq 	_TKCheckDouble
.ac8b					_TKStandardPunctuation:
.ac8b	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get it back.
.ac8e	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.ac90	90 0e		bcc $aca0			bcc 	_TKNoShift
.ac92	48		pha				pha 								; save
.ac93	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.ac95	85 36		sta $36				sta 	zTemp0
.ac97	68		pla				pla
.ac98	29 20		and #$20			and 	#32 						; bit 5
.ac9a	4a		lsr a				lsr 	a 							; shift into bit 3
.ac9b	4a		lsr a				lsr 	a
.ac9c	05 36		ora $36				ora 	zTemp0
.ac9e	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.aca0					_TKNoShift:
.aca0	20 36 ae	jsr $ae36			jsr 	TokeniseWriteByte 			; write the punctuation character
.aca3	e8		inx				inx 								; consume the character
.aca4	80 be		bra $ac64			bra 	_TKTokeniseLoop 			; and loop round again.
.aca6					_TKString:
.aca6	20 56 ad	jsr $ad56			jsr 	TokeniseString
.aca9	80 b9		bra $ac64			bra 	_TKTokeniseLoop
.acab					_TKHexConstant:
.acab	20 91 ad	jsr $ad91			jsr 	TokeniseHexConstant
.acae	80 b4		bra $ac64			bra 	_TKTokeniseLoop
.acb0					_TKCheckDouble:
.acb0	bd a8 05	lda $05a8,x			lda 	lineBuffer+1,x 				; get next character
.acb3	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.acb5	90 d4		bcc $ac8b			bcc 	_TKStandardPunctuation
.acb7	c9 3f		cmp #$3f			cmp 	#'>'+1
.acb9	b0 d0		bcs $ac8b			bcs 	_TKStandardPunctuation
.acbb	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.acbe	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.acc0	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.acc1	7d a8 05	adc $05a8,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.acc4	38		sec				sec
.acc5	e9 3c		sbc #$3c			sbc 	#'<'
.acc7	20 36 ae	jsr $ae36			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.acca	e8		inx				inx 								; consume both
.accb	e8		inx				inx
.accc	80 96		bra $ac64			bra 	_TKTokeniseLoop
.acce	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.acd0	20 36 ae	jsr $ae36			jsr 	TokeniseWriteByte
.acd3	60		rts				rts
.acd4					_TKTokeniseIdentifier:
.acd4	8e 80 04	stx $0480			stx 	identStart 					; save start
.acd7	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.acda					_TKCheckLoop:
.acda	e8		inx				inx 								; look at next, we know first is identifier.
.acdb	bd a7 05	lda $05a7,x			lda  	lineBuffer,x
.acde	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.ace0	f0 f8		beq $acda			beq 	_TKCheckLoop
.ace2	c9 30		cmp #$30			cmp	 	#"0"
.ace4	90 0c		bcc $acf2			bcc 	_TKEndIdentifier
.ace6	c9 3a		cmp #$3a			cmp 	#"9"+1
.ace8	90 f0		bcc $acda			bcc 	_TKCheckLoop
.acea	c9 41		cmp #$41			cmp	 	#"A"
.acec	90 04		bcc $acf2			bcc 	_TKEndIdentifier
.acee	c9 5b		cmp #$5b			cmp 	#"Z"+1
.acf0	90 e8		bcc $acda			bcc 	_TKCheckLoop
.acf2					_TKEndIdentifier:
.acf2	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.acf5	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.acf7	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.acf9	f0 06		beq $ad01			beq 	_TKHasTypeCharacter
.acfb	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.acfd	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.acff	d0 07		bne $ad08			bne 	_TKNoTypeCharacter
.ad01					_TKHasTypeCharacter:
.ad01	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.ad04	e8		inx				inx 								; read next
.ad05	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ad08					_TKNoTypeCharacter:
.ad08	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.ad0a	d0 09		bne $ad15			bne 	_TKNoArray
.ad0c	e8		inx				inx 								; skip the (
.ad0d	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.ad10	09 04		ora #$04			ora 	#$04
.ad12	8d 84 04	sta $0484			sta 	identTypeByte
.ad15					_TKNoArray:
.ad15	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.ad18	20 b2 ad	jsr $adb2			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.ad1b	a0 a8		ldy #$a8			ldy 	#(KeywordSet0) >> 8
.ad1d	a9 c0		lda #$c0			lda 	#(KeywordSet0) & $FF
.ad1f	20 67 a8	jsr $a867			jsr 	TokeniseSearchTable
.ad22	a2 00		ldx #$00			ldx 	#0
.ad24	b0 1f		bcs $ad45			bcs 	_TKFoundToken
.ad26	a0 aa		ldy #$aa			ldy 	#(KeywordSet1) >> 8
.ad28	a9 a5		lda #$a5			lda 	#(KeywordSet1) & $FF
.ad2a	20 67 a8	jsr $a867			jsr 	TokeniseSearchTable
.ad2d	a2 81		ldx #$81			ldx 	#$81
.ad2f	b0 14		bcs $ad45			bcs 	_TKFoundToken
.ad31	a0 aa		ldy #$aa			ldy 	#(KeywordSet2) >> 8
.ad33	a9 f3		lda #$f3			lda 	#(KeywordSet2) & $FF
.ad35	20 67 a8	jsr $a867			jsr 	TokeniseSearchTable
.ad38	a2 82		ldx #$82			ldx 	#$82
.ad3a	b0 09		bcs $ad45			bcs 	_TKFoundToken
.ad3c	20 42 ae	jsr $ae42			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.ad3f	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ad42	4c 64 ac	jmp $ac64			jmp 	_TKTokeniseLoop 			; and go round again.
.ad45					_TKFoundToken:
.ad45	48		pha				pha 								; save token
.ad46	8a		txa				txa 								; shift in X, is there one ?
.ad47	f0 03		beq $ad4c			beq 	_TKNoTShift
.ad49	20 36 ae	jsr $ae36			jsr 	TokeniseWriteByte 			; if so, write it out
.ad4c					_TKNoTShift:
.ad4c	68		pla				pla 								; restore and write token
.ad4d	20 36 ae	jsr $ae36			jsr 	TokeniseWriteByte
.ad50	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ad53	4c 64 ac	jmp $ac64			jmp 	_TKTokeniseLoop 			; and go round again.
.ad56					TokeniseString:
.ad56	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.ad58	20 36 ae	jsr $ae36			jsr 	TokeniseWriteByte
.ad5b	e8		inx				inx									; start of quoted string.
.ad5c	da		phx				phx 								; push start of string on top
.ad5d	ca		dex				dex
.ad5e					_TSFindEnd:
.ad5e	e8		inx				inx
.ad5f	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character
.ad62	f0 04		beq $ad68			beq 	_TSEndOfString
.ad64	c9 22		cmp #$22			cmp 	#'"'
.ad66	d0 f6		bne $ad5e			bne 	_TSFindEnd
.ad68					_TSEndOfString:
.ad68	7a		ply				ply  								; so now Y is first character, X is character after end.
.ad69	48		pha				pha 								; save terminating character
.ad6a	20 72 ad	jsr $ad72			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.ad6d	68		pla				pla 								; terminating character
.ad6e	f0 01		beq $ad71			beq 	_TSNotQuote					; if it wasn't EOS skip it
.ad70	e8		inx				inx
.ad71					_TSNotQuote:
.ad71	60		rts				rts
.ad72					TOWriteBlockXY:
.ad72	86 36		stx $36				stx 	zTemp0 						; write end character
.ad74	98		tya				tya
.ad75	49 ff		eor #$ff			eor 	#$FF
.ad77	38		sec				sec
.ad78	65 36		adc $36				adc 	zTemp0
.ad7a	1a		inc a				inc 	a 							; one extra for NULL
.ad7b	20 36 ae	jsr $ae36			jsr 	TokeniseWriteByte
.ad7e					_TOBlockLoop:
.ad7e	c4 36		cpy $36				cpy 	zTemp0
.ad80	f0 09		beq $ad8b			beq 	_TOBlockExit
.ad82	b9 a7 05	lda $05a7,y			lda 	lineBuffer,y
.ad85	20 36 ae	jsr $ae36			jsr 	TokeniseWriteByte
.ad88	c8		iny				iny
.ad89	80 f3		bra $ad7e			bra 	_TOBlockLoop
.ad8b					_TOBlockExit:
.ad8b	a9 00		lda #$00			lda 	#0
.ad8d	20 36 ae	jsr $ae36			jsr 	TokeniseWriteByte
.ad90	60		rts				rts
.ad91					TokeniseHexConstant:
.ad91	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.ad93	20 36 ae	jsr $ae36			jsr 	TokeniseWriteByte
.ad96	e8		inx				inx									; start of quoted string.
.ad97	da		phx				phx 								; push start of constant on top
.ad98	ca		dex				dex
.ad99					_THFindLoop:
.ad99	e8		inx				inx
.ad9a	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ad9d	c9 30		cmp #$30			cmp 	#"0"
.ad9f	90 0c		bcc $adad			bcc 	_THFoundEnd
.ada1	c9 3a		cmp #$3a			cmp 	#"9"+1
.ada3	90 f4		bcc $ad99			bcc 	_THFindLoop
.ada5	c9 41		cmp #$41			cmp 	#"A"
.ada7	90 04		bcc $adad			bcc 	_THFoundEnd
.ada9	c9 47		cmp #$47			cmp 	#"F"+1
.adab	90 ec		bcc $ad99			bcc 	_THFindLoop
.adad					_THFoundEnd:
.adad	7a		ply				ply 								; restore start
.adae	20 72 ad	jsr $ad72			jsr 	TOWriteBlockXY 				; output the block
.adb1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.adb2					TokeniseCalculateHash:
.adb2	da		phx				phx
.adb3	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.adb6	a9 00		lda #$00			lda 	#0
.adb8					_TCHLoop:
.adb8	18		clc				clc
.adb9	7d a7 05	adc $05a7,x			adc 	lineBuffer,x
.adbc	e8		inx				inx
.adbd	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.adc0	d0 f6		bne $adb8			bne 	_TCHLoop
.adc2	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.adc5	fa		plx				plx
.adc6	60		rts				rts
.adc7					FixLineBufferCase:
.adc7	a2 00		ldx #$00			ldx 	#0
.adc9					_FLBCLoop:
.adc9	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next character
.adcc	f0 22		beq $adf0			beq 	_FLBCExit 					; end of string.
.adce	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.add0	f0 11		beq $ade3			beq 	_FLBCInQuotes
.add2	e8		inx				inx
.add3	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.add5	90 f2		bcc $adc9			bcc 	_FLBCLoop
.add7	c9 7b		cmp #$7b			cmp 	#'z'+1
.add9	b0 ee		bcs $adc9			bcs 	_FLBCLoop
.addb	38		sec				sec 								; make U/C
.addc	e9 20		sbc #$20			sbc 	#32
.adde	9d a6 05	sta $05a6,x			sta	 	lineBuffer-1,x 				; write back
.ade1	80 e6		bra $adc9			bra 	_FLBCLoop
.ade3					_FLBCInQuotes:
.ade3	e8		inx				inx 								; advance
.ade4	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next
.ade7	f0 07		beq $adf0			beq 	_FLBCExit 					; exit on EOS
.ade9	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.adeb	d0 f6		bne $ade3			bne 	_FLBCInQuotes
.aded	e8		inx				inx 								; skip over it
.adee	80 d9		bra $adc9			bra 	_FLBCLoop
.adf0					_FLBCExit:
.adf0	60		rts				rts
.adf1					TokeniseExtractLineNumber:
.adf1	ad a9 04	lda $04a9			lda 	tokenLineNumber+1 			; push current value on stack
.adf4	48		pha				pha
.adf5	ad a8 04	lda $04a8			lda 	tokenLineNumber
.adf8	48		pha				pha
.adf9	20 2f ae	jsr $ae2f			jsr 	_TELNTimes2 				; line # x 4
.adfc	20 2f ae	jsr $ae2f			jsr 	_TELNTimes2 				; line # x 2
.adff	18		clc				clc 								; add stacked value
.ae00	68		pla				pla
.ae01	6d a8 04	adc $04a8			adc 	tokenLineNumber
.ae04	8d a8 04	sta $04a8			sta 	tokenLineNumber
.ae07	68		pla				pla
.ae08	6d a9 04	adc $04a9			adc 	tokenLineNumber+1
.ae0b	8d a9 04	sta $04a9			sta 	tokenLineNumber+1 			; line # x 5
.ae0e	20 2f ae	jsr $ae2f			jsr 	_TELNTimes2 				; line # x 10
.ae11	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get and consume character
.ae14	e8		inx				inx
.ae15	29 0f		and #$0f			and 	#15 						; add to line #
.ae17	18		clc				clc
.ae18	6d a8 04	adc $04a8			adc 	tokenLineNumber
.ae1b	8d a8 04	sta $04a8			sta 	tokenLineNumber
.ae1e	90 03		bcc $ae23			bcc 	_TLENNoCarry
.ae20	ee a9 04	inc $04a9			inc 	tokenLineNumber+1
.ae23					_TLENNoCarry:
.ae23	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; more digits ?
.ae26	c9 30		cmp #$30			cmp 	#'0'
.ae28	90 04		bcc $ae2e			bcc 	_TLENExit
.ae2a	c9 3a		cmp #$3a			cmp 	#'9'+1
.ae2c	90 c3		bcc $adf1			bcc 	TokeniseExtractLineNumber
.ae2e					_TLENExit:
.ae2e	60		rts				rts
.ae2f					_TELNTimes2:
.ae2f	0e a8 04	asl $04a8			asl 	tokenLineNumber
.ae32	2e a9 04	rol $04a9			rol 	tokenLineNumber+1
.ae35	60		rts				rts
.ae36					TokeniseWriteByte:
.ae36	da		phx				phx
.ae37	ae a7 04	ldx $04a7			ldx 	tokenOffset 				; next slot to write to
.ae3a	9d a7 04	sta $04a7,x			sta 	tokenOffset,x 				; write byte out
.ae3d	ee a7 04	inc $04a7			inc 	tokenOffset 				; advance slot.
.ae40	fa		plx				plx
.ae41	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.ae42					CheckCreateVariableRecord:
.ae42	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.ae44	85 36		sta $36				sta 	0+zTemp0
.ae46	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.ae48	85 37		sta $37				sta 	1+zTemp0
.ae4a					_CCVSearch:
.ae4a	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.ae4c	f0 2c		beq $ae7a			beq 	_CCVFail
.ae4e	a0 01		ldy #$01			ldy 	#1 							; read the hash
.ae50	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.ae52	cd 83 04	cmp $0483			cmp 	identHash
.ae55	d0 16		bne $ae6d			bne 	_CCVNext
.ae57	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.ae59	ae 80 04	ldx $0480			ldx 	identStart
.ae5c					_CCVCompare:
.ae5c	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.ae5f	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.ae61	e8		inx				inx 								; advance pointers
.ae62	c8		iny				iny
.ae63	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.ae64	d0 07		bne $ae6d			bne 	_CCVNext  					; didn't match go to next.
.ae66	90 f4		bcc $ae5c			bcc 	_CCVCompare 				; not finished yet.
.ae68	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.ae6b	f0 41		beq $aeae			beq 	_CCVFound 					; yes, we were successful
.ae6d					_CCVNext:
.ae6d	18		clc				clc
.ae6e	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.ae70	65 36		adc $36				adc 	zTemp0
.ae72	85 36		sta $36				sta 	zTemp0
.ae74	90 d4		bcc $ae4a			bcc 	_CCVSearch
.ae76	e6 37		inc $37				inc 	zTemp0+1
.ae78	80 d0		bra $ae4a			bra 	_CCVSearch
.ae7a					_CCVFail:
.ae7a	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.ae7c	ad 83 04	lda $0483			lda 	identHash
.ae7f	91 36		sta ($36),y			sta 	(zTemp0),y
.ae81	c8		iny				iny 								; offset 2 is the type byte
.ae82	ad 84 04	lda $0484			lda 	identTypeByte
.ae85	91 36		sta ($36),y			sta 	(zTemp0),y
.ae87	c8		iny				iny
.ae88					_CCVData:
.ae88	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.ae8a	91 36		sta ($36),y			sta 	(zTemp0),y
.ae8c	c8		iny				iny
.ae8d	c0 08		cpy #$08			cpy 	#8
.ae8f	90 f7		bcc $ae88			bcc 	_CCVData
.ae91	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.ae94					_CCVCopyName:
.ae94	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ae97	91 36		sta ($36),y			sta 	(zTemp0),y
.ae99	e8		inx				inx
.ae9a	c8		iny				iny
.ae9b	ec 82 04	cpx $0482			cpx 	identTypeEnd
.ae9e	d0 f4		bne $ae94			bne 	_CCVCopyName
.aea0	98		tya				tya 								; patch offset
.aea1	92 36		sta ($36)			sta 	(zTemp0)
.aea3	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.aea5	91 36		sta ($36),y			sta 	(zTemp0),y
.aea7	88		dey				dey
.aea8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.aeaa	09 80		ora #$80			ora 	#$80
.aeac	91 36		sta ($36),y			sta 	(zTemp0),y
.aeae					_CCVFound:
.aeae	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.aeb0	38		sec				sec
.aeb1	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.aeb3	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.aeb5	20 36 ae	jsr $ae36			jsr 	TokeniseWriteByte
.aeb8	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.aeba	20 36 ae	jsr $ae36			jsr 	TokeniseWriteByte
.aebd	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
