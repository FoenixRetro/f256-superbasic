
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Tue Oct  4 12:03:59 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					dataPointer:
>0715							.fill 	5
.071a					inDataStatement:
>071a							.fill 	1
.071b					tbOffset:
>071b							.fill 	1
.071c					AssemblerAddress:
>071c							.fill 	2
.071e					AssemblerControl:
>071e							.fill 	1
.071f					ParamStart:
>071f							.fill 	2
.0721					IsGroup1:
>0721							.fill 	1
.0722					BaseOpcode:
>0722							.fill 	1
.0723					ModeMask:
>0723							.fill 	1
.0724					tokenOffset:
>0724							.fill 	1
.0725					tokenLineNumber:
>0725							.fill 	2
.0727					tokenBuffer:
>0727							.fill 	253
.0824					lineBuffer:
>0824							.fill 	MaxLineSize+1
.0875					numberBuffer:
>0875							.fill 	34
.0897					decimalBuffer:
>0897							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 c8 86	jsr $86c8			jsr 	NewCommand 					; erase current program
.8006	20 a5 96	jsr $96a5			jsr 	BackloadProgram
.8009	4c 14 88	jmp $8814			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 34 a5	jsr $a534			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	5f 8c					.word	ShiftLeft                        ; $00 <<
>8016	59 8b					.word	BinaryCompareLessEqual           ; $01 <=
>8018	4f 8b					.word	BinaryCompareNotEqual            ; $02 <>
>801a	d1 a2					.word	SyntaxError                      ; $03 !!3
>801c	d1 a2					.word	SyntaxError                      ; $04 ><
>801e	63 8b					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	62 8c					.word	ShiftRight                       ; $06 >>
>8022	d1 a2					.word	SyntaxError                      ; $07 !!7
>8024	d1 a2					.word	SyntaxError                      ; $08 !!8
>8026	d1 a2					.word	SyntaxError                      ; $09 !!9
>8028	d1 a2					.word	SyntaxError                      ; $0a !!10
>802a	d1 a2					.word	SyntaxError                      ; $0b !!11
>802c	d1 a2					.word	SyntaxError                      ; $0c !!12
>802e	d1 a2					.word	SyntaxError                      ; $0d !!13
>8030	d1 a2					.word	SyntaxError                      ; $0e !!14
>8032	d1 a2					.word	SyntaxError                      ; $0f !!15
>8034	d1 a2					.word	SyntaxError                      ; $10 @
>8036	d1 a2					.word	SyntaxError                      ; $11 !!17
>8038	d1 a2					.word	SyntaxError                      ; $12 !!18
>803a	d1 a2					.word	SyntaxError                      ; $13 [
>803c	08 9d					.word	IntegerDivide                    ; $14 \
>803e	d1 a2					.word	SyntaxError                      ; $15 ]
>8040	e8 8d					.word	EorInteger                       ; $16 ^
>8042	d1 a2					.word	SyntaxError                      ; $17 _
>8044	d1 a2					.word	SyntaxError                      ; $18 `
>8046	d1 a2					.word	SyntaxError                      ; $19 !!25
>8048	d1 a2					.word	SyntaxError                      ; $1a !!26
>804a	d1 a2					.word	SyntaxError                      ; $1b {
>804c	a2 8d					.word	OraInteger                       ; $1c |
>804e	d1 a2					.word	SyntaxError                      ; $1d }
>8050	d1 a2					.word	SyntaxError                      ; $1e ~
>8052	d1 a2					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	d1 a2					.word	SyntaxError                      ; $20
>8056	2e 8e					.word	WordIndirect                     ; $21 !
>8058	d1 a2					.word	SyntaxError                      ; $22 "
>805a	d1 a2					.word	SyntaxError                      ; $23 #
>805c	d1 a2					.word	SyntaxError                      ; $24 $
>805e	55 9d					.word	IntegerModulus                   ; $25 %
>8060	5c 8d					.word	AndInteger                       ; $26 &
>8062	d1 a2					.word	SyntaxError                      ; $27 '
>8064	d1 a2					.word	SyntaxError                      ; $28 (
>8066	d1 a2					.word	SyntaxError                      ; $29 )
>8068	ca 9d					.word	MulInteger                       ; $2a *
>806a	f6 8c					.word	AddInteger                       ; $2b +
>806c	d1 a2					.word	SyntaxError                      ; $2c ,
>806e	31 8d					.word	SubInteger                       ; $2d -
>8070	d1 a2					.word	SyntaxError                      ; $2e .
>8072	61 9f					.word	FDivideCommand                   ; $2f /
>8074	d1 a2					.word	SyntaxError                      ; $30 0
>8076	d1 a2					.word	SyntaxError                      ; $31 1
>8078	d1 a2					.word	SyntaxError                      ; $32 2
>807a	d1 a2					.word	SyntaxError                      ; $33 3
>807c	d1 a2					.word	SyntaxError                      ; $34 4
>807e	d1 a2					.word	SyntaxError                      ; $35 5
>8080	d1 a2					.word	SyntaxError                      ; $36 6
>8082	d1 a2					.word	SyntaxError                      ; $37 7
>8084	d1 a2					.word	SyntaxError                      ; $38 8
>8086	d1 a2					.word	SyntaxError                      ; $39 9
>8088	d1 a2					.word	SyntaxError                      ; $3a :
>808a	d1 a2					.word	SyntaxError                      ; $3b ;
>808c	3b 8b					.word	BinaryCompareLess                ; $3c <
>808e	31 8b					.word	BinaryCompareEqual               ; $3d =
>8090	45 8b					.word	BinaryCompareGreater             ; $3e >
>8092	55 8e					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	69 88					.word	EOLCommand                       ; $80 !0:EOF
>8096	76 88					.word	Shift1Command                    ; $81 !1:SH1
>8098	d1 a2					.word	SyntaxError                      ; $82 !2:SH2
>809a	a7 a0					.word	AbsUnary                         ; $83 ABS(
>809c	1f 93					.word	AllocUnary                       ; $84 ALLOC(
>809e	b7 a0					.word	AscUnary                         ; $85 ASC(
>80a0	da 93					.word	ChrUnary                         ; $86 CHR$(
>80a2	2d 8b					.word	UnaryFalse                       ; $87 FALSE
>80a4	c4 a0					.word	FracUnary                        ; $88 FRAC(
>80a6	da a0					.word	IntUnary                         ; $89 INT(
>80a8	30 a1					.word	IsValUnary                       ; $8a ISVAL(
>80aa	b4 94					.word	Unary_Left                       ; $8b LEFT$(
>80ac	ec a0					.word	LenUnary                         ; $8c LEN(
>80ae	de 94					.word	Unary_Mid                        ; $8d MID$(
>80b0	77 93					.word	Unary_Not                        ; $8e NOT(
>80b2	c4 94					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	8d 93					.word	Unary_Rnd                        ; $90 RND(
>80b6	06 a1					.word	SgnUnary                         ; $91 SGN(
>80b8	ec 93					.word	SpcUnary                         ; $92 SPC(
>80ba	07 94					.word	Unary_Str                        ; $93 STR$(
>80bc	21 8b					.word	UnaryTrue                        ; $94 TRUE
>80be	26 a1					.word	ValUnary                         ; $95 VAL(
>80c0	8b 84					.word	ForCommand                       ; $96 FOR
>80c2	cf 85					.word	IfCommand                        ; $97 IF
>80c4	7e 88					.word	Unused1                          ; $98 PROC
>80c6	c0 87					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	86 8a					.word	Command_WHILE                    ; $9a WHILE
>80ca	f8 85					.word	EndIf                            ; $9b ENDIF
>80cc	e1 9c					.word	Command_ENDPROC                  ; $9c ENDPROC
>80ce	45 85					.word	NextCommand                      ; $9d NEXT
>80d0	7e 88					.word	Unused4                          ; $9e THEN
>80d2	c9 87					.word	Command_UNTIL                    ; $9f UNTIL
>80d4	a7 8a					.word	Command_WEND                     ; $a0 WEND
>80d6	60 83					.word	CallCommand                      ; $a1 CALL
>80d8	d1 a2					.word	SyntaxError                      ; $a2 CLS
>80da	c3 83					.word	Command_Data                     ; $a3 DATA
>80dc	cb 83					.word	DimCommand                       ; $a4 DIM
>80de	7e 88					.word	Unused3                          ; $a5 DOWNTO
>80e0	f1 85					.word	ElseCode                         ; $a6 ELSE
>80e2	9e 85					.word	Command_GOSUB                    ; $a7 GOSUB
>80e4	bc 85					.word	GotoCommand                      ; $a8 GOTO
>80e6	f9 85					.word	LetCommand                       ; $a9 LET
>80e8	d2 86					.word	Command_Print                    ; $aa PRINT
>80ea	5a 87					.word	Command_Read                     ; $ab READ
>80ec	b3 87					.word	RemCommand                       ; $ac REM
>80ee	ae 85					.word	Command_RETURN                   ; $ad RETURN
>80f0	7e 88					.word	Unused2                          ; $ae TO
.80f2					VectorSet1:
>80f2	d1 a2					.word	SyntaxError                      ; $80 !0:EOF
>80f4	d1 a2					.word	SyntaxError                      ; $81 !1:SH1
>80f6	d1 a2					.word	SyntaxError                      ; $82 !2:SH2
>80f8	50 83					.word	AssertCommand                    ; $83 ASSERT
>80fa	6e 83					.word	ClearCommand                     ; $84 CLEAR
>80fc	88 84					.word	EndCommand                       ; $85 END
>80fe	32 86					.word	Command_List                     ; $86 LIST
>8100	c8 86					.word	NewCommand                       ; $87 NEW
>8102	e2 87					.word	Command_Restore                  ; $88 RESTORE
>8104	14 88					.word	CommandRUN                       ; $89 RUN
>8106	81 88					.word	StopCommand                      ; $8a STOP
.8108					VectorSet2:
>8108	d1 a2					.word	SyntaxError                      ; $80 !0:EOF
>810a	d1 a2					.word	SyntaxError                      ; $81 !1:SH1
>810c	d1 a2					.word	SyntaxError                      ; $82 !2:SH2
>810e	94 a1					.word	Assemble_adc                     ; $83 ADC
>8110	8c a1					.word	Assemble_and                     ; $84 AND
>8112	a8 a1					.word	Assemble_asl                     ; $85 ASL
>8114	12 a2					.word	Assemble_bcc                     ; $86 BCC
>8116	16 a2					.word	Assemble_bcs                     ; $87 BCS
>8118	1e a2					.word	Assemble_beq                     ; $88 BEQ
>811a	d5 a1					.word	Assemble_bit                     ; $89 BIT
>811c	06 a2					.word	Assemble_bmi                     ; $8a BMI
>811e	1a a2					.word	Assemble_bne                     ; $8b BNE
>8120	02 a2					.word	Assemble_bpl                     ; $8c BPL
>8122	22 a2					.word	Assemble_bra                     ; $8d BRA
>8124	26 a2					.word	Assemble_brk                     ; $8e BRK
>8126	0a a2					.word	Assemble_bvc                     ; $8f BVC
>8128	0e a2					.word	Assemble_bvs                     ; $90 BVS
>812a	2e a2					.word	Assemble_clc                     ; $91 CLC
>812c	82 a2					.word	Assemble_cld                     ; $92 CLD
>812e	42 a2					.word	Assemble_cli                     ; $93 CLI
>8130	72 a2					.word	Assemble_clv                     ; $94 CLV
>8132	a0 a1					.word	Assemble_cmp                     ; $95 CMP
>8134	e9 a1					.word	Assemble_cpx                     ; $96 CPX
>8136	e4 a1					.word	Assemble_cpy                     ; $97 CPY
>8138	c6 a1					.word	Assemble_dec                     ; $98 DEC
>813a	7e a2					.word	Assemble_dex                     ; $99 DEX
>813c	5a a2					.word	Assemble_dey                     ; $9a DEY
>813e	90 a1					.word	Assemble_eor                     ; $9b EOR
>8140	cb a1					.word	Assemble_inc                     ; $9c INC
>8142	8a a2					.word	Assemble_inx                     ; $9d INX
>8144	7a a2					.word	Assemble_iny                     ; $9e INY
>8146	fd a1					.word	Assemble_jmp                     ; $9f JMP
>8148	f8 a1					.word	Assemble_jsr                     ; $a0 JSR
>814a	9c a1					.word	Assemble_lda                     ; $a1 LDA
>814c	c1 a1					.word	Assemble_ldx                     ; $a2 LDX
>814e	df a1					.word	Assemble_ldy                     ; $a3 LDY
>8150	b2 a1					.word	Assemble_lsr                     ; $a4 LSR
>8152	8e a2					.word	Assemble_nop                     ; $a5 NOP
>8154	88 a1					.word	Assemble_ora                     ; $a6 ORA
>8156	3e a2					.word	Assemble_pha                     ; $a7 PHA
>8158	2a a2					.word	Assemble_php                     ; $a8 PHP
>815a	86 a2					.word	Assemble_phx                     ; $a9 PHX
>815c	46 a2					.word	Assemble_phy                     ; $aa PHY
>815e	4e a2					.word	Assemble_pla                     ; $ab PLA
>8160	32 a2					.word	Assemble_plp                     ; $ac PLP
>8162	96 a2					.word	Assemble_plx                     ; $ad PLX
>8164	56 a2					.word	Assemble_ply                     ; $ae PLY
>8166	ad a1					.word	Assemble_rol                     ; $af ROL
>8168	b7 a1					.word	Assemble_ror                     ; $b0 ROR
>816a	3a a2					.word	Assemble_rti                     ; $b1 RTI
>816c	4a a2					.word	Assemble_rts                     ; $b2 RTS
>816e	a4 a1					.word	Assemble_sbc                     ; $b3 SBC
>8170	36 a2					.word	Assemble_sec                     ; $b4 SEC
>8172	92 a2					.word	Assemble_sed                     ; $b5 SED
>8174	52 a2					.word	Assemble_sei                     ; $b6 SEI
>8176	98 a1					.word	Assemble_sta                     ; $b7 STA
>8178	bc a1					.word	Assemble_stx                     ; $b8 STX
>817a	da a1					.word	Assemble_sty                     ; $b9 STY
>817c	d0 a1					.word	Assemble_stz                     ; $ba STZ
>817e	6e a2					.word	Assemble_tax                     ; $bb TAX
>8180	6a a2					.word	Assemble_tay                     ; $bc TAY
>8182	f3 a1					.word	Assemble_trb                     ; $bd TRB
>8184	ee a1					.word	Assemble_tsb                     ; $be TSB
>8186	76 a2					.word	Assemble_tsx                     ; $bf TSX
>8188	5e a2					.word	Assemble_txa                     ; $c0 TXA
>818a	66 a2					.word	Assemble_txs                     ; $c1 TXS
>818c	62 a2					.word	Assemble_tya                     ; $c2 TYA

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.818e					AssembleGroup1:
.818e	a9 ff		lda #$ff			lda 	#$FF
.8190	8d 23 07	sta $0723			sta 	ModeMask 					; initialise the mode mask - all for all
.8193	80 02		bra $8197			bra 	AsmGroup12
.8195					AssembleGroup2:
.8195	a5 00		lda $00				lda 	$00
.8197					AsmGroup12:
.8197	8d 21 07	sta $0721			sta 	IsGroup1 					; save the 'group 1' flag
.819a	68		pla				pla 								; pop the return address to access the information following.
.819b	fa		plx				plx
.819c	20 25 82	jsr $8225			jsr 	AccessParameters 			; get opcode and save as base
.819f	8d 22 07	sta $0722			sta 	BaseOpcode
.81a2	ad 21 07	lda $0721			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.81a5	d0 08		bne $81af			bne 	_AG12HaveMask
.81a7	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.81a9	20 2d 82	jsr $822d			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.81ac	8d 23 07	sta $0723			sta 	ModeMask
.81af					_AG12HaveMask:
.81af	20 e2 82	jsr $82e2			jsr 	TypeAndCalculateOperand 	; get zero page type
.81b2	da		phx				phx 								; save found address mode
.81b3	20 3f 82	jsr $823f			jsr 	AssembleModeX
.81b6	fa		plx				plx  								; restore address mode
.81b7	b0 0b		bcs $81c4			bcs 	_AG12Exit
.81b9	20 c5 81	jsr $81c5			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.81bc	20 3f 82	jsr $823f			jsr 	AssembleModeX
.81bf	b0 03		bcs $81c4			bcs 	_AG12Exit
.81c1	4c d1 a2	jmp $a2d1			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.81c4					_AG12Exit:
.81c4	60		rts				rts
.81c5					PromoteToAbsolute:
.81c5	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.81c7	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.81c9	f0 19		beq $81e4			beq 	_PTADo
.81cb	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.81cd	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.81cf	f0 13		beq $81e4			beq 	_PTADo
.81d1	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.81d3	e0 80		cpx #$80			cpx 	#AM_ZEROY
.81d5	f0 0d		beq $81e4			beq 	_PTADo
.81d7	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.81d9	e0 d1		cpx #$d1			cpx 	#AM_IND
.81db	f0 07		beq $81e4			beq 	_PTADo
.81dd	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.81df	e0 c0		cpx #$c0			cpx 	#AM_INDX
.81e1	f0 01		beq $81e4			beq 	_PTADo
.81e3	60		rts				rts
.81e4					_PTADo:
.81e4	aa		tax				tax
.81e5	60		rts				rts
.81e6					AssembleGroup3:
.81e6	68		pla				pla 								; get parameters, which is just the opcode.
.81e7	fa		plx				plx
.81e8	20 25 82	jsr $8225			jsr 	AccessParameters 			; get and output opcode
.81eb	20 3d 82	jsr $823d			jsr 	AssemblerWriteByte
.81ee	20 46 83	jsr $8346			jsr 	CalculateOperand 			; get a 16 bit operand
.81f1	ad 08 06	lda $0608			lda 	NSMantissa0 				; calculate the offset
.81f4	38		sec				sec
.81f5	ed 1c 07	sbc $071c			sbc 	AssemblerAddress
.81f8	48		pha				pha 								; LSB in A
.81f9	ad 10 06	lda $0610			lda 	NSMantissa1
.81fc	ed 1d 07	sbc $071d			sbc 	AssemblerAddress+1
.81ff	aa		tax				tax 								; MSB in X
.8200	68		pla				pla
.8201	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8202	69 7f		adc #$7f			adc 	#$7F
.8204	90 01		bcc $8207			bcc 	_AG3NoCarry
.8206	e8		inx				inx
.8207					_AG3NoCarry:
.8207	38		sec				sec 								; fix back and write out anyways.
.8208	e9 80		sbc #$80			sbc 	#$80
.820a	20 3d 82	jsr $823d			jsr 	AssemblerWriteByte
.820d	e0 00		cpx #$00			cpx 	#0 							; was it in range
.820f	f0 0a		beq $821b			beq 	_AG3Exit
.8211	ad 1e 07	lda $071e			lda 	AssemblerControl 			; are we allowing bad values ?
.8214	29 01		and #$01			and 	#1
.8216	f0 03		beq $821b			beq 	_AG3Exit
.8218	4c d6 a2	jmp $a2d6			jmp 	RangeError 					; no, branch is out of range
.821b					_AG3Exit:
.821b	60		rts				rts
.821c					AssembleGroup4:
.821c	68		pla				pla 								; pop address
.821d	fa		plx				plx
.821e	20 25 82	jsr $8225			jsr 	AccessParameters 			; access and get first
.8221	20 3d 82	jsr $823d			jsr 	AssemblerWriteByte 			; output it.
.8224	60		rts				rts
.8225					AccessParameters:
.8225	8d 1f 07	sta $071f			sta 	ParamStart
.8228	8e 20 07	stx $0720			stx 	ParamStart+1
.822b	a9 01		lda #$01			lda 	#1
.822d					GetParameter:
.822d	5a		phy				phy
.822e	a8		tay				tay
.822f	ad 1f 07	lda $071f			lda 	ParamStart
.8232	85 36		sta $36				sta 	zTemp0
.8234	ad 20 07	lda $0720			lda 	ParamStart+1
.8237	85 37		sta $37				sta 	zTemp0+1
.8239	b1 36		lda ($36),y			lda 	(zTemp0),y
.823b	7a		ply				ply
.823c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.823d					AssemblerWriteByte:
>823d	db						.byte 	$DB 						; causes a break in the emulator
.823e	60		rts			rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.823f					AssembleModeX:
.823f	5a		phy				phy
.8240	ad 21 07	lda $0721			lda 	IsGroup1
.8243	f0 17		beq $825c			beq 	_AMXGroup2
.8245	8a		txa				txa 							; is it in group # 1
.8246	29 40		and #$40			and 	#AM_ISG1
.8248	f0 50		beq $829a			beq 	_AMXFail 				; no, give up.
.824a	8a		txa				txa 							; get back.
.824b	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.824d	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.824f	d0 22		bne $8273			bne 	_AMXHaveInfo
.8251	ad 22 07	lda $0722			lda 	BaseOpcode 				; cannot store immediate.
.8254	c9 81		cmp #$81			cmp 	#$81
.8256	f0 42		beq $829a			beq 	_AMXFail
.8258	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.825a	80 17		bra $8273			bra 	_AMXHaveInfo 			; odd design decision there.
.825c					_AMXGroup2:
.825c	8a		txa				txa 							; is it in group 2 ?
.825d	29 20		and #$20			and 	#AM_ISG2
.825f	f0 39		beq $829a			beq 	_AMXFail 				; no, give up.
.8261	8a		txa				txa 							; get the offset into Y
.8262	29 1f		and #$1f			and 	#$1F
.8264	4a		lsr a				lsr 	a 						; make it 0-7.
.8265	4a		lsr a				lsr  	a
.8266	a8		tay				tay
.8267	ad 23 07	lda $0723			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.826a					_AMXCheckOkay:
.826a	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.826b	88		dey				dey
.826c	10 fc		bpl $826a			bpl 	_AMXCheckOkay
.826e	90 2a		bcc $829a			bcc 	_AMXFail 				; not allowed.
.8270	8a		txa				txa  							; get mask back
.8271	29 1f		and #$1f			and 	#$1F
.8273					_AMXHaveInfo:
.8273	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8275	10 05		bpl $827c			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8277	ac 10 06	ldy $0610			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.827a	d0 1e		bne $829a			bne 	_AMXFail
.827c					_AMXAnySize:
.827c	18		clc				clc 							; add offset to the base opcode
.827d	6d 22 07	adc $0722			adc 	BaseOpcode
.8280					_AMXOutputCode:
.8280	20 3d 82	jsr $823d			jsr 	AssemblerWriteByte 		; write the opcode out.
.8283	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8285	f0 10		beq $8297			beq 	_AMXExit
.8287	ad 08 06	lda $0608			lda 	NSMantissa0 				; write LSB operand
.828a	20 3d 82	jsr $823d			jsr 	AssemblerWriteByte
.828d	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.828f	30 06		bmi $8297			bmi 	_AMXExit
.8291	ad 10 06	lda $0610			lda 	NSMantissa1 			; write MSB operand
.8294	20 3d 82	jsr $823d			jsr 	AssemblerWriteByte
.8297					_AMXExit:
.8297	7a		ply				ply
.8298	38		sec				sec
.8299	60		rts				rts
.829a					_AMXFail:
.829a	a0 00		ldy #$00			ldy 	#0
.829c					_AMXCheckOddities:
.829c	8a		txa				txa
.829d	d9 c5 82	cmp $82c5,y			cmp 	ExtraOpcode+2,y 		; match address mode
.82a0	d0 16		bne $82b8			bne 	_AMXCONext
.82a2	b9 c3 82	lda $82c3,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.82a5	cd 22 07	cmp $0722			cmp 	BaseOpcode
.82a8	d0 0e		bne $82b8			bne 	_AMXCONext
.82aa	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.82ac	10 05		bpl $82b3			bpl 	_AMXCONotZero
.82ae	ad 09 06	lda $0609			lda 	NSMantissa0+1
.82b1	d0 0d		bne $82c0			bne 	_AMXCOFail
.82b3					_AMXCONotZero:
.82b3	b9 c4 82	lda $82c4,y			lda 	ExtraOpcode+1,y 		; get new opcode
.82b6	80 c8		bra $8280			bra 	_AMXOutputCode 			; and assemble it
.82b8					_AMXCONext:
.82b8	c8		iny				iny
.82b9	c8		iny				iny
.82ba	c8		iny				iny
.82bb	b9 c3 82	lda $82c3,y			lda 	ExtraOpcode+0,y 		; end of table
.82be	d0 dc		bne $829c			bne 	_AMXCheckOddities
.82c0					_AMXCOFail:
.82c0	7a		ply				ply
.82c1	18		clc				clc
.82c2	60		rts				rts
.82c3					ExtraOpcode:
>82c3	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>82c6	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>82c9	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>82cc	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>82cf	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>82d2	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>82d5	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>82d8	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>82db	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>82de	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>82e1	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.82e2					TypeAndCalculateOperand:
.82e2	b1 30		lda ($30),y			lda 	(codePtr),y
.82e4	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.82e6	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.82e8	f0 5b		beq $8345			beq 	_TACOExit
.82ea	c9 80		cmp #$80			cmp 	#KWC_EOL
.82ec	f0 57		beq $8345			beq 	_TACOExit
.82ee	c8		iny				iny
.82ef	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.82f1	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.82f3	f0 51		beq $8346			beq 	CalculateOperand
.82f5	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.82f7	f0 1f		beq $8318			beq 	_TACOIndirect
.82f9	88		dey				dey 								; undo get of first character
.82fa	20 46 83	jsr $8346			jsr 	CalculateOperand 			; get operand
.82fd	b1 30		lda ($30),y			lda 	(codePtr),y
.82ff	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8301	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8303	d0 40		bne $8345			bne 	_TACOExit
.8305	c8		iny				iny
.8306	20 e0 9c	jsr $9ce0			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8309	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.830b	c9 58		cmp #$58			cmp 	#'X'
.830d	f0 36		beq $8345			beq 	_TACOExit
.830f	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8311	c9 59		cmp #$59			cmp 	#'Y'
.8313	f0 30		beq $8345			beq 	_TACOExit
.8315					_TACOSyntax:
.8315	4c d1 a2	jmp $a2d1			jmp 	SyntaxError
.8318					_TACOIndirect:
.8318	20 46 83	jsr $8346			jsr 	CalculateOperand 			; get the operand
.831b	b1 30		lda ($30),y			lda 	(codePtr),y
.831d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.831f	f0 17		beq $8338			beq 	_TACOIndX
.8321	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8324	b1 30		lda ($30),y			lda 	(codePtr),y
.8326	a2 d1		ldx #$d1			ldx 	#AM_IND
.8328	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.832a	d0 19		bne $8345			bne 	_TACOExit
.832c	c8		iny				iny
.832d	20 e0 9c	jsr $9ce0			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8330	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8332	d0 e1		bne $8315			bne 	_TACOSyntax
.8334	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8336	80 0d		bra $8345			bra 	_TACOExit
.8338					_TACOIndX:
.8338	c8		iny				iny
.8339	20 e0 9c	jsr $9ce0			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.833c	c9 58		cmp #$58			cmp 	#'X' 						; check X
.833e	d0 d5		bne $8315			bne 	_TACOSyntax
.8340	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket			; check )
.8343	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8345					_TACOExit:
.8345	60		rts				rts
.8346					CalculateOperand:
.8346	48		pha				pha
.8347	da		phx				phx
.8348	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.834a	20 94 95	jsr $9594			jsr 	Evaluate16BitInteger
.834d	fa		plx				plx
.834e	68		pla				pla
.834f	60		rts				rts
.9ce0					TACOCheckXY:
>9ce0	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8350					AssertCommand:
.8350	a2 00		ldx #$00			ldx 	#0
.8352	20 7f 95	jsr $957f			jsr 	EvaluateInteger 			; the assert test
.8355	20 38 96	jsr $9638			jsr 	NSMIsZero 					; exit if result is non zero.
.8358	d0 05		bne $835f			bne 	_ACExit
.835a	a9 0a		lda #$0a		lda	#10
.835c	4c b5 8a	jmp $8ab5		jmp	ErrorHandler
.835f					_ACExit:
.835f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8360					CallCommand:
.8360	a2 00		ldx #$00			ldx 	#0
.8362	20 94 95	jsr $9594			jsr 	Evaluate16BitInteger
.8365	ad 10 06	lda $0610			lda 	NSMantissa1
.8368	8d 09 06	sta $0609			sta 	NSMantissa0+1
.836b	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.836e					ClearCommand:
.836e	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8370	85 36		sta $36				sta 	0+zTemp0
.8372	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8374	85 37		sta $37				sta 	1+zTemp0
.8376					_ClearZeroLoop:
.8376	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8378	f0 24		beq $839e			beq 	_ClearZeroEnd
.837a	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.837c	a9 00		lda #$00			lda 	#0
.837e					_ClearOneVariable:
.837e	91 36		sta ($36),y			sta 	(zTemp0),y
.8380	c8		iny				iny
.8381	c0 08		cpy #$08			cpy 	#8
.8383	d0 f9		bne $837e			bne 	_ClearOneVariable
.8385	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8387	b1 36		lda ($36),y			lda 	(zTemp0),y
.8389	c9 18		cmp #$18			cmp 	#NSTProcedure
.838b	d0 04		bne $8391			bne 	_ClearNotProcedure
.838d	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.838f	91 36		sta ($36),y			sta 	(zTemp0),y
.8391					_ClearNotProcedure:
.8391	18		clc				clc 								; go to the next variable
.8392	b2 36		lda ($36)			lda 	(zTemp0)
.8394	65 36		adc $36				adc 	zTemp0
.8396	85 36		sta $36				sta 	zTemp0
.8398	90 dc		bcc $8376			bcc 	_ClearZeroLoop
.839a	e6 37		inc $37				inc 	zTemp0+1
.839c	80 d8		bra $8376			bra 	_ClearZeroLoop
.839e					_ClearZeroEnd:
.839e	18		clc				clc
.839f	a5 36		lda $36				lda 	zTemp0
.83a1	69 01		adc #$01			adc 	#1
.83a3	8d 0c 07	sta $070c			sta 	lowMemPtr
.83a6	a5 37		lda $37				lda 	zTemp0+1
.83a8	69 00		adc #$00			adc 	#0
.83aa	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.83ad	20 98 96	jsr $9698			jsr 	StackReset
.83b0	20 aa a4	jsr $a4aa			jsr 	StringSystemInitialise
.83b3	20 d5 89	jsr $89d5			jsr 	ProcedureScan
.83b6	20 e2 87	jsr $87e2			jsr 	Command_Restore
.83b9	9c 1c 07	stz $071c			stz 	AssemblerAddress
.83bc	9c 1d 07	stz $071d			stz 	AssemblerAddress+1
.83bf	9c 1e 07	stz $071e			stz 	AssemblerControl
.83c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.83c3					Command_Data:
.83c3	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.83c5	a2 80		ldx #$80			ldx 	#KWC_EOL
.83c7	20 27 8a	jsr $8a27			jsr 	ScanForward
.83ca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.83cb					DimCommand:
.83cb	b1 30		lda ($30),y			lda 	(codePtr),y
.83cd	29 c0		and #$c0			and 	#$C0
.83cf	c9 40		cmp #$40			cmp 	#$40
.83d1	d0 7a		bne $844d			bne 	_DCSyntax
.83d3	b1 30		lda ($30),y			lda 	(codePtr),y
.83d5	18		clc				clc
.83d6	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.83d8	85 3f		sta $3f				sta 	zaTemp+1
.83da	c8		iny				iny
.83db	b1 30		lda ($30),y			lda 	(codePtr),y
.83dd	c8		iny				iny
.83de	85 3e		sta $3e				sta 	zaTemp
.83e0	5a		phy				phy
.83e1	a0 02		ldy #$02			ldy 	#2 						; read type byte
.83e3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.83e5	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.83e7	c9 18		cmp #$18			cmp 	#NSTProcedure
.83e9	f0 62		beq $844d			beq 	_DCSyntax
.83eb	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.83ed	29 04		and #$04			and 	#NSBIsArray
.83ef	f0 64		beq $8455			beq 	_DCType
.83f1	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.83f3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.83f5	d0 59		bne $8450			bne 	_DCRedefine
.83f7	7a		ply				ply
.83f8	20 58 84	jsr $8458			jsr 	_DCGetSize 				; get array size, check it.
.83fb	5a		phy				phy
.83fc	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.83fe	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8400	7a		ply				ply 							; is there a second (e.g. ,x)
.8401	b1 30		lda ($30),y			lda 	(codePtr),y
.8403	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8405	d0 0a		bne $8411			bne 	_DCOneDimension
.8407	c8		iny				iny 							; skip comma
.8408	20 58 84	jsr $8458			jsr 	_DCGetSize 				; get 2nd array size
.840b	5a		phy				phy
.840c	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.840e	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8410	7a		ply				ply
.8411					_DCOneDimension:
.8411	5a		phy				phy 							; save position
.8412	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8414	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8416	aa		tax				tax
.8417	c8		iny				iny
.8418	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.841a	e8		inx				inx 							; bump them.
.841b	1a		inc a				inc 	a
.841c	20 71 a1	jsr $a171			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.841f	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8421	29 e0		and #$e0			and 	#$E0
.8423	d0 23		bne $8448			bne 	_DCSize
.8425	a0 02		ldy #$02			ldy 	#2 						; get base type
.8427	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8429	20 66 84	jsr $8466			jsr 	ScaleByBaseType 		; scale by base type
.842c	a5 36		lda $36				lda 	zTemp0
.842e	a6 37		ldx $37				ldx 	zTemp0+1
.8430	20 3e 93	jsr $933e			jsr 	AllocateXABytes 		; allocate memory
.8433	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8435	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8437	c8		iny				iny
.8438	8a		txa				txa
.8439	91 3e		sta ($3e),y			sta 	(zaTemp),y
.843b	7a		ply				ply 							; get position back
.843c	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket 		; check )
.843f	b1 30		lda ($30),y			lda 	(codePtr),y
.8441	c8		iny				iny 							; consume in case
.8442	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8444	f0 85		beq $83cb			beq 	DimCommand
.8446	88		dey				dey 							; undo consume
.8447	60		rts				rts
.8448					_DCSize:
.8448	a9 16		lda #$16		lda	#22
.844a	4c b5 8a	jmp $8ab5		jmp	ErrorHandler
.844d					_DCSyntax:
.844d	4c d1 a2	jmp $a2d1			jmp 	SyntaxError
.8450					_DCRedefine:
.8450	a9 15		lda #$15		lda	#21
.8452	4c b5 8a	jmp $8ab5		jmp	ErrorHandler
.8455					_DCType:
.8455	4c db a2	jmp $a2db			jmp 	TypeError
.8458					_DCGetSize:
.8458	a2 00		ldx #$00			ldx 	#0 						; get first index.
.845a	20 a0 95	jsr $95a0			jsr 	Evaluate8BitInteger 	; get array dimension
.845d	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.845f	f0 e7		beq $8448			beq 	_DCSize
.8461	c9 fe		cmp #$fe			cmp 	#254
.8463	f0 e3		beq $8448			beq 	_DCSize
.8465	60		rts				rts
.8466					ScaleByBaseType:
.8466	29 10		and #$10			and 	#NSBIsString 			; is it string
.8468	d0 19		bne $8483			bne 	_SBBTString
.846a	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.846c	48		pha				pha
.846d	a5 36		lda $36				lda 	zTemp0
.846f	48		pha				pha
.8470	06 36		asl $36				asl 	zTemp0 					; x 2
.8472	26 37		rol $37				rol 	zTemp0+1
.8474	06 36		asl $36				asl 	zTemp0 					; x 4
.8476	26 37		rol $37				rol 	zTemp0+1
.8478	68		pla				pla 							; add stacked value = x 5
.8479	65 36		adc $36				adc 	zTemp0
.847b	85 36		sta $36				sta 	zTemp0
.847d	68		pla				pla
.847e	65 37		adc $37				adc 	zTemp0+1
.8480	85 37		sta $37				sta 	zTemp0+1
.8482	60		rts				rts
.8483					_SBBTString:
.8483	06 36		asl $36				asl 	zTemp0
.8485	26 37		rol $37				rol 	zTemp0+1
.8487	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8488					EndCommand:
.8488	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.848b					ForCommand:
.848b	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.848d	20 45 96	jsr $9645			jsr 	StackOpen
.8490	a2 00		ldx #$00			ldx 	#0
.8492	20 8f 91	jsr $918f			jsr 	EvaluateTerm
.8495	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8498	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.849a	d0 49		bne $84e5			bne		_FCError
.849c	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.849e	20 ff 9c	jsr $9cff			jsr 	CheckNextA
.84a1	e8		inx				inx
.84a2	20 7f 95	jsr $957f			jsr 	EvaluateInteger 			; <from> in +1
.84a5	b1 30		lda ($30),y			lda 	(codePtr),y
.84a7	c8		iny				iny 								; consume it
.84a8	48		pha				pha 								; save on stack for later
.84a9	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.84ab	f0 04		beq $84b1			beq 	_FCNoSyntax
.84ad	c9 ae		cmp #$ae			cmp 	#KWD_TO
.84af	d0 37		bne $84e8			bne 	_FCSyntaxError
.84b1					_FCNoSyntax:
.84b1	e8		inx				inx
.84b2	20 7f 95	jsr $957f			jsr 	EvaluateInteger
.84b5	20 77 96	jsr $9677			jsr 	STKSaveCodePosition 		; save loop back position
.84b8	68		pla				pla 								; restore DOWNTO or TO
.84b9	5a		phy				phy 								; save Y on the stack
.84ba	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.84bc	f0 02		beq $84c0			beq 	_FCNotDownTo
.84be	a9 02		lda #$02			lda 	#2
.84c0					_FCNotDownTo:
.84c0	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.84c1	a0 10		ldy #$10			ldy 	#16
.84c3	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.84c5	a0 06		ldy #$06			ldy 	#6
.84c7	ad 08 06	lda $0608			lda 	NSMantissa0
.84ca	91 34		sta ($34),y			sta 	(basicStack),y
.84cc	ad 10 06	lda $0610			lda 	NSMantissa1
.84cf	c8		iny				iny
.84d0	91 34		sta ($34),y			sta 	(basicStack),y
.84d2	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.84d4	a2 01		ldx #$01			ldx 	#1
.84d6	20 eb 84	jsr $84eb			jsr 	FCIntegerToStack
.84d9	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.84db	a2 02		ldx #$02			ldx 	#2
.84dd	20 eb 84	jsr $84eb			jsr 	FCIntegerToStack
.84e0	20 0b 85	jsr $850b			jsr 	CopyIndexToReference
.84e3	7a		ply				ply 								; restore position
.84e4	60		rts				rts
.84e5					_FCError:
.84e5	4c db a2	jmp $a2db			jmp 	TypeError
.84e8					_FCSyntaxError:
.84e8	4c d1 a2	jmp $a2d1			jmp 	SyntaxError
.84eb					FCIntegerToStack:
.84eb	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.84ee	10 03		bpl $84f3			bpl	 	_FCNotNegative
.84f0	20 bd 95	jsr $95bd			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.84f3					_FCNotNegative:
.84f3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.84f6	91 34		sta ($34),y			sta 	(basicStack),y
.84f8	c8		iny				iny
.84f9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.84fc	91 34		sta ($34),y			sta 	(basicStack),y
.84fe	c8		iny				iny
.84ff	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8502	91 34		sta ($34),y			sta 	(basicStack),y
.8504	c8		iny				iny
.8505	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8508	91 34		sta ($34),y			sta 	(basicStack),y
.850a	60		rts				rts
.850b					CopyIndexToReference:
.850b	5a		phy				phy
.850c	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.850e	38		sec				sec 								; (because we copy from offset 8)
.850f	b1 34		lda ($34),y			lda 	(basicStack),y
.8511	e9 08		sbc #$08			sbc 	#8
.8513	85 36		sta $36				sta 	zTemp0
.8515	c8		iny				iny
.8516	b1 34		lda ($34),y			lda 	(basicStack),y
.8518	e9 00		sbc #$00			sbc 	#0
.851a	85 37		sta $37				sta 	zTemp0+1
.851c	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.851e	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8520	b1 34		lda ($34),y			lda 	(basicStack),y
.8522	0a		asl a				asl 	a 							; into carry
.8523	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8525	90 14		bcc $853b			bcc 	_CITRNormal
.8527	38		sec				sec
.8528					_CITRNegative:
.8528	a9 00		lda #$00			lda 	#0
.852a	f1 34		sbc ($34),y			sbc 	(basicStack),y
.852c	91 36		sta ($36),y			sta 	(zTemp0),y
.852e	c8		iny				iny
.852f	ca		dex				dex
.8530	d0 f6		bne $8528			bne 	_CITRNegative
.8532	88		dey				dey 								; look at MSB of mantissa
.8533	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8535	09 80		ora #$80			ora 	#$80
.8537	91 36		sta ($36),y			sta 	(zTemp0),y
.8539	7a		ply				ply
.853a	60		rts				rts
.853b					_CITRNormal:
.853b	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.853d	91 36		sta ($36),y			sta 	(zTemp0),y
.853f	c8		iny				iny
.8540	ca		dex				dex
.8541	d0 f8		bne $853b			bne 	_CITRNormal
.8543	7a		ply				ply 								; and exit.
.8544	60		rts				rts
.8545					NextCommand:
.8545	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8547	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8549	20 6c 96	jsr $966c			jsr 	StackCheckFrame
.854c	5a		phy				phy
.854d	a0 10		ldy #$10			ldy 	#16 						; get the step count
.854f	b1 34		lda ($34),y			lda 	(basicStack),y
.8551	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8553	30 02		bmi $8557			bmi 	_NCStepNeg
.8555	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8557					_NCStepNeg:
.8557	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8559	a2 04		ldx #$04			ldx 	#4 							; count to bump
.855b	18		clc				clc
.855c					_NCBump:
.855c	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.855e	91 34		sta ($34),y			sta 	(basicStack),y
.8560	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8562	c8		iny				iny 								; next byte
.8563	ca		dex				dex 								; do four times
.8564	d0 f6		bne $855c			bne 	_NCBump
.8566	20 0b 85	jsr $850b			jsr		CopyIndexToReference		; copy it to the reference variable.
.8569	a0 10		ldy #$10			ldy 	#16 						; get step count again
.856b	b1 34		lda ($34),y			lda 	(basicStack),y
.856d	0a		asl a				asl 	a 							; sign bit to carry
.856e	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8570	85 38		sta $38				sta 	zTemp1
.8572	90 02		bcc $8576			bcc 	_NCCompRev 					; use if step is +ve
.8574	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8576					_NCCompRev:
.8576	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8578	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.857a	85 39		sta $39				sta 	zTemp1+1
.857c	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.857e	38		sec				sec
.857f					_NCCompare:
.857f	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8581	b1 34		lda ($34),y			lda 	(basicStack),y
.8583	a4 39		ldy $39				ldy 	zTemp1+1
.8585	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8587	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8589	e6 39		inc $39				inc 	zTemp1+1
.858b	ca		dex				dex 								; do it 4 times.
.858c	d0 f1		bne $857f			bne 	_NCCompare
.858e	50 02		bvc $8592			bvc 	_NCNoOverflow 				; convert to signed comparison
.8590	49 80		eor #$80			eor 	#$80
.8592					_NCNoOverflow:
.8592	7a		ply				ply 								; restore Y position
.8593	0a		asl a				asl 	a 							; is bit 7 set.
.8594	90 04		bcc $859a			bcc 	_NCLoopback 				; if no , >= so loop back
.8596	20 5e 96	jsr $965e			jsr 	StackClose 					; exit the loop
.8599	60		rts				rts
.859a					_NCLoopBack:
.859a	20 88 96	jsr $9688			jsr 	STKLoadCodePosition 		; loop back
.859d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.859e					Command_GOSUB:
.859e	a2 00		ldx #$00			ldx 	#0
.85a0	20 94 95	jsr $9594			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.85a3	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.85a5	20 45 96	jsr $9645			jsr 	StackOpen 					; create frame
.85a8	20 77 96	jsr $9677			jsr 	STKSaveCodePosition 		; save current position
.85ab	4c c1 85	jmp $85c1			jmp 	GotoStackX
.85ae					Command_RETURN:
.85ae	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.85b0	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.85b2	20 6c 96	jsr $966c			jsr 	StackCheckFrame
.85b5	20 88 96	jsr $9688			jsr 	STKLoadCodePosition 		; restore code position
.85b8	20 5e 96	jsr $965e			jsr 	StackClose
.85bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.85bc					GotoCommand:
.85bc	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.85be	20 94 95	jsr $9594			jsr 	Evaluate16BitInteger
.85c1					GotoStackX:
.85c1	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.85c4	48		pha				pha 								; it is slightly inefficient, just in cases.
.85c5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.85c8	fa		plx				plx
.85c9	20 ae 9c	jsr $9cae			jsr 	MemoryTransferAX 			; transfer to line number AX.
.85cc	4c 1f 88	jmp $881f			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.85cf					IfCommand:
.85cf	a2 00		ldx #$00			ldx 	#0 							; If what.
.85d1	20 5c 95	jsr $955c			jsr 	EvaluateNumber
.85d4	b1 30		lda ($30),y			lda 	(codePtr),y
.85d6	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.85d8	d0 0a		bne $85e4			bne 	_IFStructured
.85da	c8		iny				iny 								; consume THEN
.85db	20 38 96	jsr $9638			jsr 	NSMIsZero 					; is it zero
.85de	f0 01		beq $85e1			beq 	_IfFail 					; if fail, go to next line
.85e0	60		rts				rts 								; if THEN just continue
.85e1					_IfFail:
.85e1	4c 69 88	jmp $8869			jmp 	EOLCommand
.85e4					_IfStructured:
.85e4	20 38 96	jsr $9638			jsr 	NSMIsZero 					; is it zero
.85e7	d0 07		bne $85f0			bne 	_IfExit 					; if not, then continue normally.
.85e9	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.85eb	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.85ed	20 27 8a	jsr $8a27			jsr 	ScanForward 				; and run from there/
.85f0					_IfExit:
.85f0	60		rts				rts
.85f1					ElseCode:
.85f1	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.85f3	aa		tax				tax 								; so just go to the structure exit
.85f4	20 27 8a	jsr $8a27			jsr 	ScanForward
.85f7	60		rts				rts
.85f8					EndIf:
.85f8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.85f9					LetCommand:
.85f9	a2 00		ldx #$00			ldx 	#0
.85fb	ad a6 8e	lda $8ea6			lda 	PrecedenceLevel+"*"			; precedence > this
.85fe	20 c0 8e	jsr $8ec0			jsr 	EvaluateExpressionAtPrecedence
.8601	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.8604	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8606	f0 0e		beq $8616			beq 	_LetGoProc 					; it's a procedure call.
.8608	a9 3d		lda #$3d			lda 	#"=" 						; check =
.860a	20 ff 9c	jsr $9cff			jsr 	CheckNextA
.860d	e8		inx				inx 								; RHS
.860e	20 53 95	jsr $9553			jsr 	EvaluateValue
.8611	ca		dex				dex
.8612	20 19 86	jsr $8619			jsr 	AssignVariable
.8615	60		rts				rts
.8616					_LetGoProc:
.8616	4c 29 87	jmp $8729			jmp 	CallProcedure
.8619					AssignVariable:
.8619	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.861c	48		pha				pha 								; save a copy
.861d	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8620	29 10		and #$10			and 	#NSBIsString
.8622	d0 0b		bne $862f			bne 	_ASError
.8624	68		pla				pla 								; get back
.8625	29 10		and #$10			and 	#NSBIsString 				; check type
.8627	d0 03		bne $862c			bne 	_ASString
.8629	4c fb 8e	jmp $8efb			jmp 	AssignNumber
.862c					_ASString:
.862c	4c 69 8f	jmp $8f69			jmp 	AssignString
.862f					_ASError:
.862f	4c db a2	jmp $a2db			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8632					Command_List:
.8632	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8635	9c 14 06	stz $0614			stz 	NSMantissa1+4
.8638	a9 ff		lda #$ff			lda 	#$FF
.863a	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.863d	8d 17 06	sta $0617			sta 	NSMantissa1+7
.8640	b1 30		lda ($30),y			lda 	(codePtr),y
.8642	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8644	f0 1e		beq $8664			beq 	_CLSecond
.8646	20 bd 86	jsr $86bd			jsr 	CLIsDigit 					; if not digit, list all
.8649	b0 24		bcs $866f			bcs 	_CLStart
.864b	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.864d	20 94 95	jsr $9594			jsr 	Evaluate16BitInteger
.8650	b1 30		lda ($30),y			lda 	(codePtr),y
.8652	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8654	f0 0e		beq $8664			beq 	_CLSecond 					; if so go get it
.8656	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.8659	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.865c	ad 14 06	lda $0614			lda 	NSMantissa1+4
.865f	8d 17 06	sta $0617			sta 	NSMantissa1+7
.8662	80 0b		bra $866f			bra 	_CLStart
.8664					_CLSecond:
.8664	c8		iny				iny 								; consume comma
.8665	20 bd 86	jsr $86bd			jsr 	CLIsDigit 					; digit found
.8668	b0 05		bcs $866f			bcs 	_CLStart 					; if not, continue listing
.866a	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.866c	20 94 95	jsr $9594			jsr 	Evaluate16BitInteger
.866f					_CLStart
.866f	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8671	85 30		sta $30				sta 	codePtr
.8673	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8675	85 31		sta $31				sta 	codePtr+1
.8677					_CLLoop:
.8677	b2 30		lda ($30)			lda 	(codePtr)
.8679	f0 2c		beq $86a7			beq 	_CLExit
.867b	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.867d	20 aa 86	jsr $86aa			jsr 	CLCompareLineNo
.8680	90 18		bcc $869a			bcc 	_CLNext
.8682	a2 07		ldx #$07			ldx 	#7
.8684	20 aa 86	jsr $86aa			jsr 	CLCompareLineNo
.8687	f0 02		beq $868b			beq 	_CLDoThisOne
.8689	b0 0f		bcs $869a			bcs 	_CLNext
.868b					_CLDoThisOne:
.868b	20 86 88	jsr $8886			jsr 	ListConvertLine 			; convert line into token Buffer
.868e	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.8690	a9 27		lda #$27			lda 	#(tokenBuffer & $FF)
.8692	20 0e 8b	jsr $8b0e			jsr 	PrintStringXA
.8695	a9 0d		lda #$0d			lda 	#13 						; new line
.8697	20 34 a5	jsr $a534			jsr 	EXTPrintCharacter
.869a					_CLNext:
.869a	18		clc				clc
.869b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.869d	65 30		adc $30				adc 	codePtr
.869f	85 30		sta $30				sta 	codePtr
.86a1	90 02		bcc $86a5			bcc 	_CREExit
.86a3	e6 31		inc $31				inc 	codePtr+1
.86a5					_CREExit:
.86a5	80 d0		bra $8677			bra 	_CLLoop
.86a7					_CLExit:
.86a7	4c 0c 80	jmp $800c			jmp 	WarmStart
.86aa					CLCompareLineNo:
.86aa	38		sec				sec
.86ab	a0 01		ldy #$01			ldy 	#1
.86ad	b1 30		lda ($30),y			lda 	(codePtr),y
.86af	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.86b2	85 36		sta $36				sta 	zTemp0
.86b4	c8		iny				iny
.86b5	b1 30		lda ($30),y			lda 	(codePtr),y
.86b7	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.86ba	05 36		ora $36				ora 	zTemp0
.86bc	60		rts				rts
.86bd					CLIsDigit:
.86bd	b1 30		lda ($30),y			lda 	(codePtr),y
.86bf	c9 30		cmp #$30			cmp 	#"0"
.86c1	90 03		bcc $86c6			bcc	 	_CLIDExitFalse
.86c3	c9 3a		cmp #$3a			cmp 	#"9"+1
.86c5	60		rts				rts
.86c6					_CLIDExitFalse:
.86c6	38		sec				sec
.86c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.86c8					NewCommand:
.86c8	20 5d 9c	jsr $9c5d			jsr 	MemoryNew
.86cb	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.86ce	20 6e 83	jsr $836e			jsr 	ClearCommand 				; clear everything.
.86d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.86d2					Command_Print:
.86d2	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.86d3					_CPLoop:
.86d3	08		php				php 								; save last action flag
.86d4	b1 30		lda ($30),y			lda 	(codePtr),y
.86d6	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.86d8	f0 46		beq $8720			beq 	_CPExit
.86da	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.86dc	f0 42		beq $8720			beq 	_CPExit
.86de	68		pla				pla 								; throw last action flag
.86df	b1 30		lda ($30),y			lda 	(codePtr),y
.86e1	c8		iny				iny
.86e2	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.86e4	f0 37		beq $871d			beq 	_CPContinueWithSameLine
.86e6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.86e8	f0 2e		beq $8718			beq 	_CPTab
.86ea	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.86ec	f0 26		beq $8714			beq 	_CPNewLine
.86ee	88		dey				dey 								; undo the get.
.86ef	a2 00		ldx #$00			ldx 	#0
.86f1	20 53 95	jsr $9553			jsr 	EvaluateValue 				; get a value into slot 0
.86f4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.86f7	29 10		and #$10			and 	#NSBIsString
.86f9	f0 0b		beq $8706			beq 	_CPNumber
.86fb	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.86fe	ad 08 06	lda $0608			lda 	NSMantissa0
.8701	20 0e 8b	jsr $8b0e			jsr 	PrintStringXA
.8704	80 cc		bra $86d2			bra 	Command_Print 				; loop round clearing carry so NL if end
.8706					_CPNumber:
.8706	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8708	20 29 94	jsr $9429			jsr 	ConvertNumberToString 		; convert to string
.870b	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.870d	a9 97		lda #$97			lda 	#DecimalBuffer & $FF
.870f	20 0e 8b	jsr $8b0e			jsr 	PrintStringXA
.8712	80 be		bra $86d2			bra 	Command_Print 				; loop round clearing carry so NL if end
.8714					_CPNewLine:
.8714	a9 0d		lda #$0d			lda 	#13
.8716	80 02		bra $871a			bra 	_CPPrintChar
.8718					_CPTab:
.8718	a9 09		lda #$09			lda 	#9 							; print TAB
.871a					_CPPrintChar:
.871a	20 34 a5	jsr $a534			jsr 	EXTPrintCharacter
.871d					_CPContinueWithSameLine:
.871d	38		sec				sec 								; loop round with carry set, which
.871e	80 b3		bra $86d3			bra 	_CPLoop 					; will inhibit final CR
.8720					_CPExit:
.8720	28		plp				plp 								; get last action flag
.8721	b0 05		bcs $8728			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8723	a9 0d		lda #$0d			lda 	#13 						; print new line
.8725	20 34 a5	jsr $a534			jsr 	EXTPrintCharacter
.8728					_CPExit2:
.8728	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.8729					CallProcedure:
.8729	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket
.872c	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.872e	20 45 96	jsr $9645			jsr 	StackOpen
.8731	20 77 96	jsr $9677			jsr 	STKSaveCodePosition 		; save loop position
.8734	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.8737	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8739	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.873c	85 37		sta $37				sta 	zTemp0+1
.873e	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8740	b2 36		lda ($36)			lda 	(zTemp0)
.8742	85 30		sta $30				sta 	safePtr
.8744	b1 36		lda ($36),y			lda 	(zTemp0),y
.8746	85 31		sta $31				sta 	safePtr+1
.8748	c8		iny				iny
.8749	b1 36		lda ($36),y			lda 	(zTemp0),y
.874b	85 32		sta $32				sta 	safePtr+2
.874d	c8		iny				iny
.874e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8750	85 33		sta $33				sta 	safePtr+3
.8752	c8		iny				iny 								; get Y offset -> Y
.8753	b1 36		lda ($36),y			lda 	(zTemp0),y
.8755	a8		tay				tay
.8756	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket 			; check )
.8759	60		rts				rts 								; and continue from here
.9ce1					Command_ENDPROC:
.9ce1	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9ce3	a2 14		ldx #$14			ldx 	#ERRID_PROC
.9ce5	20 6c 96	jsr $966c			jsr 	StackCheckFrame
.9ce8	20 88 96	jsr $9688			jsr 	STKLoadCodePosition 		; restore code position
.9ceb	20 5e 96	jsr $965e			jsr 	StackClose
.9cee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.875a					Command_Read:
.875a	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.875c	20 8f 91	jsr $918f			jsr 	EvaluateTerm
.875f	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8762	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8764	f0 4a		beq $87b0			beq 	_CRSyntax 					; check reference (bit 0)
.8766	20 f9 87	jsr $87f9			jsr 	SwapDataCodePtrs 			; swap code and data
.8769	ad 1a 07	lda $071a			lda 	inDataStatement 			; if in a data statement, we don't need to search
.876c	d0 20		bne $878e			bne 	_CRContinueData
.876e					_CRKeepSearching:
.876e	a9 a3		lda #$a3			lda 	#KWD_DATA 					; scan for instruction
.8770	aa		tax				tax
.8771	20 27 8a	jsr $8a27			jsr 	ScanForward
.8774	c9 a3		cmp #$a3			cmp 	#KWD_DATA 					; found data ?
.8776	f0 16		beq $878e			beq 	_CRHaveData 				; found it
.8778	18		clc				clc
.8779	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.877b	65 30		adc $30				adc 	codePtr
.877d	85 30		sta $30				sta 	codePtr
.877f	90 02		bcc $8783			bcc 	_CREExit
.8781	e6 31		inc $31				inc 	codePtr+1
.8783					_CREExit:
.8783	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8785	b2 30		lda ($30)			lda 	(codePtr)
.8787	d0 e5		bne $876e			bne 	_CRKeepSearching
.8789	a9 0b		lda #$0b		lda	#11
.878b	4c b5 8a	jmp $8ab5		jmp	ErrorHandler
.878e					_CRHaveData:
.878e					_CRContinueData:
.878e	a2 01		ldx #$01			ldx 	#1
.8790	20 53 95	jsr $9553			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8793	ca		dex				dex
.8794	20 19 86	jsr $8619			jsr		AssignVariable 				; do the assignment
.8797	9c 1a 07	stz $071a			stz 	inDataStatement 			; clear in data
.879a	b1 30		lda ($30),y			lda 	(codePtr),y
.879c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.879e	d0 04		bne $87a4			bne 	_CRSwapBack
.87a0	c8		iny				iny 								; consume comma
.87a1	ee 1a 07	inc $071a			inc 	inDataStatement 			; set in data statement currently.
.87a4					_CRSwapBack:
.87a4	20 f9 87	jsr $87f9			jsr 	SwapDataCodePtrs			; swap them back.
.87a7	b1 30		lda ($30),y			lda 	(codePtr),y
.87a9	c8		iny				iny
.87aa	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87ac	f0 ac		beq $875a			beq 	Command_Read 				; if so go round again.
.87ae	88		dey				dey 								; unpick get.
.87af	60		rts				rts
.87b0					_CRSyntax:
.87b0	4c d1 a2	jmp $a2d1			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.87b3					RemCommand:
.87b3	b1 30		lda ($30),y			lda 	(codePtr),y
.87b5	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.87b7	d0 06		bne $87bf			bne 	_RMExit
.87b9	c8		iny				iny
.87ba	98		tya				tya
.87bb	38		sec				sec
.87bc	71 30		adc ($30),y			adc 	(codePtr),y
.87be	a8		tay				tay
.87bf					_RMExit:
.87bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.87c0					Command_REPEAT:
.87c0	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.87c2	20 45 96	jsr $9645			jsr 	StackOpen
.87c5	20 77 96	jsr $9677			jsr 	STKSaveCodePosition 		; save loop position
.87c8	60		rts				rts
.87c9					Command_UNTIL:
.87c9	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.87cb	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.87cd	20 6c 96	jsr $966c			jsr 	StackCheckFrame
.87d0	a2 00		ldx #$00			ldx 	#0
.87d2	20 5c 95	jsr $955c			jsr 	EvaluateNumber 				; work out the number
.87d5	20 38 96	jsr $9638			jsr 	NSMIsZero 					; check if zero
.87d8	f0 04		beq $87de			beq 	_CULoopBack 				; if so keep looping
.87da	20 5e 96	jsr $965e			jsr 	StackClose		 			; return
.87dd	60		rts				rts
.87de					_CULoopBack:
.87de	20 88 96	jsr $9688			jsr 	STKLoadCodePosition 		; loop back
.87e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.87e2					Command_Restore:
.87e2	20 f9 87	jsr $87f9			jsr 	SwapDataCodePtrs 			; swap code and data
.87e5	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.87e7	85 30		sta $30				sta 	codePtr
.87e9	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.87eb	85 31		sta $31				sta 	codePtr+1
.87ed	20 f9 87	jsr $87f9			jsr 	SwapDataCodePtrs 			; put them back
.87f0	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.87f2	8d 19 07	sta $0719			sta 	dataPointer+4
.87f5	9c 1a 07	stz $071a			stz 	inDataStatement 			; not in data statement
.87f8	60		rts				rts
.87f9					SwapDataCodePtrs:
.87f9	da		phx				phx
.87fa	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.87fc					_SDCPLoop:
.87fc	b5 30		lda $30,x			lda 	safePtr,x
.87fe	48		pha				pha
.87ff	bd 15 07	lda $0715,x			lda 	dataPointer,x
.8802	95 30		sta $30,x			sta 	safePtr,x
.8804	68		pla				pla
.8805	9d 15 07	sta $0715,x			sta 	dataPointer,x
.8808	ca		dex				dex
.8809	10 f1		bpl $87fc			bpl 	_SDCPLoop
.880b	ad 19 07	lda $0719			lda 	dataPointer+4 				; swap Y position over.
.880e	8c 19 07	sty $0719			sty 	dataPointer+4
.8811	a8		tay				tay
.8812	fa		plx				plx
.8813	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8814					CommandRUN:
.8814	20 6e 83	jsr $836e			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8817	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8819	85 30		sta $30				sta 	codePtr
.881b	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.881d	85 31		sta $31				sta 	codePtr+1
.881f					RUNNewLine:
.881f	b2 30		lda ($30)			lda 	(codePtr)
.8821	f0 43		beq $8866			beq 	CRNoProgram         		; no then END.
.8823	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8825	9a		txs				txs
.8826					RUNCodePointerLine:
.8826	a0 02		ldy #$02			ldy 	#2 							; start of program
.8828					_CRIncMainLoop:
.8828	c8		iny				iny
.8829					_CRMainLoop:
.8829	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.882c	b1 30		lda ($30),y			lda 	(codePtr),y
.882e	10 10		bpl $8840			bpl 	_CRNotKeyword
.8830	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8832	b0 04		bcs $8838			bcs 	_CRIsKeyword
.8834	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8836	b0 28		bcs $8860			bcs		_CRSyntaxError
.8838					_CRIsKeyword:
.8838	c8		iny				iny 								; consume command
.8839	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.883a	aa		tax				tax 								; put in X for vector jump
.883b	20 63 88	jsr $8863			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.883e	80 e9		bra $8829			bra 	_CRMainLoop 				; and loop round
.8840					_CRNotKeyword:
.8840	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8842	f0 e4		beq $8828			beq 	_CRIncMainLoop
.8844	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8846	90 05		bcc $884d			bcc 	_CRNotVariable
.8848					_CRGoLet:
.8848	20 f9 85	jsr $85f9			jsr 	LetCommand
.884b	80 dc		bra $8829			bra 	_CRMainLoop
.884d					_CRNotVariable:
.884d	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.884f	f0 f7		beq $8848			beq 	_CRGoLet
.8851	c9 21		cmp #$21			cmp 	#KWD_PLING
.8853	f0 f3		beq $8848			beq 	_CRGoLet
.8855	c9 27		cmp #$27			cmp 	#KWD_QUOTE
.8857	f0 01		beq $885a			beq 	_CRGoRem
>8859	db						.byte 	$DB 						; causes a break in the emulator
.885a					_CRGoRem:
.885a	c8		iny				iny
.885b	20 b3 87	jsr $87b3			jsr 	RemCommand
.885e	80 c9		bra $8829			bra 	_CRMainLoop
.8860					_CRSyntaxError:
.8860	4c d1 a2	jmp $a2d1			jmp 	SyntaxError
.8863					_CRCallVector0:
.8863	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8866					CRNoProgram:
.8866	4c 88 84	jmp $8488			jmp 	EndCommand
.8869					EOLCommand:
.8869	18		clc				clc
.886a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.886c	65 30		adc $30				adc 	codePtr
.886e	85 30		sta $30				sta 	codePtr
.8870	90 02		bcc $8874			bcc 	_CREExit
.8872	e6 31		inc $31				inc 	codePtr+1
.8874					_CREExit:
.8874	80 a9		bra $881f			bra 	RunNewLine
.8876					Shift1Command:
.8876	b1 30		lda ($30),y			lda 	(codePtr),y
.8878	c8		iny				iny
.8879	0a		asl a				asl 	a
.887a	aa		tax				tax
.887b	7c f2 80	jmp ($80f2,x)			jmp 	(VectorSet1,x)
.887e					Unused1:
.887e					Unused2:
.887e					Unused3:
.887e					Unused4:
.887e	4c d1 a2	jmp $a2d1			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8881					StopCommand:
.8881	a9 08		lda #$08		lda	#8
.8883	4c b5 8a	jmp $8ab5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8886					ListConvertLine:
.8886	9c 1b 07	stz $071b			stz 	tbOffset
.8889	9c 27 07	stz $0727			stz 	tokenBuffer
.888c	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.888e	b1 30		lda ($30),y			lda 	(codePtr),y
.8890	aa		tax				tax
.8891	88		dey				dey
.8892	b1 30		lda ($30),y			lda 	(codePtr),y
.8894	20 4b 9e	jsr $9e4b			jsr 	ConvertInt16
.8897	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8899	86 37		stx $37				stx 	zTemp0+1
.889b	a0 00		ldy #$00			ldy 	#0
.889d					_LCCopyNumber:
.889d	b1 36		lda ($36),y			lda 	(zTemp0),y
.889f	20 9c 89	jsr $899c			jsr 	LCLWrite
.88a2	c8		iny				iny
.88a3	b1 36		lda ($36),y			lda 	(zTemp0),y
.88a5	d0 f6		bne $889d			bne 	_LCCopyNumber
.88a7					_LCPadOut:
.88a7	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.88a9	20 9c 89	jsr $899c			jsr 	LCLWrite
.88ac	ad 1b 07	lda $071b			lda 	tbOffset
.88af	c9 06		cmp #$06			cmp 	#6
.88b1	d0 f4		bne $88a7			bne 	_LCPadOut
.88b3	a0 03		ldy #$03			ldy 	#3 							; start position.
.88b5					_LCMainLoop:
.88b5	b1 30		lda ($30),y			lda 	(codePtr),y
.88b7	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.88b9	f0 17		beq $88d2			beq 	_LCExit
.88bb	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.88bd	90 14		bcc $88d3			bcc 	_LCDoubles
.88bf	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.88c1	90 20		bcc $88e3			bcc 	_LCShiftPunc
.88c3	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.88c5	90 2b		bcc $88f2			bcc 	_LCPunctuation
.88c7	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.88c9	90 2d		bcc $88f8			bcc 	_LCIdentifiers
.88cb	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.88cd	90 49		bcc $8918			bcc 	_LCTokens
.88cf	4c 70 89	jmp $8970			jmp 	_LCData 					; 254-5 are data objects
.88d2					_LCExit:
.88d2	60		rts				rts
.88d3					_LCDoubles:
.88d3	48		pha				pha
.88d4	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.88d5	29 02		and #$02			and 	#2
.88d7	09 3c		ora #$3c			ora 	#60 						; make < >
.88d9	20 9c 89	jsr $899c			jsr 	LCLWrite
.88dc	68		pla				pla 								; restore, do lower bit
.88dd	29 03		and #$03			and 	#3
.88df	09 3c		ora #$3c			ora 	#60
.88e1	80 0f		bra $88f2			bra		_LCPunctuation 				; print, increment, loop
.88e3					_LCShiftPunc:
.88e3	aa		tax				tax 								; save in X
.88e4	29 07		and #$07			and 	#7 							; lower 3 bits
.88e6	f0 02		beq $88ea			beq 	_LCNoAdd
.88e8	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.88ea					_LCNoAdd:
.88ea	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.88ec	90 02		bcc $88f0			bcc 	_LCNoAdd2
.88ee	09 20		ora #$20			ora 	#32 						; adds $20
.88f0					_LCNoAdd2:
.88f0	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.88f2					_LCPunctuation:
.88f2	c8		iny				iny 								; consume character
.88f3	20 9c 89	jsr $899c			jsr 	LCLWrite 					; write it out.
.88f6	80 bd		bra $88b5			bra 	_LCMainLoop 				; go round again.
.88f8					_LCIdentifiers:
.88f8	18		clc				clc 								; convert to physical address
.88f9	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.88fb	85 37		sta $37				sta 	zTemp0+1
.88fd	c8		iny				iny
.88fe	b1 30		lda ($30),y			lda 	(codePtr),y
.8900	85 36		sta $36				sta 	zTemp0
.8902	c8		iny				iny
.8903	5a		phy				phy 								; save position
.8904	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8906					_LCOutIdentifier:
.8906	c8		iny				iny
.8907	b1 36		lda ($36),y			lda 	(zTemp0),y
.8909	29 7f		and #$7f			and 	#$7F
.890b	20 ca 89	jsr $89ca			jsr 	LCLLowerCase
.890e	20 9c 89	jsr $899c			jsr 	LCLWrite
.8911	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8913	10 f1		bpl $8906			bpl 	_LCOutIdentifier
.8915	7a		ply				ply 								; restore position
.8916	80 9d		bra $88b5			bra 	_LCMainLoop
.8918					_LCTokens:
.8918	aa		tax				tax 								; token in X
.8919	a9 97		lda #$97			lda 	#((KeywordSet2) & $FF)
.891b	85 36		sta $36				sta 	0+zTemp0
.891d	a9 98		lda #$98			lda 	#((KeywordSet2) >> 8)
.891f	85 37		sta $37				sta 	1+zTemp0
.8921	e0 82		cpx #$82			cpx 	#$82
.8923	f0 16		beq $893b			beq 	_LCUseShift
.8925	a9 5d		lda #$5d			lda 	#((KeywordSet1) & $FF)
.8927	85 36		sta $36				sta 	0+zTemp0
.8929	a9 98		lda #$98			lda 	#((KeywordSet1) >> 8)
.892b	85 37		sta $37				sta 	1+zTemp0
.892d	e0 81		cpx #$81			cpx 	#$81
.892f	f0 0a		beq $893b			beq 	_LCUseShift
.8931	a9 3b		lda #$3b			lda 	#((KeywordSet0) & $FF)
.8933	85 36		sta $36				sta 	0+zTemp0
.8935	a9 97		lda #$97			lda 	#((KeywordSet0) >> 8)
.8937	85 37		sta $37				sta 	1+zTemp0
.8939	80 01		bra $893c			bra 	_LCNoShift
.893b					_LCUseShift:
.893b	c8		iny				iny
.893c					_LCNoShift:
.893c	20 ab 89	jsr $89ab			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.893f	b1 30		lda ($30),y			lda 	(codePtr),y
.8941	aa		tax				tax 								; into X
.8942					_LCFindText:
.8942	ca		dex				dex
.8943	10 0e		bpl $8953			bpl 	_LCFoundText 				; found text.
.8945	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8947	1a		inc a				inc 	a 							; one extra for size
.8948	38		sec				sec 								; one extra for checksum
.8949	65 36		adc $36				adc 	zTemp0 						; go to next token
.894b	85 36		sta $36				sta 	zTemp0
.894d	90 f3		bcc $8942			bcc 	_LCFindText
.894f	e6 37		inc $37				inc 	zTemp0+1
.8951	80 ef		bra $8942			bra 	_LCFindText
.8953					_LCFoundText:
.8953	5a		phy				phy 								; save List position
.8954	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8956	aa		tax				tax
.8957	a0 02		ldy #$02			ldy 	#2
.8959					_LCCopyToken:
.8959	b1 36		lda ($36),y			lda 	(zTemp0),y
.895b	20 9c 89	jsr $899c			jsr 	LCLWrite
.895e	c8		iny				iny
.895f	ca		dex				dex
.8960	d0 f7		bne $8959			bne 	_LCCopyToken
.8962	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8964	f0 05		beq $896b			beq 	_LCNoSpace
.8966	a9 20		lda #$20			lda 	#' '
.8968	20 9c 89	jsr $899c			jsr 	LCLWrite
.896b					_LCNoSpace:
.896b	7a		ply				ply 								; restore position.
.896c	c8		iny				iny 								; consume token
.896d	4c b5 88	jmp $88b5			jmp 	_LCMainLoop 				; and go around again.
.8970					_LCData:
.8970	48		pha				pha 								; save type $FE/$FF
.8971	a2 23		ldx #$23			ldx 	#'#' 						; figure out # or "
.8973	c9 fe		cmp #$fe			cmp 	#$FE
.8975	f0 02		beq $8979			beq 	_LCHaveOpener
.8977	a2 22		ldx #$22			ldx 	#'"'
.8979					_LCHaveOpener:
.8979	8a		txa				txa 								; output prefix (# or ")
.897a	20 9c 89	jsr $899c			jsr 	LCLWrite
.897d	c8		iny				iny 								; get count
.897e	b1 30		lda ($30),y			lda 	(codePtr),y
.8980	aa		tax				tax
.8981	c8		iny				iny 								; point at first character
.8982					_LCOutData:
.8982	b1 30		lda ($30),y			lda 	(codePtr),y
.8984	c9 00		cmp #$00			cmp 	#0
.8986	f0 03		beq $898b			beq 	_LCNoPrint
.8988	20 9c 89	jsr $899c			jsr 	LCLWrite
.898b					_LCNoPrint:
.898b	c8		iny				iny
.898c	ca		dex				dex
.898d	d0 f3		bne $8982			bne 	_LCOutData
.898f	68		pla				pla 								; closing " required ?
.8990	c9 ff		cmp #$ff			cmp 	#$FF
.8992	d0 05		bne $8999			bne 	_LCNoQuote
.8994	a9 22		lda #$22			lda 	#'"'
.8996	20 9c 89	jsr $899c			jsr 	LCLWrite
.8999					_LCNoQuote:
.8999	4c b5 88	jmp $88b5			jmp 	_LCMainLoop
.899c					LCLWrite:
.899c	da		phx				phx
.899d	ae 1b 07	ldx $071b			ldx 	tbOffset
.89a0	9d 27 07	sta $0727,x			sta 	tokenBuffer,x
.89a3	9e 28 07	stz $0728,x			stz 	tokenBuffer+1,x
.89a6	ee 1b 07	inc $071b			inc 	tbOffset
.89a9	fa		plx				plx
.89aa	60		rts				rts
.89ab					LCCheckSpaceRequired:
.89ab	ae 1b 07	ldx $071b			ldx 	tbOffset
.89ae	bd 26 07	lda $0726,x			lda 	tokenBuffer-1,x 			; previous character
.89b1	20 ca 89	jsr $89ca			jsr 	LCLLowerCase 				; saves a little effort
.89b4	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.89b6	90 11		bcc $89c9			bcc 	_LCCSRExit
.89b8	c9 3a		cmp #$3a			cmp 	#"9"+1
.89ba	90 08		bcc $89c4			bcc 	_LCCSRSpace
.89bc	c9 61		cmp #$61			cmp 	#"a"
.89be	90 09		bcc $89c9			bcc 	_LCCSRExit
.89c0	c9 7b		cmp #$7b			cmp 	#"z"+1
.89c2	b0 05		bcs $89c9			bcs 	_LCCSRExit
.89c4					_LCCSRSpace:
.89c4	a9 20		lda #$20			lda 	#' '
.89c6	20 9c 89	jsr $899c			jsr 	LCLWrite
.89c9					_LCCSRExit:
.89c9	60		rts				rts
.89ca					LCLLowerCase:
.89ca	c9 41		cmp #$41			cmp 	#"A"
.89cc	90 06		bcc $89d4			bcc 	_LCLLCOut
.89ce	c9 5b		cmp #$5b			cmp 	#"Z"+1
.89d0	b0 02		bcs $89d4			bcs 	_LCLLCOut
.89d2	69 20		adc #$20			adc 	#$20
.89d4					_LCLLCOut:
.89d4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.89d5					ProcedureScan:
.89d5	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.89d7	85 30		sta $30				sta 	codePtr
.89d9	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.89db	85 31		sta $31				sta 	codePtr+1
.89dd					_PSLoop:
.89dd	b2 30		lda ($30)			lda 	(codePtr)
.89df	f0 42		beq $8a23			beq 	_PSExit
.89e1	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.89e3	b1 30		lda ($30),y			lda 	(codePtr),y
.89e5	c9 98		cmp #$98			cmp 	#KWD_PROC
.89e7	d0 2d		bne $8a16			bne 	_PSNext
.89e9	c8		iny				iny 								; get the address of the record to zTemp0 and
.89ea	b1 30		lda ($30),y			lda 	(codePtr),y
.89ec	29 c0		and #$c0			and 	#$C0
.89ee	c9 40		cmp #$40			cmp 	#$40
.89f0	d0 32		bne $8a24			bne 	_PSSyntax
.89f2	b1 30		lda ($30),y			lda 	(codePtr),y
.89f4	18		clc				clc
.89f5	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.89f7	85 37		sta $37				sta 	zTemp0+1
.89f9	c8		iny				iny 								; LSB
.89fa	b1 30		lda ($30),y			lda 	(codePtr),y
.89fc	85 36		sta $36				sta 	zTemp0
.89fe	c8		iny				iny 								; character after variable call.
.89ff	98		tya				tya 								; save Y offset at +7
.8a00	a0 07		ldy #$07			ldy 	#7
.8a02	91 36		sta ($36),y			sta 	(zTemp0),y
.8a04	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8a06	a0 02		ldy #$02			ldy 	#2
.8a08	91 36		sta ($36),y			sta 	(zTemp0),y
.8a0a	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8a0c					_PSCopy:
.8a0c	b5 30		lda $30,x			lda 	safePtr,x
.8a0e	c8		iny				iny
.8a0f	91 36		sta ($36),y			sta 	(zTemp0),y
.8a11	e8		inx				inx
.8a12	e0 04		cpx #$04			cpx 	#4
.8a14	d0 f6		bne $8a0c			bne 	_PSCopy
.8a16					_PSNext:
.8a16	18		clc				clc
.8a17	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a19	65 30		adc $30				adc 	codePtr
.8a1b	85 30		sta $30				sta 	codePtr
.8a1d	90 02		bcc $8a21			bcc 	_CREExit
.8a1f	e6 31		inc $31				inc 	codePtr+1
.8a21					_CREExit:
.8a21	80 ba		bra $89dd			bra 	_PSLoop
.8a23					_PSExit:
.8a23	60		rts				rts
.8a24					_PSSyntax:
.8a24	4c d1 a2	jmp $a2d1			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8a27					ScanForward:
.8a27	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8a29	86 37		stx $37				stx 	zTemp0+1
.8a2b	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8a2d					_ScanLoop:
.8a2d	b1 30		lda ($30),y			lda 	(codePtr),y
.8a2f	c8		iny				iny
.8a30	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8a32	d0 0e		bne $8a42			bne 	_ScanGoNext
.8a34	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8a36	f0 04		beq $8a3c			beq 	_ScanMatch
.8a38	c5 37		cmp $37				cmp 	zTemp0+1
.8a3a	d0 06		bne $8a42			bne 	_ScanGoNext
.8a3c					_ScanMatch:
.8a3c	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8a3e	d0 01		bne $8a41			bne 	_ScanNotEndEOL
.8a40	88		dey				dey
.8a41					_ScanNotEndEOL:
.8a41	60		rts				rts
.8a42					_ScanGoNext:
.8a42	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8a44	90 e7		bcc $8a2d			bcc 	_ScanLoop
.8a46	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8a48	90 18		bcc $8a62			bcc 	_ScanSkipOne
.8a4a	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8a4c	b0 2f		bcs $8a7d			bcs 	_ScanSkipData
.8a4e	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8a50	90 db		bcc $8a2d			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8a52	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8a54	b0 d7		bcs $8a2d			bcs 	_ScanLoop
.8a56	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8a58	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8a5a	b0 d1		bcs $8a2d			bcs 	_ScanLoop
.8a5c	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8a5e	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8a60	80 cb		bra $8a2d			bra 	_ScanLoop
.8a62					_ScanSkipOne:
.8a62	c8		iny				iny 								; consume the extra one.
.8a63	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8a65	d0 c6		bne $8a2d			bne 	_ScanLoop
.8a67	18		clc				clc
.8a68	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a6a	65 30		adc $30				adc 	codePtr
.8a6c	85 30		sta $30				sta 	codePtr
.8a6e	90 02		bcc $8a72			bcc 	_CREExit
.8a70	e6 31		inc $31				inc 	codePtr+1
.8a72					_CREExit:
.8a72	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8a74	b2 30		lda ($30)			lda 	(codePtr)
.8a76	d0 b5		bne $8a2d			bne 	_ScanLoop 					; if not zero, more to scan
.8a78	a9 13		lda #$13		lda	#19
.8a7a	4c b5 8a	jmp $8ab5		jmp	ErrorHandler
.8a7d					_ScanSkipData:
.8a7d	88		dey				dey 								; point at data token
.8a7e	c8		iny				iny
.8a7f	98		tya				tya
.8a80	38		sec				sec
.8a81	71 30		adc ($30),y			adc 	(codePtr),y
.8a83	a8		tay				tay
.8a84	80 a7		bra $8a2d			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8a86					Command_WHILE:
.8a86	5a		phy				phy 								; save position of the test
.8a87	a2 00		ldx #$00			ldx 	#0
.8a89	20 5c 95	jsr $955c			jsr 	EvaluateNumber 				; work out the number
.8a8c	20 38 96	jsr $9638			jsr 	NSMIsZero 					; check if zero
.8a8f	f0 0e		beq $8a9f			beq 	_WHExitLoop 				; if so exit the loop
.8a91	98		tya				tya 								; position *after* test.
.8a92	7a		ply				ply 								; restore position before test, at WHILE
.8a93	88		dey				dey
.8a94	48		pha				pha 								; push after test on the stack
.8a95	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8a97	20 45 96	jsr $9645			jsr 	StackOpen
.8a9a	20 77 96	jsr $9677			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8a9d	7a		ply				ply 								; restore the position *after* the test
.8a9e	60		rts				rts
.8a9f					_WHExitLoop:
.8a9f	68		pla				pla 								; throw post loop position
.8aa0	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8aa2	aa		tax				tax
.8aa3	20 27 8a	jsr $8a27			jsr 	ScanForward
.8aa6	60		rts				rts
.8aa7					Command_WEND:
.8aa7	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8aa9	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8aab	20 6c 96	jsr $966c			jsr 	StackCheckFrame
.8aae	20 88 96	jsr $9688			jsr 	STKLoadCodePosition 		; loop back
.8ab1	20 5e 96	jsr $965e			jsr 	StackClose		 			; erase the frame
.8ab4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9cef					CheckRightBracket:
.9cef	b1 30		lda ($30),y			lda 	(codePtr),y
.9cf1	c8		iny				iny
.9cf2	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9cf4	d0 0f		bne $9d05			bne 	CNAFail
.9cf6	60		rts				rts
.9cf7					CheckComma:
.9cf7	b1 30		lda ($30),y			lda 	(codePtr),y
.9cf9	c8		iny				iny
.9cfa	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9cfc	d0 07		bne $9d05			bne 	CNAFail
.9cfe	60		rts				rts
.9cff					CheckNextA:
.9cff	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9d01	d0 02		bne $9d05			bne 	CNAFail
.9d03	c8		iny				iny 								; skip character
.9d04	60		rts				rts 								; and exit
.9d05					CNAFail:
.9d05	4c d1 a2	jmp $a2d1			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8ab5					ErrorHandler:
.8ab5	a8		tay				tay 								; find the error text
.8ab6	f0 49		beq $8b01			beq 	_EHEnd
.8ab8	a2 00		ldx #$00			ldx 	#0
.8aba	a9 ea		lda #$ea			lda 	#((ErrorText) & $FF)
.8abc	85 36		sta $36				sta 	0+zTemp0
.8abe	a9 a2		lda #$a2			lda 	#((ErrorText) >> 8)
.8ac0	85 37		sta $37				sta 	1+zTemp0
.8ac2					_EHFind:
.8ac2	88		dey				dey 								; found the error text ?
.8ac3	f0 0e		beq $8ad3			beq 	_EHFound
.8ac5					_EHFindZero:
.8ac5	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8ac7	e6 36		inc $36				inc 	zTemp0
.8ac9	d0 02		bne $8acd			bne 	_EHFNoCarry
.8acb	e6 37		inc $37				inc 	zTemp0+1
.8acd					_EHFNoCarry:
.8acd	c9 00		cmp #$00			cmp 	#0
.8acf	d0 f4		bne $8ac5			bne 	_EHFindZero
.8ad1	80 ef		bra $8ac2			bra 	_EHFind
.8ad3					_EHFound:
.8ad3	a5 36		lda $36				lda 	zTemp0 						; print message
.8ad5	a6 37		ldx $37				ldx 	zTemp0+1
.8ad7	20 0e 8b	jsr $8b0e			jsr 	PrintStringXA
.8ada	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8adc	b1 30		lda ($30),y			lda 	(codePtr),y
.8ade	d0 05		bne $8ae5			bne 	_EHAtMsg
.8ae0	c8		iny				iny
.8ae1	b1 30		lda ($30),y			lda 	(codePtr),y
.8ae3	f0 17		beq $8afc			beq 	_EHCREnd
.8ae5					_EHAtMsg:
.8ae5	a2 8b		ldx #$8b			ldx 	#_AtMsg >> 8 				; print " at "
.8ae7	a9 04		lda #$04			lda 	#_AtMsg & $FF
.8ae9	20 0e 8b	jsr $8b0e			jsr 	PrintStringXA
.8aec	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8aee	b1 30		lda ($30),y			lda 	(codePtr),y
.8af0	48		pha				pha
.8af1	c8		iny				iny
.8af2	b1 30		lda ($30),y			lda 	(codePtr),y
.8af4	aa		tax				tax
.8af5	68		pla				pla
.8af6	20 4b 9e	jsr $9e4b			jsr 	ConvertInt16 				; convert XA to string
.8af9	20 0e 8b	jsr $8b0e			jsr 	PrintStringXA 				; and print it.
.8afc					_EHCREnd:
.8afc	a9 0d		lda #$0d			lda 	#13 						; new line
.8afe	20 34 a5	jsr $a534			jsr 	EXTPrintCharacter
.8b01					_EHEnd:
.8b01	4c 0c 80	jmp $800c			jmp 	WarmStart
>8b04	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8b0c	20 00
.8b0e					PrintStringXA:
.8b0e	5a		phy				phy
.8b0f	86 37		stx $37				stx 	zTemp0+1
.8b11	85 36		sta $36				sta 	zTemp0
.8b13	a0 00		ldy #$00			ldy 	#0
.8b15					_PSXALoop:
.8b15	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b17	f0 06		beq $8b1f			beq 	_PSXAExit
.8b19	20 34 a5	jsr $a534			jsr 	EXTPrintCharacter
.8b1c	c8		iny				iny
.8b1d	80 f6		bra $8b15			bra 	_PSXALoop
.8b1f					_PSXAExit:
.8b1f	7a		ply				ply
.8b20	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8b21					UnaryTrue:
.8b21	fa		plx				plx
.8b22					ReturnTrue:
.8b22	a9 01		lda #$01			lda 	#1  						; set to 1
.8b24	20 0a 96	jsr $960a			jsr 	NSMSetByte
.8b27	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8b29	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b2c	60		rts				rts
.8b2d					UnaryFalse:
.8b2d	fa		plx				plx
.8b2e					ReturnFalse:
.8b2e	4c 08 96	jmp $9608			jmp 	NSMSetZero 					; set it all to zero
.8b31					BinaryCompareEqual:
.8b31	fa		plx				plx
.8b32	20 6d 8b	jsr $8b6d			jsr 	CompareBaseCode
.8b35	c9 00		cmp #$00			cmp 	#0
.8b37	f0 e9		beq $8b22			beq 	ReturnTrue
.8b39	80 f3		bra $8b2e			bra 	ReturnFalse
.8b3b					BinaryCompareLess:
.8b3b	fa		plx				plx
.8b3c	20 6d 8b	jsr $8b6d			jsr 	CompareBaseCode
.8b3f	c9 ff		cmp #$ff			cmp 	#$FF
.8b41	f0 df		beq $8b22			beq 	ReturnTrue
.8b43	80 e9		bra $8b2e			bra 	ReturnFalse
.8b45					BinaryCompareGreater:
.8b45	fa		plx				plx
.8b46	20 6d 8b	jsr $8b6d			jsr 	CompareBaseCode
.8b49	c9 01		cmp #$01			cmp 	#1
.8b4b	f0 d5		beq $8b22			beq 	ReturnTrue
.8b4d	80 df		bra $8b2e			bra 	ReturnFalse
.8b4f					BinaryCompareNotEqual:
.8b4f	fa		plx				plx
.8b50	20 6d 8b	jsr $8b6d			jsr 	CompareBaseCode
.8b53	c9 00		cmp #$00			cmp 	#0
.8b55	d0 cb		bne $8b22			bne 	ReturnTrue
.8b57	80 d5		bra $8b2e			bra 	ReturnFalse
.8b59					BinaryCompareLessEqual:
.8b59	fa		plx				plx
.8b5a	20 6d 8b	jsr $8b6d			jsr 	CompareBaseCode
.8b5d	c9 01		cmp #$01			cmp 	#1
.8b5f	d0 c1		bne $8b22			bne 	ReturnTrue
.8b61	80 cb		bra $8b2e			bra 	ReturnFalse
.8b63					BinaryCompareGreaterEqual:
.8b63	fa		plx				plx
.8b64	20 6d 8b	jsr $8b6d			jsr 	CompareBaseCode
.8b67	c9 ff		cmp #$ff			cmp 	#$FF
.8b69	d0 b7		bne $8b22			bne 	ReturnTrue
.8b6b	80 c1		bra $8b2e			bra 	ReturnFalse
.8b6d					CompareBaseCode:
.8b6d	20 ce 8f	jsr $8fce			jsr 	DereferenceTopTwo 			; make both values if references.
.8b70	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8b73	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8b76	29 10		and #$10			and 	#NSTString
.8b78	d0 40		bne $8bba			bne 	_CBCString
.8b7a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8b7d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8b80	d0 3b		bne $8bbd			bne 	_CBCFloat
.8b82	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8b85	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8b88	29 08		and #$08			and 	#NSTFloat
.8b8a	d0 31		bne $8bbd			bne 	_CBCFloat
.8b8c	20 c0 8b	jsr $8bc0			jsr 	CompareFixMinusZero
.8b8f	e8		inx				inx
.8b90	20 c0 8b	jsr $8bc0			jsr 	CompareFixMinusZero
.8b93	ca		dex				dex
.8b94	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8b97	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8b9a	10 0b		bpl $8ba7			bpl 	_CDCSameSign
.8b9c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8b9f	30 16		bmi $8bb7			bmi 	_CBCLess 					; return $FF
.8ba1					_CBCGreater:
.8ba1	a9 01		lda #$01			lda 	#1
.8ba3	60		rts				rts
.8ba4					_CBCEqual:
.8ba4	a9 00		lda #$00			lda 	#0
.8ba6	60		rts				rts
.8ba7					_CDCSameSign:
.8ba7	20 d0 8c	jsr $8cd0			jsr 	SubTopTwoStack 				; unsigned subtract
.8baa	20 38 96	jsr $9638			jsr 	NSMIsZero 					; or the mantissa together
.8bad	f0 f5		beq $8ba4			beq 	_CBCEqual 					; -0 == 0
.8baf	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8bb2	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8bb5	10 ea		bpl $8ba1			bpl 	_CBCGreater
.8bb7					_CBCLess:
.8bb7	a9 ff		lda #$ff			lda 	#$FF
.8bb9	60		rts				rts
.8bba					_CBCString:
.8bba	4c 26 8c	jmp $8c26			jmp 	CompareStrings
.8bbd					_CBCFloat:
.8bbd	4c 47 9f	jmp $9f47			jmp 	CompareFloat
.8bc0					CompareFixMinusZero:
.8bc0	20 38 96	jsr $9638			jsr 	NSMIsZero
.8bc3	d0 03		bne $8bc8			bne 	_CFXMZNotZero
.8bc5	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8bc8					_CFXMZNotZero:
.8bc8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8bc9					StringConcat:
.8bc9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8bcc	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8bcf	29 18		and #$18			and 	#NSBTypeMask
.8bd1	c9 10		cmp #$10			cmp 	#NSTString
.8bd3	d0 4e		bne $8c23			bne		_SCType
.8bd5	64 38		stz $38				stz 	zTemp1 						; counting total length
.8bd7	e8		inx				inx
.8bd8	20 f6 8b	jsr $8bf6			jsr 	_SCSetupZ0 					; setup for second
.8bdb	20 01 8c	jsr $8c01			jsr 	_SCLengthZ0 				; length for second
.8bde	ca		dex				dex
.8bdf	20 f6 8b	jsr $8bf6			jsr 	_SCSetupZ0 					; setup for first
.8be2	20 01 8c	jsr $8c01			jsr 	_SCLengthZ0 				; length for first
.8be5	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8be7	20 cb a4	jsr $a4cb			jsr 	StringTempAllocate
.8bea	20 14 8c	jsr $8c14			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8bed	e8		inx				inx
.8bee	20 f6 8b	jsr $8bf6			jsr 	_SCSetupZ0 					; copy second out
.8bf1	20 14 8c	jsr $8c14			jsr 	_SCCopy
.8bf4	ca		dex				dex
.8bf5	60		rts				rts
.8bf6					_SCSetupZ0:
.8bf6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8bf9	85 36		sta $36				sta 	zTemp0
.8bfb	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8bfe	85 37		sta $37				sta 	zTemp0+1
.8c00	60		rts				rts
.8c01					_SCLengthZ0:
.8c01	5a		phy				phy
.8c02	a0 00		ldy #$00			ldy 	#0
.8c04					_SCLenLoop:
.8c04	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c06	f0 0a		beq $8c12			beq 	_SCLExit
.8c08	c8		iny				iny
.8c09	e6 38		inc $38				inc 	zTemp1
.8c0b	10 f7		bpl $8c04			bpl		_SCLenLoop
.8c0d	a9 09		lda #$09		lda	#9
.8c0f	4c b5 8a	jmp $8ab5		jmp	ErrorHandler
.8c12					_SCLExit:
.8c12	7a		ply				ply
.8c13	60		rts				rts
.8c14					_SCCopy:
.8c14	5a		phy				phy
.8c15	a0 00		ldy #$00			ldy 	#0
.8c17					_SCCopyLoop:
.8c17	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c19	f0 06		beq $8c21			beq 	_SCCExit
.8c1b	20 09 a5	jsr $a509			jsr 	StringTempWrite
.8c1e	c8		iny				iny
.8c1f	80 f6		bra $8c17			bra 	_SCCopyLoop
.8c21					_SCCExit:
.8c21	7a		ply				ply
.8c22	60		rts				rts
.8c23					_SCType:
.8c23	4c db a2	jmp $a2db			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9d08					IntegerDivide:
.9d08	fa		plx				plx
.9d09	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9d0c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9d0f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d10	0a		asl a				asl 	a
.9d11	10 05		bpl $9d18			bpl 	_NotRef
.9d13	48		pha				pha
.9d14	20 ce 8f	jsr $8fce			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d17	68		pla				pla
.9d18					_NotRef:
.9d18	0a		asl a				asl 	a
.9d19	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d1b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d1e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9d21	f0 03		beq $9d26			beq 	_IntegerCode 				; if clear, then we have two integers
.9d23	4c db a2	jmp $a2db			jmp 	TypeError 					; anything else, type mismatch.
.9d26					_IntegerCode:
.9d26	20 48 9d	jsr $9d48			jsr 	CheckDivideZero 			; do div zero check
.9d29	20 80 9d	jsr $9d80			jsr 	Int32Divide 				; do the division
.9d2c	20 3d 9e	jsr $9e3d			jsr 	CalculateSign 				; calculate result sign
.9d2f					NSMCopyPlusTwoToZero:
.9d2f	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9d32	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9d35	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9d38	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9d3b	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9d3e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9d41	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9d44	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9d47	60		rts				rts
.9d48					CheckDivideZero:
.9d48	e8		inx				inx
.9d49	20 38 96	jsr $9638			jsr 	NSMIsZero
.9d4c	f0 02		beq $9d50			beq 	_CDVError
.9d4e	ca		dex				dex
.9d4f	60		rts				rts
.9d50					_CDVError:
.9d50	a9 03		lda #$03		lda	#3
.9d52	4c b5 8a	jmp $8ab5		jmp	ErrorHandler
.9d55					IntegerModulus:
.9d55	fa		plx				plx
.9d56	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9d59	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9d5c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d5d	0a		asl a				asl 	a
.9d5e	10 05		bpl $9d65			bpl 	_NotRef
.9d60	48		pha				pha
.9d61	20 ce 8f	jsr $8fce			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d64	68		pla				pla
.9d65					_NotRef:
.9d65	0a		asl a				asl 	a
.9d66	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d68	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d6b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9d6e	f0 03		beq $9d73			beq 	_IntegerCode 				; if clear, then we have two integers
.9d70	4c db a2	jmp $a2db			jmp 	TypeError 					; anything else, type mismatch.
.9d73					_IntegerCode:
.9d73	20 48 9d	jsr $9d48			jsr 	CheckDivideZero 			; do div zero check
.9d76	20 80 9d	jsr $9d80			jsr 	Int32Divide 				; do the division
.9d79	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9d7c	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9d7f	60		rts				rts
.9d80					Int32Divide:
.9d80	48		pha				pha 								; save AXY
.9d81	5a		phy				phy
.9d82	20 df 95	jsr $95df			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9d85	20 04 96	jsr $9604			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9d88	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9d8a					_I32DivideLoop:
.9d8a	e8		inx				inx
.9d8b	e8		inx				inx
.9d8c	20 1d 96	jsr $961d			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9d8f	ca		dex				dex
.9d90	ca		dex				dex
.9d91	20 1e 96	jsr $961e			jsr 	NSMRotateLeft
.9d94	20 c0 9d	jsr $9dc0			jsr 	DivideCheckSubtract 		; check if subtract possible
.9d97	90 03		bcc $9d9c			bcc 	_I32DivideNoCarryIn
.9d99	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9d9c					_I32DivideNoCarryIn:
.9d9c	88		dey				dey 								; loop round till division completed.
.9d9d	d0 eb		bne $9d8a			bne 	_I32DivideLoop
.9d9f	7a		ply				ply 								; restore AXY and exit
.9da0	68		pla				pla
.9da1	60		rts				rts
.9da2					Int32ShiftDivide:
.9da2	48		pha				pha 								; save AY
.9da3	5a		phy				phy
.9da4	e8		inx				inx 								; clear S[X+2]
.9da5	e8		inx				inx
.9da6	20 08 96	jsr $9608			jsr 	NSMSetZero
.9da9	ca		dex				dex
.9daa	ca		dex				dex
.9dab	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9dad					_I32SDLoop:
.9dad	20 c0 9d	jsr $9dc0			jsr 	DivideCheckSubtract 		; check if subtract possible
.9db0	e8		inx				inx
.9db1	e8		inx				inx
.9db2	20 1e 96	jsr $961e			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9db5	ca		dex				dex
.9db6	ca		dex				dex
.9db7	20 1e 96	jsr $961e			jsr 	NSMRotateLeft
.9dba	88		dey				dey 	 							; do 31 times
.9dbb	d0 f0		bne $9dad			bne 	_I32SDLoop
.9dbd	7a		ply				ply 								; restore AY and exit
.9dbe	68		pla				pla
.9dbf	60		rts				rts
.9dc0					DivideCheckSubtract:
.9dc0	20 d0 8c	jsr $8cd0			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9dc3	b0 04		bcs $9dc9			bcs 	_DCSExit 					; if carry set, then could do, exit
.9dc5	20 aa 8c	jsr $8caa			jsr 	AddTopTwoStack 				; add it back in
.9dc8	18		clc				clc 								; and return False
.9dc9					_DCSExit:
.9dc9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9dca					MulInteger:
.9dca	fa		plx				plx
.9dcb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9dce	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9dd1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9dd2	0a		asl a				asl 	a
.9dd3	10 05		bpl $9dda			bpl 	_NotRef
.9dd5	48		pha				pha
.9dd6	20 ce 8f	jsr $8fce			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9dd9	68		pla				pla
.9dda					_NotRef:
.9dda	0a		asl a				asl 	a 							; put MSB of type into A:7
.9ddb	30 0b		bmi $9de8			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9ddd	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9de0	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9de3	f0 06		beq $9deb			beq 	_IntegerCode 				; if clear, then we have two integers
.9de5	4c 1e a0	jmp $a01e			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9de8					_StringData:
.9de8	4c e5 a2	jmp $a2e5			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9deb					_IntegerCode:
.9deb	20 f8 9d	jsr $9df8			jsr 	MultiplyShort
.9dee	c9 00		cmp #$00			cmp 	#0
.9df0	f0 05		beq $9df7			beq 	_MIExit
.9df2	a9 04		lda #$04		lda	#4
.9df4	4c b5 8a	jmp $8ab5		jmp	ErrorHandler
.9df7					_MIExit:
.9df7	60		rts				rts
.9df8					MultiplyShort:
.9df8	5a		phy				phy 								; save Y
.9df9	20 df 95	jsr $95df			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9dfc	20 04 96	jsr $9604			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9dff	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9e01					_I32MLoop:
.9e01	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9e04	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9e07	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9e0a	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9e0d	f0 28		beq $9e37			beq 	_I32MExit 					; exit if zero
.9e0f	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9e12	29 01		and #$01			and 	#1
.9e14	f0 0e		beq $9e24			beq 	_I32MNoAdd
.9e16	20 aa 8c	jsr $8caa			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9e19	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9e1c	10 06		bpl $9e24			bpl 	_I32MNoAdd
.9e1e					_I32ShiftRight:
.9e1e	20 2b 96	jsr $962b			jsr 	NSMShiftRight 				; shift S[X] right
.9e21	c8		iny				iny 								; increment shift count
.9e22	80 0a		bra $9e2e			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9e24					_I32MNoAdd:
.9e24	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9e27	70 f5		bvs $9e1e			bvs 	_I32ShiftRight 				; instead.
.9e29	e8		inx				inx
.9e2a	20 1d 96	jsr $961d			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9e2d	ca		dex				dex
.9e2e					_I32MShiftUpper:
.9e2e	e8		inx				inx 								; shift S[X+2] right
.9e2f	e8		inx				inx
.9e30	20 2b 96	jsr $962b			jsr 	NSMShiftRight
.9e33	ca		dex				dex
.9e34	ca		dex				dex
.9e35	80 ca		bra $9e01			bra 	_I32MLoop 					; try again.
.9e37					_I32MExit:
.9e37	20 3d 9e	jsr $9e3d			jsr 	CalculateSign
.9e3a	98		tya				tya 								; shift in A
.9e3b	7a		ply				ply 								; restore Y and exit
.9e3c	60		rts				rts
.9e3d					CalculateSign:
.9e3d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9e40	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9e43	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9e46	0a		asl a				asl 	a 							; shift bit 7 into carry
.9e47	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.9e4a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8c26					CompareStrings:
.8c26	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8c29	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8c2c	29 10		and #$10			and 	#NSBIsString
.8c2e	f0 2c		beq $8c5c			beq 	_CSTypeError
.8c30	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8c33	85 36		sta $36				sta 	zTemp0
.8c35	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8c38	85 37		sta $37				sta 	zTemp0+1
.8c3a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8c3d	85 38		sta $38				sta 	zTemp1
.8c3f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8c42	85 39		sta $39				sta 	zTemp1+1
.8c44	5a		phy				phy 								; save Y so we can access strings
.8c45	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8c47					_CSLoop:
.8c47	c8		iny				iny
.8c48	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8c4a	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8c4c	d0 06		bne $8c54			bne 	_CSDifferent
.8c4e	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8c50	d0 f5		bne $8c47			bne 	_CSLoop 					; still comparing
.8c52					_CSExit:
.8c52	7a		ply				ply 								; reached end, return zero in A from EOS
.8c53	60		rts				rts
.8c54					_CSDifferent:
.8c54	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8c56	90 fa		bcc $8c52			bcc		_CSExit
.8c58	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8c5a	80 f6		bra $8c52			bra 	_CSExit
.8c5c					_CSTypeError:
.8c5c	4c db a2	jmp $a2db			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8c5f					ShiftLeft:
.8c5f	38		sec				sec
.8c60	80 01		bra $8c63			bra 	ShiftMain
.8c62					ShiftRight:
.8c62	18		clc				clc
.8c63					ShiftMain:
.8c63	fa		plx				plx 								; restore X
.8c64	08		php				php 								; save direction
.8c65	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8c68	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c6b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8c6c	0a		asl a				asl 	a
.8c6d	10 05		bpl $8c74			bpl 	_NotRef
.8c6f	48		pha				pha
.8c70	20 ce 8f	jsr $8fce			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8c73	68		pla				pla
.8c74					_NotRef:
.8c74	0a		asl a				asl 	a
.8c75	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8c77	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8c7a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8c7d	f0 03		beq $8c82			beq 	_IntegerCode 				; if clear, then we have two integers
.8c7f	4c db a2	jmp $a2db			jmp 	TypeError 					; anything else, type mismatch.
.8c82					_IntegerCode:
.8c82	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8c85	29 e0		and #$e0			and 	#$E0
.8c87	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8c8a	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8c8d	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8c90	d0 13		bne $8ca5			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8c92					_SMLoop:
.8c92	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8c95	30 11		bmi $8ca8			bmi 	_SMExit 					; exit if done.
.8c97	28		plp				plp 								; restore direcition setting
.8c98	08		php				php
.8c99	90 05		bcc $8ca0			bcc 	_SMRight
.8c9b	20 1d 96	jsr $961d			jsr 	NSMShiftLeft 				; shift left if CS
.8c9e	80 f2		bra $8c92			bra 	_SMLoop
.8ca0					_SMRight:
.8ca0	20 2b 96	jsr $962b			jsr 	NSMShiftRight 				; shift right if CC
.8ca3	80 ed		bra $8c92			bra 	_SMLoop
.8ca5					_SMExit0:
.8ca5	20 08 96	jsr $9608			jsr 	NSMSetZero 					; return zero.
.8ca8					_SMExit:
.8ca8	28		plp				plp 								; throw direction
.8ca9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8caa					AddTopTwoStack:
.8caa	18		clc				clc
.8cab	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8cae	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8cb1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8cb4	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8cb7	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8cba	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8cbd	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8cc0	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8cc3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8cc6	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8cc9	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8ccc	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ccf	60		rts				rts
.8cd0					SubTopTwoStack:
.8cd0	38		sec				sec
.8cd1	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8cd4	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8cd7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8cda	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8cdd	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8ce0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ce3	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8ce6	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8ce9	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8cec	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8cef	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8cf2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8cf5	60		rts				rts
.8cf6					AddInteger:
.8cf6	fa		plx				plx
.8cf7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8cfa	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8cfd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8cfe	0a		asl a				asl 	a
.8cff	10 05		bpl $8d06			bpl 	_NotRef
.8d01	48		pha				pha
.8d02	20 ce 8f	jsr $8fce			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8d05	68		pla				pla
.8d06					_NotRef:
.8d06	0a		asl a				asl 	a 							; put MSB of type into A:7
.8d07	30 0b		bmi $8d14			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8d09	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8d0c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d0f	f0 06		beq $8d17			beq 	_IntegerCode 				; if clear, then we have two integers
.8d11	4c a6 9e	jmp $9ea6			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8d14					_StringData:
.8d14	4c c9 8b	jmp $8bc9			jmp 	StringConcat							; at least one string - don't know both are strings.
.8d17					_IntegerCode:
.8d17					AddCode:
.8d17	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8d1a	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8d1d	10 8b		bpl $8caa			bpl 	AddTopTwoStack
.8d1f	20 d0 8c	jsr $8cd0			jsr 	SubTopTwoStack 				; do a physical subtraction
.8d22	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8d25	10 09		bpl $8d30			bpl 	_AddExit
.8d27	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8d2a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d2d	20 bd 95	jsr $95bd			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8d30					_AddExit:
.8d30	60		rts				rts
.8d31					SubInteger:
.8d31	fa		plx				plx
.8d32	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8d35	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d38	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8d39	0a		asl a				asl 	a
.8d3a	10 05		bpl $8d41			bpl 	_NotRef
.8d3c	48		pha				pha
.8d3d	20 ce 8f	jsr $8fce			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8d40	68		pla				pla
.8d41					_NotRef:
.8d41	0a		asl a				asl 	a 							; put MSB of type into A:7
.8d42	30 0b		bmi $8d4f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8d44	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8d47	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d4a	f0 06		beq $8d52			beq 	_IntegerCode 				; if clear, then we have two integers
.8d4c	4c ab 9e	jmp $9eab			jmp 	FloatingPointSub 							; otherwise at least one float.
.8d4f					_StringData:
.8d4f	4c e5 a2	jmp $a2e5			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8d52					_IntegerCode:
.8d52	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8d55	49 80		eor #$80			eor 	#$80
.8d57	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8d5a	80 bb		bra $8d17			bra 	AddCode 					; and do the same code as add.
.8d5c					AndInteger:
.8d5c	fa		plx				plx
.8d5d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8d60	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d63	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8d64	0a		asl a				asl 	a
.8d65	10 05		bpl $8d6c			bpl 	_NotRef
.8d67	48		pha				pha
.8d68	20 ce 8f	jsr $8fce			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8d6b	68		pla				pla
.8d6c					_NotRef:
.8d6c	0a		asl a				asl 	a
.8d6d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8d6f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8d72	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d75	f0 03		beq $8d7a			beq 	_IntegerCode 				; if clear, then we have two integers
.8d77	4c db a2	jmp $a2db			jmp 	TypeError 					; anything else, type mismatch.
.8d7a					_IntegerCode:
.8d7a	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8d7d	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8d80	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d83	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8d86	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8d89	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8d8c	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8d8f	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8d92	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8d95	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8d98	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8d9b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8d9e	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8da1	60		rts				rts
.8da2					OraInteger:
.8da2	fa		plx				plx
.8da3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8da6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8da9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8daa	0a		asl a				asl 	a
.8dab	10 05		bpl $8db2			bpl 	_NotRef
.8dad	48		pha				pha
.8dae	20 ce 8f	jsr $8fce			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8db1	68		pla				pla
.8db2					_NotRef:
.8db2	0a		asl a				asl 	a
.8db3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8db5	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8db8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8dbb	f0 03		beq $8dc0			beq 	_IntegerCode 				; if clear, then we have two integers
.8dbd	4c db a2	jmp $a2db			jmp 	TypeError 					; anything else, type mismatch.
.8dc0					_IntegerCode:
.8dc0	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8dc3	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8dc6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8dc9	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8dcc	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8dcf	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8dd2	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8dd5	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8dd8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ddb	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8dde	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8de1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8de4	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8de7	60		rts				rts
.8de8					EorInteger:
.8de8	fa		plx				plx
.8de9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8dec	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8def	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8df0	0a		asl a				asl 	a
.8df1	10 05		bpl $8df8			bpl 	_NotRef
.8df3	48		pha				pha
.8df4	20 ce 8f	jsr $8fce			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8df7	68		pla				pla
.8df8					_NotRef:
.8df8	0a		asl a				asl 	a
.8df9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8dfb	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8dfe	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e01	f0 03		beq $8e06			beq 	_IntegerCode 				; if clear, then we have two integers
.8e03	4c db a2	jmp $a2db			jmp 	TypeError 					; anything else, type mismatch.
.8e06					_IntegerCode:
.8e06	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8e09	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8e0c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e0f	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8e12	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8e15	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e18	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8e1b	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8e1e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e21	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8e24	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8e27	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e2a	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8e2d	60		rts				rts
.8e2e					WordIndirect:
.8e2e	fa		plx				plx
.8e2f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e32	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e35	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e36	0a		asl a				asl 	a
.8e37	10 05		bpl $8e3e			bpl 	_NotRef
.8e39	48		pha				pha
.8e3a	20 ce 8f	jsr $8fce			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e3d	68		pla				pla
.8e3e					_NotRef:
.8e3e	0a		asl a				asl 	a
.8e3f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e41	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e44	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e47	f0 03		beq $8e4c			beq 	_IntegerCode 				; if clear, then we have two integers
.8e49	4c db a2	jmp $a2db			jmp 	TypeError 					; anything else, type mismatch.
.8e4c					_IntegerCode:
.8e4c	20 17 8d	jsr $8d17			jsr 	AddCode 					; add the two values
.8e4f	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.8e51	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8e54	60		rts				rts
.8e55					ByteIndirect:
.8e55	fa		plx				plx
.8e56	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e59	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e5c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e5d	0a		asl a				asl 	a
.8e5e	10 05		bpl $8e65			bpl 	_NotRef
.8e60	48		pha				pha
.8e61	20 ce 8f	jsr $8fce			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e64	68		pla				pla
.8e65					_NotRef:
.8e65	0a		asl a				asl 	a
.8e66	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e68	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e6b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e6e	f0 03		beq $8e73			beq 	_IntegerCode 				; if clear, then we have two integers
.8e70	4c db a2	jmp $a2db			jmp 	TypeError 					; anything else, type mismatch.
.8e73					_IntegerCode:
.8e73	20 17 8d	jsr $8d17			jsr 	AddCode 					; add the two values
.8e76	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8e78	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8e7b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9e4b					ConvertInt16:
.9e4b	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9e4e	8e 10 06	stx $0610			stx 	NSMantissa1
.9e51	9c 18 06	stz $0618			stz 	NSMantissa2
.9e54	9c 20 06	stz $0620			stz 	NSMantissa3
.9e57	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.9e5a	a2 00		ldx #$00			ldx 	#0 							; stack level
.9e5c	a9 0a		lda #$0a			lda 	#10 						; base
.9e5e	80 00		bra $9e60			bra 	ConvertInt32
.9e60					ConvertInt32:
.9e60	5a		phy				phy
.9e61	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9e63	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9e66	10 08		bpl $9e70			bpl 	_CI32NotNeg
.9e68	48		pha				pha
.9e69	a9 2d		lda #$2d			lda 	#'-'
.9e6b	99 75 08	sta $0875,y			sta 	NumberBuffer,y
.9e6e	c8		iny				iny
.9e6f	68		pla				pla
.9e70					_CI32NotNeg:
.9e70	20 7e 9e	jsr $9e7e			jsr 	_CI32DivideConvert 			; recursive conversion
.9e73	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9e75	99 75 08	sta $0875,y			sta 	NumberBuffer,y
.9e78	7a		ply				ply
.9e79	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9e7b	a9 75		lda #$75			lda 	#NumberBuffer & $FF
.9e7d	60		rts				rts
.9e7e					_CI32DivideConvert:
.9e7e	e8		inx				inx 								; write to next slot up
.9e7f	20 0a 96	jsr $960a			jsr 	NSMSetByte
.9e82	ca		dex				dex
.9e83	20 80 9d	jsr $9d80			jsr 	Int32Divide 				; divide
.9e86	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9e89	48		pha				pha
.9e8a	20 2f 9d	jsr $9d2f			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9e8d	20 38 96	jsr $9638			jsr 	NSMIsZero 					; is it zero ?
.9e90	f0 06		beq $9e98			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9e92	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9e95	20 7e 9e	jsr $9e7e			jsr 	_CI32DivideConvert 			; and recusrively call.
.9e98					_CI32NoRecurse:
.9e98	68		pla				pla 								; remainder
.9e99	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9e9b	90 02		bcc $9e9f			bcc 	_CI32NotHex
.9e9d	69 26		adc #$26			adc 	#6+32
.9e9f					_CI32NotHex:
.9e9f	69 30		adc #$30			adc 	#48
.9ea1	99 75 08	sta $0875,y			sta 	NumberBuffer,y 				; write out and exit
.9ea4	c8		iny				iny
.9ea5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.8e7c					PrecedenceLevel:
>8e7c	04					.byte	 4	; $00 <<
>8e7d	02					.byte	 2	; $01 <=
>8e7e	02					.byte	 2	; $02 <>
>8e7f	00					.byte	 0	; $03 !!3
>8e80	00					.byte	 0	; $04 ><
>8e81	02					.byte	 2	; $05 >=
>8e82	04					.byte	 4	; $06 >>
>8e83	00					.byte	 0	; $07 !!7
>8e84	00					.byte	 0	; $08 !!8
>8e85	00					.byte	 0	; $09 !!9
>8e86	00					.byte	 0	; $0a !!10
>8e87	00					.byte	 0	; $0b !!11
>8e88	00					.byte	 0	; $0c !!12
>8e89	00					.byte	 0	; $0d !!13
>8e8a	00					.byte	 0	; $0e !!14
>8e8b	00					.byte	 0	; $0f !!15
>8e8c	00					.byte	 0	; $10 @
>8e8d	00					.byte	 0	; $11 !!17
>8e8e	00					.byte	 0	; $12 !!18
>8e8f	00					.byte	 0	; $13 [
>8e90	04					.byte	 4	; $14 \
>8e91	00					.byte	 0	; $15 ]
>8e92	01					.byte	 1	; $16 ^
>8e93	00					.byte	 0	; $17 _
>8e94	00					.byte	 0	; $18 `
>8e95	00					.byte	 0	; $19 !!25
>8e96	00					.byte	 0	; $1a !!26
>8e97	00					.byte	 0	; $1b {
>8e98	01					.byte	 1	; $1c |
>8e99	00					.byte	 0	; $1d }
>8e9a	00					.byte	 0	; $1e ~
>8e9b	00					.byte	 0	; $1f [7m<7F>[m
>8e9c	00					.byte	 0	; $20
>8e9d	05					.byte	 5	; $21 !
>8e9e	00					.byte	 0	; $22 "
>8e9f	00					.byte	 0	; $23 #
>8ea0	05					.byte	 5	; $24 $
>8ea1	04					.byte	 4	; $25 %
>8ea2	01					.byte	 1	; $26 &
>8ea3	00					.byte	 0	; $27 '
>8ea4	00					.byte	 0	; $28 (
>8ea5	00					.byte	 0	; $29 )
>8ea6	04					.byte	 4	; $2a *
>8ea7	03					.byte	 3	; $2b +
>8ea8	00					.byte	 0	; $2c ,
>8ea9	03					.byte	 3	; $2d -
>8eaa	00					.byte	 0	; $2e .
>8eab	04					.byte	 4	; $2f /
>8eac	00					.byte	 0	; $30 0
>8ead	00					.byte	 0	; $31 1
>8eae	00					.byte	 0	; $32 2
>8eaf	00					.byte	 0	; $33 3
>8eb0	00					.byte	 0	; $34 4
>8eb1	00					.byte	 0	; $35 5
>8eb2	00					.byte	 0	; $36 6
>8eb3	00					.byte	 0	; $37 7
>8eb4	00					.byte	 0	; $38 8
>8eb5	00					.byte	 0	; $39 9
>8eb6	00					.byte	 0	; $3a :
>8eb7	00					.byte	 0	; $3b ;
>8eb8	02					.byte	 2	; $3c <
>8eb9	02					.byte	 2	; $3d =
>8eba	02					.byte	 2	; $3e >
>8ebb	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.8ebc					EvaluateExpressionAt0:
.8ebc	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8ebe					EvaluateExpression:
.8ebe	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8ec0					EvaluateExpressionAtPrecedence:
.8ec0	48		pha				pha 								; save precedence level
.8ec1	20 8f 91	jsr $918f			jsr 	EvaluateTerm 				; evaluate term into level X.
.8ec4	68		pla				pla 								; restore precedence level.
.8ec5					_EXPRLoop:
.8ec5	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8ec7	b1 30		lda ($30),y			lda 	(codePtr),y
.8ec9	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8ecb	b0 25		bcs $8ef2			bcs 	_EXPRExit
.8ecd	da		phx				phx 								; read the operator precedence
.8ece	aa		tax				tax
.8ecf	bd 7c 8e	lda $8e7c,x			lda 	PrecedenceLevel,x
.8ed2	fa		plx				plx
.8ed3	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8ed5	f0 1b		beq $8ef2			beq 	_EXPRExit
.8ed7	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8ed9	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8edb	c5 37		cmp $37				cmp 	zTemp0+1
.8edd	b0 13		bcs $8ef2			bcs		_EXPRExit 					; if current >= operator exit
.8edf	48		pha				pha 								; save current precedence.
.8ee0	b1 30		lda ($30),y			lda 	(codePtr),y
.8ee2	c8		iny				iny
.8ee3	48		pha				pha
.8ee4	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8ee6	e8		inx				inx 								; work out the right hand side.
.8ee7	20 c0 8e	jsr $8ec0			jsr 	EvaluateExpressionAtPrecedence
.8eea	ca		dex				dex
.8eeb	68		pla				pla 								; get operator, call the code.
.8eec	20 f5 8e	jsr $8ef5			jsr 	_EXPRCaller
.8eef	68		pla				pla 								; restore precedence level
.8ef0	80 d3		bra $8ec5			bra 	_EXPRLoop 					; and go round.
.8ef2					_EXPRExit:
.8ef2	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8ef4	60		rts				rts
.8ef5					_EXPRCaller:
.8ef5	da		phx				phx 								; save on stack, first thing is to restore it
.8ef6	0a		asl a				asl 	a 							; double so can use vectors into X
.8ef7	aa		tax				tax
.8ef8	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9ea6					FloatingPointAdd:
.9ea6	20 47 a0	jsr $a047			jsr 	FloatPrepare 				; prepare for floats
.9ea9	80 0b		bra $9eb6			bra 	FloatAdd
.9eab					FloatingPointSub:
.9eab	20 47 a0	jsr $a047			jsr 	FloatPrepare 				; prepare for floats
.9eae					FloatSubtract:
.9eae	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9eb1	49 80		eor #$80			eor 	#$80
.9eb3	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9eb6					FloatAdd:
.9eb6	48		pha				pha
.9eb7	5a		phy				phy
.9eb8	20 58 a0	jsr $a058			jsr 	NSNormalise 				; normalise S[X]
.9ebb	f0 54		beq $9f11			beq 	_FAReturn1
.9ebd	e8		inx				inx 								; normalise S[X+1]
.9ebe	20 58 a0	jsr $a058			jsr 	NSNormalise
.9ec1	ca		dex				dex
.9ec2	c9 00		cmp #$00			cmp 	#0
.9ec4	f0 6f		beq $9f35			beq 	_FAExit 					; if so, just return A
.9ec6	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9ec9	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.9ecc	f0 1b		beq $9ee9			beq 	_FAExponentsEqual
.9ece	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9ed1	a8		tay				tay
.9ed2	38		sec				sec 								; do a signed comparison of the exponents.
.9ed3	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9ed6	50 02		bvc $9eda			bvc 	_FANoSignedChange
.9ed8	49 80		eor #$80			eor 	#$80
.9eda					_FANoSignedChange:
.9eda	29 80		and #$80			and 	#$80
.9edc	10 03		bpl $9ee1			bpl 	_FAHaveMax
.9ede	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9ee1					_FAHaveMax:
.9ee1	20 38 9f	jsr $9f38			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9ee4	e8		inx				inx
.9ee5	20 38 9f	jsr $9f38			jsr 	_FAShiftToExponent
.9ee8	ca		dex				dex
.9ee9					_FAExponentsEqual:
.9ee9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9eec	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9eef	30 10		bmi $9f01			bmi 	_FADifferentSigns
.9ef1	20 aa 8c	jsr $8caa			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9ef4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9ef7	10 3c		bpl $9f35			bpl 	_FAExit 					; if no, we are done.
.9ef9	20 2b 96	jsr $962b			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9efc	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9eff	80 34		bra $9f35			bra 	_FAExit
.9f01					_FADifferentSigns:
.9f01	20 d0 8c	jsr $8cd0			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9f04	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.9f07	10 2c		bpl $9f35			bpl 	_FAExit 					; if no, we are done.
.9f09	20 b4 95	jsr $95b4			jsr 	NSMNegate 					; netate result
.9f0c	20 bd 95	jsr $95bd			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9f0f	80 24		bra $9f35			bra 	_FAExit
.9f11					_FAReturn1:
.9f11	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9f14	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9f17	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9f1a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9f1d	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9f20	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9f23	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.9f26	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9f29	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9f2c	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9f2f	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.9f32	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9f35					_FAExit:
.9f35	7a		ply				ply
.9f36	68		pla				pla
.9f37	60		rts				rts
.9f38					_FAShiftToExponent:
.9f38					_FAShiftToExponent2:
.9f38	98		tya				tya 								; compare Y to exponent
.9f39	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9f3c	f0 08		beq $9f46			beq 	_FASEExit 					; exit if so.
.9f3e	20 2b 96	jsr $962b			jsr 	NSMShiftRight	 			; shift the mantissa right
.9f41	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9f44	80 f2		bra $9f38			bra 	_FAShiftToExponent2
.9f46					_FASEExit:
.9f46	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9f47					CompareFloat:
.9f47	20 ae 9e	jsr $9eae			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9f4a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9f4d	29 f8		and #$f8			and 	#$F8
.9f4f	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9f52	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9f55	f0 09		beq $9f60			beq 	_FCExit 					; zero, so approximately identical
.9f57	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9f59	3c 00 06	bit $0600,x			bit 	NSStatus,x
.9f5c	10 02		bpl $9f60			bpl 	_FCExit
.9f5e					_FCNegative:
.9f5e	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9f60					_FCExit:
.9f60	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9f61					FDivideCommand:
.9f61	fa		plx				plx	 								; restore stack position
.9f62	20 47 a0	jsr $a047			jsr 	FloatPrepare 				; prepare for floats
.9f65					FloatDivide:
.9f65	48		pha				pha
.9f66	e8		inx				inx
.9f67	20 58 a0	jsr $a058			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9f6a	ca		dex				dex
.9f6b	c9 00		cmp #$00			cmp 	#0
.9f6d	f0 20		beq $9f8f			beq 	_FDZero
.9f6f	20 58 a0	jsr $a058			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9f72	f0 19		beq $9f8d			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9f74	20 a2 9d	jsr $9da2			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9f77	20 2f 9d	jsr $9d2f			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9f7a	20 58 a0	jsr $a058			jsr		NSNormalise 				; renormalise
.9f7d	20 3d 9e	jsr $9e3d			jsr 	CalculateSign 				; calculate result sign
.9f80	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9f83	38		sec				sec
.9f84	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9f87	38		sec				sec
.9f88	e9 1e		sbc #$1e			sbc 	#30
.9f8a	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9f8d					_FDExit:
.9f8d	68		pla				pla
.9f8e	60		rts				rts
.9f8f					_FDZero:
.9f8f	a9 03		lda #$03		lda	#3
.9f91	4c b5 8a	jmp $8ab5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9f94					FloatFractionalPart:
.9f94	5a		phy				phy
.9f95	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.9f98	29 7f		and #$7f			and 	#$7F
.9f9a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9f9d	20 58 a0	jsr $a058			jsr 	NSNormalise
.9fa0	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9fa3	38		sec				sec
.9fa4	e9 e0		sbc #$e0			sbc 	#$E0
.9fa6	90 31		bcc $9fd9			bcc 	_FFPExit 					; already fractional
.9fa8	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9faa	b0 2a		bcs $9fd6			bcs 	_FFPZero
.9fac	a8		tay				tay 								; put count to do in Y
.9fad	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9fb0	20 db 9f	jsr $9fdb			jsr 	_FFPPartial
.9fb3	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9fb6	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9fb9	20 db 9f	jsr $9fdb			jsr 	_FFPPartial
.9fbc	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9fbf	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9fc2	20 db 9f	jsr $9fdb			jsr 	_FFPPartial
.9fc5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9fc8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9fcb	20 db 9f	jsr $9fdb			jsr 	_FFPPartial
.9fce	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9fd1	20 38 96	jsr $9638			jsr 	NSMIsZero 					; zeroed check.
.9fd4	d0 03		bne $9fd9			bne 	_FFPExit
.9fd6					_FFPZero:
.9fd6	20 08 96	jsr $9608			jsr 	NSMSetZero
.9fd9					_FFPExit:
.9fd9	7a		ply				ply
.9fda	60		rts				rts
.9fdb					_FFPPartial:
.9fdb	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9fdd	f0 17		beq $9ff6			beq 	_FFFPPExit
.9fdf	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9fe1	b0 0c		bcs $9fef			bcs 	_FFFPPWholeByte
.9fe3	5a		phy				phy
.9fe4					_FFFPPLeft:
.9fe4	0a		asl a				asl 	a
.9fe5	88		dey				dey
.9fe6	d0 fc		bne $9fe4			bne 	_FFFPPLeft
.9fe8	7a		ply				ply
.9fe9					_FFFPPRight:
.9fe9	4a		lsr a				lsr 	a
.9fea	88		dey				dey
.9feb	d0 fc		bne $9fe9			bne 	_FFFPPRight
.9fed	80 07		bra $9ff6			bra 	_FFFPPExit
.9fef					_FFFPPWholeByte:
.9fef	98		tya				tya 								; subtract 8 from count
.9ff0	38		sec				sec
.9ff1	e9 08		sbc #$08			sbc 	#8
.9ff3	a8		tay				tay
.9ff4	a9 00		lda #$00			lda 	#0 							; and clear all
.9ff6					_FFFPPExit:
.9ff6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9ff7					FloatIntegerPart:
.9ff7	48		pha				pha
.9ff8	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9ffb	f0 1f		beq $a01c			beq 	_FIPExit 					; if so do nothing
.9ffd	20 38 96	jsr $9638			jsr 	NSMIsZero 					; is it zero ?
.a000	f0 17		beq $a019			beq 	_FIPZero 					; if so return zero.
.a002	20 58 a0	jsr $a058			jsr 	NSNormalise 				; normalise
.a005	f0 12		beq $a019			beq 	_FIPZero 					; normalised to zero, exit zero
.a007					_FIPShift:
.a007	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a00a	10 08		bpl $a014			bpl 	_FIPCheckZero
.a00c	20 2b 96	jsr $962b			jsr 	NSMShiftRight 				; shift mantissa right
.a00f	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.a012	80 f3		bra $a007			bra 	_FIPShift
.a014					_FIPCheckZero:
.a014	20 38 96	jsr $9638			jsr 	NSMIsZero 					; avoid -0 problem
.a017	d0 03		bne $a01c			bne 	_FIPExit 					; set to zero if mantissa zero.
.a019					_FIPZero:
.a019	20 08 96	jsr $9608			jsr 	NSMSetZero
.a01c					_FIPExit:
.a01c	68		pla				pla
.a01d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a01e					FloatingPointMultiply:
.a01e	20 47 a0	jsr $a047			jsr 	FloatPrepare 				; prepare for floats
.a021					FloatMultiply:
.a021	48		pha				pha
.a022	20 58 a0	jsr $a058			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a025	f0 1b		beq $a042			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a027	e8		inx				inx
.a028	20 58 a0	jsr $a058			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a02b	ca		dex				dex
.a02c	c9 00		cmp #$00			cmp 	#0
.a02e	f0 0f		beq $a03f			beq 	_FDSetZero
.a030	20 f8 9d	jsr $9df8			jsr 	MultiplyShort 				; calculate the result.
.a033	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a036	18		clc				clc
.a037	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.a03a	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a03d	80 03		bra $a042			bra 	_FDExit
.a03f					_FDSetZero:
.a03f	20 08 96	jsr $9608			jsr 	NSMSetZero 					; return 0
.a042					_FDExit:
.a042	20 58 a0	jsr $a058			jsr 	NSNormalise 				; normalise the result
.a045	68		pla				pla
.a046	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a047					FloatPrepare:
.a047	20 ce 8f	jsr $8fce			jsr 	DereferenceTopTwo 			; dereference the top two values
.a04a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.a04d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a050	29 10		and #$10			and 	#NSBIsString
.a052	d0 01		bne $a055			bne 	_FDType
.a054	60		rts				rts
.a055					_FDType:
.a055	4c db a2	jmp $a2db			jmp 	TypeError
.a058					NSNormalise:
.a058	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.a05b	29 80		and #$80			and 	#$80
.a05d	09 08		ora #$08			ora 	#NSTFloat
.a05f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a062	20 38 96	jsr $9638			jsr 	NSMIsZero 					; if zero exit
.a065	d0 09		bne $a070			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a067	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a06a	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.a06d	a9 00		lda #$00			lda 	#0 							; set Z flag
.a06f	60		rts				rts
.a070					_NSNormaliseOptimise:
.a070	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a073	d0 22		bne $a097			bne 	_NSNormaliseLoop
.a075	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.a078	30 1d		bmi $a097			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a07a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a07d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a080	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a083	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a086	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a089	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.a08c	bd 28 06	lda $0628,x			lda 	NSExponent,x
.a08f	38		sec				sec
.a090	e9 08		sbc #$08			sbc 	#8
.a092	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a095	80 d9		bra $a070			bra 	_NSNormaliseOptimise
.a097					_NSNormaliseLoop:
.a097	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a09a	70 08		bvs $a0a4			bvs 	_NSNExit 					; exit if so with Z flag clear
.a09c	20 1d 96	jsr $961d			jsr 	NSMShiftLeft 				; shift mantissa left
.a09f	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.a0a2	80 f3		bra $a097			bra 	_NSNormaliseLoop
.a0a4					_NSNExit:
.a0a4	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a0a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.8efb					AssignNumber:
.8efb	5a		phy				phy
.8efc	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.8eff	85 36		sta $36				sta 	zTemp0
.8f01	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8f04	85 37		sta $37				sta 	zTemp0+1
.8f06	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8f09	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.8f0b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f0e	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.8f10	c9 08		cmp #$08			cmp 	#NSTFloat
.8f12	f0 2a		beq $8f3e			beq 	_ANFloat
.8f14	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.8f17	f0 05		beq $8f1e			beq		_ANNotFloat
.8f19	e8		inx				inx
.8f1a	20 f7 9f	jsr $9ff7			jsr 	FloatIntegerPart 			; make it an integer
.8f1d	ca		dex				dex
.8f1e					_ANNotFloat:
.8f1e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.8f21	29 03		and #$03			and 	#3
.8f23	d0 05		bne $8f2a			bne 	_ANByteWord
.8f25	20 4a 8f	jsr $8f4a			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8f28	80 1e		bra $8f48			bra 	_ANExit
.8f2a					_ANByteWord:
.8f2a	48		pha				pha 								; save count
.8f2b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.8f2e	92 36		sta ($36)			sta 	(zTemp0)
.8f30	68		pla				pla
.8f31	c9 01		cmp #$01			cmp	 	#1
.8f33	f0 13		beq $8f48			beq 	_ANExit
.8f35	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.8f38	a0 01		ldy #$01			ldy 	#1
.8f3a	91 36		sta ($36),y			sta 	(zTemp0),y
.8f3c	80 0a		bra $8f48			bra 	_ANExit
.8f3e					_ANFloat:
.8f3e	20 4a 8f	jsr $8f4a			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.8f41	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.8f44	a0 04		ldy #$04			ldy 	#4
.8f46	91 36		sta ($36),y			sta 	(zTemp0),y
.8f48					_ANExit:
.8f48	7a		ply				ply
.8f49	60		rts				rts
.8f4a					_ANCopy4PackSign:
.8f4a	a0 03		ldy #$03			ldy 	#3
.8f4c	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.8f4f	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.8f51	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8f54	91 36		sta ($36),y			sta 	(zTemp0),y
.8f56	88		dey				dey
.8f57	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8f5a	91 36		sta ($36),y			sta 	(zTemp0),y
.8f5c	88		dey				dey
.8f5d	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8f60	91 36		sta ($36),y			sta 	(zTemp0),y
.8f62	88		dey				dey
.8f63	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8f66	91 36		sta ($36),y			sta 	(zTemp0),y
.8f68	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.8f69					AssignString:
.8f69	5a		phy				phy
.8f6a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8f6d	85 38		sta $38				sta 	zTemp1
.8f6f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8f72	85 39		sta $39				sta 	zTemp1+1
.8f74	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8f77	85 36		sta $36				sta 	zTemp0
.8f79	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8f7c	85 37		sta $37				sta 	zTemp0+1
.8f7e	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.8f80	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f82	f0 23		beq $8fa7			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.8f84	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.8f85	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.8f87	e9 02		sbc #$02			sbc 	#2
.8f89	85 3c		sta $3c				sta 	zsTemp
.8f8b	a0 01		ldy #$01			ldy 	#1
.8f8d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f8f	e9 00		sbc #$00			sbc 	#0
.8f91	85 3d		sta $3d				sta 	zsTemp+1
.8f93	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8f95					_ASGetLength:
.8f95	c8		iny				iny
.8f96	b1 38		lda ($38),y			lda 	(zTemp1),y
.8f98	d0 fb		bne $8f95			bne 	_ASGetLength
.8f9a	98		tya				tya 								; is this length <= current length
.8f9b	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.8f9d	90 20		bcc $8fbf			bcc 	_ASCopyString
.8f9f	f0 1e		beq $8fbf			beq 	_ASCopyString
.8fa1	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.8fa3	a0 01		ldy #$01			ldy 	#1
.8fa5	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8fa7					_ASNewStringRequired:
.8fa7	e8		inx				inx 								; concrete the new string.
.8fa8	20 50 a4	jsr $a450			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.8fab	ca		dex				dex
.8fac	18		clc				clc
.8fad	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.8fb0	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.8fb2	92 36		sta ($36)			sta 	(zTemp0)
.8fb4	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8fb7	69 00		adc #$00			adc 	#0
.8fb9	a0 01		ldy #$01			ldy 	#1
.8fbb	91 36		sta ($36),y			sta 	(zTemp0),y
.8fbd	80 0d		bra $8fcc			bra 	_ASExit
.8fbf					_ASCopyString:
.8fbf	a0 00		ldy #$00			ldy 	#0
.8fc1					_ASCopyLoop:
.8fc1	b1 38		lda ($38),y			lda 	(zTemp1),y
.8fc3	c8		iny				iny
.8fc4	c8		iny				iny
.8fc5	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8fc7	88		dey				dey
.8fc8	c9 00		cmp #$00			cmp 	#0
.8fca	d0 f5		bne $8fc1			bne 	_ASCopyLoop
.8fcc					_ASExit:
.8fcc	7a		ply				ply
.8fcd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.8fce					DereferenceTopTwo:
.8fce	e8		inx				inx
.8fcf	20 d3 8f	jsr $8fd3			jsr 	Dereference 				; deref x+1
.8fd2	ca		dex				dex  								; falls through to deref x
.8fd3					Dereference:
.8fd3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8fd6	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8fd8	f0 57		beq $9031			beq 	_DRFExit 					; not a reference
.8fda	5a		phy				phy
.8fdb	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8fde	85 36		sta $36				sta 	zTemp0
.8fe0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8fe3	85 37		sta $37				sta 	zTemp0+1
.8fe5	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8fe8	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8fea	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8fed	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8ff0	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8ff2	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8ff4	f0 0f		beq $9005			beq 	_DRFDereferenceTwo
.8ff6	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8ff8	f0 39		beq $9033			beq 	_DRFFull
.8ffa	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8ffd	29 03		and #$03			and 	#3
.8fff	f0 32		beq $9033			beq 	_DRFFull 					; the whole word
.9001	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9003	f0 07		beq $900c			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9005					_DRFDereferenceTwo:
.9005	a0 01		ldy #$01			ldy 	#1
.9007	b1 36		lda ($36),y			lda 	(zTemp0),y
.9009	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.900c					_DRFClear23:
.900c	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.900f	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9012	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.9015	29 18		and #$18			and 	#NSBTypeMask
.9017	9d 00 06	sta $0600,x			sta 	NSStatus,x
.901a	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.901c	d0 12		bne $9030			bne 	_DRFNotString
.901e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.9021	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.9024	d0 0a		bne $9030			bne 	_DRFNotString
.9026	a9 32		lda #$32			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9028	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.902b	a9 90		lda #$90			lda 	#_DRFNullString >> 8
.902d	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.9030					_DRFNotString
.9030	7a		ply				ply 								; restore Y and exit
.9031					_DRFExit:
.9031	60		rts				rts
.9032					_DRFNullString:
>9032	00						.byte 	0
.9033					_DRFFull:
.9033	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9035	b1 36		lda ($36),y			lda 	(zTemp0),y
.9037	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.903a	c8		iny				iny
.903b	b1 36		lda ($36),y			lda 	(zTemp0),y
.903d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9040	c8		iny				iny
.9041	b1 36		lda ($36),y			lda 	(zTemp0),y
.9043	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9046	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.9049	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.904c	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.904e	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.9051	f0 06		beq $9059			beq 	_DRFNoExponent
.9053	c8		iny				iny 								; if not, read the exponent as well.
.9054	b1 36		lda ($36),y			lda 	(zTemp0),y
.9056	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9059					_DRFNoExponent:
.9059	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.905c	10 0d		bpl $906b			bpl 	_DRFExit2 					; if not, then exit.
.905e	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9060	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9063	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.9066	09 80		ora #$80			ora 	#NSBIsNegative
.9068	9d 00 06	sta $0600,x			sta 	NSStatus,x
.906b					_DRFExit2:
.906b	7a		ply				ply
.906c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.906d					EncodeNumberStart:
.906d	38		sec				sec
.906e	80 01		bra $9071			bra 	EncodeNumberContinue+1
.9070					EncodeNumberContinue:
.9070	18		clc				clc
.9071					EncodeNumber:
.9071	08		php				php 								; save reset.
.9072	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9074	f0 12		beq $9088			beq 	_ENIsOkay
.9076	c9 30		cmp #$30			cmp 	#"0"
.9078	90 04		bcc $907e			bcc 	_ENBadNumber
.907a	c9 3a		cmp #$3a			cmp 	#"9"+1
.907c	90 0a		bcc $9088			bcc 	_ENIsOkay
.907e					_ENBadNumber:
.907e	28		plp				plp 								; throw saved reset
.907f	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.9082	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9084	f0 7e		beq $9104			beq 	_ENConstructFinal
.9086					_ENFail:
.9086	18		clc				clc 								; not allowed
.9087	60		rts				rts
.9088					_ENIsOkay:
.9088	28		plp				plp 								; are we restarting
.9089	90 15		bcc $90a0			bcc 	_ENNoRestart
.908b					_ENStartEncode:
.908b	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.908d	f0 0c		beq $909b			beq 	_ENFirstDP
.908f	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9091	20 0a 96	jsr $960a			jsr 	NSMSetByte
.9094	a9 01		lda #$01			lda 	#ESTA_Low
.9096					_ENExitChange:
.9096	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.9099	38		sec				sec
.909a	60		rts				rts
.909b					_ENFirstDP:
.909b	20 08 96	jsr $9608			jsr 	NSMSetZero 					; clear integer part
.909e	80 3f		bra $90df			bra 	_ESTASwitchFloat			; go straight to float and exi
.90a0					_ENNoRestart:
.90a0	48		pha				pha 								; save on stack.
.90a1	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.90a4	c9 01		cmp #$01			cmp 	#ESTA_Low
.90a6	f0 09		beq $90b1			beq  	_ESTALowState
.90a8	c9 02		cmp #$02			cmp 	#ESTA_High
.90aa	f0 29		beq $90d5			beq 	_ESTAHighState
.90ac	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.90ae	f0 3b		beq $90eb			beq 	_ESTADecimalState
>90b0	db						.byte 	$DB 						; causes a break in the emulator
.90b1					_ESTALowState:
.90b1	68		pla				pla 								; get value back
.90b2	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.90b4	f0 29		beq $90df			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.90b6	29 0f		and #$0f			and 	#15 						; make digit
.90b8	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.90bb	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.90be	0a		asl a				asl 	a
.90bf	0a		asl a				asl 	a
.90c0	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.90c3	0a		asl a				asl 	a
.90c4	6d 06 07	adc $0706			adc 	DigitTemp
.90c7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.90ca	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.90cc	90 05		bcc $90d3			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.90ce	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.90d0	8d 05 07	sta $0705			sta 	EncodeState
.90d3					_ESTANoSwitch:
.90d3	38		sec				sec
.90d4	60		rts				rts
.90d5					_ESTAHighState:
.90d5	68		pla				pla 								; get value back
.90d6	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.90d8	f0 05		beq $90df			beq 	_ESTASwitchFloat
.90da	20 3e 91	jsr $913e			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.90dd	38		sec				sec
.90de	60		rts				rts
.90df					_ESTASwitchFloat:
.90df	9c 07 07	stz $0707			stz 	DecimalCount
.90e2	e8		inx				inx 								; zero the decimal additive.
.90e3	20 08 96	jsr $9608			jsr 	NSMSetZero
.90e6	ca		dex				dex
.90e7	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.90e9	80 ab		bra $9096			bra 	_ENExitChange
.90eb					_ESTADecimalState:
.90eb	68		pla				pla 								; digit.
.90ec	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.90ee	f0 96		beq $9086			beq 	_ENFail
.90f0	e8		inx				inx 								; put digit into fractional part of X+1
.90f1	20 3e 91	jsr $913e			jsr 	ESTAShiftDigitIntoMantissa
.90f4	ca		dex				dex
.90f5	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.90f8	ad 07 07	lda $0707			lda 	DecimalCount
.90fb	c9 0b		cmp #$0b			cmp 	#11
.90fd	f0 02		beq $9101			beq 	_ESTADSFail
.90ff	38		sec				sec
.9100	60		rts				rts
.9101					_ESTADSFail:
.9101	4c d6 a2	jmp $a2d6			jmp 	RangeError
.9104					_ENConstructFinal:
.9104	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.9107	f0 33		beq $913c			beq 	_ENCFExit 					; no decimals
.9109	5a		phy				phy
.910a	0a		asl a				asl 	a 							; x 4 and CLC
.910b	0a		asl a				asl 	a
.910c	6d 07 07	adc $0707			adc 	DecimalCount
.910f	a8		tay				tay
.9110	b9 95 a2	lda $a295,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9113	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9116	b9 96 a2	lda $a296,y			lda 	DecimalScalarTable-5+1,y
.9119	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.911c	b9 97 a2	lda $a297,y			lda 	DecimalScalarTable-5+2,y
.911f	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.9122	b9 98 a2	lda $a298,y			lda 	DecimalScalarTable-5+3,y
.9125	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9128	b9 99 a2	lda $a299,y			lda 	DecimalScalarTable-5+4,y
.912b	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.912e	a9 08		lda #$08			lda 	#NSTFloat
.9130	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.9133	7a		ply				ply
.9134	e8		inx				inx 								; multiply decimal const by decimal scalar
.9135	20 21 a0	jsr $a021			jsr 	FloatMultiply
.9138	ca		dex				dex
.9139	20 b6 9e	jsr $9eb6			jsr 	FloatAdd 					; add to integer part.
.913c					_ENCFExit:
.913c	18		clc				clc 								; reject the digit.
.913d	60		rts				rts
.913e					ESTAShiftDigitIntoMantissa:
.913e	29 0f		and #$0f			and 	#15 						; save digit
.9140	48		pha				pha
.9141	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9144	48		pha				pha
.9145	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9148	48		pha				pha
.9149	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.914c	48		pha				pha
.914d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9150	48		pha				pha
.9151	20 1d 96	jsr $961d			jsr 	NSMShiftLeft 				; x 2
.9154	20 1d 96	jsr $961d			jsr 	NSMShiftLeft 				; x 4
.9157	18		clc				clc 								; pop mantissa and add
.9158	68		pla				pla
.9159	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.915c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.915f	68		pla				pla
.9160	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.9163	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9166	68		pla				pla
.9167	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.916a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.916d	68		pla				pla
.916e	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.9171	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.9174	20 1d 96	jsr $961d			jsr 	NSMShiftLeft 				; x 10
.9177	68		pla				pla 								; add digit
.9178	18		clc				clc
.9179	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.917c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.917f	90 0d		bcc $918e			bcc 	_ESTASDExit
.9181	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.9184	d0 08		bne $918e			bne 	_ESTASDExit
.9186	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.9189	d0 03		bne $918e			bne 	_ESTASDExit
.918b	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.918e					_ESTASDExit:
.918e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.918f					EvaluateTerm:
.918f	b1 30		lda ($30),y			lda 	(codePtr),y
.9191	30 18		bmi $91ab			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9193	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9195	b0 6f		bcs $9206			bcs 	_ETVariable
.9197	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9199	90 6e		bcc $9209			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.919b	c9 3a		cmp #$3a			cmp 	#'9'+1
.919d	b0 6a		bcs $9209			bcs 	_ETPuncUnary
.919f	20 6d 90	jsr $906d			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.91a2					_ETNumber:
.91a2	c8		iny				iny 								; keep encoding until we have the numbers
.91a3	b1 30		lda ($30),y			lda 	(codePtr),y
.91a5	20 70 90	jsr $9070			jsr 	EncodeNumberContinue
.91a8	b0 f8		bcs $91a2			bcs 	_ETNumber 					; go back if accepted.
.91aa	60		rts				rts
.91ab					_ETCheckUnary:
.91ab	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.91ad	f0 41		beq $91f0			beq 	_ETString
.91af	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.91b1	f0 12		beq $91c5			beq 	_ETHexConstant
.91b3	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.91b5	90 0b		bcc $91c2			bcc 	_ETSyntaxError
.91b7	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.91b9	b0 07		bcs $91c2			bcs 	_ETSyntaxError
.91bb	da		phx				phx 								; push X on the stack
.91bc	0a		asl a				asl 	a 							; put vector x 2 into X
.91bd	aa		tax				tax
.91be	c8		iny				iny 								; consume unary function token
.91bf	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.91c2					_ETSyntaxError:
.91c2	4c d1 a2	jmp $a2d1			jmp 	SyntaxError
.91c5					_ETHexConstant:
.91c5	c8		iny				iny 								; skip #
.91c6	c8		iny				iny 								; skip count
.91c7	20 08 96	jsr $9608			jsr 	NSMSetZero 					; clear result
.91ca					_ETHLoop:
.91ca	b1 30		lda ($30),y			lda 	(codePtr),y
.91cc	c8		iny				iny 								; and consume
.91cd	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.91cf	f0 1e		beq $91ef			beq 	_ETHExit
.91d1	48		pha				pha 								; save on stack.
.91d2	20 1d 96	jsr $961d			jsr 	NSMShiftLeft 				; x 2
.91d5	20 1d 96	jsr $961d			jsr 	NSMShiftLeft 				; x 4
.91d8	20 1d 96	jsr $961d			jsr 	NSMShiftLeft 				; x 8
.91db	20 1d 96	jsr $961d			jsr 	NSMShiftLeft 				; x 16
.91de	68		pla				pla 								; ASCII
.91df	c9 41		cmp #$41			cmp 	#'A'
.91e1	90 02		bcc $91e5			bcc 	_ETHNotChar
.91e3	e9 07		sbc #$07			sbc 	#7
.91e5					_ETHNotChar:
.91e5	29 0f		and #$0f			and 	#15 						; digit now
.91e7	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.91ea	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.91ed	80 db		bra $91ca			bra 	_ETHLoop 					; go round.
.91ef					_ETHExit:
.91ef	60		rts				rts
.91f0					_ETString:
.91f0	c8		iny				iny 								; look at length
.91f1	b1 30		lda ($30),y			lda 	(codePtr),y
.91f3	48		pha				pha
.91f4	c8		iny				iny 								; first character
.91f5	20 99 9c	jsr $9c99			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.91f8	68		pla				pla 								; restore count and save
.91f9	85 36		sta $36				sta 	zTemp0
.91fb	98		tya				tya 								; add length to Y to skip it.
.91fc	18		clc				clc
.91fd	65 36		adc $36				adc 	zTemp0
.91ff	a8		tay				tay
.9200	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9202	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9205	60		rts				rts
.9206					_ETVariable:
.9206	4c 60 92	jmp $9260			jmp 	VariableHandler
.9209					_ETPuncUnary:
.9209	c8		iny				iny 								; consume the unary character
.920a	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.920c	f0 2d		beq $923b			beq 	_ETUnaryNegate
.920e	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9210	f0 39		beq $924b			beq 	_ETDereference
.9212	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9214	f0 43		beq $9259			beq 	_ETParenthesis
.9216	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9218	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.921a	f0 06		beq $9222			beq 	_ETIndirection
.921c	e6 36		inc $36				inc 	zTemp0
.921e	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9220	d0 a0		bne $91c2			bne 	_ETSyntaxError
.9222					_ETIndirection:
.9222	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9224	1a		inc a				inc 	a
.9225	48		pha				pha
.9226	20 8f 91	jsr $918f			jsr 	EvaluateTerm				; evaluate the term
.9229	20 d3 8f	jsr $8fd3			jsr 	Dereference 				; dereference it.
.922c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.922f	d0 07		bne $9238			bne 	_ETTypeMismatch
.9231	68		pla				pla 								; indirection 1-2
.9232	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9234	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9237	60		rts				rts
.9238					_ETTypeMismatch:
.9238	4c db a2	jmp $a2db			jmp 	TypeError
.923b					_ETUnaryNegate:
.923b	20 8f 91	jsr $918f			jsr 	EvaluateTerm				; evaluate the term
.923e	20 d3 8f	jsr $8fd3			jsr 	Dereference 				; dereference it.
.9241	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.9244	29 10		and #$10			and 	#NSTString
.9246	d0 f0		bne $9238			bne 	_ETTypeMismatch
.9248	4c b4 95	jmp $95b4			jmp 	NSMNegate  					; just toggles the sign bit.
.924b					_ETDereference:
.924b	20 8f 91	jsr $918f			jsr 	EvaluateTerm				; evaluate the term
.924e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.9251	29 20		and #$20			and 	#NSBIsReference
.9253	f0 e3		beq $9238			beq 	_ETTypeMismatch
.9255	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.9258	60		rts				rts
.9259					_ETParenthesis:
.9259	20 be 8e	jsr $8ebe			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.925c	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket 			; check for )
.925f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9260					VariableHandler:
.9260	b1 30		lda ($30),y			lda 	(codePtr),y
.9262	18		clc				clc
.9263	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9265	85 37		sta $37				sta 	zTemp0+1
.9267	c8		iny				iny
.9268	b1 30		lda ($30),y			lda 	(codePtr),y
.926a	85 36		sta $36				sta 	zTemp0
.926c	c8		iny				iny
.926d	18		clc				clc									; copy variable address+3 to mantissa
.926e	69 03		adc #$03			adc 	#3
.9270	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9273	a5 37		lda $37				lda 	zTemp0+1
.9275	69 00		adc #$00			adc 	#0
.9277	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.927a	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.927d	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9280	9e 28 06	stz $0628,x			stz 	NSExponent,x
.9283	5a		phy				phy
.9284	a0 02		ldy #$02			ldy 	#2 							; read type
.9286	b1 36		lda ($36),y			lda 	(zTemp0),y
.9288	7a		ply				ply
.9289	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.928b	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.928d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9290	29 04		and #$04			and 	#NSBIsArray
.9292	d0 01		bne $9295			bne 	_VHArray
.9294	60		rts				rts
.9295					_VHArray:
.9295	e8		inx				inx
.9296	20 a0 95	jsr $95a0			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9299	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.929b	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.929e	b1 30		lda ($30),y			lda 	(codePtr),y
.92a0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.92a2	d0 06		bne $92aa			bne 	_VHNoSecondIndex
.92a4	c8		iny				iny 								; skip the comma
.92a5	e8		inx				inx
.92a6	20 a0 95	jsr $95a0			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.92a9	ca		dex				dex
.92aa					_VHNoSecondIndex:
.92aa	ca		dex				dex 								; set X back.
.92ab	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket 			; and check the right bracket.
.92ae	5a		phy				phy 								; save position
.92af	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.92b2	85 3e		sta $3e				sta 	zaTemp
.92b4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.92b7	85 3f		sta $3f				sta 	zaTemp+1
.92b9	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.92bb	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.92bd	f0 02		beq $92c1			beq 	_VHHas2Mask
.92bf	a9 ff		lda #$ff			lda 	#$FF
.92c1					_VHHas2Mask:
.92c1	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.92c4	f0 54		beq $931a			beq 	_VHBadIndex
.92c6	0a		asl a				asl 	a 							; carry will be set if a second index
.92c7	90 09		bcc $92d2			bcc 	_VHCheckFirstIndex
.92c9	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.92cb	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.92cd	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.92d0	90 48		bcc $931a			bcc 	_VHBadIndex
.92d2					_VHCheckFirstIndex:
.92d2	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.92d4	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.92d6	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.92d9	90 3f		bcc $931a			bcc 	_VHBadIndex
.92db	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.92dd	64 37		stz $37				stz 	zTemp0+1
.92df	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.92e2	30 0f		bmi $92f3			bmi 	_VHNoMultiply
.92e4	da		phx				phx
.92e5	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.92e8	48		pha				pha
.92e9	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.92eb	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.92ed	1a		inc a				inc 	a 							; add 1 for zero base
.92ee	fa		plx				plx
.92ef	20 71 a1	jsr $a171			jsr 	Multiply8x8 				; calculate -> Z0
.92f2	fa		plx				plx
.92f3					_VHNoMultiply:
.92f3	18		clc				clc
.92f4	a5 36		lda $36				lda 	zTemp0
.92f6	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.92f9	85 36		sta $36				sta 	zTemp0
.92fb	a5 37		lda $37				lda 	zTemp0+1
.92fd	69 00		adc #$00			adc 	#0
.92ff	85 37		sta $37				sta 	zTemp0+1
.9301	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9304	20 66 84	jsr $8466			jsr 	ScaleByBaseType
.9307	18		clc				clc
.9308	b2 3e		lda ($3e)			lda 	(zaTemp)
.930a	65 36		adc $36				adc 	zTemp0
.930c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.930f	a0 01		ldy #$01			ldy 	#1
.9311	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9313	65 37		adc $37				adc 	zTemp0+1
.9315	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9318	7a		ply				ply 								; restore position
.9319	60		rts				rts
.931a					_VHBadIndex:
.931a	a9 17		lda #$17		lda	#23
.931c	4c b5 8a	jmp $8ab5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a0a7					AbsUnary:
.a0a7	fa		plx				plx 								; restore stack pos
.a0a8	20 5c 95	jsr $955c			jsr 	EvaluateNumber 				; get a float or int
.a0ab	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket
.a0ae	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.a0b1	29 7f		and #$7f			and 	#$7F
.a0b3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a0b6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.931f					AllocUnary:
.931f	fa		plx				plx 								; restore stack pos
.9320	20 94 95	jsr $9594			jsr 	Evaluate16BitInteger		; get bytes required.
.9323	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket
.9326	da		phx				phx 								; save X/Y
.9327	5a		phy				phy
.9328	8a		txa				txa 								; copy X into Y
.9329	a8		tay				tay
.932a	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.932d	aa		tax				tax
.932e	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.9331	20 3e 93	jsr $933e			jsr 	AllocateXABytes 			; allocate memory
.9334	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.9337	8a		txa				txa
.9338	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.933b	7a		ply				ply
.933c	fa		plx				plx
.933d	60		rts				rts
.933e					AllocateXABytes:
.933e	5a		phy				phy
.933f	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9342	84 36		sty $36				sty 	zTemp0
.9344	5a		phy				phy
.9345	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.9348	84 37		sty $37				sty 	zTemp0+1
.934a	5a		phy				phy
.934b	18		clc				clc 								; add to low memory pointer
.934c	6d 0c 07	adc $070c			adc 	lowMemPtr
.934f	8d 0c 07	sta $070c			sta 	lowMemPtr
.9352	8a		txa				txa
.9353	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.9356	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.9359					_ClearMemory:
.9359	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.935c	c5 36		cmp $36				cmp 	zTemp0
.935e	d0 07		bne $9367			bne 	_CMClearNext
.9360	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.9363	c5 37		cmp $37				cmp 	zTemp0+1
.9365	f0 0c		beq $9373			beq 	_CMExit
.9367					_CMClearNext:
.9367	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9369	92 36		sta ($36)			sta 	(zTemp0)
.936b	e6 36		inc $36				inc 	zTemp0
.936d	d0 ea		bne $9359			bne 	_ClearMemory
.936f	e6 37		inc $37				inc		zTemp0+1
.9371	80 e6		bra $9359			bra 	_ClearMemory
.9373					_CMExit:
.9373	fa		plx				plx
.9374	68		pla				pla
.9375	7a		ply				ply
.9376	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a0b7					AscUnary:
.a0b7	fa		plx				plx 								; restore stack pos
.a0b8	20 67 95	jsr $9567			jsr 	EvaluateString 				; get a string
.a0bb	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a0bd	20 0a 96	jsr $960a			jsr 	NSMSetByte
.a0c0	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket
.a0c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a0c4					FracUnary:
.a0c4	fa		plx				plx 								; restore stack pos
.a0c5	20 5c 95	jsr $955c			jsr 	EvaluateNumber 				; get a float or int
.a0c8	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket
.a0cb	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a0ce	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a0d0	f0 04		beq $a0d6			beq 	_IUZero
.a0d2	20 94 9f	jsr $9f94			jsr 	FloatFractionalPart
.a0d5	60		rts				rts
.a0d6					_IUZero:
.a0d6	20 08 96	jsr $9608			jsr 	NSMSetZero
.a0d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a0da					IntUnary:
.a0da	fa		plx				plx 								; restore stack pos
.a0db	20 5c 95	jsr $955c			jsr 	EvaluateNumber 				; get a float or int
.a0de	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket
.a0e1	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a0e4	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a0e6	f0 03		beq $a0eb			beq 	_IUExit
.a0e8	20 f7 9f	jsr $9ff7			jsr 	FloatIntegerPart
.a0eb					_IUExit:
.a0eb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a0ec					LenUnary:
.a0ec	fa		plx				plx 								; restore stack pos
.a0ed	20 67 95	jsr $9567			jsr 	EvaluateString 				; get a string
.a0f0	5a		phy				phy
.a0f1	a0 00		ldy #$00			ldy 	#0 							; find length
.a0f3					_LenFind:
.a0f3	b1 36		lda ($36),y			lda 	(zTemp0),y
.a0f5	f0 06		beq $a0fd			beq 	_LenExit
.a0f7	c8		iny				iny
.a0f8	d0 f9		bne $a0f3			bne 	_LenFind
.a0fa	4c d6 a2	jmp $a2d6			jmp 	RangeError 					; string > 255
.a0fd					_LenExit:
.a0fd	98		tya				tya
.a0fe	20 0a 96	jsr $960a			jsr 	NSMSetByte
.a101	7a		ply				ply
.a102	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket
.a105	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9377					Unary_Not:
.9377	fa		plx				plx
.9378	20 7f 95	jsr $957f			jsr 	EvaluateInteger 			; get integer
.937b	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket
.937e	20 38 96	jsr $9638			jsr 	NSMIsZero 					; zero mantissa ?
.9381	f0 04		beq $9387			beq 	_NotZero
.9383	20 08 96	jsr $9608			jsr 	NSMSetZero
.9386	60		rts				rts
.9387					_NotZero:
.9387	4c 22 8b	jmp $8b22			jmp 	ReturnTrue
.938a					_UNBad:
.938a	4c e0 a2	jmp $a2e0			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.938d					Unary_Rnd:
.938d	20 5c 95	jsr $955c			jsr 	EvaluateNumber 				; number to use.
.9390	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket 			; closing bracket
.9393	20 bc 93	jsr $93bc			jsr 	Random32Bit 				; generate a number.
.9396	ad 08 07	lda $0708			lda 	RandomSeed+0
.9399	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.939c	ad 09 07	lda $0709			lda 	RandomSeed+1
.939f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.93a2	ad 0a 07	lda $070a			lda 	RandomSeed+2
.93a5	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.93a8	ad 0b 07	lda $070b			lda 	RandomSeed+3
.93ab	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.93ad	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.93b0	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.93b2	8d 28 06	sta $0628			sta 	NSExponent
.93b5	a9 08		lda #$08			lda 	#NSTFloat
.93b7	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>93ba	db						.byte 	$DB 						; causes a break in the emulator
.93bb	60		rts				rts
.93bc					Random32Bit:
.93bc	5a		phy				phy
.93bd	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.93bf	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.93c2	d0 03		bne $93c7			bne 	_Random1
.93c4	a8		tay				tay 								; if so do it 256 times
.93c5	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.93c7					_Random1:
.93c7	0a		asl a				asl 	a 							; LSFR RNG
.93c8	2e 09 07	rol $0709			rol 	RandomSeed+1
.93cb	2e 0a 07	rol $070a			rol 	RandomSeed+2
.93ce	2e 0b 07	rol $070b			rol 	RandomSeed+3
.93d1	90 02		bcc $93d5			bcc 	_Random2
.93d3	49 c5		eor #$c5			eor 	#$C5
.93d5					_Random2:
.93d5	88		dey				dey
.93d6	d0 ef		bne $93c7			bne 	_Random1
.93d8	7a		ply				ply
.93d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a106					SgnUnary:
.a106	fa		plx				plx 								; restore stack pos
.a107	20 5c 95	jsr $955c			jsr 	EvaluateNumber 				; get a float or int
.a10a	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket
.a10d	20 38 96	jsr $9638			jsr 	NSMIsZero 					; if zero
.a110	f0 10		beq $a122			beq 	_SGZero  					; return Int Zero
.a112	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.a115	48		pha				pha
.a116	a9 01		lda #$01			lda 	#1 							; set to 1
.a118	20 0a 96	jsr $960a			jsr 	NSMSetByte
.a11b	68		pla				pla
.a11c	29 80		and #$80			and		#$80 						; copy the sign byte out
.a11e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a121	60		rts				rts
.a122	20 08 96	jsr $9608	_SGZero:jsr 	NSMSetZero
.a125	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a126					ValUnary:
.a126	fa		plx				plx 								; restore stack pos
.a127	20 3c a1	jsr $a13c			jsr 	ValMainCode 				; do the main val() code
.a12a	b0 01		bcs $a12d			bcs 	_VUError 					; couldn't convert
.a12c	60		rts				rts
.a12d					_VUError:
.a12d	4c db a2	jmp $a2db			jmp 	TypeError
.a130					IsValUnary:
.a130	fa		plx				plx 								; restore stack pos
.a131	20 3c a1	jsr $a13c			jsr 	ValMainCode 				; do the main val() code
.a134	b0 03		bcs $a139			bcs 	_VUBad
.a136	4c 22 8b	jmp $8b22			jmp 	ReturnTrue
.a139					_VUBad:
.a139	4c 2e 8b	jmp $8b2e			jmp 	ReturnFalse
.a13c					ValMainCode:
.a13c	20 67 95	jsr $9567			jsr 	EvaluateString 				; get a string
.a13f	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket 			; check right bracket present
.a142	5a		phy				phy
.a143	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a145	f0 17		beq $a15e			beq 	_VMCFail2
.a147	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a149	48		pha				pha 								; save first character
.a14a	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a14c	d0 01		bne $a14f			bne 	_VMCStart
.a14e	c8		iny				iny 								; skip over -
.a14f					_VMCStart:
.a14f	38		sec				sec 								; initialise first time round.
.a150					_VMCNext:
.a150	c8		iny				iny 								; pre-increment
.a151	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a153	f0 0c		beq $a161			beq 	_VMCSuccess 				; successful.
.a155	20 71 90	jsr $9071			jsr 	EncodeNumber 				; send it to the number-builder
.a158	90 03		bcc $a15d			bcc 	_VMCFail 					; if failed, give up.
.a15a	18		clc				clc 								; next time round, countinue
.a15b	80 f3		bra $a150			bra 	_VMCNext
.a15d					_VMCFail:
.a15d	68		pla				pla
.a15e					_VMCFail2:
.a15e	7a		ply				ply
.a15f	38		sec				sec
.a160	60		rts				rts
.a161					_VMCSuccess:
.a161	a9 00		lda #$00			lda 	#0 							; construct final
.a163	20 71 90	jsr $9071			jsr 	EncodeNumber
.a166	68		pla				pla
.a167	c9 2d		cmp #$2d			cmp 	#"-"
.a169	d0 03		bne $a16e			bne 	_VMCNotNegative
.a16b	20 b4 95	jsr $95b4			jsr		NSMNegate
.a16e					_VMCNotNegative:
.a16e	7a		ply				ply
.a16f	18		clc				clc
.a170	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.93da					ChrUnary:
.93da	fa		plx				plx 								; restore stack pos
.93db	20 a0 95	jsr $95a0			jsr 	Evaluate8BitInteger			; get value
.93de	48		pha				pha
.93df	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket
.93e2	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.93e4	20 cb a4	jsr $a4cb			jsr 	StringTempAllocate
.93e7	68		pla				pla 								; write number to it
.93e8	20 09 a5	jsr $a509			jsr 	StringTempWrite
.93eb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.93ec					SpcUnary:
.93ec	fa		plx				plx 								; restore stack pos
.93ed	20 a0 95	jsr $95a0			jsr 	Evaluate8BitInteger			; get value
.93f0	5a		phy				phy
.93f1	48		pha				pha 								; save count
.93f2	20 cb a4	jsr $a4cb			jsr 	StringTempAllocate
.93f5	7a		ply				ply 								; to do count in Y
.93f6					_SpcLoop:
.93f6	c0 00		cpy #$00			cpy 	#0
.93f8	f0 08		beq $9402			beq 	_SpcExit
.93fa	a9 20		lda #$20			lda 	#32
.93fc	20 09 a5	jsr $a509			jsr 	StringTempWrite
.93ff	88		dey				dey
.9400	80 f4		bra $93f6			bra 	_SPCLoop
.9402					_SpcExit:
.9402	7a		ply				ply
.9403	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket
.9406	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9407					Unary_Str:
.9407	fa		plx				plx
.9408	20 5c 95	jsr $955c			jsr 	EvaluateNumber  			; get number
.940b	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket 			; closing bracket
.940e	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9410	20 29 94	jsr $9429			jsr 	ConvertNumberToString 		; do the conversion.
.9413	a9 21		lda #$21			lda		#33 						; create buffer
.9415	20 cb a4	jsr $a4cb			jsr 	StringTempAllocate 			; allocate memory
.9418	da		phx				phx
.9419	a2 00		ldx #$00			ldx 	#0
.941b					_USCopy:
.941b	bd 97 08	lda $0897,x			lda 	DecimalBuffer,x
.941e	20 09 a5	jsr $a509			jsr 	StringTempWrite
.9421	e8		inx				inx
.9422	bd 97 08	lda $0897,x			lda 	DecimalBuffer,x
.9425	d0 f4		bne $941b			bne 	_USCopy
.9427	fa		plx				plx
.9428	60		rts				rts
.9429					ConvertNumberToString:
.9429	5a		phy				phy 								; save code position
.942a	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.942d	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.9430	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.9433	10 0a		bpl $943f			bpl 	_CNTSNotNegative
.9435	29 7f		and #$7f			and 	#$7F 						; make +ve
.9437	9d 00 06	sta $0600,x			sta 	NSStatus,x
.943a	a9 2d		lda #$2d			lda 	#"-"
.943c	20 a5 94	jsr $94a5			jsr 	WriteDecimalBuffer
.943f					_CNTSNotNegative:
.943f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.9442	f0 15		beq $9459			beq 	_CNTSNotFloat
.9444	e8		inx				inx 								; round up
.9445	a9 01		lda #$01			lda 	#1
.9447	20 0a 96	jsr $960a			jsr 	NSMSetByte
.944a	ca		dex				dex
.944b	bd 28 06	lda $0628,x			lda		NSExponent,x
.944e	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.9451	a9 08		lda #$08			lda 	#NSTFloat
.9453	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.9456	20 b6 9e	jsr $9eb6			jsr 	FloatAdd
.9459					_CNTSNotFloat:
.9459	20 87 94	jsr $9487			jsr 	MakePlusTwoString
.945c	20 94 9f	jsr $9f94			jsr 	FloatFractionalPart 		; get the fractional part
.945f	20 58 a0	jsr $a058			jsr 	NSNormalise					; normalise , exit if zero
.9462	f0 21		beq $9485			beq 	_CNTSExit
.9464	a9 2e		lda #$2e			lda 	#"."
.9466	20 a5 94	jsr $94a5			jsr 	WriteDecimalBuffer 			; write decimal place
.9469					_CNTSDecimal:
.9469	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.946c	30 17		bmi $9485			bmi 	_CNTSExit
.946e	e8		inx				inx 								; x 10.0
.946f	a9 0a		lda #$0a			lda 	#10
.9471	20 0a 96	jsr $960a			jsr 	NSMSetByte
.9474	a9 08		lda #$08			lda 	#NSTFloat
.9476	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9479	ca		dex				dex
.947a	20 21 a0	jsr $a021			jsr 	FloatMultiply
.947d	20 87 94	jsr $9487			jsr 	MakePlusTwoString
.9480	20 94 9f	jsr $9f94			jsr 	FloatFractionalPart 		; get the fractional part
.9483	80 e4		bra $9469			bra 	_CNTSDecimal 				; keep going.
.9485					_CNTSExit:
.9485	7a		ply				ply
.9486	60		rts				rts
.9487					MakePlusTwoString:
.9487	da		phx				phx
.9488	20 df 95	jsr $95df			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.948b	e8		inx				inx 								; access it
.948c	e8		inx				inx
.948d	20 f7 9f	jsr $9ff7			jsr 	FloatIntegerPart 			; make it an integer
.9490	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9492	20 60 9e	jsr $9e60			jsr 	ConvertInt32
.9495	a2 00		ldx #$00			ldx	 	#0
.9497					_MPTSCopy:
.9497	bd 75 08	lda $0875,x			lda 	NumberBuffer,x
.949a	20 a5 94	jsr $94a5			jsr 	WriteDecimalBuffer
.949d	e8		inx				inx
.949e	bd 75 08	lda $0875,x			lda 	NumberBuffer,x
.94a1	d0 f4		bne $9497			bne 	_MPTSCopy
.94a3	fa		plx				plx
.94a4	60		rts				rts
.94a5					WriteDecimalBuffer:
.94a5	da		phx				phx
.94a6	ae 14 07	ldx $0714			ldx 	dbOffset
.94a9	9d 97 08	sta $0897,x			sta 	DecimalBuffer,x
.94ac	9e 98 08	stz $0898,x			stz 	DecimalBuffer+1,x
.94af	ee 14 07	inc $0714			inc 	dbOffset
.94b2	fa		plx				plx
.94b3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.94b4					Unary_Left:
.94b4	fa		plx				plx
.94b5	18		clc				clc 								; only one parameter
.94b6	20 2b 95	jsr $952b			jsr 	SubstringInitial 			; set up.
.94b9	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.94bc	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.94bf	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.94c2	80 2c		bra $94f0			bra 	SubstringMain
.94c4					Unary_Right:
.94c4	fa		plx				plx
.94c5	18		clc				clc 								; only one parameter
.94c6	20 2b 95	jsr $952b			jsr 	SubstringInitial 			; set up.
.94c9	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.94cc	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.94cf	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.94d2	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.94d5	b0 02		bcs $94d9			bcs 	_URNotUnderflow
.94d7	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.94d9					_URNotUnderFlow:
.94d9	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.94dc	80 12		bra $94f0			bra 	SubStringMain
.94de					Unary_Mid:
.94de	fa		plx				plx
.94df	38		sec				sec 								; two parameters
.94e0	20 2b 95	jsr $952b			jsr 	SubstringInitial 			; set up.
.94e3	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.94e6	f0 05		beq $94ed			beq 	_UMError
.94e8	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.94eb	80 03		bra $94f0			bra 	SubStringMain
.94ed					_UMError:
.94ed	4c e0 a2	jmp $a2e0			jmp 	ArgumentError
.94f0					SubStringMain:
.94f0	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.94f3	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.94f6	b0 2d		bcs $9525			bcs 	_SSMNull 					; if so, return an empty string.
.94f8	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.94fb	f0 28		beq $9525			beq 	_SSMNull 					; return empty string.
.94fd	18		clc				clc 								; add the offset +1 to the address and
.94fe	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.9501	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.9504	85 36		sta $36				sta 	zTemp0
.9506	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.9509	69 00		adc #$00			adc 	#0
.950b	85 37		sta $37				sta 	zTemp0+1
.950d					_SSMNoCarry:
.950d	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.9510	20 cb a4	jsr $a4cb			jsr 	StringTempAllocate 			; allocate that many characters
.9513	5a		phy				phy 								; save Y
.9514	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9516					_SSMCopy:
.9516	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9518	f0 09		beq $9523			beq 	_SSMEString 				; no more to copy
.951a	20 09 a5	jsr $a509			jsr 	StringTempWrite 			; and write it out.
.951d	c8		iny				iny
.951e	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.9521	d0 f3		bne $9516			bne 	_SSMCopy
.9523					_SSMEString:
.9523	7a		ply				ply
.9524					_SSMExit:
.9524	60		rts				rts
.9525					_SSMNull:
.9525	a9 00		lda #$00			lda 	#0
.9527	20 cb a4	jsr $a4cb			jsr 	StringTempAllocate
.952a	60		rts				rts
.952b					SubstringInitial:
.952b	da		phx				phx 								; save initial stack position
.952c	08		php				php 								; save carry on stack indicating 2 parameters
.952d	20 67 95	jsr $9567			jsr 	EvaluateString 				; get a string
.9530	5a		phy				phy 								; calculate length to exponent.
.9531	a0 ff		ldy #$ff			ldy 	#$FF
.9533					_SIFindLength:
.9533	c8		iny				iny
.9534	b1 36		lda ($36),y			lda 	(zTemp0),y
.9536	d0 fb		bne $9533			bne 	_SIFindLength
.9538	98		tya				tya
.9539	9d 28 06	sta $0628,x			sta 	NSExponent,x
.953c	7a		ply				ply
.953d	e8		inx				inx
.953e	20 f7 9c	jsr $9cf7			jsr 	CheckComma 					; comma next
.9541	20 a0 95	jsr $95a0			jsr 	Evaluate8BitInteger 		; get next parameter
.9544	28		plp				plp 								; is it the last parameter ?
.9545	90 07		bcc $954e			bcc 	_SSIExit 					; if so, exit.
.9547	e8		inx				inx
.9548	20 f7 9c	jsr $9cf7			jsr 	CheckComma 					; comma next
.954b	20 a0 95	jsr $95a0			jsr 	Evaluate8BitInteger 		; get last parameter
.954e					_SSIExit:
.954e	fa		plx				plx
.954f	20 ef 9c	jsr $9cef			jsr 	CheckRightBracket 			; check closing bracket
.9552	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9553					EvaluateValue:
.9553	48		pha				pha
.9554	20 be 8e	jsr $8ebe			jsr		EvaluateExpression 			; expression
.9557	20 d3 8f	jsr $8fd3			jsr 	Dereference					; derefernce it
.955a	68		pla				pla
.955b	60		rts				rts
.955c					EvaluateNumber:
.955c	20 53 95	jsr $9553			jsr 	EvaluateValue 				; get a value
.955f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9562	29 10		and #$10			and 	#NSBIsString
.9564	d0 16		bne $957c			bne 	HelperTypeError
.9566	60		rts				rts
.9567					EvaluateString:
.9567	20 53 95	jsr $9553			jsr 	EvaluateValue 				; get a value
.956a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.956d	29 10		and #$10			and 	#NSBIsString
.956f	f0 0b		beq $957c			beq 	HelperTypeError
.9571					CopyAddressToTemp0:
.9571	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9574	85 36		sta $36				sta 	zTemp0
.9576	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9579	85 37		sta $37				sta 	zTemp0+1
.957b	60		rts				rts
.957c					HelperTypeError:
.957c	4c db a2	jmp $a2db			jmp 	TypeError
.957f					EvaluateInteger:
.957f	20 5c 95	jsr $955c			jsr 	EvaluateNumber
.9582	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.9585	d0 0a		bne $9591			bne 	HelperValueError 			; if not, it's a float.
.9587	60		rts				rts
.9588					EvaluateUnsignedInteger:
.9588	20 7f 95	jsr $957f			jsr 	EvaluateInteger 			; check integer is +ve
.958b	bd 00 06	lda $0600,x			lda 	NSStatus,x
.958e	30 01		bmi $9591			bmi 	HelperValueError
.9590	60		rts				rts
.9591					HelperValueError:
.9591	4c e0 a2	jmp $a2e0			jmp 	ArgumentError
.9594					Evaluate16BitInteger:
.9594	20 88 95	jsr $9588			jsr	 	EvaluateUnsignedInteger		; get integer
.9597	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.959a	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.959d	d0 f2		bne $9591			bne 	HelperValueError
.959f	60		rts				rts
.95a0					Evaluate8BitInteger:
.95a0	20 88 95	jsr $9588			jsr	 	EvaluateUnsignedInteger 	; get an integer
.95a3	d0 ec		bne $9591			bne 	HelperValueError
.95a5	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.95a8	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.95ab	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.95ae	d0 e1		bne $9591			bne 	HelperValueError
.95b0	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.95b3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a171					Multiply8x8:
.a171	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a172	85 36		sta $36			  	sta 	zTemp0
.a174	86 37		stx $37				stx 	zTemp0+1
.a176	a9 00		lda #$00			lda 	#0
.a178	a2 08		ldx #$08			ldx 	#8
.a17a					_M88Loop:
.a17a	90 03		bcc $a17f			bcc 	_M88NoAdd
.a17c	18		clc				clc
.a17d	65 37		adc $37				adc 	zTemp0+1
.a17f					_M88NoAdd:
.a17f	6a		ror a				ror 	a
.a180	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a182	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a183	d0 f5		bne $a17a			bne 	_M88Loop
.a185	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a187	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.95b4					NSMNegate:
.95b4	bd 00 06	lda $0600,x			lda 	NSStatus,x
.95b7	49 80		eor #$80			eor 	#NSBIsNegative
.95b9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.95bc	60		rts				rts
.95bd					NSMNegateMantissa:
.95bd	38		sec				sec
.95be	a9 00		lda #$00			lda 	#0
.95c0	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.95c3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.95c6	a9 00		lda #$00			lda 	#0
.95c8	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.95cb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.95ce	a9 00		lda #$00			lda 	#0
.95d0	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.95d3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.95d6	a9 00		lda #$00			lda 	#0
.95d8	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.95db	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.95de	60		rts				rts
.95df					NSMShiftUpTwo:
.95df	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.95e2	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.95e5	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.95e8	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.95eb	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.95ee	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.95f1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.95f4	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.95f7	bd 28 06	lda $0628,x			lda 	NSExponent,x
.95fa	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.95fd	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9600	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.9603	60		rts				rts
.9604					NSMSetZeroMantissaOnly:
.9604	a9 00		lda #$00			lda 	#0
.9606	80 08		bra $9610			bra 	NSMSetMantissa
.9608					NSMSetZero:
.9608	a9 00		lda #$00			lda 	#0
.960a					NSMSetByte:
.960a	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.960d	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.9610					NSMSetMantissa:
.9610	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.9613	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.9616	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9619	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.961c	60		rts				rts
.961d					NSMShiftLeft:
.961d	18		clc				clc
.961e					NSMRotateLeft:
.961e	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.9621	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.9624	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.9627	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.962a	60		rts				rts
.962b					NSMShiftRight:
.962b	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.962e	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.9631	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.9634	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.9637	60		rts				rts
.9638					NSMIsZero:
.9638	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.963b	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.963e	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.9641	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.9644	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a188					Assemble_ora:
.a188	20 8e 81	jsr $818e		jsr	AssembleGroup1
>a18b	01					.byte $01
.a18c					Assemble_and:
.a18c	20 8e 81	jsr $818e		jsr	AssembleGroup1
>a18f	21					.byte $21
.a190					Assemble_eor:
.a190	20 8e 81	jsr $818e		jsr	AssembleGroup1
>a193	41					.byte $41
.a194					Assemble_adc:
.a194	20 8e 81	jsr $818e		jsr	AssembleGroup1
>a197	61					.byte $61
.a198					Assemble_sta:
.a198	20 8e 81	jsr $818e		jsr	AssembleGroup1
>a19b	81					.byte $81
.a19c					Assemble_lda:
.a19c	20 8e 81	jsr $818e		jsr	AssembleGroup1
>a19f	a1					.byte $a1
.a1a0					Assemble_cmp:
.a1a0	20 8e 81	jsr $818e		jsr	AssembleGroup1
>a1a3	c1					.byte $c1
.a1a4					Assemble_sbc:
.a1a4	20 8e 81	jsr $818e		jsr	AssembleGroup1
>a1a7	e1					.byte $e1
.a1a8					Assemble_asl:
.a1a8	20 95 81	jsr $8195		jsr	AssembleGroup2
>a1ab	02					.byte $02
>a1ac	75					.byte $75
.a1ad					Assemble_rol:
.a1ad	20 95 81	jsr $8195		jsr	AssembleGroup2
>a1b0	22					.byte $22
>a1b1	75					.byte $75
.a1b2					Assemble_lsr:
.a1b2	20 95 81	jsr $8195		jsr	AssembleGroup2
>a1b5	42					.byte $42
>a1b6	75					.byte $75
.a1b7					Assemble_ror:
.a1b7	20 95 81	jsr $8195		jsr	AssembleGroup2
>a1ba	62					.byte $62
>a1bb	75					.byte $75
.a1bc					Assemble_stx:
.a1bc	20 95 81	jsr $8195		jsr	AssembleGroup2
>a1bf	82					.byte $82
>a1c0	50					.byte $50
.a1c1					Assemble_ldx:
.a1c1	20 95 81	jsr $8195		jsr	AssembleGroup2
>a1c4	a2					.byte $a2
>a1c5	d0					.byte $d0
.a1c6					Assemble_dec:
.a1c6	20 95 81	jsr $8195		jsr	AssembleGroup2
>a1c9	c2					.byte $c2
>a1ca	55					.byte $55
.a1cb					Assemble_inc:
.a1cb	20 95 81	jsr $8195		jsr	AssembleGroup2
>a1ce	e2					.byte $e2
>a1cf	55					.byte $55
.a1d0					Assemble_stz:
.a1d0	20 95 81	jsr $8195		jsr	AssembleGroup2
>a1d3	60					.byte $60
>a1d4	44					.byte $44
.a1d5					Assemble_bit:
.a1d5	20 95 81	jsr $8195		jsr	AssembleGroup2
>a1d8	20					.byte $20
>a1d9	55					.byte $55
.a1da					Assemble_sty:
.a1da	20 95 81	jsr $8195		jsr	AssembleGroup2
>a1dd	80					.byte $80
>a1de	54					.byte $54
.a1df					Assemble_ldy:
.a1df	20 95 81	jsr $8195		jsr	AssembleGroup2
>a1e2	a0					.byte $a0
>a1e3	d5					.byte $d5
.a1e4					Assemble_cpy:
.a1e4	20 95 81	jsr $8195		jsr	AssembleGroup2
>a1e7	c0					.byte $c0
>a1e8	d4					.byte $d4
.a1e9					Assemble_cpx:
.a1e9	20 95 81	jsr $8195		jsr	AssembleGroup2
>a1ec	e0					.byte $e0
>a1ed	d0					.byte $d0
.a1ee					Assemble_tsb:
.a1ee	20 95 81	jsr $8195		jsr	AssembleGroup2
>a1f1	00					.byte $00
>a1f2	50					.byte $50
.a1f3					Assemble_trb:
.a1f3	20 95 81	jsr $8195		jsr	AssembleGroup2
>a1f6	10					.byte $10
>a1f7	50					.byte $50
.a1f8					Assemble_jsr:
.a1f8	20 95 81	jsr $8195		jsr	AssembleGroup2
>a1fb	14					.byte $14
>a1fc	10					.byte $10
.a1fd					Assemble_jmp:
.a1fd	20 95 81	jsr $8195		jsr	AssembleGroup2
>a200	40					.byte $40
>a201	10					.byte $10
.a202					Assemble_bpl:
.a202	20 e6 81	jsr $81e6		jsr	AssembleGroup3
>a205	10					.byte $10
.a206					Assemble_bmi:
.a206	20 e6 81	jsr $81e6		jsr	AssembleGroup3
>a209	30					.byte $30
.a20a					Assemble_bvc:
.a20a	20 e6 81	jsr $81e6		jsr	AssembleGroup3
>a20d	50					.byte $50
.a20e					Assemble_bvs:
.a20e	20 e6 81	jsr $81e6		jsr	AssembleGroup3
>a211	70					.byte $70
.a212					Assemble_bcc:
.a212	20 e6 81	jsr $81e6		jsr	AssembleGroup3
>a215	90					.byte $90
.a216					Assemble_bcs:
.a216	20 e6 81	jsr $81e6		jsr	AssembleGroup3
>a219	b0					.byte $b0
.a21a					Assemble_bne:
.a21a	20 e6 81	jsr $81e6		jsr	AssembleGroup3
>a21d	d0					.byte $d0
.a21e					Assemble_beq:
.a21e	20 e6 81	jsr $81e6		jsr	AssembleGroup3
>a221	f0					.byte $f0
.a222					Assemble_bra:
.a222	20 e6 81	jsr $81e6		jsr	AssembleGroup3
>a225	80					.byte $80
.a226					Assemble_brk:
.a226	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a229	00					.byte $00
.a22a					Assemble_php:
.a22a	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a22d	08					.byte $08
.a22e					Assemble_clc:
.a22e	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a231	18					.byte $18
.a232					Assemble_plp:
.a232	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a235	28					.byte $28
.a236					Assemble_sec:
.a236	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a239	38					.byte $38
.a23a					Assemble_rti:
.a23a	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a23d	40					.byte $40
.a23e					Assemble_pha:
.a23e	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a241	48					.byte $48
.a242					Assemble_cli:
.a242	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a245	58					.byte $58
.a246					Assemble_phy:
.a246	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a249	5a					.byte $5a
.a24a					Assemble_rts:
.a24a	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a24d	60					.byte $60
.a24e					Assemble_pla:
.a24e	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a251	68					.byte $68
.a252					Assemble_sei:
.a252	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a255	78					.byte $78
.a256					Assemble_ply:
.a256	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a259	7a					.byte $7a
.a25a					Assemble_dey:
.a25a	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a25d	88					.byte $88
.a25e					Assemble_txa:
.a25e	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a261	8a					.byte $8a
.a262					Assemble_tya:
.a262	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a265	98					.byte $98
.a266					Assemble_txs:
.a266	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a269	9a					.byte $9a
.a26a					Assemble_tay:
.a26a	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a26d	a8					.byte $a8
.a26e					Assemble_tax:
.a26e	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a271	aa					.byte $aa
.a272					Assemble_clv:
.a272	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a275	b8					.byte $b8
.a276					Assemble_tsx:
.a276	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a279	ba					.byte $ba
.a27a					Assemble_iny:
.a27a	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a27d	c8					.byte $c8
.a27e					Assemble_dex:
.a27e	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a281	ca					.byte $ca
.a282					Assemble_cld:
.a282	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a285	d8					.byte $d8
.a286					Assemble_phx:
.a286	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a289	da					.byte $da
.a28a					Assemble_inx:
.a28a	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a28d	e8					.byte $e8
.a28e					Assemble_nop:
.a28e	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a291	ea					.byte $ea
.a292					Assemble_sed:
.a292	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a295	f8					.byte $f8
.a296					Assemble_plx:
.a296	20 1c 82	jsr $821c		jsr	AssembleGroup4
>a299	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a29a					DecimalScalarTable:
>a29a	66 66 66 66				.dword $66666666 ; 0.1
>a29e	de					.byte $de
>a29f	1f 85 eb 51				.dword $51eb851f ; 0.01
>a2a3	db					.byte $db
>a2a4	4c 37 89 41				.dword $4189374c ; 0.001
>a2a8	d8					.byte $d8
>a2a9	ac 8b db 68				.dword $68db8bac ; 0.0001
>a2ad	d4					.byte $d4
>a2ae	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a2b2	d1					.byte $d1
>a2b3	83 de 1b 43				.dword $431bde83 ; 1e-06
>a2b7	ce					.byte $ce
>a2b8	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a2bc	ca					.byte $ca
>a2bd	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a2c1	c7					.byte $c7
>a2c2	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a2c6	c4					.byte $c4
>a2c7	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a2cb	c0					.byte $c0
>a2cc	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a2d0	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a2d1					SyntaxError:
.a2d1	a9 02		lda #$02		lda	#2
.a2d3	4c b5 8a	jmp $8ab5		jmp	ErrorHandler
.a2d6					RangeError:
.a2d6	a9 04		lda #$04		lda	#4
.a2d8	4c b5 8a	jmp $8ab5		jmp	ErrorHandler
.a2db					TypeError:
.a2db	a9 05		lda #$05		lda	#5
.a2dd	4c b5 8a	jmp $8ab5		jmp	ErrorHandler
.a2e0					ArgumentError:
.a2e0	a9 07		lda #$07		lda	#7
.a2e2	4c b5 8a	jmp $8ab5		jmp	ErrorHandler
.a2e5					NotDoneError:
.a2e5	a9 0c		lda #$0c		lda	#12
.a2e7	4c b5 8a	jmp $8ab5		jmp	ErrorHandler
.a2ea					ErrorText:
>a2ea	42 72 65 61 6b 00			.text	"Break",0
>a2f0	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a2f8	72 72 6f 72 00
>a2fd	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a305	20 62 79 20 7a 65 72 6f 00
>a30e	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a316	61 6e 67 65 00
>a31b	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a323	6d 61 74 63 68 00
>a329	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a331	65 6d 6f 72 79 00
>a337	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a33f	61 72 67 75 6d 65 6e 74 00
>a348	53 74 6f 70 00				.text	"Stop",0
>a34d	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a355	6f 6f 20 6c 6f 6e 67 00
>a35d	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a365	6e 20 66 61 69 6c 65 64 00
>a36e	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a376	61 74 61 00
>a37a	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a382	65 6e 74 65 64 00
>a388	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a390	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a39c	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a3a4	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a3b1	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a3b9	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a3c6	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a3ce	68 6f 75 74 20 57 68 69 6c 65 00
>a3d9	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a3e1	68 6f 75 74 20 46 6f 72 00
>a3ea	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a3f2	61 63 6b 20 66 75 6c 6c 00
>a3fb	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a403	75 63 74 75 72 65 00
>a40a	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a412	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a41f	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a427	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a435	41 72 72 61 79 20 73 69			.text	"Array size",0
>a43d	7a 65 00
>a440	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a448	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9645					StackOpen:
.9645	48		pha				pha 								; save frame byte
.9646	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9648	0a		asl a				asl 	a 							; claim twice this for storage
.9649	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.964b	38		sec				sec 								; so basically subtracting from
.964c	65 34		adc $34				adc 	basicStack 	 				; basicStack
.964e	85 34		sta $34				sta 	basicStack
.9650	b0 08		bcs $965a			bcs 	_SONoBorrow
.9652	c6 35		dec $35				dec 	basicStack+1
.9654	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9656	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9658	90 04		bcc $965e			bcc 	_SOMemory
.965a					_SONoBorrow:
.965a	68		pla				pla 								; get marker back and write at TOS
.965b	92 34		sta ($34)			sta 	(basicStack)
.965d	60		rts				rts
.965e					_SOMemory:
.965e							ERR_STACK
.965e					StackClose:
.965e	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9660	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9662	0a		asl a				asl 	a 							; claim twice this.
.9663	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9665	85 34		sta $34				sta 	basicStack
.9667	90 02		bcc $966b			bcc 	_SCExit
.9669	e6 35		inc $35				inc 	basicStack+1
.966b					_SCExit:
.966b	60		rts				rts
.966c					StackCheckFrame:
.966c	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.966e	29 f0		and #$f0			and 	#$F0 						; check type bits
.9670	d0 01		bne $9673			bne 	_SCFError 					; different, we have structures mixed up
.9672	60		rts				rts
.9673					_SCFError:
.9673	8a		txa				txa 								; report error X
.9674	4c b5 8a	jmp $8ab5			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9677					STKSaveCodePosition:
.9677	5a		phy				phy
.9678	98		tya				tya 								; save Y
.9679	a0 05		ldy #$05			ldy 	#5
.967b	91 34		sta ($34),y			sta 	(basicStack),y
.967d	88		dey				dey 								; save Code Pointer
.967e					_STKSaveLoop:
.967e	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9681	91 34		sta ($34),y			sta 	(basicStack),y
.9683	88		dey				dey
.9684	d0 f8		bne $967e			bne 	_STKSaveLoop
.9686	7a		ply				ply
.9687	60		rts				rts
.9688					STKLoadCodePosition:
.9688	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.968a					_STKLoadLoop:
.968a	b1 34		lda ($34),y			lda 	(basicStack),y
.968c	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.968f	c8		iny				iny
.9690	c0 05		cpy #$05			cpy 	#5
.9692	d0 f6		bne $968a			bne 	_STKLoadLoop
.9694	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9696	a8		tay				tay
.9697	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9698					StackReset:
.9698	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.969a	85 34		sta $34				sta 	0+basicStack
.969c	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.969e	85 35		sta $35				sta 	1+basicStack
.96a0	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.96a2	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.96a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a450					StringConcrete:
.a450	5a		phy				phy 								; save position on stack
.a451	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a454	85 38		sta $38				sta 	zTemp1
.a456	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a459	85 39		sta $39				sta 	zTemp1+1
.a45b	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a45d					_SALength:
.a45d	c8		iny				iny
.a45e	b1 38		lda ($38),y			lda 	(zTemp1),y
.a460	d0 fb		bne $a45d			bne 	_SALength
.a462	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a464	b0 3f		bcs $a4a5			bcs 	_SALengthError
.a466	98		tya				tya 				 				; length of the new string
.a467	18		clc				clc
.a468	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a46a	90 02		bcc $a46e			bcc 	_SAHaveLength
.a46c	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a46e					_SAHaveLength:
.a46e	48		pha				pha 								; save length.
.a46f	38		sec				sec
.a470	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a472	6d 0e 07	adc $070e			adc 	StringMemory
.a475	8d 0e 07	sta $070e			sta 	StringMemory
.a478	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a47a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.a47d	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a47f	6d 0f 07	adc $070f			adc 	StringMemory+1
.a482	8d 0f 07	sta $070f			sta 	StringMemory+1
.a485	85 3b		sta $3b				sta 	zTemp2+1
.a487	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a48a	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a48b	38		sec				sec
.a48c	e9 03		sbc #$03			sbc 	#3
.a48e	92 3a		sta ($3a)			sta 	(zTemp2)
.a490	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a492	a0 01		ldy #$01			ldy 	#1
.a494	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a496					_SACopyNewString:
.a496	a0 00		ldy #$00			ldy 	#0
.a498					_SACopyNSLoop:
.a498	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a49a	c8		iny				iny 								; write two on in string storage
.a49b	c8		iny				iny
.a49c	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a49e	88		dey				dey 								; this makes it one one.
.a49f	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a4a1	d0 f5		bne $a498			bne 	_SACopyNSLoop
.a4a3	7a		ply				ply
.a4a4	60		rts				rts
.a4a5					_SALengthError:
.a4a5	a9 09		lda #$09		lda	#9
.a4a7	4c b5 8a	jmp $8ab5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a4aa					StringSystemInitialise:
.a4aa	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a4ac	8d 0e 07	sta $070e			sta 	0+StringMemory
.a4af	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a4b1	8d 0f 07	sta $070f			sta 	1+StringMemory
.a4b4	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a4b7	60		rts				rts
.a4b8					StringSpaceInitialise:
.a4b8	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a4ba	8d 10 07	sta $0710			sta 	StringInitialised
.a4bd	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a4c0	8d 11 07	sta $0711			sta 	StringTempPointer
.a4c3	ad 0f 07	lda $070f			lda 	StringMemory+1
.a4c6	3a		dec a				dec 	a
.a4c7	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a4ca	60		rts				rts
.a4cb					StringTempAllocate:
.a4cb	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a4cd	b0 35		bcs $a504			bcs 	_STALength
.a4cf	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a4d2	30 05		bmi $a4d9			bmi 	_STAAllocate
.a4d4	48		pha				pha 								; save value to subtract.
.a4d5	20 b8 a4	jsr $a4b8			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a4d8	68		pla				pla 								; restore it
.a4d9					_STAAllocate:
.a4d9	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a4db	18		clc				clc  								; deliberate allows one more
.a4dc	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a4df	8d 11 07	sta $0711			sta 	StringTempPointer
.a4e2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a4e5	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a4e7	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a4ea	69 ff		adc #$ff			adc 	#$FF
.a4ec	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a4ef	85 3d		sta $3d				sta 	zsTemp+1
.a4f1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a4f4	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a4f7	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a4fa	a9 10		lda #$10			lda 	#NSTString
.a4fc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a4ff	a9 00		lda #$00			lda 	#0 							; clear the target string
.a501	92 3c		sta ($3c)			sta 	(zsTemp)
.a503	60		rts				rts
.a504					_STALength:
.a504	a9 09		lda #$09		lda	#9
.a506	4c b5 8a	jmp $8ab5		jmp	ErrorHandler
.a509					StringTempWrite:
.a509	48		pha				pha
.a50a	92 3c		sta ($3c)			sta 	(zsTemp)
.a50c	e6 3c		inc $3c				inc 	zsTemp
.a50e	d0 02		bne $a512			bne 	_STWNoCarry
.a510	e6 3d		inc $3d				inc 	zsTemp+1
.a512					_STWNoCarry:
.a512	a9 00		lda #$00			lda 	#0
.a514	92 3c		sta ($3c)			sta 	(zsTemp)
.a516	68		pla				pla
.a517	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.96a5					BackloadProgram:
.96a5	a2 ff		ldx #$ff			ldx 	#$FF
.96a7	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.96aa	20 d4 96	jsr $96d4			jsr 	BLReadByte
.96ad	30 1e		bmi $96cd			bmi 	_BPExit
.96af					_BPCopy:
.96af	e8		inx				inx  								; copy byte in
.96b0	9d 24 08	sta $0824,x			sta 	lineBuffer,x
.96b3	9e 25 08	stz $0825,x			stz 	lineBuffer+1,x
.96b6	20 d4 96	jsr $96d4			jsr 	BLReadByte 					; read next byte
.96b9	30 0a		bmi $96c5			bmi 	_BPEndLine 					; -ve = EOL
.96bb	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.96bd	d0 02		bne $96c1			bne 	_BPNotTab
.96bf	a9 20		lda #$20			lda 	#' '
.96c1					_BPNotTab:
.96c1	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.96c3	b0 ea		bcs $96af			bcs 	_BPCopy
.96c5					_BPEndLine:
.96c5	20 de 99	jsr $99de			jsr 	TokeniseLine 				; tokenise the line.
.96c8	20 6a 9c	jsr $9c6a			jsr 	MemoryAppend 				; append to current program
.96cb	80 d8		bra $96a5			bra 	BackloadProgram
.96cd					_BPExit:
.96cd	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.96d0	20 6e 83	jsr $836e			jsr 	ClearCommand 				; clear variables etc.
.96d3	60		rts				rts
.96d4					BLReadByte:
.96d4					_BLLoad:
.96d4	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.96d7	ee d5 96	inc $96d5			inc 	_BLLoad+1
.96da	d0 03		bne $96df			bne 	_BLNoCarry
.96dc	ee d6 96	inc $96d6			inc 	_BLLoad+2
.96df					_BLNoCarry:
.96df	c9 00		cmp #$00			cmp 	#0
.96e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.96e2					TokeniseSearchTable:
.96e2	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.96e4	85 36		sta $36				sta 	zTemp0
.96e6	a0 00		ldy #$00			ldy 	#0
.96e8	a9 80		lda #$80			lda 	#$80 						; token #
.96ea	85 38		sta $38				sta 	zTemp1
.96ec					_TSTLoop:
.96ec	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.96ee	30 49		bmi $9739			bmi 	_TSTFail 					; -ve = end of table
.96f0	f0 2e		beq $9720			beq 	_TSTNext 					; zero, check next it's a dummy
.96f2	c8		iny				iny 								; get the hash
.96f3	b1 36		lda ($36),y			lda 	(zTemp0),y
.96f5	88		dey				dey
.96f6	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.96f9	d0 25		bne $9720			bne 	_TSTNext
.96fb	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.96fe	38		sec				sec
.96ff	ed 00 07	sbc $0700			sbc 	identStart
.9702	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9704	d0 1a		bne $9720			bne 	_TSTNext
.9706	5a		phy				phy 								; save Y , we might fail
.9707	c8		iny				iny 								; point to text
.9708	c8		iny				iny
.9709	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.970c					_TSTCompareName:
.970c	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; compare text.
.970f	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.9711	d0 0c		bne $971f			bne 	_TSTNextPullY 				; fail, pullY and do next
.9713	e8		inx				inx
.9714	c8		iny				iny
.9715	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.9718	d0 f2		bne $970c			bne 	_TSTCompareName
.971a	7a		ply				ply 								; throw Y
.971b	a5 38		lda $38				lda 	zTemp1 						; get token #
.971d	38		sec				sec 								; return with CS = passed.
.971e	60		rts				rts
.971f					_TSTNextPullY:
.971f	7a		ply				ply 								; restore current, fall through.
.9720					_TSTNext:
.9720	e6 38		inc $38				inc 	zTemp1 						; token counter
.9722	98		tya				tya
.9723	18		clc				clc
.9724	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9726	1a		inc a				inc 	a 							; +1
.9727	1a		inc a				inc 	a 							; +2
.9728	a8		tay				tay
.9729	10 c1		bpl $96ec			bpl 	_TSTLoop 					; if Y < $80 loop back
.972b	98		tya				tya 								; add Y to zTemp0 and reset Y
.972c	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.972e	18		clc				clc  								; but have tables > 255 bytes
.972f	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.9731	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9733	90 b7		bcc $96ec			bcc 	_TSTLoop
.9735	e6 37		inc $37				inc 	zTemp0+1
.9737	80 b3		bra $96ec			bra 	_TSTLoop
.9739					_TSTFail:
.9739	18		clc				clc
.973a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.973b					KeywordSet0:
>973b	00 65					.text	0,$65,""               ; $80 !0:EOF
>973d	00 58					.text	0,$58,""               ; $81 !1:SH1
>973f	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9741	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9747	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>974f	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9755	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>975c	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9763	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>976a	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9770	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9778	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9780	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9786	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>978d	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>9793	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>979b	28
>979c	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>97a2	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>97a8	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>97ae	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>97b5	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>97bb	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>97c1	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>97c6	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>97ca	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>97d0	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>97d8	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>97df	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>97e6	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>97ee	43
>97ef	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>97f5	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>97fb	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>9802	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>9808	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>980e	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>9813	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>9819	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>981e	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>9826	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>982c	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>9833	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>9839	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>983e	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>9845	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>984b	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>9850	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>9858	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>985c	ff					.text	$FF
.985d					KeywordSet1:
>985d	00 65					.text	0,$65,""               ; $80 !0:EOF
>985f	00 58					.text	0,$58,""               ; $81 !1:SH1
>9861	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9863	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>986b	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>9872	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>9877	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>987d	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>9882	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>988a	45
>988b	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>9890	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>9896	ff					.text	$FF
.9897					KeywordSet2:
>9897	00 65					.text	0,$65,""               ; $80 !0:EOF
>9899	00 58					.text	0,$58,""               ; $81 !1:SH1
>989b	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>989d	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>98a2	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>98a7	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>98ac	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>98b1	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>98b6	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>98bb	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>98c0	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>98c5	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>98ca	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>98cf	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>98d4	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>98d9	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>98de	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>98e3	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>98e8	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>98ed	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>98f2	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>98f7	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>98fc	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9901	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>9906	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>990b	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9910	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>9915	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>991a	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>991f	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9924	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>9929	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>992e	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9933	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9938	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>993d	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9942	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9947	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>994c	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9951	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9956	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>995b	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9960	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9965	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>996a	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>996f	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9974	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9979	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>997e	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9983	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9988	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>998d	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9992	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9997	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>999c	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>99a1	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>99a6	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b8 STX
>99ab	03 00 53 54 59				.text	3,$00,"STY"            ; $b9 STY
>99b0	03 01 53 54 5a				.text	3,$01,"STZ"            ; $ba STZ
>99b5	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bb TAX
>99ba	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bc TAY
>99bf	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $bd TRB
>99c4	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $be TSB
>99c9	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $bf TSX
>99ce	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c0 TXA
>99d3	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c1 TXS
>99d8	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c2 TYA
>99dd	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.99de					TokeniseLine:
.99de	20 66 9b	jsr $9b66			jsr 	FixLineBufferCase 			; fix line case
.99e1	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.99e3	8d 24 07	sta $0724			sta 	tokenOffset
.99e6	9c 25 07	stz $0725			stz 	tokenLineNumber
.99e9	9c 26 07	stz $0726			stz 	tokenLineNumber+1
.99ec	a2 ff		ldx #$ff			ldx 	#$FF
.99ee					_TKFindFirst:
.99ee	e8		inx				inx
.99ef	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.99f2	f0 79		beq $9a6d			beq 	_TKExit
.99f4	c9 20		cmp #$20			cmp 	#' '
.99f6	90 f6		bcc $99ee			bcc 	_TKFindFirst
.99f8	c9 30		cmp #$30			cmp 	#'0'
.99fa	90 07		bcc $9a03			bcc 	_TKNoLineNumber
.99fc	c9 3a		cmp #$3a			cmp 	#'9'+1
.99fe	b0 03		bcs $9a03			bcs 	_TKNoLineNumber
.9a00	20 90 9b	jsr $9b90			jsr 	TokeniseExtractLineNumber
.9a03					_TKNoLineNumber:
.9a03					_TKTokeniseLoop:
.9a03	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9a06	f0 65		beq $9a6d			beq 	_TKExit
.9a08	e8		inx				inx
.9a09	c9 20		cmp #$20			cmp 	#' '
.9a0b	f0 f6		beq $9a03			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9a0d	ca		dex				dex 								; undo last get, A contains character, X is position.
.9a0e	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9a10	f0 61		beq $9a73			beq 	_TKTokeniseIdentifier
.9a12	c9 41		cmp #$41			cmp 	#'A'
.9a14	90 04		bcc $9a1a			bcc 	_TKTokenisePunctuation
.9a16	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9a18	90 59		bcc $9a73			bcc 	_TKTokeniseIdentifier
.9a1a					_TKTokenisePunctuation:
.9a1a	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9a1c	f0 27		beq $9a45			beq 	_TKString
.9a1e	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.9a20	f0 28		beq $9a4a			beq 	_TKHexConstant
.9a22	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9a24	f0 29		beq $9a4f			beq 	_TKCheckDouble
.9a26	c9 3e		cmp #$3e			cmp 	#'>'
.9a28	f0 25		beq $9a4f			beq 	_TKCheckDouble
.9a2a					_TKStandardPunctuation:
.9a2a	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get it back.
.9a2d	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9a2f	90 0e		bcc $9a3f			bcc 	_TKNoShift
.9a31	48		pha				pha 								; save
.9a32	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9a34	85 36		sta $36				sta 	zTemp0
.9a36	68		pla				pla
.9a37	29 20		and #$20			and 	#32 						; bit 5
.9a39	4a		lsr a				lsr 	a 							; shift into bit 3
.9a3a	4a		lsr a				lsr 	a
.9a3b	05 36		ora $36				ora 	zTemp0
.9a3d	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9a3f					_TKNoShift:
.9a3f	20 d5 9b	jsr $9bd5			jsr 	TokeniseWriteByte 			; write the punctuation character
.9a42	e8		inx				inx 								; consume the character
.9a43	80 be		bra $9a03			bra 	_TKTokeniseLoop 			; and loop round again.
.9a45					_TKString:
.9a45	20 f5 9a	jsr $9af5			jsr 	TokeniseString
.9a48	80 b9		bra $9a03			bra 	_TKTokeniseLoop
.9a4a					_TKHexConstant:
.9a4a	20 30 9b	jsr $9b30			jsr 	TokeniseHexConstant
.9a4d	80 b4		bra $9a03			bra 	_TKTokeniseLoop
.9a4f					_TKCheckDouble:
.9a4f	bd 25 08	lda $0825,x			lda 	lineBuffer+1,x 				; get next character
.9a52	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9a54	90 d4		bcc $9a2a			bcc 	_TKStandardPunctuation
.9a56	c9 3f		cmp #$3f			cmp 	#'>'+1
.9a58	b0 d0		bcs $9a2a			bcs 	_TKStandardPunctuation
.9a5a	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9a5d	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9a5f	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9a60	7d 25 08	adc $0825,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9a63	38		sec				sec
.9a64	e9 3c		sbc #$3c			sbc 	#'<'
.9a66	20 d5 9b	jsr $9bd5			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9a69	e8		inx				inx 								; consume both
.9a6a	e8		inx				inx
.9a6b	80 96		bra $9a03			bra 	_TKTokeniseLoop
.9a6d	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9a6f	20 d5 9b	jsr $9bd5			jsr 	TokeniseWriteByte
.9a72	60		rts				rts
.9a73					_TKTokeniseIdentifier:
.9a73	8e 00 07	stx $0700			stx 	identStart 					; save start
.9a76	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9a79					_TKCheckLoop:
.9a79	e8		inx				inx 								; look at next, we know first is identifier.
.9a7a	bd 24 08	lda $0824,x			lda  	lineBuffer,x
.9a7d	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9a7f	f0 f8		beq $9a79			beq 	_TKCheckLoop
.9a81	c9 30		cmp #$30			cmp	 	#"0"
.9a83	90 0c		bcc $9a91			bcc 	_TKEndIdentifier
.9a85	c9 3a		cmp #$3a			cmp 	#"9"+1
.9a87	90 f0		bcc $9a79			bcc 	_TKCheckLoop
.9a89	c9 41		cmp #$41			cmp	 	#"A"
.9a8b	90 04		bcc $9a91			bcc 	_TKEndIdentifier
.9a8d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9a8f	90 e8		bcc $9a79			bcc 	_TKCheckLoop
.9a91					_TKEndIdentifier:
.9a91	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9a94	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9a96	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9a98	f0 06		beq $9aa0			beq 	_TKHasTypeCharacter
.9a9a	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9a9c	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9a9e	d0 07		bne $9aa7			bne 	_TKNoTypeCharacter
.9aa0					_TKHasTypeCharacter:
.9aa0	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9aa3	e8		inx				inx 								; read next
.9aa4	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9aa7					_TKNoTypeCharacter:
.9aa7	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9aa9	d0 09		bne $9ab4			bne 	_TKNoArray
.9aab	e8		inx				inx 								; skip the (
.9aac	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9aaf	09 04		ora #$04			ora 	#$04
.9ab1	8d 04 07	sta $0704			sta 	identTypeByte
.9ab4					_TKNoArray:
.9ab4	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9ab7	20 51 9b	jsr $9b51			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9aba	a0 97		ldy #$97			ldy 	#(KeywordSet0) >> 8
.9abc	a9 3b		lda #$3b			lda 	#(KeywordSet0) & $FF
.9abe	20 e2 96	jsr $96e2			jsr 	TokeniseSearchTable
.9ac1	a2 00		ldx #$00			ldx 	#0
.9ac3	b0 1f		bcs $9ae4			bcs 	_TKFoundToken
.9ac5	a0 98		ldy #$98			ldy 	#(KeywordSet1) >> 8
.9ac7	a9 5d		lda #$5d			lda 	#(KeywordSet1) & $FF
.9ac9	20 e2 96	jsr $96e2			jsr 	TokeniseSearchTable
.9acc	a2 81		ldx #$81			ldx 	#$81
.9ace	b0 14		bcs $9ae4			bcs 	_TKFoundToken
.9ad0	a0 98		ldy #$98			ldy 	#(KeywordSet1) >> 8
.9ad2	a9 5d		lda #$5d			lda 	#(KeywordSet1) & $FF
.9ad4	20 e2 96	jsr $96e2			jsr 	TokeniseSearchTable
.9ad7	a2 82		ldx #$82			ldx 	#$82
.9ad9	b0 09		bcs $9ae4			bcs 	_TKFoundToken
.9adb	20 e1 9b	jsr $9be1			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9ade	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9ae1	4c 03 9a	jmp $9a03			jmp 	_TKTokeniseLoop 			; and go round again.
.9ae4					_TKFoundToken:
.9ae4	48		pha				pha 								; save token
.9ae5	8a		txa				txa 								; shift in X, is there one ?
.9ae6	f0 03		beq $9aeb			beq 	_TKNoTShift
.9ae8	20 d5 9b	jsr $9bd5			jsr 	TokeniseWriteByte 			; if so, write it out
.9aeb					_TKNoTShift:
.9aeb	68		pla				pla 								; restore and write token
.9aec	20 d5 9b	jsr $9bd5			jsr 	TokeniseWriteByte
.9aef	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9af2	4c 03 9a	jmp $9a03			jmp 	_TKTokeniseLoop 			; and go round again.
.9af5					TokeniseString:
.9af5	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9af7	20 d5 9b	jsr $9bd5			jsr 	TokeniseWriteByte
.9afa	e8		inx				inx									; start of quoted string.
.9afb	da		phx				phx 								; push start of string on top
.9afc	ca		dex				dex
.9afd					_TSFindEnd:
.9afd	e8		inx				inx
.9afe	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; next character
.9b01	f0 04		beq $9b07			beq 	_TSEndOfString
.9b03	c9 22		cmp #$22			cmp 	#'"'
.9b05	d0 f6		bne $9afd			bne 	_TSFindEnd
.9b07					_TSEndOfString:
.9b07	7a		ply				ply  								; so now Y is first character, X is character after end.
.9b08	48		pha				pha 								; save terminating character
.9b09	20 11 9b	jsr $9b11			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9b0c	68		pla				pla 								; terminating character
.9b0d	f0 01		beq $9b10			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9b0f	e8		inx				inx
.9b10					_TSNotQuote:
.9b10	60		rts				rts
.9b11					TOWriteBlockXY:
.9b11	86 36		stx $36				stx 	zTemp0 						; write end character
.9b13	98		tya				tya
.9b14	49 ff		eor #$ff			eor 	#$FF
.9b16	38		sec				sec
.9b17	65 36		adc $36				adc 	zTemp0
.9b19	1a		inc a				inc 	a 							; one extra for NULL
.9b1a	20 d5 9b	jsr $9bd5			jsr 	TokeniseWriteByte
.9b1d					_TOBlockLoop:
.9b1d	c4 36		cpy $36				cpy 	zTemp0
.9b1f	f0 09		beq $9b2a			beq 	_TOBlockExit
.9b21	b9 24 08	lda $0824,y			lda 	lineBuffer,y
.9b24	20 d5 9b	jsr $9bd5			jsr 	TokeniseWriteByte
.9b27	c8		iny				iny
.9b28	80 f3		bra $9b1d			bra 	_TOBlockLoop
.9b2a					_TOBlockExit:
.9b2a	a9 00		lda #$00			lda 	#0
.9b2c	20 d5 9b	jsr $9bd5			jsr 	TokeniseWriteByte
.9b2f	60		rts				rts
.9b30					TokeniseHexConstant:
.9b30	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9b32	20 d5 9b	jsr $9bd5			jsr 	TokeniseWriteByte
.9b35	e8		inx				inx									; start of quoted string.
.9b36	da		phx				phx 								; push start of constant on top
.9b37	ca		dex				dex
.9b38					_THFindLoop:
.9b38	e8		inx				inx
.9b39	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9b3c	c9 30		cmp #$30			cmp 	#"0"
.9b3e	90 0c		bcc $9b4c			bcc 	_THFoundEnd
.9b40	c9 3a		cmp #$3a			cmp 	#"9"+1
.9b42	90 f4		bcc $9b38			bcc 	_THFindLoop
.9b44	c9 41		cmp #$41			cmp 	#"A"
.9b46	90 04		bcc $9b4c			bcc 	_THFoundEnd
.9b48	c9 47		cmp #$47			cmp 	#"F"+1
.9b4a	90 ec		bcc $9b38			bcc 	_THFindLoop
.9b4c					_THFoundEnd:
.9b4c	7a		ply				ply 								; restore start
.9b4d	20 11 9b	jsr $9b11			jsr 	TOWriteBlockXY 				; output the block
.9b50	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9b51					TokeniseCalculateHash:
.9b51	da		phx				phx
.9b52	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9b55	a9 00		lda #$00			lda 	#0
.9b57					_TCHLoop:
.9b57	18		clc				clc
.9b58	7d 24 08	adc $0824,x			adc 	lineBuffer,x
.9b5b	e8		inx				inx
.9b5c	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9b5f	d0 f6		bne $9b57			bne 	_TCHLoop
.9b61	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9b64	fa		plx				plx
.9b65	60		rts				rts
.9b66					FixLineBufferCase:
.9b66	a2 00		ldx #$00			ldx 	#0
.9b68					_FLBCLoop:
.9b68	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get next character
.9b6b	f0 22		beq $9b8f			beq 	_FLBCExit 					; end of string.
.9b6d	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9b6f	f0 11		beq $9b82			beq 	_FLBCInQuotes
.9b71	e8		inx				inx
.9b72	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9b74	90 f2		bcc $9b68			bcc 	_FLBCLoop
.9b76	c9 7b		cmp #$7b			cmp 	#'z'+1
.9b78	b0 ee		bcs $9b68			bcs 	_FLBCLoop
.9b7a	38		sec				sec 								; make U/C
.9b7b	e9 20		sbc #$20			sbc 	#32
.9b7d	9d 23 08	sta $0823,x			sta	 	lineBuffer-1,x 				; write back
.9b80	80 e6		bra $9b68			bra 	_FLBCLoop
.9b82					_FLBCInQuotes:
.9b82	e8		inx				inx 								; advance
.9b83	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get next
.9b86	f0 07		beq $9b8f			beq 	_FLBCExit 					; exit on EOS
.9b88	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9b8a	d0 f6		bne $9b82			bne 	_FLBCInQuotes
.9b8c	e8		inx				inx 								; skip over it
.9b8d	80 d9		bra $9b68			bra 	_FLBCLoop
.9b8f					_FLBCExit:
.9b8f	60		rts				rts
.9b90					TokeniseExtractLineNumber:
.9b90	ad 26 07	lda $0726			lda 	tokenLineNumber+1 			; push current value on stack
.9b93	48		pha				pha
.9b94	ad 25 07	lda $0725			lda 	tokenLineNumber
.9b97	48		pha				pha
.9b98	20 ce 9b	jsr $9bce			jsr 	_TELNTimes2 				; line # x 4
.9b9b	20 ce 9b	jsr $9bce			jsr 	_TELNTimes2 				; line # x 2
.9b9e	18		clc				clc 								; add stacked value
.9b9f	68		pla				pla
.9ba0	6d 25 07	adc $0725			adc 	tokenLineNumber
.9ba3	8d 25 07	sta $0725			sta 	tokenLineNumber
.9ba6	68		pla				pla
.9ba7	6d 26 07	adc $0726			adc 	tokenLineNumber+1
.9baa	8d 26 07	sta $0726			sta 	tokenLineNumber+1 			; line # x 5
.9bad	20 ce 9b	jsr $9bce			jsr 	_TELNTimes2 				; line # x 10
.9bb0	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; get and consume character
.9bb3	e8		inx				inx
.9bb4	29 0f		and #$0f			and 	#15 						; add to line #
.9bb6	18		clc				clc
.9bb7	6d 25 07	adc $0725			adc 	tokenLineNumber
.9bba	8d 25 07	sta $0725			sta 	tokenLineNumber
.9bbd	90 03		bcc $9bc2			bcc 	_TLENNoCarry
.9bbf	ee 26 07	inc $0726			inc 	tokenLineNumber+1
.9bc2					_TLENNoCarry:
.9bc2	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; more digits ?
.9bc5	c9 30		cmp #$30			cmp 	#'0'
.9bc7	90 04		bcc $9bcd			bcc 	_TLENExit
.9bc9	c9 3a		cmp #$3a			cmp 	#'9'+1
.9bcb	90 c3		bcc $9b90			bcc 	TokeniseExtractLineNumber
.9bcd					_TLENExit:
.9bcd	60		rts				rts
.9bce					_TELNTimes2:
.9bce	0e 25 07	asl $0725			asl 	tokenLineNumber
.9bd1	2e 26 07	rol $0726			rol 	tokenLineNumber+1
.9bd4	60		rts				rts
.9bd5					TokeniseWriteByte:
.9bd5	da		phx				phx
.9bd6	ae 24 07	ldx $0724			ldx 	tokenOffset 				; next slot to write to
.9bd9	9d 24 07	sta $0724,x			sta 	tokenOffset,x 				; write byte out
.9bdc	ee 24 07	inc $0724			inc 	tokenOffset 				; advance slot.
.9bdf	fa		plx				plx
.9be0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9be1					CheckCreateVariableRecord:
.9be1	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9be3	85 36		sta $36				sta 	0+zTemp0
.9be5	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9be7	85 37		sta $37				sta 	1+zTemp0
.9be9					_CCVSearch:
.9be9	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9beb	f0 2c		beq $9c19			beq 	_CCVFail
.9bed	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9bef	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9bf1	cd 03 07	cmp $0703			cmp 	identHash
.9bf4	d0 16		bne $9c0c			bne 	_CCVNext
.9bf6	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9bf8	ae 00 07	ldx $0700			ldx 	identStart
.9bfb					_CCVCompare:
.9bfb	bd 24 08	lda $0824,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9bfe	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9c00	e8		inx				inx 								; advance pointers
.9c01	c8		iny				iny
.9c02	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9c03	d0 07		bne $9c0c			bne 	_CCVNext  					; didn't match go to next.
.9c05	90 f4		bcc $9bfb			bcc 	_CCVCompare 				; not finished yet.
.9c07	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9c0a	f0 41		beq $9c4d			beq 	_CCVFound 					; yes, we were successful
.9c0c					_CCVNext:
.9c0c	18		clc				clc
.9c0d	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9c0f	65 36		adc $36				adc 	zTemp0
.9c11	85 36		sta $36				sta 	zTemp0
.9c13	90 d4		bcc $9be9			bcc 	_CCVSearch
.9c15	e6 37		inc $37				inc 	zTemp0+1
.9c17	80 d0		bra $9be9			bra 	_CCVSearch
.9c19					_CCVFail:
.9c19	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9c1b	ad 03 07	lda $0703			lda 	identHash
.9c1e	91 36		sta ($36),y			sta 	(zTemp0),y
.9c20	c8		iny				iny 								; offset 2 is the type byte
.9c21	ad 04 07	lda $0704			lda 	identTypeByte
.9c24	91 36		sta ($36),y			sta 	(zTemp0),y
.9c26	c8		iny				iny
.9c27					_CCVData:
.9c27	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9c29	91 36		sta ($36),y			sta 	(zTemp0),y
.9c2b	c8		iny				iny
.9c2c	c0 08		cpy #$08			cpy 	#8
.9c2e	90 f7		bcc $9c27			bcc 	_CCVData
.9c30	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9c33					_CCVCopyName:
.9c33	bd 24 08	lda $0824,x			lda 	lineBuffer,x
.9c36	91 36		sta ($36),y			sta 	(zTemp0),y
.9c38	e8		inx				inx
.9c39	c8		iny				iny
.9c3a	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9c3d	d0 f4		bne $9c33			bne 	_CCVCopyName
.9c3f	98		tya				tya 								; patch offset
.9c40	92 36		sta ($36)			sta 	(zTemp0)
.9c42	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9c44	91 36		sta ($36),y			sta 	(zTemp0),y
.9c46	88		dey				dey
.9c47	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9c49	09 80		ora #$80			ora 	#$80
.9c4b	91 36		sta ($36),y			sta 	(zTemp0),y
.9c4d					_CCVFound:
.9c4d	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9c4f	38		sec				sec
.9c50	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9c52	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9c54	20 d5 9b	jsr $9bd5			jsr 	TokeniseWriteByte
.9c57	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9c59	20 d5 9b	jsr $9bd5			jsr 	TokeniseWriteByte
.9c5c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.a518					MemoryPeek:
.a518	b2 36		lda ($36)			lda 	(zTemp0)
.a51a	60		rts				rts
.a51b					MemoryPoke:
.a51b	92 36		sta ($36)			sta 	(zTemp0)
.a51d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.a51e					PrintHex:
.a51e	48		pha				pha
.a51f	4a		lsr a				lsr 	a
.a520	4a		lsr a				lsr 	a
.a521	4a		lsr a				lsr 	a
.a522	4a		lsr a				lsr 	a
.a523	20 27 a5	jsr $a527			jsr 	_PrintNibble
.a526	68		pla				pla
.a527					_PrintNibble:
.a527	29 0f		and #$0f			and 	#15
.a529	c9 0a		cmp #$0a			cmp 	#10
.a52b	90 02		bcc $a52f			bcc 	_NoShift
.a52d	69 06		adc #$06			adc 	#6
.a52f					_NoShift:
.a52f	69 30		adc #$30			adc 	#48
.a531	4c 34 a5	jmp $a534			jmp 	EXTPrintCharacter
.a534					EXTPrintCharacter:
.a534	48		pha				pha
.a535	da		phx				phx
.a536	5a		phy				phy
.a537	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a53a	7a		ply				ply
.a53b	fa		plx				plx
.a53c	68		pla				pla
.a53d	60		rts				rts
.a53e					EXTInputSingleCharacter:
.a53e	da		phx				phx
.a53f	5a		phy				phy
.a540					_EISCWait:
.a540	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a543	c9 00		cmp #$00			cmp 	#0
.a545	f0 f9		beq $a540			beq 	_EISCWait
.a547	7a		ply				ply
.a548	fa		plx				plx
.a549	60		rts				rts
.a54a					EXTInputLine:
.a54a	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a54c					_ILLoop:
.a54c	da		phx				phx 								; read character in
.a54d	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a550	fa		plx				plx
.a551	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a553	f0 12		beq $a567			beq 	_ILBackspace
.a555	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a557	f0 15		beq $a56e			beq 	_ILExit
.a559	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a55b	90 ef		bcc $a54c			bcc 	_ILLoop
.a55d	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a55f	f0 eb		beq $a54c			beq 	_ILLoop
.a561	9d 24 08	sta $0824,x			sta 	lineBuffer,x 				; save it
.a564	e8		inx				inx
.a565	80 e5		bra $a54c			bra 	_ILLoop
.a567					_ILBackspace:
.a567	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a569	f0 e1		beq $a54c			beq 	_ILLoop
.a56b	ca		dex				dex 								; back one.
.a56c	80 de		bra $a54c			bra 	_ILLoop
.a56e					_ILExit:
.a56e	20 34 a5	jsr $a534			jsr 	EXTPrintCharacter
.a571	9e 24 08	stz $0824,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a574	60		rts				rts
.a575					EXTBreakCheck:
.a575	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9c5d					MemoryNew:
.9c5d	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9c5f	85 30		sta $30				sta 	codePtr
.9c61	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9c63	85 31		sta $31				sta 	codePtr+1
.9c65	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9c67	92 30		sta ($30)			sta 	(codePtr)
.9c69	60		rts				rts
.9c6a					MemoryAppend:
.9c6a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9c6c	85 30		sta $30				sta 	codePtr
.9c6e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9c70	85 31		sta $31				sta 	codePtr+1
.9c72					_MAFindEnd:
.9c72	b2 30		lda ($30)			lda 	(codePtr)
.9c74	f0 0d		beq $9c83			beq 	_MAFoundEnd
.9c76	18		clc				clc
.9c77	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9c79	65 30		adc $30				adc 	codePtr
.9c7b	85 30		sta $30				sta 	codePtr
.9c7d	90 02		bcc $9c81			bcc 	_CREExit
.9c7f	e6 31		inc $31				inc 	codePtr+1
.9c81					_CREExit:
.9c81	80 ef		bra $9c72			bra 	_MAFindEnd
.9c83					_MAFoundEnd:
.9c83	ac 24 07	ldy $0724			ldy 	tokenOffset 				; bytes to copy
.9c86	c0 04		cpy #$04			cpy 	#4 							; blank line
.9c88	f0 0e		beq $9c98			beq 	_MANoLine
.9c8a	a9 00		lda #$00			lda 	#0 							; end of program
.9c8c	91 30		sta ($30),y			sta 	(codePtr),y
.9c8e					_MACopy:
.9c8e	88		dey				dey
.9c8f	b9 24 07	lda $0724,y			lda 	tokenOffset,y
.9c92	91 30		sta ($30),y			sta 	(codePtr),y
.9c94	c0 00		cpy #$00			cpy 	#0
.9c96	d0 f6		bne $9c8e			bne 	_MACopy
.9c98					_MANoLine:
.9c98	60		rts				rts
.9c99					MemoryInline:
.9c99	98		tya				tya 								; put address into stack,x
.9c9a	18		clc				clc
.9c9b	65 30		adc $30				adc 	codePtr
.9c9d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9ca0	a5 31		lda $31				lda 	codePtr+1
.9ca2	69 00		adc #$00			adc 	#0
.9ca4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9ca7	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9caa	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9cad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.9cae					MemoryTransferAX:
.9cae	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9cb0	86 37		stx $37				stx 	zTemp0+1
.9cb2	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9cb4	85 30		sta $30				sta 	codePtr
.9cb6	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9cb8	85 31		sta $31				sta 	codePtr+1
.9cba					_MTAXLoop:
.9cba	b2 30		lda ($30)			lda 	(codePtr)
.9cbc	f0 1d		beq $9cdb			beq 	_MTAXError 					; not found.
.9cbe	a0 01		ldy #$01			ldy 	#1 							; check LSB
.9cc0	b1 30		lda ($30),y			lda 	(codePtr),y
.9cc2	c5 36		cmp $36				cmp 	zTemp0
.9cc4	d0 07		bne $9ccd			bne 	_MTAXNext
.9cc6	c8		iny				iny 								; check MSB
.9cc7	b1 30		lda ($30),y			lda 	(codePtr),y
.9cc9	c5 37		cmp $37				cmp 	zTemp0+1
.9ccb	f0 0d		beq $9cda			beq 	_MTAXExit 					; success !
.9ccd					_MTAXNext:
.9ccd	18		clc				clc
.9cce	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9cd0	65 30		adc $30				adc 	codePtr
.9cd2	85 30		sta $30				sta 	codePtr
.9cd4	90 02		bcc $9cd8			bcc 	_CREExit
.9cd6	e6 31		inc $31				inc 	codePtr+1
.9cd8					_CREExit:
.9cd8	80 e0		bra $9cba			bra 	_MTAXLoop
.9cda					_MTAXExit:
.9cda	60		rts				rts
.9cdb					_MTAXError:
.9cdb	a9 0d		lda #$0d		lda	#13
.9cdd	4c b5 8a	jmp $8ab5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
