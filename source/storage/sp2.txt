5     cls 10    i=0:sx=5:sy=5:xo=sx*4:yo=sy*3:scount=0:smax=0:grid=020    brush=0:curspr=0:grid=0:fe=0:spt=$D900:jbase=($DC00+n)30    ?1=0:?$D000=63:peekvalue=0:sprites on 40    bitmap on :bitmap clear 0:theme()45    lut=$D000:sprsize=3:rem "sprsize 0=8,1=16,2=24,3=32"50    for c=0 to 25560    read r,g,b70    palette c,r,g,b80    next 110   col=1:brush=0120   dma_fill($30000,$FC00,0)130   work2=$7800:work3=$2FC00140   for c=0 to 1024:?(work2+c)=0:next 150   sprcursor()160   dma_linear(work2,$22C00,1024)161   rem "REGISTER SPRITES IN BASIC INDEX"166   xpoke($30000,(($30200\64)&$F)*16+3):rem "Register First Sprite as 32x32"167   xpoke($30000+256,$30200\1024)170   setspr(0,$22D00,2):?spt=65180   setspr(1,$22C00,2):?(spt+8)=65190   setspr(5,$22C00,2):?(spt+40)=65200   setspr(6,$22C00,2):?(spt+48)=65210   setspr(7,$22C00,2):?(spt+56)=65220   for c=0 to 1023:?(work2+c)=0:next 230   ptrx=32+xo+(sx*20):ptry=32+yo+(sy*16)240   movespr(0,ptrx,ptry)260   setspr(2,work2,2)270   movespr(2,272,122)290   ?(spt+16)=1310   ml_routines():rem "Compile mlRoutines"320   ?(l+4)=0330   col=8340   rect solid sx*4,(sy*40)+1 colour 248 to (sx*5)+255,(sy*41)350   rect solid sx*4,(sy*42)+1 colour 251 to (sx*5)+255,(sy*43)360   rect solid sx*4,(sy*44)+1 colour 252 to (sx*5)+255,(sy*45)370   drawpal()380   line (xo+1),(yo+1) color 72 to (xo+sx-1),(yo+sy-1)400   clrarea(32)410   switchcolor(32)420   drawnexticon(2,20,243):drawnexticon(2,36,243)430   drawnexticon(2,52,243):drawnexticon(2,69,243)440   drawnexticon(2,84,243):drawnexticon(2,100,243)450   drawnexticon(2,116,243)455   drawnexticon(1,164,243):drawnexticon(1,180,243)460   drawnexticon(64,180,243):drawnexticon(84,180,243):drawnexticon(104,180,243)470   drawnexticon(124,180,243):drawnexticon(144,180,243):drawnexticon(164,180,243)480   drawnexticon(184,180,243):drawnexticon(203,180,243):rem "drawnexticon(220,180,243)"500   printat(72,49,"Buffer:")510   printat(0,0,"Welcome to F256 Jr Sprite's Editor v0.7")520   printat(5,3,"32x32")600   '	"--------------- MAIN LOOP -------------------------"610   processjoy()620   ptrx=ptrx+x:ptry=ptry+y630   if ptrx>351 then ptrx=351640   if ptry>271 then ptry=271650   if ptrx<32 then ptrx=32660   if ptry<32 then ptry=32670   movespr(0,ptrx,ptry)680   xc=int((ptrx-32)/sx):yc=int((ptry-32)/sy)690   if b1=0 then goto 600700   if yc>=40:rem "---------------Modify palette entry"710   ?1=1:l=$D000:l=l+(col*4)720   if col<>0730   colb=?l:colg=?(l+1):colr=?(l+2)740   else 750   ?1=0:colb=?$D00D:colg=?$D00E:colr=?$D00F760   endif 770   if xc<4 then goto 600780   if xc<56790   if yc=40800   colr=ptrx-(4*sx)-32810   if colr>=255 then colr=255820   if colr<=0 then colr=0830   movespr(5,sx*4+colr+32,sy*40+32)840   endif 850   if yc=42860   colg=ptrx-(4*sx)-32870   if colg>=255 then colg=255880   if colg<=0 then colg=0890   movespr(6,sx*4+colg+32,sy*42+32)900   endif 910   if yc=44920   colb=ptrx-(4*sx)-32930   if colb>=255 then colb=255940   if colb<=0 then colb=0950   movespr(7,sx*4+colb+32,sy*44+32)960   endif 970   a$="Red:"+right$("00"+str$(colr),3)+" "980   a$=a$+"Green:"+right$("00"+str$(colg),3)+" "990   a$=a$+"Blue:"+right$("00"+str$(colb),3)1000  printat(5,58,a$)1010  if col<>01020  palette col,colr,colg,colb1030  else 1040  ?1=0:?$D00D=colb:?$D00E=colg:?$D00F=colr1050  endif 1060  endif 1065  goto 6001070  endif 1080  if yc>34:rem "DRAW-TOOLS MENU"1090  processjoy():if b1=1 then goto 10901100  if xc<13 then goto 600:rem "DO NOTHING"1105  if xc<16:rem "SET BRUSH SIZE"1110  brush=brush+11120  if brush>3 then brush=01125  a$="Pen size: "+str$(brush+1)1130  statmsg(a$)1150  goto 6001160  endif 1170  if xc<20:rem "COPY SPRITE TO BUFFER"1180  dma_linear(work2,work3,1024)1190  setspr(3,work3,0)1200  movespr(3,318,233):showspr(3,1)1210  a$="Copied sprite "+str$(scount+1)+" to buffer"1220  statmsg(a$)1230  goto 6001240  endif 1250  if xc<24:rem "PASTE SPRITE FROM BUFFER"1260  dma_linear(work3,work2,1024)1270  a$="Pasted Sprite "+str$(scount+1)+" from buffer"1280  call sprshow1290  printat(0,0,a$)1300  goto 6001310  endif 1320  if xc<28:rem "CLEAR SPRITE"1330  statmsg("press Button to Clear Sprite, or move stick to cancel.")1340  processjoy():if x+y+b1=0 then goto 13401350  if b1=11360  dma_fill(work2,1024,0)1370  a$="Cleared Sprite "+str$(scount)+" from buffer."1380  call sprshow1390  else 1400  a$="Operation Canceled."1410  endif 1420  statmsg(a$)1430  goto 6001440  endif 1450  if xc<32:rem "SET GRID SIZE"1460  if grid>01470  gspace=4:b=01480  while b<=321490  line xo+b*sx,yo color 3 to xo+b*sx,yo+sy*321500  line xo,yo+b*sy color 3 to xo+sx*32,yo+sy*b1510  b=b+gspace1520  wend 1530  endif 1540  grid=grid+11550  a$="Grid Size "+str$(grid)+"    ":statmsg(a$)1560  if grid=41570  grid=0:goto 6001580  endif 1590  gspace=2:b=01600  for c=1 to grid1610  gspace=gspace*21620  next 1630  while b<=321640  line xo+b*sx,yo color 72 to xo+b*sx,yo+sy*321650  line xo,yo+b*sy color 72 to xo+sx*32,yo+sy*b1660  b=b+gspace1670  wend 1680  goto 6001690  endif 1700  if xc<36:rem "MIRROR SPRITE X"1710  call mirrorx1720  call sprshow1730  goto 6001740  endif 1750  if xc<40:rem "MIRROR SPRITE Y"1760  call mirrory1770  call sprshow1780  goto 6001790  endif 1800  if xc<44:rem "MOVE (SCROLL) SPRITE"1810  a$="Use joystick to move sprite, button to end":statmsg(a$)1820  processjoy():if b1+x+y=0 then goto 1820:rem "GET JOY INPUT"1825  if b1=01830  if x=1 then call scrri:rem "Right"1840  if x=-1 then call scrle:rem "Left"1850  if y=1 then call scrdo:rem "Down"1860  if y=-1 then call scrup:rem "Up"1865  x=0:y=0:b1=0:call sprshow1870  else 1872  a$="Sprite Adjusted!":statmsg(a$)1873  processjoy():if b1+x+y=0 then goto 18731874  goto 6001875  endif 1880  goto 18201890  endif 1900  endif 1905  if xc<3:rem "PROCESS GENERAL MENU ITEMS"1910  if yc>27 then goto 600:rem "DO NOTHING"1920  if yc>23:rem "CLEAN UP SCREEN AND EXIT NICELY"1925  bitmap off :cls :print "Thx for using the Sprite Editor!"1927  for c=0 to 7:movespr(c,0,0):next :end 1928  endif 1930  if yc>20:rem "MOVE TO PREVIOUS SPRITE"1935  if scount>01940  dma_linear(work2,$30200+(scount*1024),1024)1950  scount=scount-11960  dma_linear($30200+(scount*1024),work2,1024)1970  processjoy():if b1=1 then goto 19701980  a$="Editing Sprite "+str$(scount+1):statmsg(a$)1985  call sprshow1990  else 2000  processjoy():if b1=1 then goto 20002010  a$="Already at First Sprite "+str$(scount+1)+"!":statmsg(a$)2020  endif 2025  goto 6002030  endif 2040  if yc>16:rem "MOVE TO NEXT SPRITE"2050  if scount<smax2060  dma_linear(work2,$30200+(scount*1024),1024)2070  scount=scount+12080  dma_linear($30200+(scount*1024),work2,1024)2090  processjoy():if b1=1 then goto 20902100  a$="Editing Sprite "+str$(scount+1):statmsg(a$)2105  call sprshow2110  else 2120  processjoy():if b1=1 then goto 21202130  a$="Already at Last Sprite "+str$(scount+1)+"!":statmsg(a$)2140  endif 2145  goto 6002150  endif 2160  if yc>13:rem "DELETE LAST SPRITE"2170  processjoy():if b1=1 then goto 21702180  if smax>02190  dma_linear(work2,$30200+(scount*1024),1024)2200  scount=smax:bcount=02210  dma_linear($30200+(scount*1024),work2,1024)2215  call sprshow2220  statmsg("Press button to delete last sprite, move stick to cancel.")2230  processjoy():if x+y+b1=0 then goto 22302240  if b1=12250  processjoy():if b1=1 then goto 22502251  a$="Deleting Sprite "+str$(scount+1)+"..."2252  smax=smax-1:scount=smax2253  dma_linear($30200+(scount*1024),work2,1024)2254  a$="Editing Sprite "+str$(scount+1):statmsg(a$)2255  call sprshow2257  else 2260  statmsg("Operation Canceled.")2270  endif 2280  else 2290  statmsg("Can't delete first sprite")2300  endif 2310  goto 6002320  endif 2330  if yc>10:rem "ADD SPRITE"2340  if scount<642350  dma_linear(work2,$30200+(scount*1024),1024)2360  smax=smax+1:scount=smax2365  xpoke($30000+scount,((($30200+((scount)*1024))\64)&$F)*16+sprsize)2366  xpoke($30000+scount+256,$30200+((scount)*1024)\1024)2370  dma_linear($30200+(scount*1024),work2,1024)2380  processjoy():if b1=1 then goto 23802390  a$="Editing Sprite "+str$(scount+1):statmsg(a$)2395  call sprshow2400  else 2410  processjoy():if b1=1 then goto 24102420  a$="Max number of Sprites "+str$(scount+1)+"!":statmsg(a$)2430  endif 2440  goto 6002450  endif 2460  if yc>7:rem "LOAD----------"2461  cls :input "Type Filename to Load (.SPR will be added):";a$2462  a$=a$+".SPR":bload a$,$2FFFF2463  xpeek($2FFFF):smax=peekvalue:rem "set # of sprites loaded"2464  a$="Loaded "+str$(smax+1)+" Sprites from "+a$:statmsg(a$)2465  scount=0:dma_linear($30200,work2,1024)2466  call sprshow2467  goto 6002468  endif 2470  if yc>4:rem "SAVE----------"2471  xpoke($30000+scount,((($30200+((scount)*1024))\64)&$F)*16+sprsize)2472  xpoke($30000+scount+256,$30200+((scount)*1024)\1024)2473  xpoke($2FFFF,smax):rem "STORE #OF SPRITES n-1 (0=1 Sprite, 63=64 sprites)"2474  dma_linear(work2,$30200+(scount*1024),1024):rem "STORE ALL SPRITES"2475  cls :input "Type a Filename to save as (.SPR will be added):";a$2476  a$=a$+".SPR":bsave a$,$2FFFF,((smax+1)*1024)+5122477  a$=a$+" Saved....  "+str$(((smax+1)*1024)+512)+" Bytes":statmsg(a$)2478  goto 6002479  endif 2480  endif 2490  if xc<4 then goto 600:rem "DO NOTHING"2500  if xc<12:rem "SELECT PALETTE COLOR"2510  if yc>22520  if (yc=yprev)&(xc=xprev) then goto 25702530  n=((xc)-4)+8*((yc)-3)2540  switchcolor(n)2550  yprev=yc:xprev=xc2560  goto 6002570  endif 2580  endif 2590  if xc=12 then goto 6002600  if xc<=44:rem "DRAW IN SPRITE AREA"2610  if yc>22620  if (yc=yprev)&(xc=xprev) then goto 27302630  for c=0 to brush2640  for d=0 to brush2650  if xc+c>44 then goto 27002660  if yc+d>34 then goto 27002670  px=(xc+c)*sx:py=(yc+d)*sy2680  rect solid px+1,py+1 color col to px+sx-1,py+sy-12690  poke work2+(xc+c-13)+(yc+d-3)*32,col2700  next 2710  next 2720  yprev=yc:xprev=xc2730  endif 2740  goto 6002750  endif 2760  goto 6002770  '	"---------------------------------END MAIN LOOP ---"3000  proc ml_routines()3010  local mainx,pos0x,pos1x,po2x,pos3x,srow,cnt,sqsize,endroutinex,endmirrorx3011  local mainy,pos0y,pos1y,po2y,pos3y,endroutiney,endmirrory3012  local firstrow,looprowsu,loopcolsu,pos0su,lastrow3013  local firstrowd,looprowsd,loopcolsd,pos0sd,lastrowd3014  local loopri,looprowsr,loopcolsr,pos0sr,loopri2,posri03015  local loople,looprowsl,loopcolsl,pos0sl,loople2,posle03016  local loop1,scradd,samerow,nextrow,cleanup,sadd,retadd3017  local whi,wlo,whe,wle,work33020  mlroutines=$7C00:sqsize=alloc(1):srow=alloc(1)3030  whi=work2\256:wlo=work2&$FF3040  work3=work2+$3E0:whe=work3\256:wle=work3&$FF3050  for c=0 to 13060  assemble mlroutines,c3070  .srow nop 3080  .cnt nop 3090  .sqsize nop 3100  .mirrorx ldy #$003110  ldx #$203120  stx srow3130  ldx #$1F:rem "counter to 31"3140  .mainx sty cnt3150  .pos0x lda work2,x:rem "Swap bytes from opposite x corners"3160  pha 3170  .pos1x lda work2,y3180  .pos2x sta work2,x3190  pla 3200  .pos3x sta work2,y3210  iny :rem "move counters"3230  dex 3240  clc 3250  inc cnt3260  lda cnt3270  cmp #$103280  bne mainx3290  dec srow3300  lda srow3310  cmp #$003320  beq endroutinex3330  clc 3340  lda #$203350  adc pos0x+1:rem "Move to next sprite's row address"3360  sta pos0x+13370  sta pos1x+13380  sta pos2x+13390  sta pos3x+13400  lda #003410  adc pos0x+23420  sta pos0x+23430  sta pos1x+23440  sta pos2x+23450  sta pos3x+23460  ldy #$003470  ldx #$1F3480  jmp mainx3490  .endroutinex lda #wlo:rem "Restore pointers in code"3500  sta pos0x+13520  sta pos1x+13530  sta pos2x+13540  sta pos3x+13550  lda #whi3560  sta pos0x+23570  sta pos1x+23580  sta pos2x+23590  sta pos3x+23600  .endmirrorx rts 3700  rem "Routine for MirrorY"3705  rem "--------------------------------"3730  .mirrory ldy #$103750  .mainy ldx #$00:rem "clear counter"3760  .pos0y lda work2,x:rem "Swap bytes from top / bottom"3770  pha 3780  .pos1y lda work3,x3790  .pos2y sta work2,x3800  pla 3810  .pos3y sta work3,x3820  inx 3830  cpx #$203840  bne pos0y3850  dey :rem "Decrease counter of row to process.."3870  cpy #$003880  beq endroutiney3890  clc 3900  lda #$203910  adc pos0y+1:rem "Move to next sprite's row address"3920  sta pos0y+13930  sta pos2y+13940  lda #$003950  adc pos0y+23960  sta pos0y+23970  sta pos2y+23980  sec 3990  lda pos1y+14000  sbc #$204010  sta pos1y+14020  sta pos3y+14030  lda pos1y+24040  sbc #004050  sta pos1y+24060  sta pos3y+24090  jmp mainy4100  .endroutiney lda #wlo:rem "Restore pointers in code"4110  sta pos0y+14120  sta pos2y+14130  lda #whi4140  sta pos0y+24150  sta pos2y+24160  lda #wle4170  sta pos1y+14180  sta pos3y+14190  lda #whe4200  sta pos1y+24210  sta pos3y+24220  .endmirrory rts 4235  '	"---------------------------"4260  .scrup ldx #$004270  .firstrow lda work2,x4280  pha 4290  inx 4300  cpx #$204310  bne firstrow4320  lda #$004330  sta srow4340  .looprowsu ldy #$004350  ldx #$204360  .loopcolsu lda work2,x4370  .pos0su sta work2,y4380  inx 4390  iny 4400  cpx #$404410  bne loopcolsu4420  clc 4430  lda #$204440  adc loopcolsu+14450  sta loopcolsu+14455  sta pos0su+14460  lda #$004470  adc loopcolsu+24475  sta loopcolsu+24480  sta pos0su+24490  inc srow4495  lda srow4500  cmp #$1F4510  bne looprowsu4520  lda #wlo4530  sta loopcolsu+14540  sta pos0su+14550  lda #whi4560  sta loopcolsu+24570  sta pos0su+24580  ldx #$1F4590  .lastrow lda work2,x4600  pla 4610  sta work3,x4620  dex 4630  cpx #$004640  bpl lastrow4650  rts 4670  rem "---------------------------------"4700  .scrdo ldx #$004710  .firstrowd lda work3,x4720  pha 4730  inx 4740  cpx #$204750  bne firstrowd4760  lda #$004770  sta srow4775  jmp subrow4780  .looprowsd ldy #$004790  ldx #$204800  .loopcolsd lda work3,y4810  .pos0sd sta work3,x4820  inx 4830  iny 4840  cpx #$404850  bne loopcolsd4860  .subrow sec 4870  lda loopcolsd+14880  sbc #$204890  sta loopcolsd+14900  sta pos0sd+14910  lda loopcolsd+24920  sbc #$004930  sta loopcolsd+24940  sta pos0sd+24960  inc srow4970  lda srow4980  cmp #$204990  bne looprowsd5000  lda #wle5010  sta loopcolsd+15020  sta pos0sd+15030  lda #whe5040  sta loopcolsd+25050  sta pos0sd+25060  ldx #$1F5070  .lastrowd pla 5080  sta work2,x5090  dex 5100  cpx #$005200  bpl lastrowd5210  rts 5225  rem "---------------------------------"5250  .scrri ldx #$1F5255  ldy #005257  sty srow5260  .loopri lda work2,x5270  pha 5280  clc 5290  lda #$205300  adc loopri+15310  sta loopri+15320  lda #$005330  adc loopri+25340  sta loopri+25350  iny 5360  cpy #$205370  bne loopri5380  .looprowsr ldy #$1E5390  ldx #$1F5400  .loopcolsr lda work2,y5410  .pos0sr sta work2,x5420  dex 5430  dey 5440  cpx #$005450  bne loopcolsr5460  clc 5470  lda #$205480  adc loopcolsr+15500  sta loopcolsr+15510  sta pos0sr+15520  lda #005530  adc loopcolsr+25550  sta loopcolsr+25560  sta pos0sr+25570  inc srow5580  lda srow5590  cmp #$205600  bne looprowsr5605  ldx #$205610  .loopri2 pla 5620  .posri0 sta work35630  sec 5640  lda posri0+15650  sbc #$205660  sta posri0+15670  lda posri0+25680  sbc #$005690  sta posri0+25700  dex 5710  cpx #$005720  bne loopri25730  lda #wlo5740  sta loopri+15750  sta loopcolsr+15760  sta pos0sr+15770  lda #whi5780  sta loopri+25790  sta loopcolsr+25800  sta pos0sr+25810  lda #wle5820  sta posri0+15830  lda #whe5840  sta posri0+25850  rts 5865  rem "---------------------------------"5890  .scrle ldx #$005900  ldy #$005910  sty srow5920  .loople lda work2,x5930  pha 5940  clc 5950  lda #$205960  adc loople+15970  sta loople+15980  lda #$005990  adc loople+26000  sta loople+26010  iny 6020  cpy #$206030  bne loople6040  .looprowsl ldy #$016050  ldx #$006060  .loopcolsl lda work2,y6070  .pos0sl sta work2,x6080  inx 6090  iny 6100  cpx #$206110  bne loopcolsl6120  clc 6130  lda #$206140  adc loopcolsl+16150  sta loopcolsl+16160  sta pos0sl+16170  lda #006180  adc loopcolsl+26190  sta loopcolsl+26200  sta pos0sl+26210  inc srow6220  lda srow6230  cmp #$206240  bne looprowsl6250  ldx #$206255  ldy #$1F6260  .loople2 pla 6270  .posle0 sta work3,y6280  sec 6290  lda posle0+16300  sbc #$206310  sta posle0+16320  lda posle0+26330  sbc #$006340  sta posle0+26350  dex 6360  cpx #$006370  bne loople26380  lda #wlo6390  sta loople+16400  sta loopcolsl+16410  sta pos0sl+16420  lda #whi6430  sta loople+26440  sta loopcolsl+26450  sta pos0sl+26460  lda #wle6470  sta posle0+16480  lda #whe6490  sta posle0+26500  rts 6510  rem "---------------------------------------"6520  .sprshow lda $E6530  pha 6540  lda #86550  sta $E6560  ldx #46570  stx $16580  stx sqsize6590  ldy #006600  stz srow6610  .loop1 lda work2,y6620  .scradd sta $D441,x6630  dex 6640  cpx #006650  bne loop16660  iny 6670  cpy #326680  beq samerow6690  lda #56700  jsr sadd6710  ldx #46720  jmp loop16730  .samerow ldx sqsize6740  dex 6750  cpx #006760  beq nextrow6770  stx sqsize6780  lda #1656790  jsr sadd6800  ldy #006810  ldx #46820  jmp loop16830  .nextrow ldx srow6840  inx 6850  stx srow6860  cpx #326870  beq cleanup6880  lda #2436890  jsr sadd6900  lda #2426910  jsr sadd6920  ldy #006930  ldx #46940  stx sqsize6950  clc 6960  lda #326970  adc loop1+16980  sta loop1+16990  lda #07000  adc loop1+27010  sta loop1+27020  clc 7030  jmp loop17040  .cleanup stz $17050  pla 7060  sta $E7070  lda #$417080  sta scradd+17090  lda #$D47100  sta scradd+27110  lda #wlo7120  sta loop1+17130  lda #whi7140  sta loop1+27150  clc 7160  rts 7170  .sadd clc 7180  adc scradd+17190  sta scradd+17200  lda #07210  adc scradd+27220  sta scradd+27230  cmp #2247240  bmi retadd7250  lda #1927260  sta scradd+27270  inc $E7280  .retadd clc 7290  rts 7340  next 7350  endproc 10000 '	"----------- PROCEDURES"10010 proc sprcursor()10020 sx=5:sy=510040 for c=0 to sx:add=work2+c:poke add,255:next 10050 for c=1 to sy-1:add=work2+c*16:?add=255:?(add+sx)=255:next 10060 for c=0 to sx:add=work2+c+(sy*16):poke add,255:next 10080 for c=0 to 255:read b:poke work2+$100+c,b:next 10090 endproc 10100 proc setspr(num,mem,size)10102 rem "size: 0=32x32, 1=24x24, 2=16x16, 3=8x8"10103 local shi:local smd:local slo:local sval:local sp10105 shi=mem\65536:smd=((mem-(shi*65536))\256):slo=(mem&$FF)10110 ?1=0:sp=$D900:sp=sp+(num*8)10120 size=size&3:sval=size*3210130 ?sp=sval10140 ?(sp+1)=slo:?(sp+2)=smd:?(sp+3)=shi10147 endproc 10150 proc showspr(num,show)10155 rem "show: 1=Show, 2=Hide"10160 ?1=0:local sp10165 sp=$D900:sp=sp+(num*8)10170 ?sp=show10180 endproc 10200 proc movespr(num,x,y)10210 ?1=0:local sp10215 sp=$D900:sp=sp+(num*8)10220 ?(sp+4)=x&$FF:?(sp+5)=int(x/256)10230 ?(sp+6)=y&$FF:?(sp+7)=int(y/256)10240 endproc 10330 proc drawpal()10335 xi=0:xf=0:yi=0:yf=0:xo=sx*4:yo=sy*3:i=010340 for b=0 to 3110350 for c=0 to 710360 xi=(c*sx)+(xo+1)10365 xf=((c+1)*sx)+xo10370 yi=(b*sy)+(yo+1)10375 yf=((b+1)*sy)+yo10380 rect solid xi,yi color i to (xf-1),(yf-1)10390 i=i+110400 next 10405 next 10410 endproc 10460 proc xpoke(addr,value)10470 local block:block=addr\8192:local prevblock:rem "calculate block"10475 local offset:offset=addr-(block*8192):rem "Calculate offset"10480 ?0=179:rem "Enable Edit on Memory LUT 0"10485 prevblock=?$E:rem "Save old block under I/O"10490 ?$E=block:rem "Map memory under I/O block to $30000"10500 ?1=4:rem "enable access to ram under I/O block (7th block!)"10510 ?($C000+offset)=value10515 ?1=0:rem "Set I/O access on block 7"10520 ?$E=prevblock:rem "Restore previous memory block under I/O"10530 endproc 10560 proc clrarea(size)10570 xo=sx*1310580 rect xo,yo solid color 0 to (xo+sx*size),(yo+sy*size)10590 for b=0 to size10600 line (xo+b*sx),yo color 3 to (xo+b*sx),(yo+sy*size)10610 line xo,(yo+b*sy) color 3 to (xo+sx*size),(yo+sy*b)10620 next 10630 endproc 10650 proc switchcolor(n)10655 col=n:?1=1:l=$D000:l=l+(col*4)10657 if col<>010660 colb=?l:colg=?(l+1):colr=?(l+2)10662 else 10665 ?1=0:colb=?$D00D:colg=?$D00E:colr=?$D00F10667 endif 10670 movespr(5,sx*4+colr+32,sy*40+32)10680 movespr(6,sx*4+colg+32,sy*42+32)10690 movespr(7,sx*4+colb+32,sy*44+32)10700 movespr(1,(((col&7)+4)*sx+32),((int(col/8)+3)*sy+32))10710 rect (sx*4),(sy*36) color n to (sx*12),(sy*39)10711 a$="Red:"+right$("00"+str$(colr),3)+" "10712 a$=a$+"Green:"+right$("00"+str$(colg),3)+" "10713 a$=a$+"Blue:"+right$("00"+str$(colb),3)+"      "10714 printat(5,58,a$):a$=right$("00"+str$(col),3):printat(5,49,"Color:"+a$)10719 ?1=010720 endproc 10750 proc processjoy()10760 local j:?1=010770 j=?($DC00):x=0:y=0:b1=010780 if (j&1)=0 then y=-1:rem "UP"10790 if (j&2)=0 then y=1:rem "DOWN"10800 if (j&4)=0 then x=-1:rem "LEFT"10810 if (j&8)=0 then x=1:rem "RIGHT"10820 if (j&16)=0 then b1=1:rem "BUTTON1"10890 endproc 10900 proc dma_linear(src,dst,xfr)10910 local shi:local smd:local slo10920 local dhi:local dmd:local dlo10930 local dma:dma=$DF00:?1=010940 ?dma=1:rem "DMA Linear copy"10950 shi=src\65536:smd=((src-(shi*65536))\256):slo=(src&$FF)10960 dhi=dst\65536:dmd=((dst-(dhi*65536))\256):dst=(dst&$FF)10970 xhi=xfr\65536:xmd=((xfr-(xhi*65536))\256):xlo=(xfr&$FF)10980 ?(dma+4)=slo:?(dma+5)=smd:?(dma+6)=shi10990 ?(dma+8)=dlo:?(dma+9)=dmd:?(dma+10)=dhi11000 ?(dma+12)=xlo:?(dma+13)=xmd:?(dma+14)=xhi11010 ?dma=(128+1)11020 endproc 11050 proc dma_rect(src,dst,wid,hei,strs,strd)11060 local shi:local smd:local slo11070 local dhi:local dmd:local dlo11080 local whi:local wlo:local hhi:local hlo11090 local sthi:local stlo11100 dma=$DF00:?1=011110 ?dma=3:rem "DMA rect copy"11120 shi=src\65536:smd=((src-(shi*65536))\256):slo=(src&$FF)11130 dhi=dst\65536:dmd=((dst-(shi*65536))\256):dst=(mem&$FF)11140 whi=wid\256:wlo=wid&$FF11150 hhi=hei\256:hlo=hei&$FF11160 stxhi=strx\256:stxlo=strs&$FF11170 styhi=stry\256:stylo=strd&$FF11180 ?(dma+4)=slo:?(dma+5)=smd:?(dma+6)=shi11190 ?(dma+8)=dlo:?(dma+9)=dmd:?(dma+10)=dhi11200 ?(dma+12)=wlo:?(dma+13)=whi:?(dma+14)=hlo:?(dma+15)=hhi11210 ?(dma+16)=stxlo:?(dma+17)=stxhi:?(dma+18)=stylo:?(dma+19)=styhi11220 ?dma=(128+3)11230 endproc 10240 proc dma_fill(dst,xfr,byte)10250 rem "DMA Linear Fill"10260 local dma:local dhi:local dmd:local dlo10265 dma=$DF00:?1=010270 ?dma=5:rem "Linear dma Fill"10280 dhi=dst\65536:dmd=((dst-(shi*65536))\256):dlo=(dst&$FF)10290 xhi=xfr\65536:xmd=((xfr-(xhi*65536))\256):xlo=(xfr&$FF)10300 ?(dma+1)=byte:rem "Fill with byte 0"10310 ?(dma+$A)=dhi:?(dma+9)=dmd:?(dma+8)=dlo10320 ?(dma+$E)=xhi:?(dma+$D)=xmd:?(dma+$C)=xlo10330 ?dma=(128+5):rem "Init linear fill"10340 endproc 11350 proc printat(x,y,a$)11360 local pos:pos=x+y*80:?1=2:rem "Set I/O to text memory"11370 for c=0 to len(a$)-1:?(pos+c+$C000)=asc(mid$(a$,c+1,1)):next 11380 ?1=011390 endproc 11400 proc theme()11410 ?1=011420 ?$D005=028:?$D006=014:?$D007=007:rem "28,14,7"11430 ?$D00D=027:?$D00E=000:?$D00F=011:rem "54,43,0"11440 ?$D004=1:?$D008=00:?$D009=0011450 endproc 11500 proc statmsg(b$)11510 printat(0,0,"                                                                                ")11520 printat(0,0,b$)11530 endproc 11550 proc drawnexticon(x,y,col)11555 local c:local d:local e:local a11560 for c=0 to 1511570 for d=0 to 111580 read a11590 for e=0 to 711600 if a&128 then plot color col to d*8+e+x,c+y11610 a=a<<111620 next 11630 next 11640 next 11650 endproc 11660 proc xpeek(addr)11670 local block:block=addr\8192:local prevblock:rem "calculate block"11675 local offset:offset=addr-(block*8192):rem "Calculate offset"11680 ?0=179:rem "Enable Edit on Memory LUT 0"11685 prevblock=?$E:rem "Save old block under I/O"11690 ?$E=block:rem "Map memory under I/O block to $30000"11700 ?1=4:rem "enable access to ram under I/O block (7th block!)"11710 peekvalue=?($C000+offset)11715 ?1=0:rem "Set I/O access on block 7"11720 ?$E=prevblock:rem "Restore previous memory block under I/O"11730 endproc 20000 rem "PALETTE DATA"20005 data 0,0,0,0,0,0,32,32,32,64,64,64,96,96,96,128,128,12820010 data 160,160,160,200,200,200,98,93,84,133,117,10120020 data 158,140,121,174,161,137,187,175,164,204,195,177,234,219,20120030 data 255,243,214,88,49,38,115,61,59,136,80,65,154,98,7620040 data 173,110,81,213,141,107,251,170,132,255,206,127,0,39,5320050 data 0,56,80,0,77,94,11,102,127,0,111,137,50,140,16720060 data 36,174,214,136,214,255,102,43,41,148,54,58,182,77,7020070 data 205,94,70,227,120,64,249,155,78,255,188,78,255,233,7320080 data 40,43,74,58,69,104,97,95,132,122,119,153,134,144,17820090 data 150,178,217,199,214,255,198,236,255,000,34,25,0,50,3320100 data 23,74,27,34,89,24,47,105,12,81,136,34,125,164,4520110 data 166,204,52,024,31,47,35,50,77,37,70,107,54,107,13820120 data 049,142,184,65,178,227,82,210,255,135,234,253,26,51,4420130 data 47,63,56,56,81,64,50,92,64,65,116,85,73,137,9620140 data 85,182,125,145,218,161,94,7,17,130,33,34,182,60,6120150 data 228,92,93,255,118,119,255,155,156,255,187,189,255,219,22020160 data 43,49,71,64,71,90,87,92,112,110,115,136,132,138,15720170 data 168,174,194,192,199,219,227,234,255,70,24,19,94,46,4120180 data 138,82,77,174,107,96,199,130,108,216,151,117,236,169,13620190 data 255,194,171,49,34,42,74,53,60,94,70,70,114,90,8120200 data 126,108,84,158,138,110,192,165,136,221,191,154,76,10,3820210 data 96,31,61,118,54,89,151,84,117,185,109,145,193,120,17020220 data 219,153,191,248,186,218,0,46,73,0,64,81,0,81,9820230 data 0,107,109,0,130,121,0,160,135,0,191,163,0,222,21820240 data 69,49,37,97,74,60,126,97,68,153,121,81,178,144,9820250 data 204,169,110,232,203,130,251,234,163,95,23,38,110,36,5220260 data 144,70,71,167,96,87,181,116,108,206,141,132,226,160,14920270 data 253,189,178,50,53,88,74,82,128,100,101,157,120,119,19320280 data 142,140,226,156,155,239,184,174,255,220,212,255,145,23,4120290 data 157,43,59,196,59,82,217,74,105,248,93,128,255,141,17520300 data 255,166,197,255,188,209,73,37,28,99,52,50,124,75,7120310 data 152,95,90,172,114,110,187,134,129,210,157,151,229,173,16620320 data 041,62,0,62,79,10,73,93,27,91,105,38,113,116,4420330 data 150,141,47,180,170,65,208,204,86,98,42,0,117,59,920340 data 133,79,18,158,101,32,186,136,46,209,170,57,232,210,7520350 data 255,246,79,38,35,61,59,56,85,86,80,111,117,104,11020360 data 145,122,123,179,151,131,207,175,142,254,223,177,29,44,6720370 data 46,61,71,57,77,60,76,95,51,88,113,44,107,132,4520380 data 120,158,36,140,180,57,91,28,11,106,50,27,125,68,4620390 data 148,86,63,169,109,84,191,126,99,215,147,116,244,178,14720400 data 45,81,71,71,101,90,91,123,105,113,149,125,135,174,14620410 data 138,193,150,169,215,182,209,250,221,0,27,64,3,49,9520420 data 7,72,124,16,93,162,20,118,192,64,151,234,85,177,24120430 data 109,204,255,85,71,105,118,93,115,151,116,136,185,140,14720440 data 213,163,154,235,177,165,255,194,180,255,219,210,39,29,4820450 data 60,49,81,88,74,127,121,100,160,149,133,185,169,150,21820460 data 186,171,247,209,189,254,30,36,80,40,51,93,45,61,11420470 data 61,80,131,81,101,174,98,116,197,108,130,205,144,156,23520480 data 255,0,0,0,255,255,255,0,255,0,255,0,0,128,25520490 data 255,255,0,255,128,0,255,128,128,128,0,0,0,128,12820500 data 128,0,128,0,128,0,0,0,255,128,128,0,128,62,0,255,255,25520510 rem "Sprite Pointer Data"20520 data 0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,7,7,1,0,0,1,1,7,7,7,1,0,0,0,020540 data 1,7,7,7,1,1,7,7,7,1,4,7,1,0,0,0,1,4,7,7,7,7,1,4,7,7,7,7,1,0,0,020560 data 0,1,4,7,7,7,7,7,7,7,1,7,7,1,0,0,0,0,1,4,7,7,7,7,1,7,7,1,7,1,0,020580 data 0,0,1,1,4,7,7,7,7,1,7,7,7,1,1,0,0,0,1,4,1,4,7,7,7,7,7,7,1,7,7,120600 data 0,0,1,4,4,4,7,7,7,7,7,7,7,7,7,1,0,0,0,1,4,4,4,7,7,7,7,7,7,4,1,020620 data 0,0,0,0,1,4,4,4,4,1,7,7,4,1,0,0,0,0,0,0,0,1,1,1,1,4,7,4,1,0,0,020640 data 0,0,0,0,0,0,0,1,4,4,4,1,0,0,0,0,0,0,0,0,0,0,0,1,4,4,1,0,0,0,0,020660 data 0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,020670 rem "ICONs Data"20680 data 0,0,255,224,224,96,235,100,224,108,127,223,251,191,241,223:rem "SAVE"20690 data 251,236,255,228,249,224,249,224,249,224,0,0,0,0,0,020700 data 0,0,255,224,224,96,235,96,224,104,127,140,251,190,241,191:rem "LOAD"20710 data 251,190,255,140,249,232,249,224,249,224,0,0,0,0,0,020720 data 0,0,0,4,0,4,0,31,0,4,96,100,144,144,63,192:rem "ADD"20730 data 118,224,182,208,191,208,176,208,25,128,0,0,0,0,0,020740 data 0,0,128,96,68,128,17,72,118,224,182,208,189,128,176,0:rem "DEL"20750 data 24,68,0,40,0,16,0,40,0,68,0,0,0,0,0,020760 data 0,0,7,0,4,128,124,64,64,32,64,16,64,48,124,112:rem "NEXT"20770 data 124,240,127,224,127,192,7,128,7,0,0,0,0,0,0,020780 data 0,0,7,0,9,0,17,240,32,16,64,16,96,16,113,240:rem "PREV"20790 data 121,240,63,240,31,240,15,0,7,0,0,0,0,0,0,020800 data 0,0,0,0,234,184,138,144,196,144,138,144,234,144,0,0:rem "EXIT"20810 data 0,64,0,96,15,240,15,248,15,240,0,96,0,64,0,020820 data 0,0,31,0,55,142,102,206,124,95,204,78,238,196,191,128:rem "SAVE Palette"20830 data 159,63,254,33,78,33,107,63,57,51,31,63,14,59,0,020840 data 0,0,31,0,55,132,102,206,124,95,204,78,238,206,191,128:rem "LOAD Palette"20850 data 159,63,254,33,78,33,107,63,57,51,31,63,14,59,0,020860 data 0,0,0,30,0,60,0,120,1,176,3,192,3,192,3,128:rem "PEN"20870 data 4,0,0,0,44,140,13,222,0,158,0,12,0,0,0,020880 data 0,0,15,192,8,160,120,144,72,248,72,8,75,168,72,8:rem "COPY"20890 data 75,104,72,8,72,8,79,248,64,64,127,192,0,0,0,020900 data 0,0,15,0,57,192,79,32,64,32,64,0,65,254,65,2:rem "PASTE"20910 data 65,122,65,2,65,90,65,2,65,106,61,2,1,254,0,020920 data 0,0,42,170,64,0,0,1,64,0,29,29,81,20,17,25:rem "CLR"20930 data 81,20,29,213,64,0,0,1,64,0,42,170,0,0,0,020940 data 0,0,114,170,64,0,98,8,64,0,98,8,64,0,114,170:rem "GRID"20950 data 64,0,98,8,64,0,98,8,64,0,114,170,0,0,0,020960 data 0,0,2,0,6,0,14,0,30,0,62,0,102,48,74,88:rem "MIRROR X"20970 data 66,120,102,48,126,0,124,0,120,0,112,0,96,0,64,020980 data 0,0,0,0,0,192,1,224,1,96,0,192,0,0,3,255:rem "MIRROR Y"20990 data 7,62,14,156,30,24,63,48,127,224,0,0,0,0,0,021000 data 1,0,3,128,7,192,1,0,1,0,33,8,96,12,252,126:rem "MOVE"21010 data 96,12,33,8,1,0,1,0,7,192,3,128,1,0,0,021020 data 3,128,3,224,3,240,0,120,0,56,0,28,0,28,0,28:rem "ROTATE"21030 data 62,28,56,56,60,120,63,240,47,224,35,128,0,0,0,0