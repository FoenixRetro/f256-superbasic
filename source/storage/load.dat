5  cls
10 i=0:sx=5:sy=5:xo=sx*4:yo=sy*3:scount=0:smax=0
20 brush=0:curspr=0:grid=0:fe=0:spt=$D900:jbase=($DC00+n)
30 ?1=0:?$d000=63: REM "Enable all graphics elements in vicky"
40 bitmap on:bitmap clear 0:theme()
45 lut=$D000
50 FOR c=0 TO 255
60 read r,g,b
70 palette c,r,g,b
100 NEXT
110 col=1
120 DMA_Fill($30000,$FC00,0):REM "Erase memory FOR 63 32x32 sprites"
130 work=alloc(1024+257):work2=(int(work/256)+1)*256
140 FOR c=0 to (1024+257):?(work+c)=0:NEXT
150 sprcursor(): REM "load sprites FOR markers & pointer"
160 DMA_linear(work2,$30200,1024)
170 setspr(0,$30300,2):?spt=65
180 setspr(1,$30200,2):?(spt+8)=65
190 setspr(5,$30200,2):?(spt+40)=65
200 setspr(6,$30200,2):?(spt+48)=65
210 setspr(7,$30200,2):?(spt+56)=65
220 FOR c=0 to 1023:?(work2+c)=0:NEXT
230 ptrx=32+xo+(sx*20):ptry=32+yo+(sy*16)
240 movespr(0,ptrx,ptry)
250 REM "show sprite to edit"
260 setspr(2,work2,2)
270 movespr(2,272,122)
290 ?(spt+16)=1 : REM "SPRITE SIZE=32x32"
310 gosub 3000: REM "setup ml routines"
320 ?(l+4)=0:REM "turn off border"
330 col=8
340 rect solid colour 248 sx*4,(sy*40)+1 to (sx*5)+255,(sy*41)
350 rect solid colour 251 sx*4,(sy*42)+1 to (sx*5)+255,(sy*43)
360 rect solid colour 252 sx*4,(sy*44)+1 to (sx*5)+255,(sy*45)
370 drawpal()
380 LINE (xo+1),(yo+1) color 72 to (xo+sx-1),(yo+sy-1)
390 REM "LINE (xo+1),(yo+sy-1) color 72 to (xo+sx-1),(yo+1)"
400 clrarea(32): REM "create a 32x32 grid"
410 switchcolor(32)
420 printat(0,5,"Save"):printat(0,9,"Load")
430 printat(0,13,"Add"):printat(0,17,"Del")
440 printat(0,21,"Next"):printat(0,25,"Prev")
450 printat(0,29,"Exit")
460 printat(16,45,"Pen"):printat(21,45,"Copy"):printat(26,45,"Past")
470 printat(31,45,"Clr"):printat(36,45,"Grid"):printat(41,45,"MirX")
480 printat(46,45,"MirY"):printat(51,45,"Rot>"):printat(56,45,"Rot<")
600 REM "--------------- MAIN LOOP -------------------------"
610 REM "READ JOYSTICK INPUT"
620 processJoy()
630 ptrx=ptrx+x:ptry=ptry+y
640 IF ptrx>351 THEN ptrx=351
650 IF ptry>271 THEN ptry=271
660 IF ptrx<32 THEN ptrx=32
670 IF ptry<32 THEN ptry=32
680 movespr(0,ptrx,ptry)
690 xc=INT((ptrx-32)/sx):yc=INT((ptry-32)/sy)
695 REM "a$='x:'+str$(xc)+' y:'+str$(yc)"
697 REM "printat(0,0,a$)"
700 IF b1=0 THEN GOTO 1000
710 REM "mouse button 1 pressed"
720 REM "IF y>=40 THEN 5700: REM modify current palette color"
730 IF yc>34 THEN GOTO 1000: REM "horizontal menu"
740 IF xc<3 THEN GOTO 2000:REM "menu items"
750 IF xc<4 THEN GOTO 1000: REM "Do Nothing"
760 REM "select color from palette" 
770 IF xc<12
780 	n=((xc)-4)+8*((yc)-3)
790 	switchcolor(n)
800 	GOTO 1000
810 ENDIF
820 IF xc=12 THEN GOTO 1000:REM "do nothing"
830 IF xc<=44 
840 	IF yc>2
850 		brush=0
860 		FOR c=0 TO brush
865				FOR d=0 TO brush
870 				IF xc+c>44 THEN GOTO 920
880 				IF yc+d>34 THEN GOTO 920
890 				px=(xc+c)*sx:py=(yc+d)*sy
900 				rect solid px+1,py+1 COLOR col TO px+sx-1,py+sy-1
910 				POKE work2+(xc+c-13)+(yc+d-3)*32,col
920 			NEXT
925 		NEXT
930 	ENDIF
940 	GOTO 1000
950 ENDIF
960 REM "IF x<=55 THEN 2570"
1000 GOTO 600
1010 REM "---------------------------------END MAIN LOOP ---"
2000 REM "PROCESS MENU ITEMS"
2010 IF yc>27 THEN GOTO 1000: REM "return to menu"
2020 IF yc>23 THEN end : REM "Exit-----------"
2030 IF yc>20 : REM "Prev-------------"
2035 	IF scount>0 
2040 		DMA_linear(work2,$30400+(scount*1024),1023): REM "move workspr to sprmem"
2050 		scount=scount-1: REM "move to previous sprite"
2060 		DMA_linear($30400+(scount*1024),work2,1023): REM "move sprmem to workspr"
2070 		processJoy():IF b1=1 THEN GOTO 2070: REM "wait FOR button release"
2080 		a$="Editing Sprite "+str$(scount+1)+"                   ":printat(0,0,a$)
2085 		call sprshow
2090 	ELSE 
2100 		processJoy():IF b1=1 THEN GOTO 2100: REM "wait FOR button release"
2110 		a$="Already at First Sprite "+str$(scount+1)+"!         ":printat(0,0,a$)
2120 	ENDIF
2125 	GOTO 1000
2130 ENDIF
2140 IF yc>16 : REM "Next-------------"
2150 	IF scount<smax 
2160 		DMA_linear(work2,$30400+(scount*1024),1023): REM "move workspr to sprmem"
2170 		scount=scount+1: REM "move to previous sprite"
2180 		DMA_linear($30400+(scount*1024),work2,1023): REM "move sprmem to workspr"
2190 		processJoy():IF b1=1 THEN GOTO 2190: REM "wait FOR button release"
2200 		a$="Editing Sprite "+str$(scount+1)+"                   ":printat(0,0,a$)
2205 		call sprshow
2210 	ELSE 
2220 		processJoy():IF b1=1 THEN GOTO 2220: REM "wait FOR button release"
2230 		a$="Already at Last Sprite "+str$(scount+1)+"!     ":printat(0,0,a$)
2240 	ENDIF
2245 	GOTO 1000
2250 ENDIF
2260 IF yc>13  :REM "Delete------------"
2270 	processJoy():IF b1=1 THEN GOTO 2270: REM "wait FOR button release"
2280 	IF smax>0 
2290 		DMA_linear(work2,$30400+(scount*1024),1023): REM "move workspr to sprmem"
2300 		scount=smax:bcount=0
2310 		DMA_linear($30400+(scount*1024),work2,1023): REM "move sprmem to workspr"
2320 		printat(0,0,"press Button to delete Sprite, or move stick to cancel.")
2330 		processJoy():IF x+y+b1=0 THEN GOTO 2330
2340 		IF b1=1 
2350 			processJoy():IF b1=1 THEN GOTO 2350: REM "wait FOR button release"
2370 			a$="Deleting Sprite "+str$(scount+1)+"...                               "
2430 			smax=smax-1:scount=smax
2440 			DMA_linear($30400+(scount*1024),work2,1023): REM "move sprmem to workspr"
2445 			printat(0,0,"                                                         ")
2446 			a$="Editing Sprite "+str$(scount+1)+"                   ":printat(0,0,a$)
2447 			call sprshow
2450 		ELSE 
2460 			printat(0,0,"Operation Canceled.                                      ")
2470 		ENDIF
2480 	else
2490 		printat(0,0,"Can't delete first sprite                                ")
2500 	ENDIF
2510 	GOTO 1000
2520 ENDIF
2530 IF yc>10 : REM "Add Sprite-----------"
2540 	IF scount<62
2550 		DMA_linear(work2,$30400+(scount*1024),1023): REM "move workspr to sprmem"
2560 		smax=smax+1:scount=smax: REM "add sprite @end and move there"
2570 		DMA_linear($30400+(scount*1024),work2,1023): REM "move sprmem to workspr"
2580 		processJoy():IF b1=1 THEN GOTO 2580: REM "wait FOR button release"
2590 		a$="Editing Sprite "+str$(scount+1)+"                   ":printat(0,0,a$)
2595 		call sprshow
2600 	else
2610 		processJoy():IF b1=1 THEN GOTO 2610: REM "wait FOR button release"
2620 		a$="Max number of Sprites "+str$(scount+1)+"!     ":printat(0,0,a$)
2630 	ENDIF
2640 	GOTO 1000
2650 ENDIF
2660 IF yc>7 THEN GOTO 1000: REM "Load----------"
2670 IF yc>4 THEN GOTO 1000: REM "Save----------"
2680 GOTO 1000
3000 REM "---------------------------------------------------"
3010 REM "Machine lenguage routine to show sprite on bitmap"
3020 sprshow=alloc(256):sqsize=alloc(1):srow=alloc(1)
3025 whi=work2\256:wlo=work2 & $FF
3030 FOR c=0 to 1
3040 	assemble sprshow,c
3060 	lda $E : REM "Read bank under I/O memory"
3070 	pha	  : REM "Store value on stack"
3080 	lda #8 
3090 	sta $E :REM "Configure bank under I/O to bitmap area" 
3100 	ldx #4:REM "Expose memory under I/O area"
3110 	stx $1
3120 	stx sqsize : REM "store # pixels to represent one sprite pixel in bitmap"
3130 	ldy #00    : REM "Initialice column counter"
3150 	stz srow   : REM "Initialize row counter"
3170 	.loop1 lda work2,y
3180 	.scradd sta $d441,x : REM "Put pixel in bitmap address + offset $d441"
3190 	dex
3200 	cpx #00
3210 	bne loop1
3220 	iny
3230 	cpy #32
3240 	beq samerow  
3250 	lda #5
3260 	jsr sadd
3270 	ldx #4
3280 	jmp loop1
3290 	.samerow ldx sqsize
3300 	dex
3310 	cpx #00
3320 	beq nextrow
3330	stx sqsize
3340	lda #165
3350	jsr sadd
3360	ldy #00
3370 	ldx #4
3380	jmp loop1
3390	.nextrow ldx srow : REM "Increment row counter"
3400	inx
3410	stx srow
3420	cpx #32		:REM "Rows to process"
3430	beq cleanup
3440	lda #243    :REM "add enough offset to position @ nxt row"
3450	jsr sadd
3460	lda #242
3465	jsr sadd
3470 	ldy #00     :REM "init column counter"
3475 	ldx #4		:REM "init samepixel counter"
3480 	stx sqsize
3490 	clc
3500	lda #32
3510	adc loop1+1
3520 	sta loop1+1
3530	lda #0
3540	adc loop1+2
3550 	sta loop1+2
3560	clc
3590	jmp loop1
3600 	.cleanup stz $1 :REM "Restore memory segment to I/O"
3610 	pla             :REM "restore bank underlying I/O from stack"
3620 	sta $E
3630	lda #$41		:REM "Restore initial bitmap address"
3640	sta scradd+1
3650	lda #$D4
3660	sta scradd+2
3670	lda #wlo
3680	sta loop1+1
3690	lda #whi
3700	sta loop1+2
3710 	rts
3720 	REM "add offset to Bitmapp address subroutine---------"
3730 	REM "Modifies accumulator and carry flag"
3740	.sadd clc	 : REM "requires A to have value to add"
3750	adc scradd+1 : REM "Modify initial Bitmap address" 
3760 	sta scradd+1
3770 	lda #0
3780 	adc scradd+2
3790 	sta scradd+2
3800 	cmp #224   
3810 	bmi retadd
3820 	REM "Bank change routine"
3830 	lda #192 
3840 	sta scradd+2
3850 	inc $E
3860 	.retadd clc
3870 	rts
3880 	REM "add offset to Bitmapp address subroutine---------"
3890 NEXT
3900 RETURN
10000 REM "---------------------------------------------------"
10005 REM "PROCEDURES"
10010 PROC sprcursor()
10020 	sx=5:sy=5
10030 	REM "Box sprite 16x16"
10040 	FOR c=0 TO sx:add=work2+c:poke add,255:NEXT
10050 	FOR c=1 TO sy-1:add=work2+c*16:? add=255:?(add+sx)=255:NEXT
10060 	FOR c=0 TO sx:add=work2+c+(sy*16):poke add,255:NEXT
10070 	REM "Hand Sprite 16x16"
10080 	FOR c=0 to 255:read b:poke work2+$100+c,b:NEXT 
10090 ENDPROC   
10100 PROC setspr(num, mem, size)
10102 	LOCAL shi: LOCAL smd: LOCAL slo: LOCAL sval: LOCAL sp
10105 	shi=int(mem/65536):smd=int((mem-(shi*65536))/256):slo=(mem & $FF)
10110 	?1=0:sp=$D900: sp=sp+(num*8)
10120 	size = size & 3: sval = size * 32 
10130 	?sp=sval : REM "Enable sprite control reg"
10140 	?(sp+1)=slo:?(sp+2)=smd:?(sp+3)=shi
10147 ENDPROC    
10150 PROC showspr(num, show)
10160 	?1=0:LOCAL sp
10165 	sp=$D900:sp=sp+(num*8)
10170 	show = show & 1
10175 	print num,?sp,(? sp) ^ show
10177 	? sp=(? sp) ^ show
10180 ENDPROC   
10200 PROC movespr(num, x, y)
10210 	?1=0:LOCAL sp
10215 	sp=$D900:sp=sp+(num*8)
10220 	?(sp+4)=x & $FF: ?(sp+5)=int(x/256)
10230 	?(sp+6)=y & $FF: ?(sp+7)=int(y/256)
10240 ENDPROC   
10330 PROC drawpal()
10335 	xi=0:xf=0:yi=0:yf=0:xo=sx*4:yo=sy*3:i=0
10340 	FOR b=0 TO 31
10350 		FOR c=0 TO 7
10360 			xi=(c*sx)+(xo+1)
10365 			xf=((c+1)*sx)+xo
10370 			yi=(b*sy)+(yo+1)
10375 			yf=((b+1)*sy)+yo
10380 			rect solid xi,yi color i to (xf-1),(yf-1)
10390 			i=i+1
10400 		NEXT
10405 	NEXT
10410 ENDPROC   
10460 PROC cfgMemory(addr)
10470 	LOCAL block:block=int(addr/8192): REM "print block"
10480 	?0=128: REM "Enable Edit on Memory LUT 0"
10490 	?$E=block: REM "Map 7th block of the LUT to $30000"
10500 	?0=0:?1=4: REM "enable access to ram under I/O block (7th block!)"
10510 	REM "FOR c=512 to 1536:?(c+$C000)=64:next"
10520 	?1=0 REM "Set I/O access on block 7"
10530 ENDPROC   
10560 PROC clrarea(size)
10570 	xo=sx*13
10580 	rect xo,yo solid color 0 to (xo+sx*size),(yo+sy*size)
10590 	FOR b=0 TO size
10600 		LINE (xo+b*sx),yo color 3 to (xo+b*sx),(yo+sy*size)
10610 		LINE xo,(yo+b*sy) color 3 to (xo+sx*size),(yo+sy*b)
10620 	NEXT
10630 ENDPROC   
10650 PROC switchcolor(n)
10655 	col=n:?1=1:l=$d000:l=l+(col*4)
10660 	colb=?l:colg=?(l+1):colr=?(l+2)
10670 	movespr(5,sx*4+colr+32,sy*40+32)
10680 	movespr(6,sx*4+colg+32,sy*42+32)
10690 	movespr(7,sx*4+colb+32,sy*44+32)
10700 	movespr(1,(((col & 7)+4)*sx+32),((int(col/8)+3)*sy+32))
10710 	rect (sx*4),(sy*36) color n to (sx*12),(sy*39)
10715 	?1=0
10720 ENDPROC    
10750 PROC processjoy()
10760 	LOCAL j:?1=0
10770 	j=?($DC00):x=0:y=0:b1=0
10780 	IF (j & 1)=0 THEN y=-1 : REM "UP"
10790 	IF (j & 2)=0 THEN y=1  : REM "DOWN"
10800 	IF (j & 4)=0 THEN x=-1 : REM "LEFT"
10810 	IF (j & 8)=0 THEN x=1  : REM "RIGHT"
10820 	IF (j & 16)=0 THEN b1=1: REM "BUTTON1"
10890 ENDPROC    
10900 PROC DMA_linear(src,dst,xfr)
10910 	LOCAL shi: LOCAL smd: LOCAL slo
10920 	LOCAL dhi: LOCAL dmd: LOCAL dlo
10930 	LOCAL dma:dma=$DF00:?1=0
10940 	?dma=1: REM "Enable DMA Linear copy"
10950 	shi=int(src/65536):smd=int((src-(shi*65536))/256):slo=(src & $FF)
10960 	dhi=int(dst/65536):dmd=int((dst-(dhi*65536))/256):dst=(dst & $FF)
10970 	xhi=int(xfr/65536):xmd=int((xfr-(xhi*65536))/256):xlo=(xfr & $FF)
10980 	?(dma+4)=slo:?(dma+5)=smd:?(dma+6)=shi
10990 	?(dma+8)=dlo:?(dma+9)=dmd:?(dma+10)=dhi
11000 	?(dma+12)=xlo:?(dma+13)=xmd:?(dma+14)=xhi
11010 	?dma=(128+1) 
11020 ENDPROC   
11050 PROC DMA_rect(src,dst,wid,hei,strx,stry)
11060 	local shi: local smd: local slo
11070 	local dhi: local dmd: local dlo
11080 	local whi:local wlo:local hhi:local hlo 
11090 	local sthi: local stlo
11100 	dma=$DF00:?1=0
11110 	?dma=3: rem "Enable DMA rect copy"
11120 	shi=int(src/65536):smd=int((src-(shi*65536))/256):slo=(src & $FF)
11130 	dhi=int(dst/65536):dmd=int((dst-(shi*65536))/256):dst=(mem & $FF)
11140 	whi=int(wid/256):wlo=wid & $FF
11150 	hhi=int(hei/256):hlo=hei & $FF
11160 	stxhi=int(strx/256):stxlo=strx & $FF
11170 	styhi=int(stry/256):stylo=stry & $FF
11180 	?(dma+4)=slo:?(dma+5)=smd:?(dma+6)=shi
11190 	?(dma+8)=dlo:?(dma+9)=dmd:?(dma+10)=dhi
11200 	?(dma+12)=wlo:?(dma+13)=whi:?(dma+14)=hhi:?(dma+15)=hlo
11210 	?(dma+16)=stxlo:?(dma+17)=stxhi:?(dma+18)=styhi:?(dma+19)=stylo
11220 	?dma=(128+3) 
11230 ENDPROC
10240 PROC DMA_Fill(dst,xfr,byte)
10250 	REM "Enable DMA Linear Fill"
10260 	LOCAL dma:LOCAL dhi:LOCAL dmd:LOCAL dlo
10265 	dma=$DF00:?1=0
10270 	?dma=5: REM "Enable linear dma Fill"
10280 	dhi=int(dst/65536):dmd=int((dst-(shi*65536))/256):dlo=(dst & $FF)
10290 	xhi=int(xfr/65536):xmd=int((xfr-(xhi*65536))/256):xlo=(xfr & $FF)
10300 	?(dma+1)=byte: REM "Fill with byte 0"
10310 	?(dma+$a)=dhi:?(dma+9)=dmd:?(dma+8)=dlo
10320 	?(dma+$e)=xhi:?(dma+$d)=xmd:?(dma+$c)=xlo
10330 	? dma=(128+5):REM "Init linear fill"
10340 ENDPROC   
11350 PROC printat(x,y,a$)
11360 	LOCAL pos:pos=x+y*80:?1=2:REM "Set I/O to text memory"
11370 	FOR c=0 to len(a$):?(pos+c+$C000)=asc(mid$(a$,c+1,1)):next
11380 	?1=0
11390 ENDPROC   
11400 PROC theme()
11410 	?1=0
11420 	?$D005=028:?$D006=014:?$D007=007:REM "Border color BGR"
11430 	?$D00D=054:?$D00E=043:?$D00F=000:REM "Background color BGR"
11440 	?$D004=1:?$D008=04:?$D009=04:REM "Set Border @16Px"
11450 ENDPROC 
20000 REM "PALETTE DATA"
20005 DATA 0,0,0,0,0,0,32,32,32,64,64,64,96,96,96,128,128,128
20010 DATA 160,160,160,200,200,200,98,93,84,133,117,101
20020 DATA 158,140,121,174,161,137,187,175,164,204,195,177,234,219,201
20030 DATA 255,243,214,88,49,38,115,61,59,136,80,65,154,98,76
20040 DATA 173,110,81,213,141,107,251,170,132,255,206,127,0,39,53
20050 DATA 0,56,80,0,77,94,11,102,127,0,111,137,50,140,167
20060 DATA 36,174,214,136,214,255,102,43,41,148,54,58,182,77,70
20070 DATA 205,94,70,227,120,64,249,155,78,255,188,78,255,233,73
20080 DATA 40,43,74,58,69,104,97,95,132,122,119,153,134,144,178
20090 DATA 150,178,217,199,214,255,198,236,255,000,34,25,0,50,33
20100 DATA 23,74,27,34,89,24,47,105,12,81,136,34,125,164,45
20110 DATA 166,204,52,024,31,47,35,50,77,37,70,107,54,107,138
20120 DATA 049,142,184,65,178,227,82,210,255,135,234,253,26,51,44
20130 DATA 47,63,56,56,81,64,50,92,64,65,116,85,73,137,96
20140 DATA 85,182,125,145,218,161,94,7,17,130,33,34,182,60,61
20150 DATA 228,92,93,255,118,119,255,155,156,255,187,189,255,219,220
20160 DATA 43,49,71,64,71,90,87,92,112,110,115,136,132,138,157
20170 DATA 168,174,194,192,199,219,227,234,255,70,24,19,94,46,41
20180 DATA 138,82,77,174,107,96,199,130,108,216,151,117,236,169,136
20190 DATA 255,194,171,49,34,42,74,53,60,94,70,70,114,90,81
20200 DATA 126,108,84,158,138,110,192,165,136,221,191,154,76,10,38
20210 DATA 96,31,61,118,54,89,151,84,117,185,109,145,193,120,170
20220 DATA 219,153,191,248,186,218,0,46,73,0,64,81,0,81,98
20230 DATA 0,107,109,0,130,121,0,160,135,0,191,163,0,222,218
20240 DATA 69,49,37,97,74,60,126,97,68,153,121,81,178,144,98
20250 DATA 204,169,110,232,203,130,251,234,163,95,23,38,110,36,52
20260 DATA 144,70,71,167,96,87,181,116,108,206,141,132,226,160,149
20270 DATA 253,189,178,50,53,88,74,82,128,100,101,157,120,119,193
20280 DATA 142,140,226,156,155,239,184,174,255,220,212,255,145,23,41
20290 DATA 157,43,59,196,59,82,217,74,105,248,93,128,255,141,175
20300 DATA 255,166,197,255,188,209,73,37,28,99,52,50,124,75,71
20310 DATA 152,95,90,172,114,110,187,134,129,210,157,151,229,173,166
20320 DATA 041,62,0,62,79,10,73,93,27,91,105,38,113,116,44
20330 DATA 150,141,47,180,170,65,208,204,86,98,42,0,117,59,9
20340 DATA 133,79,18,158,101,32,186,136,46,209,170,57,232,210,75
20350 DATA 255,246,79,38,35,61,59,56,85,86,80,111,117,104,110
20360 DATA 145,122,123,179,151,131,207,175,142,254,223,177,29,44,67
20370 DATA 46,61,71,57,77,60,76,95,51,88,113,44,107,132,45
20380 DATA 120,158,36,140,180,57,91,28,11,106,50,27,125,68,46
20390 DATA 148,86,63,169,109,84,191,126,99,215,147,116,244,178,147
20400 DATA 45,81,71,71,101,90,91,123,105,113,149,125,135,174,146
20410 DATA 138,193,150,169,215,182,209,250,221,0,27,64,3,49,95
20420 DATA 7,72,124,16,93,162,20,118,192,64,151,234,85,177,241
20430 DATA 109,204,255,85,71,105,118,93,115,151,116,136,185,140,147
20440 DATA 213,163,154,235,177,165,255,194,180,255,219,210,39,29,48
20450 DATA 60,49,81,88,74,127,121,100,160,149,133,185,169,150,218
20460 DATA 186,171,247,209,189,254,30,36,80,40,51,93,45,61,114
20470 DATA 61,80,131,81,101,174,98,116,197,108,130,205,144,156,235
20480 DATA 255,0,0,0,255,255,255,0,255,0,255,0,0,128,255
20490 DATA 255,255,0,255,128,0,255,128,128,128,0,0,0,128,128
20500 DATA 128,0,128,0,128,0,0,0,255,128,128,0,128,62,0,255,255,255
20510 REM "Sprite Pointer Data"
20520 DATA 0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0
20530 DATA 1,7,7,1,0,0,1,1,7,7,7,1,0,0,0,0
20540 DATA 1,7,7,7,1,1,7,7,7,1,4,7,1,0,0,0
20550 DATA 1,4,7,7,7,7,1,4,7,7,7,7,1,0,0,0
20560 DATA 0,1,4,7,7,7,7,7,7,7,1,7,7,1,0,0
20570 DATA 0,0,1,4,7,7,7,7,1,7,7,1,7,1,0,0
20580 DATA 0,0,1,1,4,7,7,7,7,1,7,7,7,1,1,0
20590 DATA 0,0,1,4,1,4,7,7,7,7,7,7,1,7,7,1
20600 DATA 0,0,1,4,4,4,7,7,7,7,7,7,7,7,7,1
20610 DATA 0,0,0,1,4,4,4,7,7,7,7,7,7,4,1,0
20620 DATA 0,0,0,0,1,4,4,4,4,1,7,7,4,1,0,0
20630 DATA 0,0,0,0,0,1,1,1,1,4,7,4,1,0,0,0
20640 DATA 0,0,0,0,0,0,0,1,4,4,4,1,0,0,0,0
20650 DATA 0,0,0,0,0,0,0,1,4,4,1,0,0,0,0,0
20660 DATA 0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0
20670 DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
ÿÿÿÿ