# *******************************************************************************************
# *******************************************************************************************
#
#		Name : 		makebuild.py
#		Purpose :	Build the build file from asm/inc
#		Date :		18th September 2022
#		Author : 	Paul Robson (paul@robsons.org.uk)
#
# *******************************************************************************************
# *******************************************************************************************

import os,sys
#
#		Sort by module name - e.g. without the first directory
#
def sortKey(k):
	k = ":".join(k.split(os.sep)[2:])
	return(k)
#
#		Get a list of files involved
#
includeFiles = []																			# include files in order
sourceFiles = []																			# source files in order
moduleFiles = []

modulesIntegrated = {}

for s in sys.argv[1:]:
	if s[0] == "+":
		moduleFiles.append("../modules/_build/_{0}.module".format(s[1:]))
		modulesIntegrated[s[1:]] = True
	else:
		moduleFiles.append("!{0}Integrated = 0".format(s[1:]))

for root,dirs,files in os.walk("."): 														# scan for directories
	for f in files: 																		# look for files that are .inc or .asm
		if f.find("_") < 0:
			fName = root + os.sep + f
			reject = False
			pos = root.find("module.interface")
			if pos >= 0: 																	# if module.interface.<something>
				interface = root[pos:].split(os.sep)[1] 									# check we are using this module
				reject = interface not in modulesIntegrated

			if not reject:
				if fName.endswith(".asm"):
					sourceFiles.append(fName)
				if fName.endswith(".inc"):
					includeFiles.append(fName)

includeFiles.sort(key = lambda k:sortKey(k))
sourceFiles.sort(key = lambda k:sortKey(k))

#
#		Create the composite file to build the whole thing.
#
h = open("_basic.asm","w") 																	# create the build file.
h.write(";\n;\tThis file is automatically generated\n;\n")  								# output the build file

for f in includeFiles:
	h.write('\t.include\t"{0}"\n'.format(f.replace(os.sep,"/")))
h.write("\n\n")
for f in sourceFiles:
	h.write('\t.include\t"{0}"\n'.format(f.replace(os.sep,"/")))
h.write("\n\n")


h.write(".section code\n")
h.write("StartModuleCode:\n")
h.write("\t.if PagingEnabled==1\n")
h.write("\t* = $A000\n")
h.write("\t.offs $2000\n")
h.write("\t.endif\n")
h.write(".send code\n")

for f in moduleFiles:
	if f.startswith("!"):
		h.write('\t{0}\n'.format(f[1:]))
	else:
		h.write('\t.include\t"{0}"\n'.format(f.replace(os.sep,"/")))

h.write(".section code\n")
h.write("\t.if PagingEnabled==1\n")
h.write("\t* = $A000\n")
h.write("\t.offs $4000\n")
h.write("\t.endif\n")
h.write(".send code\n")

h.write("\t.include\t\"../modules/hardware/header/headerdata.dat\"\n")

h.close()
