# When called without arguments, reads and prints the version from the `VERSION` file.
# When called with a version, output `timestamp.asm` with a build timestamp and version
# for display on the boot screen.

import sys
import datetime
from pathlib import Path


def main(argv):
    if len(argv) == 0:
        with open(Path("..") / "VERSION", "r") as version_file:
            version = version_file.read().strip()
        print(version)
        return 0

    version = argv[0].strip().split(".")
    if len(version) < 2:
        print(
            f"Expected a full (x.x.yyyy-mm-dd) or a base (x.x) version, got '{argv[0]}'",
            file=sys.stderr,
        )
        return 1

    major_version = int(version[0])
    minor_version = int(version[1])

    if len(version) < 3:
        # use the current date for the timestamp when provided with a base version (x.x) only
        timestamp = datetime.datetime.now()
    else:
        # otherwise parse the timestamp from the full version so we can reformat it for display
        try:
            timestamp = datetime.datetime.strptime(version[2], "%Y-%m-%d")
        except ValueError:
            print(
                f"Invalid timestamp '{version[2]}', expected 'yyyy-mm-dd'",
                file=sys.stderr,
            )
            return 1

    with open(Path("common") / "generated" / "timestamp.asm", "w") as out:
        out.write(";\n;\tThis file is automatically generated.\n;\n")
        out.write(
            '\t.text "{0} {1}.{2}"\n'.format(
                timestamp.strftime("%d/%m/%y"), major_version, minor_version
            )
        )


sys.exit(main(sys.argv[1:]))
