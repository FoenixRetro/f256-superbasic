;
;	This is automatically generated.
;
VectorSetPunc:
	.word	ShiftLeft                        ; $00 <<
	.word	BinaryCompareLessEqual           ; $01 <=
	.word	BinaryCompareNotEqual            ; $02 <>
	.word	SyntaxError                      ; $03 !!3
	.word	SyntaxError                      ; $04 ><
	.word	BinaryCompareGreaterEqual        ; $05 >=
	.word	ShiftRight                       ; $06 >>
	.word	SyntaxError                      ; $07 !!7
	.word	SyntaxError                      ; $08 !!8
	.word	SyntaxError                      ; $09 !!9
	.word	SyntaxError                      ; $0a !!10
	.word	SyntaxError                      ; $0b !!11
	.word	SyntaxError                      ; $0c !!12
	.word	SyntaxError                      ; $0d !!13
	.word	SyntaxError                      ; $0e !!14
	.word	SyntaxError                      ; $0f !!15
	.word	SyntaxError                      ; $10 @
	.word	SyntaxError                      ; $11 !!17
	.word	SyntaxError                      ; $12 !!18
	.word	SyntaxError                      ; $13 [
	.word	IntegerDivide                    ; $14 \
	.word	SyntaxError                      ; $15 ]
	.word	EorInteger                       ; $16 ^
	.word	SyntaxError                      ; $17 _
	.word	SyntaxError                      ; $18 `
	.word	SyntaxError                      ; $19 !!25
	.word	SyntaxError                      ; $1a !!26
	.word	SyntaxError                      ; $1b {
	.word	OraInteger                       ; $1c |
	.word	SyntaxError                      ; $1d }
	.word	SyntaxError                      ; $1e ~
	.word	SyntaxError                      ; $1f 
	.word	SyntaxError                      ; $20 
	.word	WordIndirect                     ; $21 !
	.word	SyntaxError                      ; $22 "
	.word	SyntaxError                      ; $23 #
	.word	SyntaxError                      ; $24 $
	.word	IntegerModulus                   ; $25 %
	.word	AndInteger                       ; $26 &
	.word	SyntaxError                      ; $27 '
	.word	SyntaxError                      ; $28 (
	.word	SyntaxError                      ; $29 )
	.word	MulInteger                       ; $2a *
	.word	AddInteger                       ; $2b +
	.word	SyntaxError                      ; $2c ,
	.word	SubInteger                       ; $2d -
	.word	SyntaxError                      ; $2e .
	.word	FDivideCommand                   ; $2f /
	.word	SyntaxError                      ; $30 0
	.word	SyntaxError                      ; $31 1
	.word	SyntaxError                      ; $32 2
	.word	SyntaxError                      ; $33 3
	.word	SyntaxError                      ; $34 4
	.word	SyntaxError                      ; $35 5
	.word	SyntaxError                      ; $36 6
	.word	SyntaxError                      ; $37 7
	.word	SyntaxError                      ; $38 8
	.word	SyntaxError                      ; $39 9
	.word	SyntaxError                      ; $3a :
	.word	SyntaxError                      ; $3b ;
	.word	BinaryCompareLess                ; $3c <
	.word	BinaryCompareEqual               ; $3d =
	.word	BinaryCompareGreater             ; $3e >
	.word	ByteIndirect                     ; $3f ?
VectorSet0:
	.word	EOLCommand                       ; $80 !0:EOF
	.word	Shift1Command                    ; $81 !1:SH1
	.word	Shift2Command                    ; $82 !2:SH2
	.word	AbsUnary                         ; $83 ABS(
	.word	AllocUnary                       ; $84 ALLOC(
	.word	AscUnary                         ; $85 ASC(
	.word	ChrUnary                         ; $86 CHR$(
	.word	UnaryEvent                       ; $87 EVENT(
	.word	UnaryFalse                       ; $88 FALSE
	.word	FracUnary                        ; $89 FRAC(
	.word	UnaryHit                         ; $8a HIT(
	.word	IntUnary                         ; $8b INT(
	.word	IsValUnary                       ; $8c ISVAL(
	.word	UnaryJoyB                        ; $8d JOYB(
	.word	UnaryJoyX                        ; $8e JOYX(
	.word	UnaryJoyY                        ; $8f JOYY(
	.word	Unary_Left                       ; $90 LEFT$(
	.word	LenUnary                         ; $91 LEN(
	.word	Unary_Max                        ; $92 MAX(
	.word	Unary_Mid                        ; $93 MID$(
	.word	Unary_Min                        ; $94 MIN(
	.word	Unary_Not                        ; $95 NOT(
	.word	SyntaxError                      ; $96 PLAYING(
	.word	Unary_Random                     ; $97 RANDOM(
	.word	Unary_Right                      ; $98 RIGHT$(
	.word	Unary_Rnd                        ; $99 RND(
	.word	SgnUnary                         ; $9a SGN(
	.word	SpcUnary                         ; $9b SPC(
	.word	Unary_Str                        ; $9c STR$(
	.word	UnaryTimer                       ; $9d TIMER(
	.word	UnaryTrue                        ; $9e TRUE
	.word	ValUnary                         ; $9f VAL(
	.word	ForCommand                       ; $a0 FOR
	.word	IfCommand                        ; $a1 IF
	.word	Unused1                          ; $a2 PROC
	.word	Command_REPEAT                   ; $a3 REPEAT
	.word	Command_WHILE                    ; $a4 WHILE
	.word	EndIf                            ; $a5 ENDIF
	.word	Command_ENDPROC                  ; $a6 ENDPROC
	.word	NextCommand                      ; $a7 NEXT
	.word	Unused4                          ; $a8 THEN
	.word	Command_UNTIL                    ; $a9 UNTIL
	.word	Command_WEND                     ; $aa WEND
	.word	SyntaxError                      ; $ab BY
	.word	CallCommand                      ; $ac CALL
	.word	CircleCommand                    ; $ad CIRCLE
	.word	ClearCommand                     ; $ae CLEAR
	.word	ClearScreen                      ; $af CLS
	.word	SyntaxError                      ; $b0 COLOR
	.word	SyntaxError                      ; $b1 COLOUR
	.word	Command_Data                     ; $b2 DATA
	.word	DimCommand                       ; $b3 DIM
	.word	Unused3                          ; $b4 DOWNTO
	.word	ElseCode                         ; $b5 ELSE
	.word	SyntaxError                      ; $b6 FROM
	.word	GfxCommand                       ; $b7 GFX
	.word	Command_GOSUB                    ; $b8 GOSUB
	.word	GotoCommand                      ; $b9 GOTO
	.word	SyntaxError                      ; $ba HERE
	.word	ImageCommand                     ; $bb IMAGE
	.word	LetCommand                       ; $bc LET
	.word	LineCommand                      ; $bd LINE
	.word	Command_LOCAL                    ; $be LOCAL
	.word	SyntaxError                      ; $bf OFF
	.word	SyntaxError                      ; $c0 ON
	.word	SyntaxError                      ; $c1 OUTLINE
	.word	PaletteCommand                   ; $c2 PALETTE
	.word	PlotCommand                      ; $c3 PLOT
	.word	Command_Print                    ; $c4 PRINT
	.word	Command_Read                     ; $c5 READ
	.word	RectangleCommand                 ; $c6 RECT
	.word	RemCommand                       ; $c7 REM
	.word	Command_RETURN                   ; $c8 RETURN
	.word	SyntaxError                      ; $c9 SOLID
	.word	SyntaxError                      ; $ca SOUND
	.word	SpriteCommand                    ; $cb SPRITE
	.word	TextCommand                      ; $cc TEXT
	.word	Unused2                          ; $cd TO
VectorSet1:
	.word	SyntaxError                      ; $80 !0:EOF
	.word	SyntaxError                      ; $81 !1:SH1
	.word	SyntaxError                      ; $82 !2:SH2
	.word	AssembleCommand                  ; $83 ASSEMBLE
	.word	AssertCommand                    ; $84 ASSERT
	.word	BitmapCtrl                       ; $85 BITMAP
	.word	EndCommand                       ; $86 END
	.word	Command_List                     ; $87 LIST
	.word	NewCommand                       ; $88 NEW
	.word	Command_Restore                  ; $89 RESTORE
	.word	CommandRUN                       ; $8a RUN
	.word	SpritesCtrl                      ; $8b SPRITES
	.word	StopCommand                      ; $8c STOP
VectorSet2:
	.word	SyntaxError                      ; $80 !0:EOF
	.word	SyntaxError                      ; $81 !1:SH1
	.word	SyntaxError                      ; $82 !2:SH2
	.word	Assemble_adc                     ; $83 ADC
	.word	Assemble_and                     ; $84 AND
	.word	Assemble_asl                     ; $85 ASL
	.word	Assemble_bcc                     ; $86 BCC
	.word	Assemble_bcs                     ; $87 BCS
	.word	Assemble_beq                     ; $88 BEQ
	.word	Assemble_bit                     ; $89 BIT
	.word	Assemble_bmi                     ; $8a BMI
	.word	Assemble_bne                     ; $8b BNE
	.word	Assemble_bpl                     ; $8c BPL
	.word	Assemble_bra                     ; $8d BRA
	.word	Assemble_brk                     ; $8e BRK
	.word	Assemble_bvc                     ; $8f BVC
	.word	Assemble_bvs                     ; $90 BVS
	.word	Assemble_clc                     ; $91 CLC
	.word	Assemble_cld                     ; $92 CLD
	.word	Assemble_cli                     ; $93 CLI
	.word	Assemble_clv                     ; $94 CLV
	.word	Assemble_cmp                     ; $95 CMP
	.word	Assemble_cpx                     ; $96 CPX
	.word	Assemble_cpy                     ; $97 CPY
	.word	Assemble_dec                     ; $98 DEC
	.word	Assemble_dex                     ; $99 DEX
	.word	Assemble_dey                     ; $9a DEY
	.word	Assemble_eor                     ; $9b EOR
	.word	Assemble_inc                     ; $9c INC
	.word	Assemble_inx                     ; $9d INX
	.word	Assemble_iny                     ; $9e INY
	.word	Assemble_jmp                     ; $9f JMP
	.word	Assemble_jsr                     ; $a0 JSR
	.word	Assemble_lda                     ; $a1 LDA
	.word	Assemble_ldx                     ; $a2 LDX
	.word	Assemble_ldy                     ; $a3 LDY
	.word	Assemble_lsr                     ; $a4 LSR
	.word	Assemble_nop                     ; $a5 NOP
	.word	Assemble_ora                     ; $a6 ORA
	.word	Assemble_pha                     ; $a7 PHA
	.word	Assemble_php                     ; $a8 PHP
	.word	Assemble_phx                     ; $a9 PHX
	.word	Assemble_phy                     ; $aa PHY
	.word	Assemble_pla                     ; $ab PLA
	.word	Assemble_plp                     ; $ac PLP
	.word	Assemble_plx                     ; $ad PLX
	.word	Assemble_ply                     ; $ae PLY
	.word	Assemble_rol                     ; $af ROL
	.word	Assemble_ror                     ; $b0 ROR
	.word	Assemble_rti                     ; $b1 RTI
	.word	Assemble_rts                     ; $b2 RTS
	.word	Assemble_sbc                     ; $b3 SBC
	.word	Assemble_sec                     ; $b4 SEC
	.word	Assemble_sed                     ; $b5 SED
	.word	Assemble_sei                     ; $b6 SEI
	.word	Assemble_sta                     ; $b7 STA
	.word	Assemble_stp                     ; $b8 STP
	.word	Assemble_stx                     ; $b9 STX
	.word	Assemble_sty                     ; $ba STY
	.word	Assemble_stz                     ; $bb STZ
	.word	Assemble_tax                     ; $bc TAX
	.word	Assemble_tay                     ; $bd TAY
	.word	Assemble_trb                     ; $be TRB
	.word	Assemble_tsb                     ; $bf TSB
	.word	Assemble_tsx                     ; $c0 TSX
	.word	Assemble_txa                     ; $c1 TXA
	.word	Assemble_txs                     ; $c2 TXS
	.word	Assemble_tya                     ; $c3 TYA
