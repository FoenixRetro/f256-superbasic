;
;	This is automatically generated.
;
VectorSetPunc:
	.word	ShiftLeft                        ; $00 <<
	.word	BinaryCompareLessEqual           ; $01 <=
	.word	BinaryCompareNotEqual            ; $02 <>
	.word	SyntaxError                      ; $03 !!3
	.word	SyntaxError                      ; $04 ><
	.word	BinaryCompareGreaterEqual        ; $05 >=
	.word	ShiftRight                       ; $06 >>
	.word	SyntaxError                      ; $07 !!7
	.word	SyntaxError                      ; $08 !!8
	.word	SyntaxError                      ; $09 !!9
	.word	SyntaxError                      ; $0a !!10
	.word	SyntaxError                      ; $0b !!11
	.word	SyntaxError                      ; $0c !!12
	.word	SyntaxError                      ; $0d !!13
	.word	SyntaxError                      ; $0e !!14
	.word	SyntaxError                      ; $0f !!15
	.word	SyntaxError                      ; $10 @
	.word	SyntaxError                      ; $11 !!17
	.word	SyntaxError                      ; $12 !!18
	.word	SyntaxError                      ; $13 [
	.word	IntegerDivide                    ; $14 \
	.word	SyntaxError                      ; $15 ]
	.word	EorInteger                       ; $16 ^
	.word	SyntaxError                      ; $17 _
	.word	SyntaxError                      ; $18 `
	.word	SyntaxError                      ; $19 !!25
	.word	SyntaxError                      ; $1a !!26
	.word	SyntaxError                      ; $1b {
	.word	OraInteger                       ; $1c |
	.word	SyntaxError                      ; $1d }
	.word	SyntaxError                      ; $1e ~
	.word	SyntaxError                      ; $1f 
	.word	SyntaxError                      ; $20 
	.word	WordIndirect                     ; $21 !
	.word	SyntaxError                      ; $22 "
	.word	SyntaxError                      ; $23 #
	.word	SyntaxError                      ; $24 $
	.word	IntegerModulus                   ; $25 %
	.word	AndInteger                       ; $26 &
	.word	SyntaxError                      ; $27 '
	.word	SyntaxError                      ; $28 (
	.word	SyntaxError                      ; $29 )
	.word	MulInteger                       ; $2a *
	.word	AddInteger                       ; $2b +
	.word	SyntaxError                      ; $2c ,
	.word	SubInteger                       ; $2d -
	.word	SyntaxError                      ; $2e .
	.word	FDivideCommand                   ; $2f /
	.word	SyntaxError                      ; $30 0
	.word	SyntaxError                      ; $31 1
	.word	SyntaxError                      ; $32 2
	.word	SyntaxError                      ; $33 3
	.word	SyntaxError                      ; $34 4
	.word	SyntaxError                      ; $35 5
	.word	SyntaxError                      ; $36 6
	.word	SyntaxError                      ; $37 7
	.word	SyntaxError                      ; $38 8
	.word	SyntaxError                      ; $39 9
	.word	SyntaxError                      ; $3a :
	.word	SyntaxError                      ; $3b ;
	.word	BinaryCompareLess                ; $3c <
	.word	BinaryCompareEqual               ; $3d =
	.word	BinaryCompareGreater             ; $3e >
	.word	ByteIndirect                     ; $3f ?
VectorSet0:
	.word	EOLCommand                       ; $80 !0:EOF
	.word	Shift1Command                    ; $81 !1:SH1
	.word	SyntaxError                      ; $82 !2:SH2
	.word	AbsUnary                         ; $83 ABS(
	.word	AllocUnary                       ; $84 ALLOC(
	.word	AscUnary                         ; $85 ASC(
	.word	ChrUnary                         ; $86 CHR$(
	.word	UnaryFalse                       ; $87 FALSE
	.word	FracUnary                        ; $88 FRAC(
	.word	IntUnary                         ; $89 INT(
	.word	IsValUnary                       ; $8a ISVAL(
	.word	Unary_Left                       ; $8b LEFT$(
	.word	LenUnary                         ; $8c LEN(
	.word	Unary_Mid                        ; $8d MID$(
	.word	Unary_Not                        ; $8e NOT(
	.word	Unary_Right                      ; $8f RIGHT$(
	.word	Unary_Rnd                        ; $90 RND(
	.word	SgnUnary                         ; $91 SGN(
	.word	SpcUnary                         ; $92 SPC(
	.word	Unary_Str                        ; $93 STR$(
	.word	UnaryTrue                        ; $94 TRUE
	.word	ValUnary                         ; $95 VAL(
	.word	ForCommand                       ; $96 FOR
	.word	IfCommand                        ; $97 IF
	.word	Unused1                          ; $98 PROC
	.word	Command_REPEAT                   ; $99 REPEAT
	.word	Command_WHILE                    ; $9a WHILE
	.word	EndIf                            ; $9b ENDIF
	.word	Command_ENDPROC                  ; $9c ENDPROC
	.word	NextCommand                      ; $9d NEXT
	.word	Unused4                          ; $9e THEN
	.word	Command_UNTIL                    ; $9f UNTIL
	.word	Command_WEND                     ; $a0 WEND
	.word	CallCommand                      ; $a1 CALL
	.word	SyntaxError                      ; $a2 CLS
	.word	Command_Data                     ; $a3 DATA
	.word	DimCommand                       ; $a4 DIM
	.word	Unused3                          ; $a5 DOWNTO
	.word	ElseCode                         ; $a6 ELSE
	.word	Command_GOSUB                    ; $a7 GOSUB
	.word	GotoCommand                      ; $a8 GOTO
	.word	LetCommand                       ; $a9 LET
	.word	Command_Print                    ; $aa PRINT
	.word	Command_Read                     ; $ab READ
	.word	RemCommand                       ; $ac REM
	.word	Command_RETURN                   ; $ad RETURN
	.word	Unused2                          ; $ae TO
VectorSet1:
	.word	SyntaxError                      ; $80 !0:EOF
	.word	SyntaxError                      ; $81 !1:SH1
	.word	SyntaxError                      ; $82 !2:SH2
	.word	AssertCommand                    ; $83 ASSERT
	.word	ClearCommand                     ; $84 CLEAR
	.word	EndCommand                       ; $85 END
	.word	Command_List                     ; $86 LIST
	.word	NewCommand                       ; $87 NEW
	.word	Command_Restore                  ; $88 RESTORE
	.word	CommandRUN                       ; $89 RUN
	.word	StopCommand                      ; $8a STOP
VectorSet2:
	.word	SyntaxError                      ; $80 !0:EOF
	.word	SyntaxError                      ; $81 !1:SH1
	.word	SyntaxError                      ; $82 !2:SH2
	.word	SyntaxError                      ; $83 ADC
	.word	SyntaxError                      ; $84 AND
	.word	SyntaxError                      ; $85 ASL
	.word	SyntaxError                      ; $86 BCC
	.word	SyntaxError                      ; $87 BCS
	.word	SyntaxError                      ; $88 BEQ
	.word	SyntaxError                      ; $89 BIT
	.word	SyntaxError                      ; $8a BMI
	.word	SyntaxError                      ; $8b BNE
	.word	SyntaxError                      ; $8c BPL
	.word	SyntaxError                      ; $8d BRA
	.word	SyntaxError                      ; $8e BRK
	.word	SyntaxError                      ; $8f BVC
	.word	SyntaxError                      ; $90 BVS
	.word	SyntaxError                      ; $91 CLC
	.word	SyntaxError                      ; $92 CLD
	.word	SyntaxError                      ; $93 CLI
	.word	SyntaxError                      ; $94 CLV
	.word	SyntaxError                      ; $95 CMP
	.word	SyntaxError                      ; $96 CPX
	.word	SyntaxError                      ; $97 CPY
	.word	SyntaxError                      ; $98 DEC
	.word	SyntaxError                      ; $99 DEX
	.word	SyntaxError                      ; $9a DEY
	.word	SyntaxError                      ; $9b EOR
	.word	SyntaxError                      ; $9c INC
	.word	SyntaxError                      ; $9d INX
	.word	SyntaxError                      ; $9e INY
	.word	SyntaxError                      ; $9f JMP
	.word	SyntaxError                      ; $a0 JSR
	.word	SyntaxError                      ; $a1 LDA
	.word	SyntaxError                      ; $a2 LDX
	.word	SyntaxError                      ; $a3 LDY
	.word	SyntaxError                      ; $a4 LSR
	.word	SyntaxError                      ; $a5 NOP
	.word	SyntaxError                      ; $a6 ORA
	.word	SyntaxError                      ; $a7 PHA
	.word	SyntaxError                      ; $a8 PHP
	.word	SyntaxError                      ; $a9 PHX
	.word	SyntaxError                      ; $aa PHY
	.word	SyntaxError                      ; $ab PLA
	.word	SyntaxError                      ; $ac PLP
	.word	SyntaxError                      ; $ad PLX
	.word	SyntaxError                      ; $ae PLY
	.word	SyntaxError                      ; $af ROL
	.word	SyntaxError                      ; $b0 ROR
	.word	SyntaxError                      ; $b1 RTI
	.word	SyntaxError                      ; $b2 RTS
	.word	SyntaxError                      ; $b3 SBC
	.word	SyntaxError                      ; $b4 SEC
	.word	SyntaxError                      ; $b5 SED
	.word	SyntaxError                      ; $b6 SEI
	.word	SyntaxError                      ; $b7 STA
	.word	SyntaxError                      ; $b8 STX
	.word	SyntaxError                      ; $b9 STY
	.word	SyntaxError                      ; $ba STZ
	.word	SyntaxError                      ; $bb TAX
	.word	SyntaxError                      ; $bc TAY
	.word	SyntaxError                      ; $bd TRB
	.word	SyntaxError                      ; $be TSB
	.word	SyntaxError                      ; $bf TSX
	.word	SyntaxError                      ; $c0 TXA
	.word	SyntaxError                      ; $c1 TXS
	.word	SyntaxError                      ; $c2 TYA
