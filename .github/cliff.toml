# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# A Tera template to be rendered for each release in the changelog.
# See https://keats.github.io/tera/docs/#introduction
body = """\
{% macro commit_ref(commit) %}\
    {% if get_env(name="CHANGELOG_MD", default="false") == "true" %}\
        [`{{ commit.id | truncate(length=7, end="") }}`](<REPO_URL>/commit/{{ commit.id }})\
    {% else %}\
        {{ commit.id | truncate(length=7, end="") }}\
    {% endif %}\
{% endmacro %}\
\
{%if commits | length > 0 %}\
    {% if version %}\
        {% if version is matching("^\\d+\\.\\d+\\.\\d+-\\d+-\\d+$") %}\
            ## {{ version | trim_start_matches(pat="v") }}\
        {% else %}\
            ## {{ version }} - {{ timestamp | date(format="%Y-%m-%d") }}\
        {% endif %}\
    {% else %}\
        ## [unreleased]\
    {% endif %}\
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}

    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.breaking %}[**BREAKING**] {% endif %}\
            {{ commit.message | upper_first }} ({{ self::commit_ref(commit=commit) }})\
    {% endfor %}\
{% endfor %}
{% if previous.version %}
{% endif %}
"""
# Remove leading and trailing whitespaces from the changelog's body.
trim = true
# Render body even when there are no releases to process.
render_always = true
# An array of regex based postprocessors to modify the changelog.
postprocessors = [
    { pattern = '<REPO_URL>', replace = "https://github.com/FoenixRetro/f256-superbasic" },
]
# render body even when there are no releases to process
# render_always = true
# output file path
# output = "test.md"

[git]
# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org
conventional_commits = true
# Exclude commits that do not match the conventional commits specification.
filter_unconventional = true
# Require all commits to be conventional.
# Takes precedence over filter_unconventional.
require_conventional = false
# Split commits on newlines, treating each line as an individual commit.
split_commits = false
# An array of regex based parsers to modify commit messages prior to further processing.
commit_preprocessors = [
    # Replace issue/PR numbers with link templates, to be updated in `changelog.postprocessors`.
    { pattern = '#([0-9]+)', replace = "[#${1}](<REPO_URL>/issues/${1})" },
    # Check spelling of the commit message using https://github.com/crate-ci/typos.
    # If the spelling is incorrect, it will be fixed automatically.
    #{ pattern = '.*', replace_command = 'typos --write-changes -' },
]
# Prevent commits that are breaking from being excluded by commit parsers.
protect_breaking_commits = false
# An array of regex based parsers for extracting data from the commit message.
# Assigns commits to groups.
# Optionally sets the commit's scope and can decide to exclude commits from further processing.
commit_parsers = [
    { message = "^feat", group = "<!-- 0 -->Features" },
    { message = "^fix", group = "<!-- 1 -->Bug fixes" },
    { message = "^refmanual", group = "<!-- 3 -->Documentation" },
    { message = "^perf", group = "<!-- 4 -->Performance" },
    { message = "^chore:\\s+new release\\s*$", skip = true },
    { message = ".*", group = "<!-- 5 -->Internal" },
]
# Exclude commits that are not matched by any commit parser.
filter_commits = false
# An array of link parsers for extracting external references, and turning them into URLs, using regex.
link_parsers = []
# Include only the tags that belong to the current branch.
use_branch_tags = false
# Order releases topologically instead of chronologically.
topo_order = false
# Order releases topologically instead of chronologically.
topo_order_commits = true
# Order of commits in each group/release within the changelog.
# Allowed values: newest, oldest
sort_commits = "oldest"
# Process submodules commits
recurse_submodules = false
